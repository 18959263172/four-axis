; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvi2s.o --depend=.\obj\drvi2s.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvi2s.crf ..\BSP_Lib\Src\Driver\DrvI2S.c]
                          THUMB

                          AREA ||i.DrvI2S_ClearRxFIFO||, CODE, READONLY, ALIGN=2

                  DrvI2S_ClearRxFIFO PROC
;;;710    /*---------------------------------------------------------------------------------------------------------*/
;;;711    void DrvI2S_ClearRxFIFO(void)
000000  4804              LDR      r0,|L1.20|
;;;712    {
;;;713    	I2S->CON.CLR_RXFIFO = 1;
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  04c9              LSLS     r1,r1,#19
000008  4388              BICS     r0,r0,r1
00000a  1840              ADDS     r0,r0,r1
00000c  4901              LDR      r1,|L1.20|
00000e  6008              STR      r0,[r1,#0]
;;;714    }
000010  4770              BX       lr
;;;715    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_ClearTxFIFO||, CODE, READONLY, ALIGN=2

                  DrvI2S_ClearTxFIFO PROC
;;;694    /*---------------------------------------------------------------------------------------------------------*/
;;;695    void DrvI2S_ClearTxFIFO(void)
000000  4804              LDR      r0,|L2.20|
;;;696    {
;;;697    	I2S->CON.CLR_TXFIFO = 1;
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  0489              LSLS     r1,r1,#18
000008  4388              BICS     r0,r0,r1
00000a  1840              ADDS     r0,r0,r1
00000c  4901              LDR      r1,|L2.20|
00000e  6008              STR      r0,[r1,#0]
;;;698    }
000010  4770              BX       lr
;;;699    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_Close||, CODE, READONLY, ALIGN=2

                  DrvI2S_Close PROC
;;;190    /*---------------------------------------------------------------------------------------------------------*/
;;;191    void DrvI2S_Close(void)
000000  480f              LDR      r0,|L3.64|
;;;192    {
;;;193    	I2S->CON.I2SEN = 0;
000002  6800              LDR      r0,[r0,#0]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  490d              LDR      r1,|L3.64|
00000a  6008              STR      r0,[r1,#0]
;;;194    	SYS->IPRSTC2.I2S_RST = 1;
00000c  2005              MOVS     r0,#5
00000e  0700              LSLS     r0,r0,#28
000010  68c0              LDR      r0,[r0,#0xc]
000012  2101              MOVS     r1,#1
000014  0749              LSLS     r1,r1,#29
000016  4388              BICS     r0,r0,r1
000018  1840              ADDS     r0,r0,r1
00001a  2105              MOVS     r1,#5
00001c  0709              LSLS     r1,r1,#28
00001e  60c8              STR      r0,[r1,#0xc]
;;;195    	SYS->IPRSTC2.I2S_RST = 0;
000020  4608              MOV      r0,r1
000022  68c0              LDR      r0,[r0,#0xc]
000024  2101              MOVS     r1,#1
000026  0749              LSLS     r1,r1,#29
000028  4388              BICS     r0,r0,r1
00002a  2105              MOVS     r1,#5
00002c  0709              LSLS     r1,r1,#28
00002e  60c8              STR      r0,[r1,#0xc]
;;;196    	SYSCLK->APBCLK.I2S_EN = 0;
000030  4804              LDR      r0,|L3.68|
000032  6880              LDR      r0,[r0,#8]
000034  2101              MOVS     r1,#1
000036  0749              LSLS     r1,r1,#29
000038  4388              BICS     r0,r0,r1
00003a  4902              LDR      r1,|L3.68|
00003c  6088              STR      r0,[r1,#8]
;;;197    }
00003e  4770              BX       lr
;;;198    
                          ENDP

                  |L3.64|
                          DCD      0x401a0000
                  |L3.68|
                          DCD      0x50000200

                          AREA ||i.DrvI2S_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvI2S_DisableInt PROC
;;;285    /*---------------------------------------------------------------------------------------------------------*/
;;;286    int32_t DrvI2S_DisableInt(E_I2S_CALLBACK_TYPE Type)
000000  b500              PUSH     {lr}
;;;287    {	
000002  4601              MOV      r1,r0
;;;288    	outpw(&(I2S->IE), inpw(&(I2S->IE)) & ~(1<<Type));
000004  481b              LDR      r0,|L4.116|
000006  6880              LDR      r0,[r0,#8]
000008  2201              MOVS     r2,#1
00000a  408a              LSLS     r2,r2,r1
00000c  4390              BICS     r0,r0,r2
00000e  4a19              LDR      r2,|L4.116|
000010  6090              STR      r0,[r2,#8]
;;;289    	
;;;290    	switch(Type)
000012  460b              MOV      r3,r1
000014  f7fffffe          BL       __ARM_common_switch8
000018  0d080c10          DCB      0x0d,0x08,0x0c,0x10
00001c  28282828          DCB      0x28,0x28,0x28,0x28
000020  2814181c          DCB      0x28,0x14,0x18,0x1c
000024  20242800          DCB      0x20,0x24,0x28,0x00
;;;291        {
;;;292            case I2S_RX_UNDERFLOW:
;;;293            {
;;;294               	I2SHandler.RxUnderflowFn = NULL;  
000028  2000              MOVS     r0,#0
00002a  4a13              LDR      r2,|L4.120|
00002c  6010              STR      r0,[r2,#0]  ; I2SHandler
;;;295            	break;
00002e  e01d              B        |L4.108|
;;;296            }
;;;297            case I2S_RX_OVERFLOW:
;;;298            {
;;;299               	I2SHandler.RxOverflowFn = NULL; 
000030  2000              MOVS     r0,#0
000032  4a11              LDR      r2,|L4.120|
000034  6050              STR      r0,[r2,#4]  ; I2SHandler
;;;300            	break;
000036  e019              B        |L4.108|
;;;301            }
;;;302            case I2S_RX_FIFO_THRESHOLD:
;;;303            {
;;;304               	I2SHandler.RxFifoThresholdFn = NULL;  
000038  2000              MOVS     r0,#0
00003a  4a0f              LDR      r2,|L4.120|
00003c  6090              STR      r0,[r2,#8]  ; I2SHandler
;;;305            	break;
00003e  e015              B        |L4.108|
;;;306            }        
;;;307            case I2S_TX_UNDERFLOW:
;;;308            {
;;;309               	I2SHandler.TxUnderflowFn = NULL;  
000040  2000              MOVS     r0,#0
000042  4a0d              LDR      r2,|L4.120|
000044  60d0              STR      r0,[r2,#0xc]  ; I2SHandler
;;;310            	break;
000046  e011              B        |L4.108|
;;;311            }
;;;312            case I2S_TX_OVERFLOW:
;;;313            {
;;;314               	I2SHandler.TxOverflowFn = NULL;  
000048  2000              MOVS     r0,#0
00004a  4a0b              LDR      r2,|L4.120|
00004c  6110              STR      r0,[r2,#0x10]  ; I2SHandler
;;;315            	break;
00004e  e00d              B        |L4.108|
;;;316            }
;;;317            case I2S_TX_FIFO_THRESHOLD:
;;;318            {
;;;319               	I2SHandler.TxFifoThresholdFn = NULL;  
000050  2000              MOVS     r0,#0
000052  4a09              LDR      r2,|L4.120|
000054  6150              STR      r0,[r2,#0x14]  ; I2SHandler
;;;320            	break;
000056  e009              B        |L4.108|
;;;321            }
;;;322            case I2S_TX_RIGHT_ZERO_CROSS:
;;;323            {
;;;324               	I2SHandler.TxRightZeroCrossFn = NULL; 
000058  2000              MOVS     r0,#0
00005a  4a07              LDR      r2,|L4.120|
00005c  6190              STR      r0,[r2,#0x18]  ; I2SHandler
;;;325            	break;
00005e  e005              B        |L4.108|
;;;326            }
;;;327            case I2S_TX_LEFT_ZERO_CROSS:
;;;328            {
;;;329               	I2SHandler.TxLeftZeroCrossFn = NULL; 
000060  2000              MOVS     r0,#0
000062  4a05              LDR      r2,|L4.120|
000064  61d0              STR      r0,[r2,#0x1c]  ; I2SHandler
;;;330            	break;
000066  e001              B        |L4.108|
;;;331            }		 
;;;332    		default:
;;;333    			return E_DRVI2S_ERR_ARGUMENT;                             	
000068  4804              LDR      r0,|L4.124|
                  |L4.106|
;;;334    	}
;;;335    	
;;;336    	return E_SUCCESS;
;;;337    }
00006a  bd00              POP      {pc}
                  |L4.108|
00006c  bf00              NOP                            ;295
00006e  2000              MOVS     r0,#0                 ;336
000070  e7fb              B        |L4.106|
;;;338    
                          ENDP

000072  0000              DCW      0x0000
                  |L4.116|
                          DCD      0x401a0000
                  |L4.120|
                          DCD      I2SHandler
                  |L4.124|
                          DCD      0xffff8c01

                          AREA ||i.DrvI2S_DisableMCLK||, CODE, READONLY, ALIGN=2

                  DrvI2S_DisableMCLK PROC
;;;678    /*---------------------------------------------------------------------------------------------------------*/
;;;679    void DrvI2S_DisableMCLK(void)
000000  4803              LDR      r0,|L5.16|
;;;680    {	
;;;681    	I2S->CON.MCLKEN = 0;
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  03c9              LSLS     r1,r1,#15
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L5.16|
00000c  6008              STR      r0,[r1,#0]
;;;682    }
00000e  4770              BX       lr
;;;683    
                          ENDP

                  |L5.16|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_DisableRx||, CODE, READONLY, ALIGN=2

                  DrvI2S_DisableRx PROC
;;;607    /*---------------------------------------------------------------------------------------------------------*/
;;;608    void DrvI2S_DisableRx(void)
000000  4803              LDR      r0,|L6.16|
;;;609    {
;;;610    	I2S->CON.TXEN = 0;
000002  6800              LDR      r0,[r0,#0]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L6.16|
00000a  6008              STR      r0,[r1,#0]
;;;611    }
00000c  4770              BX       lr
;;;612    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_DisableRxDMA||, CODE, READONLY, ALIGN=2

                  DrvI2S_DisableRxDMA PROC
;;;539    /*---------------------------------------------------------------------------------------------------------*/
;;;540    void DrvI2S_DisableRxDMA(void)
000000  4803              LDR      r0,|L7.16|
;;;541    {
;;;542    	I2S->CON.RXDMA = 0;	
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  0549              LSLS     r1,r1,#21
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L7.16|
00000c  6008              STR      r0,[r1,#0]
;;;543    }
00000e  4770              BX       lr
;;;544    
                          ENDP

                  |L7.16|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_DisableTx||, CODE, READONLY, ALIGN=2

                  DrvI2S_DisableTx PROC
;;;573    /*---------------------------------------------------------------------------------------------------------*/
;;;574    void DrvI2S_DisableTx(void)
000000  4803              LDR      r0,|L8.16|
;;;575    {
;;;576    	I2S->CON.TXEN = 0;
000002  6800              LDR      r0,[r0,#0]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L8.16|
00000a  6008              STR      r0,[r1,#0]
;;;577    }
00000c  4770              BX       lr
;;;578    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_DisableTxDMA||, CODE, READONLY, ALIGN=2

                  DrvI2S_DisableTxDMA PROC
;;;505    /*---------------------------------------------------------------------------------------------------------*/
;;;506    void DrvI2S_DisableTxDMA(void)
000000  4803              LDR      r0,|L9.16|
;;;507    {	
;;;508    	I2S->CON.TXDMA = 0;
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  0509              LSLS     r1,r1,#20
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L9.16|
00000c  6008              STR      r0,[r1,#0]
;;;509    }
00000e  4770              BX       lr
;;;510    
                          ENDP

                  |L9.16|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_DisableTxMute||, CODE, READONLY, ALIGN=2

                  DrvI2S_DisableTxMute PROC
;;;642    /*---------------------------------------------------------------------------------------------------------*/
;;;643    void DrvI2S_DisableTxMute(void)
000000  4803              LDR      r0,|L10.16|
;;;644    {
;;;645    	I2S->CON.MUTE = 0;	
000002  6800              LDR      r0,[r0,#0]
000004  2108              MOVS     r1,#8
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L10.16|
00000a  6008              STR      r0,[r1,#0]
;;;646    }
00000c  4770              BX       lr
;;;647    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvI2S_EnableInt PROC
;;;215    /*---------------------------------------------------------------------------------------------------------*/
;;;216    int32_t DrvI2S_EnableInt(E_I2S_CALLBACK_TYPE Type, I2S_CALLBACK callbackfn)
000000  b500              PUSH     {lr}
;;;217    {
000002  4602              MOV      r2,r0
;;;218    	switch (Type)
000004  4613              MOV      r3,r2
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0d08              DCB      0x0d,0x08
00000c  0b0e2020          DCB      0x0b,0x0e,0x20,0x20
000010  20202011          DCB      0x20,0x20,0x20,0x11
000014  14171a1d          DCB      0x14,0x17,0x1a,0x1d
000018  2000              DCB      0x20,0x00
;;;219        {
;;;220            case I2S_RX_UNDERFLOW:
;;;221            {
;;;222               	I2SHandler.RxUnderflowFn = callbackfn;  
00001a  4815              LDR      r0,|L11.112|
00001c  6001              STR      r1,[r0,#0]  ; I2SHandler
;;;223            	break;
00001e  e016              B        |L11.78|
;;;224            }
;;;225            case I2S_RX_OVERFLOW:
;;;226            {
;;;227               	I2SHandler.RxOverflowFn = callbackfn; 
000020  4813              LDR      r0,|L11.112|
000022  6041              STR      r1,[r0,#4]  ; I2SHandler
;;;228            	break;
000024  e013              B        |L11.78|
;;;229            }
;;;230            case I2S_RX_FIFO_THRESHOLD:
;;;231            {
;;;232               	I2SHandler.RxFifoThresholdFn = callbackfn;  
000026  4812              LDR      r0,|L11.112|
000028  6081              STR      r1,[r0,#8]  ; I2SHandler
;;;233            	break;
00002a  e010              B        |L11.78|
;;;234            }        
;;;235            case I2S_TX_UNDERFLOW:
;;;236            {
;;;237               	I2SHandler.TxUnderflowFn = callbackfn;  
00002c  4810              LDR      r0,|L11.112|
00002e  60c1              STR      r1,[r0,#0xc]  ; I2SHandler
;;;238            	break;
000030  e00d              B        |L11.78|
;;;239            }
;;;240            case I2S_TX_OVERFLOW:
;;;241            {
;;;242               	I2SHandler.TxOverflowFn = callbackfn;  
000032  480f              LDR      r0,|L11.112|
000034  6101              STR      r1,[r0,#0x10]  ; I2SHandler
;;;243            	break;
000036  e00a              B        |L11.78|
;;;244            }
;;;245            case I2S_TX_FIFO_THRESHOLD:
;;;246            {
;;;247               	I2SHandler.TxFifoThresholdFn = callbackfn;  
000038  480d              LDR      r0,|L11.112|
00003a  6141              STR      r1,[r0,#0x14]  ; I2SHandler
;;;248            	break;
00003c  e007              B        |L11.78|
;;;249            }
;;;250            case I2S_TX_RIGHT_ZERO_CROSS:
;;;251            {
;;;252               	I2SHandler.TxRightZeroCrossFn = callbackfn; 
00003e  480c              LDR      r0,|L11.112|
000040  6181              STR      r1,[r0,#0x18]  ; I2SHandler
;;;253            	break;
000042  e004              B        |L11.78|
;;;254            }
;;;255            case I2S_TX_LEFT_ZERO_CROSS:
;;;256            {
;;;257               	I2SHandler.TxLeftZeroCrossFn = callbackfn; 
000044  480a              LDR      r0,|L11.112|
000046  61c1              STR      r1,[r0,#0x1c]  ; I2SHandler
;;;258            	break;
000048  e001              B        |L11.78|
;;;259            }		 
;;;260    		default:
;;;261    			return E_DRVI2S_ERR_ARGUMENT;                             	
00004a  480a              LDR      r0,|L11.116|
                  |L11.76|
;;;262    	}
;;;263    		
;;;264    	outpw(&(I2S->IE), inpw(&(I2S->IE)) | (1<<Type));	
;;;265    	NVIC_EnableIRQ(I2S_IRQn);
;;;266    	
;;;267    	return E_SUCCESS;
;;;268    }
00004c  bd00              POP      {pc}
                  |L11.78|
00004e  bf00              NOP                            ;223
000050  4809              LDR      r0,|L11.120|
000052  6880              LDR      r0,[r0,#8]            ;264
000054  2301              MOVS     r3,#1                 ;264
000056  4093              LSLS     r3,r3,r2              ;264
000058  4318              ORRS     r0,r0,r3              ;264
00005a  4b07              LDR      r3,|L11.120|
00005c  6098              STR      r0,[r3,#8]            ;264
00005e  bf00              NOP                            ;265
000060  201b              MOVS     r0,#0x1b              ;265
000062  2301              MOVS     r3,#1                 ;265
000064  4083              LSLS     r3,r3,r0              ;265
000066  4805              LDR      r0,|L11.124|
000068  6003              STR      r3,[r0,#0]            ;265
00006a  bf00              NOP                            ;265
00006c  2000              MOVS     r0,#0                 ;267
00006e  e7ed              B        |L11.76|
;;;269    
                          ENDP

                  |L11.112|
                          DCD      I2SHandler
                  |L11.116|
                          DCD      0xffff8c01
                  |L11.120|
                          DCD      0x401a0000
                  |L11.124|
                          DCD      0xe000e100

                          AREA ||i.DrvI2S_EnableMCLK||, CODE, READONLY, ALIGN=2

                  DrvI2S_EnableMCLK PROC
;;;660    /*---------------------------------------------------------------------------------------------------------*/
;;;661    void DrvI2S_EnableMCLK(void)
000000  4804              LDR      r0,|L12.20|
;;;662    {	
;;;663    	I2S->CON.MCLKEN = 1;
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  03c9              LSLS     r1,r1,#15
000008  4388              BICS     r0,r0,r1
00000a  1840              ADDS     r0,r0,r1
00000c  4901              LDR      r1,|L12.20|
00000e  6008              STR      r0,[r1,#0]
;;;664    }
000010  4770              BX       lr
;;;665    
                          ENDP

000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_EnableRx||, CODE, READONLY, ALIGN=2

                  DrvI2S_EnableRx PROC
;;;590    /*---------------------------------------------------------------------------------------------------------*/
;;;591    void DrvI2S_EnableRx(void)
000000  4803              LDR      r0,|L13.16|
;;;592    {
;;;593    	I2S->CON.RXEN = 1;	
000002  6800              LDR      r0,[r0,#0]
000004  2104              MOVS     r1,#4
000006  4388              BICS     r0,r0,r1
000008  1d00              ADDS     r0,r0,#4
00000a  4901              LDR      r1,|L13.16|
00000c  6008              STR      r0,[r1,#0]
;;;594    }
00000e  4770              BX       lr
;;;595    
                          ENDP

                  |L13.16|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_EnableRxDMA||, CODE, READONLY, ALIGN=2

                  DrvI2S_EnableRxDMA PROC
;;;522    /*---------------------------------------------------------------------------------------------------------*/
;;;523    void DrvI2S_EnableRxDMA(void)
000000  4804              LDR      r0,|L14.20|
;;;524    {
;;;525    	I2S->CON.RXDMA = 1;	
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  0549              LSLS     r1,r1,#21
000008  4388              BICS     r0,r0,r1
00000a  1840              ADDS     r0,r0,r1
00000c  4901              LDR      r1,|L14.20|
00000e  6008              STR      r0,[r1,#0]
;;;526    }
000010  4770              BX       lr
;;;527    
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_EnableTx||, CODE, READONLY, ALIGN=2

                  DrvI2S_EnableTx PROC
;;;556    /*---------------------------------------------------------------------------------------------------------*/
;;;557    void DrvI2S_EnableTx(void)
000000  4803              LDR      r0,|L15.16|
;;;558    {
;;;559    	I2S->CON.TXEN = 1;
000002  6800              LDR      r0,[r0,#0]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  1c80              ADDS     r0,r0,#2
00000a  4901              LDR      r1,|L15.16|
00000c  6008              STR      r0,[r1,#0]
;;;560    }
00000e  4770              BX       lr
;;;561    
                          ENDP

                  |L15.16|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_EnableTxDMA||, CODE, READONLY, ALIGN=2

                  DrvI2S_EnableTxDMA PROC
;;;488    /*---------------------------------------------------------------------------------------------------------*/
;;;489    void DrvI2S_EnableTxDMA(void)
000000  4804              LDR      r0,|L16.20|
;;;490    {	
;;;491    	I2S->CON.TXDMA = 1;
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  0509              LSLS     r1,r1,#20
000008  4388              BICS     r0,r0,r1
00000a  1840              ADDS     r0,r0,r1
00000c  4901              LDR      r1,|L16.20|
00000e  6008              STR      r0,[r1,#0]
;;;492    }
000010  4770              BX       lr
;;;493    
                          ENDP

000012  0000              DCW      0x0000
                  |L16.20|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_EnableTxMute||, CODE, READONLY, ALIGN=2

                  DrvI2S_EnableTxMute PROC
;;;625    /*---------------------------------------------------------------------------------------------------------*/
;;;626    void DrvI2S_EnableTxMute(void)
000000  4803              LDR      r0,|L17.16|
;;;627    {
;;;628    	I2S->CON.MUTE = 1;	
000002  6800              LDR      r0,[r0,#0]
000004  2108              MOVS     r1,#8
000006  4388              BICS     r0,r0,r1
000008  3008              ADDS     r0,r0,#8
00000a  4901              LDR      r1,|L17.16|
00000c  6008              STR      r0,[r1,#0]
;;;629    }
00000e  4770              BX       lr
;;;630    
                          ENDP

                  |L17.16|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_GetBCLKFreq||, CODE, READONLY, ALIGN=2

                  DrvI2S_GetBCLKFreq PROC
;;;350    /*---------------------------------------------------------------------------------------------------------*/
;;;351    uint32_t DrvI2S_GetBCLKFreq(void)
000000  b570              PUSH     {r4-r6,lr}
;;;352    {
;;;353    	uint32_t u32Reg, u32SrcClk;
;;;354    	
;;;355    	u32SrcClk = DrvI2S_GetSourceClockFreq(); 		
000002  f7fffffe          BL       DrvI2S_GetSourceClockFreq
000006  4605              MOV      r5,r0
;;;356    	
;;;357    	u32Reg = I2S->CLKDIV.BCLK_DIV;
000008  4804              LDR      r0,|L18.28|
00000a  6840              LDR      r0,[r0,#4]
00000c  0400              LSLS     r0,r0,#16
00000e  0e04              LSRS     r4,r0,#24
;;;358    	
;;;359    	return ((u32SrcClk >> 1) / (u32Reg + 1));
000010  0868              LSRS     r0,r5,#1
000012  1c61              ADDS     r1,r4,#1
000014  f7fffffe          BL       __aeabi_uidivmod
;;;360    }
000018  bd70              POP      {r4-r6,pc}
;;;361    
                          ENDP

00001a  0000              DCW      0x0000
                  |L18.28|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_GetMCLKFreq||, CODE, READONLY, ALIGN=2

                  DrvI2S_GetMCLKFreq PROC
;;;400    /*---------------------------------------------------------------------------------------------------------*/
;;;401    uint32_t DrvI2S_GetMCLKFreq(void)
000000  b570              PUSH     {r4-r6,lr}
;;;402    {
;;;403    	uint32_t u32Reg, u32SrcClk;
;;;404    
;;;405    	u32Reg = I2S->CLKDIV.MCLK_DIV;
000002  4808              LDR      r0,|L19.36|
000004  6840              LDR      r0,[r0,#4]
000006  0744              LSLS     r4,r0,#29
000008  0f64              LSRS     r4,r4,#29
;;;406    
;;;407    	u32SrcClk = DrvI2S_GetSourceClockFreq(); 	
00000a  f7fffffe          BL       DrvI2S_GetSourceClockFreq
00000e  4605              MOV      r5,r0
;;;408    
;;;409    	if (u32Reg == 0)
000010  2c00              CMP      r4,#0
000012  d101              BNE      |L19.24|
;;;410    		return u32SrcClk;
000014  4628              MOV      r0,r5
                  |L19.22|
;;;411    	else
;;;412    		return ((u32SrcClk >> 1) / u32Reg);
;;;413    }
000016  bd70              POP      {r4-r6,pc}
                  |L19.24|
000018  0868              LSRS     r0,r5,#1              ;412
00001a  4621              MOV      r1,r4                 ;412
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  e7f9              B        |L19.22|
;;;414    
                          ENDP

000022  0000              DCW      0x0000
                  |L19.36|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_GetSourceClockFreq||, CODE, READONLY, ALIGN=2

                  DrvI2S_GetSourceClockFreq PROC
;;;745    /*---------------------------------------------------------------------------------------------------------*/
;;;746    uint32_t DrvI2S_GetSourceClockFreq(void)
000000  b570              PUSH     {r4-r6,lr}
;;;747    {
;;;748    	uint8_t  u8ClkSrcSel;
;;;749    	uint32_t u32Freq = __XTAL;
000002  4d0e              LDR      r5,|L20.60|
;;;750    	 
;;;751    	
;;;752    	u8ClkSrcSel = SYSCLK->CLKSEL2.I2S_S;
000004  480e              LDR      r0,|L20.64|
000006  69c0              LDR      r0,[r0,#0x1c]
000008  0784              LSLS     r4,r0,#30
00000a  0fa4              LSRS     r4,r4,#30
;;;753    
;;;754    	switch (u8ClkSrcSel)
00000c  2c00              CMP      r4,#0
00000e  d006              BEQ      |L20.30|
000010  2c01              CMP      r4,#1
000012  d006              BEQ      |L20.34|
000014  2c02              CMP      r4,#2
000016  d008              BEQ      |L20.42|
000018  2c03              CMP      r4,#3
00001a  d10b              BNE      |L20.52|
00001c  e008              B        |L20.48|
                  |L20.30|
;;;755    	{
;;;756    		case DRVI2S_EXT_12M:
;;;757    			u32Freq = __XTAL;
00001e  4d07              LDR      r5,|L20.60|
;;;758    			break;
000020  e008              B        |L20.52|
                  |L20.34|
;;;759    		case DRVI2S_PLL:
;;;760    			u32Freq = DrvSYS_GetPLLClockFreq();			
000022  f7fffffe          BL       DrvSYS_GetPLLClockFreq
000026  4605              MOV      r5,r0
;;;761    			break;
000028  e004              B        |L20.52|
                  |L20.42|
;;;762    		case DRVI2S_HCLK:
;;;763    			u32Freq = SystemCoreClock;
00002a  4806              LDR      r0,|L20.68|
00002c  6805              LDR      r5,[r0,#0]  ; SystemCoreClock
;;;764    			break;																	  
00002e  e001              B        |L20.52|
                  |L20.48|
;;;765    		case DRVI2S_INTERNAL_22M:
;;;766    			u32Freq = __IRC22M;
000030  4d05              LDR      r5,|L20.72|
;;;767    			break;
000032  bf00              NOP      
                  |L20.52|
000034  bf00              NOP                            ;758
;;;768    	}
;;;769    
;;;770    	return u32Freq;
000036  4628              MOV      r0,r5
;;;771    }
000038  bd70              POP      {r4-r6,pc}
;;;772    
                          ENDP

00003a  0000              DCW      0x0000
                  |L20.60|
                          DCD      0x00b71b00
                  |L20.64|
                          DCD      0x50000200
                  |L20.68|
                          DCD      SystemCoreClock
                  |L20.72|
                          DCD      0x01518000

                          AREA ||i.DrvI2S_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvI2S_GetVersion PROC
;;;785    /*---------------------------------------------------------------------------------------------------------*/
;;;786    uint32_t DrvI2S_GetVersion(void)
000000  4800              LDR      r0,|L21.4|
;;;787    {
;;;788    	return DRVI2S_VERSION_NUM;
;;;789    }
000002  4770              BX       lr
;;;790    
                          ENDP

                  |L21.4|
                          DCD      0x00010202

                          AREA ||i.DrvI2S_Open||, CODE, READONLY, ALIGN=2

                  DrvI2S_Open PROC
;;;149    /*---------------------------------------------------------------------------------------------------------*/
;;;150    int32_t DrvI2S_Open(S_DRVI2S_DATA_T *sParam)
000000  b5f8              PUSH     {r3-r7,lr}
;;;151    {
000002  4604              MOV      r4,r0
;;;152    	uint8_t u8Divider;
;;;153    	uint32_t u32BitRate, u32SrcClk;
;;;154    	
;;;155    	SYS->IPRSTC2.I2S_RST = 1;
000004  2005              MOVS     r0,#5
000006  0700              LSLS     r0,r0,#28
000008  68c0              LDR      r0,[r0,#0xc]
00000a  2101              MOVS     r1,#1
00000c  0749              LSLS     r1,r1,#29
00000e  4388              BICS     r0,r0,r1
000010  1840              ADDS     r0,r0,r1
000012  2105              MOVS     r1,#5
000014  0709              LSLS     r1,r1,#28
000016  60c8              STR      r0,[r1,#0xc]
;;;156    	SYS->IPRSTC2.I2S_RST = 0;
000018  4608              MOV      r0,r1
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  2101              MOVS     r1,#1
00001e  0749              LSLS     r1,r1,#29
000020  4388              BICS     r0,r0,r1
000022  2105              MOVS     r1,#5
000024  0709              LSLS     r1,r1,#28
000026  60c8              STR      r0,[r1,#0xc]
;;;157    
;;;158    	SYSCLK->APBCLK.I2S_EN = 1;
000028  4837              LDR      r0,|L22.264|
00002a  6880              LDR      r0,[r0,#8]
00002c  2101              MOVS     r1,#1
00002e  0749              LSLS     r1,r1,#29
000030  4388              BICS     r0,r0,r1
000032  1840              ADDS     r0,r0,r1
000034  4934              LDR      r1,|L22.264|
000036  6088              STR      r0,[r1,#8]
;;;159    	
;;;160    	I2S->CON.WORDWIDTH 	= sParam->u8WordWidth;
000038  4834              LDR      r0,|L22.268|
00003a  6800              LDR      r0,[r0,#0]
00003c  2130              MOVS     r1,#0x30
00003e  4388              BICS     r0,r0,r1
000040  7921              LDRB     r1,[r4,#4]
000042  0109              LSLS     r1,r1,#4
000044  2230              MOVS     r2,#0x30
000046  4011              ANDS     r1,r1,r2
000048  4308              ORRS     r0,r0,r1
00004a  4930              LDR      r1,|L22.268|
00004c  6008              STR      r0,[r1,#0]
;;;161    	I2S->CON.MONO 		= sParam->u8AudioFormat;
00004e  4608              MOV      r0,r1
000050  6800              LDR      r0,[r0,#0]
000052  2140              MOVS     r1,#0x40
000054  4388              BICS     r0,r0,r1
000056  7961              LDRB     r1,[r4,#5]
000058  0189              LSLS     r1,r1,#6
00005a  2240              MOVS     r2,#0x40
00005c  4011              ANDS     r1,r1,r2
00005e  4308              ORRS     r0,r0,r1
000060  492a              LDR      r1,|L22.268|
000062  6008              STR      r0,[r1,#0]
;;;162    	I2S->CON.FORMAT 	= sParam->u8DataFormat;
000064  4608              MOV      r0,r1
000066  6800              LDR      r0,[r0,#0]
000068  2180              MOVS     r1,#0x80
00006a  4388              BICS     r0,r0,r1
00006c  79a1              LDRB     r1,[r4,#6]
00006e  01c9              LSLS     r1,r1,#7
000070  2280              MOVS     r2,#0x80
000072  4011              ANDS     r1,r1,r2
000074  4308              ORRS     r0,r0,r1
000076  4925              LDR      r1,|L22.268|
000078  6008              STR      r0,[r1,#0]
;;;163    	I2S->CON.SLAVE 		= sParam->u8Mode;
00007a  4608              MOV      r0,r1
00007c  6800              LDR      r0,[r0,#0]
00007e  1589              ASRS     r1,r1,#22
000080  4388              BICS     r0,r0,r1
000082  79e1              LDRB     r1,[r4,#7]
000084  0209              LSLS     r1,r1,#8
000086  0052              LSLS     r2,r2,#1
000088  4011              ANDS     r1,r1,r2
00008a  4308              ORRS     r0,r0,r1
00008c  491f              LDR      r1,|L22.268|
00008e  6008              STR      r0,[r1,#0]
;;;164    	I2S->CON.TXTH 		= sParam->u8TxFIFOThreshold;
000090  4608              MOV      r0,r1
000092  6800              LDR      r0,[r0,#0]
000094  2107              MOVS     r1,#7
000096  0249              LSLS     r1,r1,#9
000098  4388              BICS     r0,r0,r1
00009a  7a21              LDRB     r1,[r4,#8]
00009c  0249              LSLS     r1,r1,#9
00009e  2207              MOVS     r2,#7
0000a0  0252              LSLS     r2,r2,#9
0000a2  4011              ANDS     r1,r1,r2
0000a4  4308              ORRS     r0,r0,r1
0000a6  4919              LDR      r1,|L22.268|
0000a8  6008              STR      r0,[r1,#0]
;;;165    	I2S->CON.RXTH 		= sParam->u8RxFIFOThreshold - 1;
0000aa  4608              MOV      r0,r1
0000ac  6800              LDR      r0,[r0,#0]
0000ae  00d1              LSLS     r1,r2,#3
0000b0  4388              BICS     r0,r0,r1
0000b2  7a61              LDRB     r1,[r4,#9]
0000b4  1e49              SUBS     r1,r1,#1
0000b6  0309              LSLS     r1,r1,#12
0000b8  00d2              LSLS     r2,r2,#3
0000ba  4011              ANDS     r1,r1,r2
0000bc  4308              ORRS     r0,r0,r1
0000be  4913              LDR      r1,|L22.268|
0000c0  6008              STR      r0,[r1,#0]
;;;166    
;;;167    	u32SrcClk = DrvI2S_GetSourceClockFreq();
0000c2  f7fffffe          BL       DrvI2S_GetSourceClockFreq
0000c6  4607              MOV      r7,r0
;;;168    	
;;;169    	u32BitRate = sParam->u32SampleRate * (sParam->u8WordWidth + 1) * 16;
0000c8  7921              LDRB     r1,[r4,#4]
0000ca  1c49              ADDS     r1,r1,#1
0000cc  6820              LDR      r0,[r4,#0]
0000ce  4348              MULS     r0,r1,r0
0000d0  0106              LSLS     r6,r0,#4
;;;170    
;;;171    	u8Divider = ((u32SrcClk/u32BitRate) >> 1) - 1;
0000d2  4631              MOV      r1,r6
0000d4  4638              MOV      r0,r7
0000d6  f7fffffe          BL       __aeabi_uidivmod
0000da  0840              LSRS     r0,r0,#1
0000dc  1e40              SUBS     r0,r0,#1
0000de  b2c5              UXTB     r5,r0
;;;172    	
;;;173    	I2S->CLKDIV.BCLK_DIV = u8Divider;	
0000e0  480a              LDR      r0,|L22.268|
0000e2  6840              LDR      r0,[r0,#4]
0000e4  21ff              MOVS     r1,#0xff
0000e6  0209              LSLS     r1,r1,#8
0000e8  4388              BICS     r0,r0,r1
0000ea  0229              LSLS     r1,r5,#8
0000ec  22ff              MOVS     r2,#0xff
0000ee  0212              LSLS     r2,r2,#8
0000f0  4011              ANDS     r1,r1,r2
0000f2  4308              ORRS     r0,r0,r1
0000f4  4905              LDR      r1,|L22.268|
0000f6  6048              STR      r0,[r1,#4]
;;;174    	
;;;175    	I2S->CON.I2SEN = 1;	
0000f8  4608              MOV      r0,r1
0000fa  6800              LDR      r0,[r0,#0]
0000fc  0840              LSRS     r0,r0,#1
0000fe  0040              LSLS     r0,r0,#1
000100  1c40              ADDS     r0,r0,#1
000102  6008              STR      r0,[r1,#0]
;;;176    
;;;177    	return E_SUCCESS;
000104  2000              MOVS     r0,#0
;;;178    }
000106  bdf8              POP      {r3-r7,pc}
;;;179    
                          ENDP

                  |L22.264|
                          DCD      0x50000200
                  |L22.268|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_SelectClockSource||, CODE, READONLY, ALIGN=2

                  DrvI2S_SelectClockSource PROC
;;;728    /*---------------------------------------------------------------------------------------------------------*/
;;;729    void DrvI2S_SelectClockSource(uint8_t u8ClkSrcSel)
000000  4904              LDR      r1,|L23.20|
;;;730    {
;;;731    	SYSCLK->CLKSEL2.I2S_S = u8ClkSrcSel;
000002  69c9              LDR      r1,[r1,#0x1c]
000004  0889              LSRS     r1,r1,#2
000006  0089              LSLS     r1,r1,#2
000008  0782              LSLS     r2,r0,#30
00000a  0f92              LSRS     r2,r2,#30
00000c  4311              ORRS     r1,r1,r2
00000e  4a01              LDR      r2,|L23.20|
000010  61d1              STR      r1,[r2,#0x1c]
;;;732    }
000012  4770              BX       lr
;;;733    
                          ENDP

                  |L23.20|
                          DCD      0x50000200

                          AREA ||i.DrvI2S_SetBCLKFreq||, CODE, READONLY, ALIGN=2

                  DrvI2S_SetBCLKFreq PROC
;;;375    /*---------------------------------------------------------------------------------------------------------*/
;;;376    void DrvI2S_SetBCLKFreq(uint32_t u32Bclk)
000000  b570              PUSH     {r4-r6,lr}
;;;377    {
000002  4604              MOV      r4,r0
;;;378    	uint8_t u8Divider;
;;;379    	uint32_t u32SrcClk;
;;;380    
;;;381    	u32SrcClk = DrvI2S_GetSourceClockFreq(); 
000004  f7fffffe          BL       DrvI2S_GetSourceClockFreq
000008  4606              MOV      r6,r0
;;;382    	
;;;383    	u8Divider = ((u32SrcClk/u32Bclk) >> 1) - 1;
00000a  4621              MOV      r1,r4
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  0840              LSRS     r0,r0,#1
000014  1e40              SUBS     r0,r0,#1
000016  b2c5              UXTB     r5,r0
;;;384    
;;;385    	I2S->CLKDIV.BCLK_DIV = u8Divider;
000018  4806              LDR      r0,|L24.52|
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  0209              LSLS     r1,r1,#8
000020  4388              BICS     r0,r0,r1
000022  0229              LSLS     r1,r5,#8
000024  22ff              MOVS     r2,#0xff
000026  0212              LSLS     r2,r2,#8
000028  4011              ANDS     r1,r1,r2
00002a  4308              ORRS     r0,r0,r1
00002c  4901              LDR      r1,|L24.52|
00002e  6048              STR      r0,[r1,#4]
;;;386    }
000030  bd70              POP      {r4-r6,pc}
;;;387    
                          ENDP

000032  0000              DCW      0x0000
                  |L24.52|
                          DCD      0x401a0000

                          AREA ||i.DrvI2S_SetChannelZeroCrossDetect||, CODE, READONLY, ALIGN=2

                  DrvI2S_SetChannelZeroCrossDetect PROC
;;;460    /*---------------------------------------------------------------------------------------------------------*/
;;;461    int32_t DrvI2S_SetChannelZeroCrossDetect(E_I2S_CHANNEL channel, int32_t i32flag)
000000  b510              PUSH     {r4,lr}
;;;462    {
000002  4602              MOV      r2,r0
;;;463    	if (channel == I2S_LEFT_CHANNEL)
000004  2a00              CMP      r2,#0
000006  d10c              BNE      |L25.34|
;;;464    	{
;;;465    		I2S->CON.LCHZCEN = i32flag;
000008  480e              LDR      r0,|L25.68|
00000a  6800              LDR      r0,[r0,#0]
00000c  2301              MOVS     r3,#1
00000e  045b              LSLS     r3,r3,#17
000010  4398              BICS     r0,r0,r3
000012  044b              LSLS     r3,r1,#17
000014  2401              MOVS     r4,#1
000016  0464              LSLS     r4,r4,#17
000018  4023              ANDS     r3,r3,r4
00001a  4318              ORRS     r0,r0,r3
00001c  4b09              LDR      r3,|L25.68|
00001e  6018              STR      r0,[r3,#0]
000020  e00e              B        |L25.64|
                  |L25.34|
;;;466    	}
;;;467    	else if (channel == I2S_RIGHT_CHANNEL)
000022  2a01              CMP      r2,#1
000024  d10a              BNE      |L25.60|
;;;468    	{
;;;469    		I2S->CON.RCHZCEN = i32flag;
000026  4807              LDR      r0,|L25.68|
000028  6800              LDR      r0,[r0,#0]
00002a  0413              LSLS     r3,r2,#16
00002c  4398              BICS     r0,r0,r3
00002e  040b              LSLS     r3,r1,#16
000030  0414              LSLS     r4,r2,#16
000032  4023              ANDS     r3,r3,r4
000034  4318              ORRS     r0,r0,r3
000036  4b03              LDR      r3,|L25.68|
000038  6018              STR      r0,[r3,#0]
00003a  e001              B        |L25.64|
                  |L25.60|
;;;470    	}
;;;471    	else
;;;472    		return E_DRVI2S_ERR_ARGUMENT;
00003c  4802              LDR      r0,|L25.72|
                  |L25.62|
;;;473    
;;;474    	return E_SUCCESS;
;;;475    }
00003e  bd10              POP      {r4,pc}
                  |L25.64|
000040  2000              MOVS     r0,#0                 ;474
000042  e7fc              B        |L25.62|
;;;476    
                          ENDP

                  |L25.68|
                          DCD      0x401a0000
                  |L25.72|
                          DCD      0xffff8c01

                          AREA ||i.DrvI2S_SetMCLKFreq||, CODE, READONLY, ALIGN=2

                  DrvI2S_SetMCLKFreq PROC
;;;427    /*---------------------------------------------------------------------------------------------------------*/
;;;428    void DrvI2S_SetMCLKFreq(uint32_t u32Mclk)
000000  b570              PUSH     {r4-r6,lr}
;;;429    {
000002  4604              MOV      r4,r0
;;;430    	uint8_t u8Divider;
;;;431    	uint32_t u32SrcClk;
;;;432    
;;;433    	u32SrcClk = DrvI2S_GetSourceClockFreq(); 
000004  f7fffffe          BL       DrvI2S_GetSourceClockFreq
000008  4606              MOV      r6,r0
;;;434    
;;;435    	if (u32Mclk == u32SrcClk)
00000a  42b4              CMP      r4,r6
00000c  d101              BNE      |L26.18|
;;;436    	{
;;;437    		u8Divider = 0;
00000e  2500              MOVS     r5,#0
000010  e005              B        |L26.30|
                  |L26.18|
;;;438    	}
;;;439    	else
;;;440    	{
;;;441    		u8Divider = (u32SrcClk/u32Mclk) >> 1;
000012  4621              MOV      r1,r4
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  05c0              LSLS     r0,r0,#23
00001c  0e05              LSRS     r5,r0,#24
                  |L26.30|
;;;442    	}
;;;443    	
;;;444    	I2S->CLKDIV.MCLK_DIV = u8Divider;
00001e  4805              LDR      r0,|L26.52|
000020  6840              LDR      r0,[r0,#4]
000022  08c0              LSRS     r0,r0,#3
000024  00c0              LSLS     r0,r0,#3
000026  0769              LSLS     r1,r5,#29
000028  0f49              LSRS     r1,r1,#29
00002a  4308              ORRS     r0,r0,r1
00002c  4901              LDR      r1,|L26.52|
00002e  6048              STR      r0,[r1,#4]
;;;445    }
000030  bd70              POP      {r4-r6,pc}
;;;446    
                          ENDP

000032  0000              DCW      0x0000
                  |L26.52|
                          DCD      0x401a0000

                          AREA ||i.I2S_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2S_IRQHandler PROC
;;;38     /*---------------------------------------------------------------------------------------------------------*/
;;;39     void I2S_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;40     {
;;;41         uint32_t u32Reg;
;;;42     
;;;43     	u32Reg = inpw(&(I2S->STATUS));
000002  4857              LDR      r0,|L27.352|
000004  68c4              LDR      r4,[r0,#0xc]
;;;44     
;;;45     	if (u32Reg & I2S_I2STXINT)
000006  2004              MOVS     r0,#4
000008  4204              TST      r4,r0
00000a  d069              BEQ      |L27.224|
;;;46     	{
;;;47     		/* Tx underflow */
;;;48     		if ((u32Reg & I2S_TXUDF) && (I2S->IE.TXUDFIE == 1))
00000c  0380              LSLS     r0,r0,#14
00000e  4204              TST      r4,r0
000010  d012              BEQ      |L27.56|
000012  4853              LDR      r0,|L27.352|
000014  6880              LDR      r0,[r0,#8]
000016  05c0              LSLS     r0,r0,#23
000018  0fc0              LSRS     r0,r0,#31
00001a  2801              CMP      r0,#1
00001c  d10c              BNE      |L27.56|
;;;49     		{
;;;50     			if (I2SHandler.TxUnderflowFn)
00001e  4851              LDR      r0,|L27.356|
000020  68c0              LDR      r0,[r0,#0xc]  ; I2SHandler
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L27.46|
;;;51     				I2SHandler.TxUnderflowFn(u32Reg);
000026  484f              LDR      r0,|L27.356|
000028  68c1              LDR      r1,[r0,#0xc]  ; I2SHandler
00002a  4620              MOV      r0,r4
00002c  4788              BLX      r1
                  |L27.46|
;;;52     			
;;;53     			outpw(&(I2S->STATUS), I2S_TXUDF);
00002e  2001              MOVS     r0,#1
000030  0400              LSLS     r0,r0,#16
000032  494b              LDR      r1,|L27.352|
000034  60c8              STR      r0,[r1,#0xc]
000036  e091              B        |L27.348|
                  |L27.56|
;;;54     		}
;;;55     		/* Tx overflow */
;;;56     		else if ((u32Reg & I2S_TXOVF) && (I2S->IE.TXOVFIE == 1))
000038  2001              MOVS     r0,#1
00003a  0440              LSLS     r0,r0,#17
00003c  4204              TST      r4,r0
00003e  d012              BEQ      |L27.102|
000040  4847              LDR      r0,|L27.352|
000042  6880              LDR      r0,[r0,#8]
000044  0580              LSLS     r0,r0,#22
000046  0fc0              LSRS     r0,r0,#31
000048  2801              CMP      r0,#1
00004a  d10c              BNE      |L27.102|
;;;57     		{
;;;58     			if (I2SHandler.TxOverflowFn)
00004c  4845              LDR      r0,|L27.356|
00004e  6900              LDR      r0,[r0,#0x10]  ; I2SHandler
000050  2800              CMP      r0,#0
000052  d003              BEQ      |L27.92|
;;;59     				I2SHandler.TxOverflowFn(u32Reg);
000054  4843              LDR      r0,|L27.356|
000056  6901              LDR      r1,[r0,#0x10]  ; I2SHandler
000058  4620              MOV      r0,r4
00005a  4788              BLX      r1
                  |L27.92|
;;;60     			
;;;61     			outpw(&(I2S->STATUS), I2S_TXOVF);		
00005c  2001              MOVS     r0,#1
00005e  0440              LSLS     r0,r0,#17
000060  493f              LDR      r1,|L27.352|
000062  60c8              STR      r0,[r1,#0xc]
000064  e07a              B        |L27.348|
                  |L27.102|
;;;62     		}
;;;63     		/* Tx right zero cross */
;;;64     		else if ((u32Reg & I2S_RZCF) && (I2S->IE.RZCIE == 1))
000066  2001              MOVS     r0,#1
000068  0580              LSLS     r0,r0,#22
00006a  4204              TST      r4,r0
00006c  d012              BEQ      |L27.148|
00006e  483c              LDR      r0,|L27.352|
000070  6880              LDR      r0,[r0,#8]
000072  0500              LSLS     r0,r0,#20
000074  0fc0              LSRS     r0,r0,#31
000076  2801              CMP      r0,#1
000078  d10c              BNE      |L27.148|
;;;65     		{
;;;66     			if (I2SHandler.TxRightZeroCrossFn)
00007a  483a              LDR      r0,|L27.356|
00007c  6980              LDR      r0,[r0,#0x18]  ; I2SHandler
00007e  2800              CMP      r0,#0
000080  d003              BEQ      |L27.138|
;;;67     				I2SHandler.TxRightZeroCrossFn(u32Reg);
000082  4838              LDR      r0,|L27.356|
000084  6981              LDR      r1,[r0,#0x18]  ; I2SHandler
000086  4620              MOV      r0,r4
000088  4788              BLX      r1
                  |L27.138|
;;;68     			outpw(&(I2S->STATUS), I2S_RZCF);		
00008a  2001              MOVS     r0,#1
00008c  0580              LSLS     r0,r0,#22
00008e  4934              LDR      r1,|L27.352|
000090  60c8              STR      r0,[r1,#0xc]
000092  e063              B        |L27.348|
                  |L27.148|
;;;69     		}
;;;70     		/* Tx left zero cross */
;;;71     		else if ((u32Reg & I2S_LZCF) && (I2S->IE.LZCIE == 1))
000094  2001              MOVS     r0,#1
000096  05c0              LSLS     r0,r0,#23
000098  4204              TST      r4,r0
00009a  d012              BEQ      |L27.194|
00009c  4830              LDR      r0,|L27.352|
00009e  6880              LDR      r0,[r0,#8]
0000a0  04c0              LSLS     r0,r0,#19
0000a2  0fc0              LSRS     r0,r0,#31
0000a4  2801              CMP      r0,#1
0000a6  d10c              BNE      |L27.194|
;;;72     		{
;;;73     			if (I2SHandler.TxLeftZeroCrossFn)
0000a8  482e              LDR      r0,|L27.356|
0000aa  69c0              LDR      r0,[r0,#0x1c]  ; I2SHandler
0000ac  2800              CMP      r0,#0
0000ae  d003              BEQ      |L27.184|
;;;74     				I2SHandler.TxLeftZeroCrossFn(u32Reg);
0000b0  482c              LDR      r0,|L27.356|
0000b2  69c1              LDR      r1,[r0,#0x1c]  ; I2SHandler
0000b4  4620              MOV      r0,r4
0000b6  4788              BLX      r1
                  |L27.184|
;;;75     			outpw(&(I2S->STATUS), I2S_LZCF);		
0000b8  2001              MOVS     r0,#1
0000ba  05c0              LSLS     r0,r0,#23
0000bc  4928              LDR      r1,|L27.352|
0000be  60c8              STR      r0,[r1,#0xc]
0000c0  e04c              B        |L27.348|
                  |L27.194|
;;;76     		}						  
;;;77     		/* Tx threshold level */
;;;78     		else if (I2S->IE.TXTHIE == 1)
0000c2  4827              LDR      r0,|L27.352|
0000c4  6880              LDR      r0,[r0,#8]
0000c6  0540              LSLS     r0,r0,#21
0000c8  0fc0              LSRS     r0,r0,#31
0000ca  2801              CMP      r0,#1
0000cc  d146              BNE      |L27.348|
;;;79     		{
;;;80     			if (I2SHandler.TxFifoThresholdFn)
0000ce  4825              LDR      r0,|L27.356|
0000d0  6940              LDR      r0,[r0,#0x14]  ; I2SHandler
0000d2  2800              CMP      r0,#0
0000d4  d042              BEQ      |L27.348|
;;;81     				I2SHandler.TxFifoThresholdFn(u32Reg);		
0000d6  4823              LDR      r0,|L27.356|
0000d8  6941              LDR      r1,[r0,#0x14]  ; I2SHandler
0000da  4620              MOV      r0,r4
0000dc  4788              BLX      r1
0000de  e03d              B        |L27.348|
                  |L27.224|
;;;82     		}
;;;83     	}
;;;84     	else if (u32Reg & I2S_I2SRXINT)
0000e0  2002              MOVS     r0,#2
0000e2  4204              TST      r4,r0
0000e4  d03a              BEQ      |L27.348|
;;;85     	{
;;;86     		/* Rx underflow */
;;;87     		if ((u32Reg & I2S_RXUDF) && (I2S->IE.RXUDFIE == 1))
0000e6  01c0              LSLS     r0,r0,#7
0000e8  4204              TST      r4,r0
0000ea  d012              BEQ      |L27.274|
0000ec  481c              LDR      r0,|L27.352|
0000ee  6880              LDR      r0,[r0,#8]
0000f0  07c0              LSLS     r0,r0,#31
0000f2  0fc0              LSRS     r0,r0,#31
0000f4  2801              CMP      r0,#1
0000f6  d10c              BNE      |L27.274|
;;;88     		{
;;;89     			if (I2SHandler.RxUnderflowFn)
0000f8  481a              LDR      r0,|L27.356|
0000fa  6800              LDR      r0,[r0,#0]  ; I2SHandler
0000fc  2800              CMP      r0,#0
0000fe  d003              BEQ      |L27.264|
;;;90     				I2SHandler.RxUnderflowFn(u32Reg);
000100  4818              LDR      r0,|L27.356|
000102  6801              LDR      r1,[r0,#0]  ; I2SHandler
000104  4620              MOV      r0,r4
000106  4788              BLX      r1
                  |L27.264|
;;;91     			
;;;92     			outpw(&(I2S->STATUS), I2S_RXUDF);				
000108  20ff              MOVS     r0,#0xff
00010a  3001              ADDS     r0,#1
00010c  4914              LDR      r1,|L27.352|
00010e  60c8              STR      r0,[r1,#0xc]
000110  e024              B        |L27.348|
                  |L27.274|
;;;93     		}
;;;94     		/* Rx overflow */
;;;95     		else if ((u32Reg & I2S_RXOVF) && (I2S->IE.RXOVFIE == 1))
000112  2001              MOVS     r0,#1
000114  0240              LSLS     r0,r0,#9
000116  4204              TST      r4,r0
000118  d012              BEQ      |L27.320|
00011a  4811              LDR      r0,|L27.352|
00011c  6880              LDR      r0,[r0,#8]
00011e  0780              LSLS     r0,r0,#30
000120  0fc0              LSRS     r0,r0,#31
000122  2801              CMP      r0,#1
000124  d10c              BNE      |L27.320|
;;;96     		{
;;;97     			if (I2SHandler.RxOverflowFn)
000126  480f              LDR      r0,|L27.356|
000128  6840              LDR      r0,[r0,#4]  ; I2SHandler
00012a  2800              CMP      r0,#0
00012c  d003              BEQ      |L27.310|
;;;98     				I2SHandler.RxOverflowFn(u32Reg);
00012e  480d              LDR      r0,|L27.356|
000130  6841              LDR      r1,[r0,#4]  ; I2SHandler
000132  4620              MOV      r0,r4
000134  4788              BLX      r1
                  |L27.310|
;;;99     
;;;100    			outpw(&(I2S->STATUS), I2S_RXOVF);			
000136  2001              MOVS     r0,#1
000138  0240              LSLS     r0,r0,#9
00013a  4909              LDR      r1,|L27.352|
00013c  60c8              STR      r0,[r1,#0xc]
00013e  e00d              B        |L27.348|
                  |L27.320|
;;;101    		}
;;;102    		/* Rx threshold level */
;;;103    		else if (I2S->IE.RXTHIE == 1)
000140  4807              LDR      r0,|L27.352|
000142  6880              LDR      r0,[r0,#8]
000144  0740              LSLS     r0,r0,#29
000146  0fc0              LSRS     r0,r0,#31
000148  2801              CMP      r0,#1
00014a  d107              BNE      |L27.348|
;;;104    		{
;;;105    			if (I2SHandler.RxFifoThresholdFn)
00014c  4805              LDR      r0,|L27.356|
00014e  6880              LDR      r0,[r0,#8]  ; I2SHandler
000150  2800              CMP      r0,#0
000152  d003              BEQ      |L27.348|
;;;106    				I2SHandler.RxFifoThresholdFn(u32Reg);		
000154  4803              LDR      r0,|L27.356|
000156  6881              LDR      r1,[r0,#8]  ; I2SHandler
000158  4620              MOV      r0,r4
00015a  4788              BLX      r1
                  |L27.348|
;;;107    		}	
;;;108    	}	
;;;109    }
00015c  bd10              POP      {r4,pc}
;;;110    
                          ENDP

00015e  0000              DCW      0x0000
                  |L27.352|
                          DCD      0x401a0000
                  |L27.356|
                          DCD      I2SHandler

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  I2SHandler
                          %        32

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L171.16|
00000e  461d              MOV      r5,r3
                  |L171.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

