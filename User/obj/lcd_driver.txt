; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\lcd_driver.o --depend=.\obj\lcd_driver.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\lcd_driver.crf ..\BSP_Lib\Src\NUC1xx-LB_002\LCD_Driver.c]
                          THUMB

                          AREA ||i.Disable_Buzzer||, CODE, READONLY, ALIGN=1

                  Disable_Buzzer PROC
;;;118    
;;;119    void Disable_Buzzer(void)
000000  b510              PUSH     {r4,lr}
;;;120    {
;;;121     	DrvGPIO_Open(E_GPB,11, E_IO_OUTPUT);	
000002  2201              MOVS     r2,#1
000004  210b              MOVS     r1,#0xb
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       DrvGPIO_Open
;;;122    	DrvGPIO_SetBit(E_GPB,11);	
00000c  210b              MOVS     r1,#0xb
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       DrvGPIO_SetBit
;;;123    }
000014  bd10              POP      {r4,pc}
;;;124    
                          ENDP


                          AREA ||i.Initial_pannel||, CODE, READONLY, ALIGN=2

                  Initial_pannel PROC
;;;20     
;;;21     void Initial_pannel(void)
000000  488b              LDR      r0,|L2.560|
;;;22     {
;;;23     	
;;;24     		SYSCLK->APBCLK.SPI3_EN  =1;			 //enable spi function 
000002  6880              LDR      r0,[r0,#8]
000004  2101              MOVS     r1,#1
000006  03c9              LSLS     r1,r1,#15
000008  4388              BICS     r0,r0,r1
00000a  1840              ADDS     r0,r0,r1
00000c  4988              LDR      r1,|L2.560|
00000e  6088              STR      r0,[r1,#8]
;;;25     		SYS->IPRSTC2.SPI3_RST   =1;			 //reset spi function
000010  2005              MOVS     r0,#5
000012  0700              LSLS     r0,r0,#28
000014  68c0              LDR      r0,[r0,#0xc]
000016  0189              LSLS     r1,r1,#6
000018  4388              BICS     r0,r0,r1
00001a  1840              ADDS     r0,r0,r1
00001c  2105              MOVS     r1,#5
00001e  0709              LSLS     r1,r1,#28
000020  60c8              STR      r0,[r1,#0xc]
;;;26     		SYS->IPRSTC2.SPI3_RST   =0;
000022  4608              MOV      r0,r1
000024  68c0              LDR      r0,[r0,#0xc]
000026  2101              MOVS     r1,#1
000028  03c9              LSLS     r1,r1,#15
00002a  4388              BICS     r0,r0,r1
00002c  2105              MOVS     r1,#5
00002e  0709              LSLS     r1,r1,#28
000030  60c8              STR      r0,[r1,#0xc]
;;;27     
;;;28     		/* set GPIO to SPI mode*/
;;;29     		SYS->GPDMFP.SPI3_SS0 	=1;
000032  4608              MOV      r0,r1
000034  6bc0              LDR      r0,[r0,#0x3c]
000036  21ff              MOVS     r1,#0xff
000038  3101              ADDS     r1,#1
00003a  4388              BICS     r0,r0,r1
00003c  1840              ADDS     r0,r0,r1
00003e  2105              MOVS     r1,#5
000040  0709              LSLS     r1,r1,#28
000042  63c8              STR      r0,[r1,#0x3c]
;;;30     		SYS->GPDMFP.SPI3_CLK 	=1;
000044  4608              MOV      r0,r1
000046  6bc0              LDR      r0,[r0,#0x3c]
000048  2101              MOVS     r1,#1
00004a  0249              LSLS     r1,r1,#9
00004c  4388              BICS     r0,r0,r1
00004e  1840              ADDS     r0,r0,r1
000050  2105              MOVS     r1,#5
000052  0709              LSLS     r1,r1,#28
000054  63c8              STR      r0,[r1,#0x3c]
;;;31     		SYS->GPDMFP.SPI3_MISO0 	=1;
000056  4608              MOV      r0,r1
000058  6bc0              LDR      r0,[r0,#0x3c]
00005a  2101              MOVS     r1,#1
00005c  0289              LSLS     r1,r1,#10
00005e  4388              BICS     r0,r0,r1
000060  1840              ADDS     r0,r0,r1
000062  2105              MOVS     r1,#5
000064  0709              LSLS     r1,r1,#28
000066  63c8              STR      r0,[r1,#0x3c]
;;;32     		SYS->GPDMFP.SPI3_MOSI0 	=1;
000068  4608              MOV      r0,r1
00006a  6bc0              LDR      r0,[r0,#0x3c]
00006c  2101              MOVS     r1,#1
00006e  02c9              LSLS     r1,r1,#11
000070  4388              BICS     r0,r0,r1
000072  1840              ADDS     r0,r0,r1
000074  2105              MOVS     r1,#5
000076  0709              LSLS     r1,r1,#28
000078  63c8              STR      r0,[r1,#0x3c]
;;;33     		SYS->GPBMFP.INT1_SS31   =1;
00007a  4608              MOV      r0,r1
00007c  6b40              LDR      r0,[r0,#0x34]
00007e  2101              MOVS     r1,#1
000080  0389              LSLS     r1,r1,#14
000082  4388              BICS     r0,r0,r1
000084  1840              ADDS     r0,r0,r1
000086  2105              MOVS     r1,#5
000088  0709              LSLS     r1,r1,#28
00008a  6348              STR      r0,[r1,#0x34]
;;;34     		SYS->ALTMFP.PB14_S31    =1;
00008c  4869              LDR      r0,|L2.564|
00008e  6900              LDR      r0,[r0,#0x10]
000090  2108              MOVS     r1,#8
000092  4388              BICS     r0,r0,r1
000094  3008              ADDS     r0,r0,#8
000096  4967              LDR      r1,|L2.564|
000098  6108              STR      r0,[r1,#0x10]
;;;35     	    			    
;;;36     		SPI_PORT[eDRVSPI_PORT3]->CNTRL.CLKP = 1;							//CLKP HIGH IDLE
00009a  4867              LDR      r0,|L2.568|
00009c  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
00009e  6800              LDR      r0,[r0,#0]
0000a0  0149              LSLS     r1,r1,#5
0000a2  4388              BICS     r0,r0,r1
0000a4  1840              ADDS     r0,r0,r1
0000a6  4964              LDR      r1,|L2.568|
0000a8  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000aa  6008              STR      r0,[r1,#0]
;;;37     		SPI_PORT[eDRVSPI_PORT3]->CNTRL.TX_BIT_LEN = 9;						//TX LEGTH 9
0000ac  4862              LDR      r0,|L2.568|
0000ae  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0000b0  6800              LDR      r0,[r0,#0]
0000b2  21f8              MOVS     r1,#0xf8
0000b4  4388              BICS     r0,r0,r1
0000b6  3048              ADDS     r0,r0,#0x48
0000b8  495f              LDR      r1,|L2.568|
0000ba  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000bc  6008              STR      r0,[r1,#0]
;;;38     		SPI_PORT[eDRVSPI_PORT3]->CNTRL.TX_NEG = 1;							//SET TX_NEG
0000be  485e              LDR      r0,|L2.568|
0000c0  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0000c2  6800              LDR      r0,[r0,#0]
0000c4  2104              MOVS     r1,#4
0000c6  4388              BICS     r0,r0,r1
0000c8  1d00              ADDS     r0,r0,#4
0000ca  495b              LDR      r1,|L2.568|
0000cc  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000ce  6008              STR      r0,[r1,#0]
;;;39     		SPI_PORT[eDRVSPI_PORT3]->DIVIDER.DIVIDER=0X03;					    //SET DIV
0000d0  4859              LDR      r0,|L2.568|
0000d2  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0000d4  6840              LDR      r0,[r0,#4]
0000d6  0c00              LSRS     r0,r0,#16
0000d8  0400              LSLS     r0,r0,#16
0000da  1cc0              ADDS     r0,r0,#3
0000dc  4956              LDR      r1,|L2.568|
0000de  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000e0  6048              STR      r0,[r1,#4]
;;;40     		SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;									//ENABLE SLAVE SELECT
0000e2  4855              LDR      r0,|L2.568|
0000e4  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0000e6  6880              LDR      r0,[r0,#8]
0000e8  0880              LSRS     r0,r0,#2
0000ea  0080              LSLS     r0,r0,#2
0000ec  1c40              ADDS     r0,r0,#1
0000ee  4952              LDR      r1,|L2.568|
0000f0  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000f2  6088              STR      r0,[r1,#8]
;;;41     	
;;;42     	// Set BR
;;;43     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0xEB;
0000f4  20eb              MOVS     r0,#0xeb
0000f6  4950              LDR      r1,|L2.568|
0000f8  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000fa  6208              STR      r0,[r1,#0x20]
;;;44     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
0000fc  484e              LDR      r0,|L2.568|
0000fe  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000100  6800              LDR      r0,[r0,#0]
000102  0840              LSRS     r0,r0,#1
000104  0040              LSLS     r0,r0,#1
000106  1c40              ADDS     r0,r0,#1
000108  494b              LDR      r1,|L2.568|
00010a  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00010c  6008              STR      r0,[r1,#0]
;;;45         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );
00010e  bf00              NOP      
                  |L2.272|
000110  4849              LDR      r0,|L2.568|
000112  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000114  6800              LDR      r0,[r0,#0]
000116  07c0              LSLS     r0,r0,#31
000118  0fc0              LSRS     r0,r0,#31
00011a  2801              CMP      r0,#1
00011c  d0f8              BEQ      |L2.272|
;;;46     
;;;47     	// Set PM
;;;48     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
00011e  4846              LDR      r0,|L2.568|
000120  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000122  6880              LDR      r0,[r0,#8]
000124  0880              LSRS     r0,r0,#2
000126  0080              LSLS     r0,r0,#2
000128  4943              LDR      r1,|L2.568|
00012a  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00012c  6088              STR      r0,[r1,#8]
;;;49     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;
00012e  4842              LDR      r0,|L2.568|
000130  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000132  6880              LDR      r0,[r0,#8]
000134  0880              LSRS     r0,r0,#2
000136  0080              LSLS     r0,r0,#2
000138  1c40              ADDS     r0,r0,#1
00013a  493f              LDR      r1,|L2.568|
00013c  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00013e  6088              STR      r0,[r1,#8]
;;;50     	
;;;51     	//outp32(SPI3_Tx0, 0x81);	
;;;52     		SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x81;
000140  2081              MOVS     r0,#0x81
000142  493d              LDR      r1,|L2.568|
000144  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000146  6208              STR      r0,[r1,#0x20]
;;;53     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
000148  483b              LDR      r0,|L2.568|
00014a  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
00014c  6800              LDR      r0,[r0,#0]
00014e  0840              LSRS     r0,r0,#1
000150  0040              LSLS     r0,r0,#1
000152  1c40              ADDS     r0,r0,#1
000154  4938              LDR      r1,|L2.568|
000156  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000158  6008              STR      r0,[r1,#0]
;;;54         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );
00015a  bf00              NOP      
                  |L2.348|
00015c  4836              LDR      r0,|L2.568|
00015e  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000160  6800              LDR      r0,[r0,#0]
000162  07c0              LSLS     r0,r0,#31
000164  0fc0              LSRS     r0,r0,#31
000166  2801              CMP      r0,#1
000168  d0f8              BEQ      |L2.348|
;;;55     
;;;56     		SPI_PORT[eDRVSPI_PORT3]->TX[0] =0xa0;
00016a  20a0              MOVS     r0,#0xa0
00016c  4932              LDR      r1,|L2.568|
00016e  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000170  6208              STR      r0,[r1,#0x20]
;;;57     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
000172  4831              LDR      r0,|L2.568|
000174  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000176  6800              LDR      r0,[r0,#0]
000178  0840              LSRS     r0,r0,#1
00017a  0040              LSLS     r0,r0,#1
00017c  1c40              ADDS     r0,r0,#1
00017e  492e              LDR      r1,|L2.568|
000180  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000182  6008              STR      r0,[r1,#0]
;;;58         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );
000184  bf00              NOP      
                  |L2.390|
000186  482c              LDR      r0,|L2.568|
000188  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
00018a  6800              LDR      r0,[r0,#0]
00018c  07c0              LSLS     r0,r0,#31
00018e  0fc0              LSRS     r0,r0,#31
000190  2801              CMP      r0,#1
000192  d0f8              BEQ      |L2.390|
;;;59     
;;;60     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
000194  4828              LDR      r0,|L2.568|
000196  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000198  6880              LDR      r0,[r0,#8]
00019a  0880              LSRS     r0,r0,#2
00019c  0080              LSLS     r0,r0,#2
00019e  4926              LDR      r1,|L2.568|
0001a0  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0001a2  6088              STR      r0,[r1,#8]
;;;61     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;
0001a4  4824              LDR      r0,|L2.568|
0001a6  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0001a8  6880              LDR      r0,[r0,#8]
0001aa  0880              LSRS     r0,r0,#2
0001ac  0080              LSLS     r0,r0,#2
0001ae  1c40              ADDS     r0,r0,#1
0001b0  4921              LDR      r1,|L2.568|
0001b2  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0001b4  6088              STR      r0,[r1,#8]
;;;62     	
;;;63     	//outp32(SPI3_Tx0, 0xC0);
;;;64     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0xc0;	
0001b6  20c0              MOVS     r0,#0xc0
0001b8  491f              LDR      r1,|L2.568|
0001ba  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0001bc  6208              STR      r0,[r1,#0x20]
;;;65     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
0001be  481e              LDR      r0,|L2.568|
0001c0  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0001c2  6800              LDR      r0,[r0,#0]
0001c4  0840              LSRS     r0,r0,#1
0001c6  0040              LSLS     r0,r0,#1
0001c8  1c40              ADDS     r0,r0,#1
0001ca  491b              LDR      r1,|L2.568|
0001cc  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0001ce  6008              STR      r0,[r1,#0]
;;;66         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );
0001d0  bf00              NOP      
                  |L2.466|
0001d2  4819              LDR      r0,|L2.568|
0001d4  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0001d6  6800              LDR      r0,[r0,#0]
0001d8  07c0              LSLS     r0,r0,#31
0001da  0fc0              LSRS     r0,r0,#31
0001dc  2801              CMP      r0,#1
0001de  d0f8              BEQ      |L2.466|
;;;67     
;;;68     	// Set Display Enable
;;;69     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
0001e0  4815              LDR      r0,|L2.568|
0001e2  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0001e4  6880              LDR      r0,[r0,#8]
0001e6  0880              LSRS     r0,r0,#2
0001e8  0080              LSLS     r0,r0,#2
0001ea  4913              LDR      r1,|L2.568|
0001ec  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0001ee  6088              STR      r0,[r1,#8]
;;;70     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;
0001f0  4811              LDR      r0,|L2.568|
0001f2  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0001f4  6880              LDR      r0,[r0,#8]
0001f6  0880              LSRS     r0,r0,#2
0001f8  0080              LSLS     r0,r0,#2
0001fa  1c40              ADDS     r0,r0,#1
0001fc  490e              LDR      r1,|L2.568|
0001fe  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000200  6088              STR      r0,[r1,#8]
;;;71     	
;;;72     	SPI_PORT[eDRVSPI_PORT3]->TX[0] = 0XAF;
000202  20af              MOVS     r0,#0xaf
000204  490c              LDR      r1,|L2.568|
000206  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000208  6208              STR      r0,[r1,#0x20]
;;;73     
;;;74     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00020a  480b              LDR      r0,|L2.568|
00020c  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
00020e  6800              LDR      r0,[r0,#0]
000210  0840              LSRS     r0,r0,#1
000212  0040              LSLS     r0,r0,#1
000214  1c40              ADDS     r0,r0,#1
000216  4908              LDR      r1,|L2.568|
000218  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00021a  6008              STR      r0,[r1,#0]
;;;75         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );
00021c  bf00              NOP      
                  |L2.542|
00021e  4806              LDR      r0,|L2.568|
000220  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000222  6800              LDR      r0,[r0,#0]
000224  07c0              LSLS     r0,r0,#31
000226  0fc0              LSRS     r0,r0,#31
000228  2801              CMP      r0,#1
00022a  d0f8              BEQ      |L2.542|
;;;76     
;;;77     }
00022c  4770              BX       lr
;;;78     
                          ENDP

00022e  0000              DCW      0x0000
                  |L2.560|
                          DCD      0x50000200
                  |L2.564|
                          DCD      0x50000040
                  |L2.568|
                          DCD      SPI_PORT

                          AREA ||i.SetPACA||, CODE, READONLY, ALIGN=2

                  SetPACA PROC
;;;94     //*******************************
;;;95     void SetPACA(unsigned char PA, unsigned char CA)
000000  4a3b              LDR      r2,|L3.240|
;;;96     {
;;;97     	// Set PA
;;;98     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
000002  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000004  6892              LDR      r2,[r2,#8]
000006  0892              LSRS     r2,r2,#2
000008  0092              LSLS     r2,r2,#2
00000a  4b39              LDR      r3,|L3.240|
00000c  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00000e  609a              STR      r2,[r3,#8]
;;;99     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1; 	
000010  4a37              LDR      r2,|L3.240|
000012  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000014  6892              LDR      r2,[r2,#8]
000016  0892              LSRS     r2,r2,#2
000018  0092              LSLS     r2,r2,#2
00001a  1c52              ADDS     r2,r2,#1
00001c  4b34              LDR      r3,|L3.240|
00001e  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
000020  609a              STR      r2,[r3,#8]
;;;100    		SPI_PORT[eDRVSPI_PORT3]->TX[0] = 0xB0 | PA;	
000022  22b0              MOVS     r2,#0xb0
000024  4302              ORRS     r2,r2,r0
000026  4b32              LDR      r3,|L3.240|
000028  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00002a  621a              STR      r2,[r3,#0x20]
;;;101    	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00002c  4a30              LDR      r2,|L3.240|
00002e  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000030  6812              LDR      r2,[r2,#0]
000032  0852              LSRS     r2,r2,#1
000034  0052              LSLS     r2,r2,#1
000036  1c52              ADDS     r2,r2,#1
000038  4b2d              LDR      r3,|L3.240|
00003a  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00003c  601a              STR      r2,[r3,#0]
;;;102        while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );	 //check data out?
00003e  bf00              NOP      
                  |L3.64|
000040  4a2b              LDR      r2,|L3.240|
000042  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000044  6812              LDR      r2,[r2,#0]
000046  07d2              LSLS     r2,r2,#31
000048  0fd2              LSRS     r2,r2,#31
00004a  2a01              CMP      r2,#1
00004c  d0f8              BEQ      |L3.64|
;;;103    
;;;104    	// Set CA MSB
;;;105    	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
00004e  4a28              LDR      r2,|L3.240|
000050  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000052  6892              LDR      r2,[r2,#8]
000054  0892              LSRS     r2,r2,#2
000056  0092              LSLS     r2,r2,#2
000058  4b25              LDR      r3,|L3.240|
00005a  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00005c  609a              STR      r2,[r3,#8]
;;;106    	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;	
00005e  4a24              LDR      r2,|L3.240|
000060  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000062  6892              LDR      r2,[r2,#8]
000064  0892              LSRS     r2,r2,#2
000066  0092              LSLS     r2,r2,#2
000068  1c52              ADDS     r2,r2,#1
00006a  4b21              LDR      r3,|L3.240|
00006c  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00006e  609a              STR      r2,[r3,#8]
;;;107    	 SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x10 |(CA>>4)&0xF;
000070  110a              ASRS     r2,r1,#4
000072  2310              MOVS     r3,#0x10
000074  431a              ORRS     r2,r2,r3
000076  4b1e              LDR      r3,|L3.240|
000078  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00007a  621a              STR      r2,[r3,#0x20]
;;;108    	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00007c  4a1c              LDR      r2,|L3.240|
00007e  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000080  6812              LDR      r2,[r2,#0]
000082  0852              LSRS     r2,r2,#1
000084  0052              LSLS     r2,r2,#1
000086  1c52              ADDS     r2,r2,#1
000088  4b19              LDR      r3,|L3.240|
00008a  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00008c  601a              STR      r2,[r3,#0]
;;;109        while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );	  //check data out?
00008e  bf00              NOP      
                  |L3.144|
000090  4a17              LDR      r2,|L3.240|
000092  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000094  6812              LDR      r2,[r2,#0]
000096  07d2              LSLS     r2,r2,#31
000098  0fd2              LSRS     r2,r2,#31
00009a  2a01              CMP      r2,#1
00009c  d0f8              BEQ      |L3.144|
;;;110    
;;;111    	// Set CA LSB
;;;112    	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
00009e  4a14              LDR      r2,|L3.240|
0000a0  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000a2  6892              LDR      r2,[r2,#8]
0000a4  0892              LSRS     r2,r2,#2
0000a6  0092              LSLS     r2,r2,#2
0000a8  4b11              LDR      r3,|L3.240|
0000aa  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000ac  609a              STR      r2,[r3,#8]
;;;113    	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;
0000ae  4a10              LDR      r2,|L3.240|
0000b0  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000b2  6892              LDR      r2,[r2,#8]
0000b4  0892              LSRS     r2,r2,#2
0000b6  0092              LSLS     r2,r2,#2
0000b8  1c52              ADDS     r2,r2,#1
0000ba  4b0d              LDR      r3,|L3.240|
0000bc  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000be  609a              STR      r2,[r3,#8]
;;;114    	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x00 | (CA & 0xF);		
0000c0  070a              LSLS     r2,r1,#28
0000c2  0f12              LSRS     r2,r2,#28
0000c4  4b0a              LDR      r3,|L3.240|
0000c6  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000c8  621a              STR      r2,[r3,#0x20]
;;;115    	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
0000ca  4a09              LDR      r2,|L3.240|
0000cc  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000ce  6812              LDR      r2,[r2,#0]
0000d0  0852              LSRS     r2,r2,#1
0000d2  0052              LSLS     r2,r2,#1
0000d4  1c52              ADDS     r2,r2,#1
0000d6  4b06              LDR      r3,|L3.240|
0000d8  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000da  601a              STR      r2,[r3,#0]
;;;116        while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );	  //check data out?
0000dc  bf00              NOP      
                  |L3.222|
0000de  4a04              LDR      r2,|L3.240|
0000e0  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000e2  6812              LDR      r2,[r2,#0]
0000e4  07d2              LSLS     r2,r2,#31
0000e6  0fd2              LSRS     r2,r2,#31
0000e8  2a01              CMP      r2,#1
0000ea  d0f8              BEQ      |L3.222|
;;;117    }
0000ec  4770              BX       lr
;;;118    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L3.240|
                          DCD      SPI_PORT

                          AREA ||i.Show_Word||, CODE, READONLY, ALIGN=2

                  Show_Word PROC
;;;126    
;;;127    void Show_Word(unsigned char x, unsigned char y,unsigned char ascii_word)
000000  b5fc              PUSH     {r2-r7,lr}
;;;128    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;129    int i=0,k=0;
000008  2400              MOVS     r4,#0
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;130    	unsigned char temp;	  
;;;131    	  k=(ascii_word-32)*16;	  
00000e  4638              MOV      r0,r7
000010  3820              SUBS     r0,r0,#0x20
000012  0100              LSLS     r0,r0,#4
000014  9001              STR      r0,[sp,#4]
;;;132    	  
;;;133    	  for(i=0;i<8;i++)
000016  bf00              NOP      
000018  e011              B        |L4.62|
                  |L4.26|
;;;134    	  {
;;;135    	  SetPACA((x*2),(129-(y*8)-i));
00001a  00f2              LSLS     r2,r6,#3
00001c  2381              MOVS     r3,#0x81
00001e  1a9a              SUBS     r2,r3,r2
000020  1b12              SUBS     r2,r2,r4
000022  b2d1              UXTB     r1,r2
000024  066a              LSLS     r2,r5,#25
000026  0e10              LSRS     r0,r2,#24
000028  f7fffffe          BL       SetPACA
;;;136    	  temp=Ascii[k+i];	 
00002c  9801              LDR      r0,[sp,#4]
00002e  1900              ADDS     r0,r0,r4
000030  4910              LDR      r1,|L4.116|
000032  5c08              LDRB     r0,[r1,r0]
000034  9000              STR      r0,[sp,#0]
;;;137          WriteData(temp);
000036  9800              LDR      r0,[sp,#0]
000038  f7fffffe          BL       WriteData
00003c  1c64              ADDS     r4,r4,#1              ;133
                  |L4.62|
00003e  2c08              CMP      r4,#8                 ;133
000040  dbeb              BLT      |L4.26|
;;;138    	  }
;;;139    
;;;140          for(i=0;i<8;i++)
000042  2400              MOVS     r4,#0
000044  e013              B        |L4.110|
                  |L4.70|
;;;141    	  {
;;;142    	  SetPACA((x*2)+1,(129-(y*8)-i));	 
000046  00f2              LSLS     r2,r6,#3
000048  2381              MOVS     r3,#0x81
00004a  1a9a              SUBS     r2,r3,r2
00004c  1b12              SUBS     r2,r2,r4
00004e  b2d1              UXTB     r1,r2
000050  006a              LSLS     r2,r5,#1
000052  1c52              ADDS     r2,r2,#1
000054  b2d0              UXTB     r0,r2
000056  f7fffffe          BL       SetPACA
;;;143          temp=Ascii[k+i+8];
00005a  9801              LDR      r0,[sp,#4]
00005c  1900              ADDS     r0,r0,r4
00005e  3008              ADDS     r0,r0,#8
000060  4904              LDR      r1,|L4.116|
000062  5c08              LDRB     r0,[r1,r0]
000064  9000              STR      r0,[sp,#0]
;;;144    	  WriteData(temp);
000066  9800              LDR      r0,[sp,#0]
000068  f7fffffe          BL       WriteData
00006c  1c64              ADDS     r4,r4,#1              ;140
                  |L4.110|
00006e  2c08              CMP      r4,#8                 ;140
000070  dbe9              BLT      |L4.70|
;;;145    	  }
;;;146    }
000072  bdfc              POP      {r2-r7,pc}
;;;147    
                          ENDP

                  |L4.116|
                          DCD      Ascii

                          AREA ||i.SysTimerDelay||, CODE, READONLY, ALIGN=2

                  SysTimerDelay PROC
;;;10     
;;;11     void SysTimerDelay(uint32_t us)
000000  2116              MOVS     r1,#0x16
;;;12     {
;;;13         SysTick->LOAD = us * 22; /* Assume the internal 22MHz RC used */
000002  4341              MULS     r1,r0,r1
000004  4a06              LDR      r2,|L5.32|
000006  6151              STR      r1,[r2,#0x14]
;;;14         SysTick->VAL   =  (0x00);
000008  2100              MOVS     r1,#0
00000a  6191              STR      r1,[r2,#0x18]
;;;15         SysTick->CTRL = (1 << SysTick_CTRL_CLKSOURCE_Pos) | (1<<SysTick_CTRL_ENABLE_Pos);
00000c  2105              MOVS     r1,#5
00000e  6111              STR      r1,[r2,#0x10]
;;;16     
;;;17         /* Waiting for down-count to zero */
;;;18         while((SysTick->CTRL & (1 << 16)) == 0);
000010  bf00              NOP      
                  |L5.18|
000012  4903              LDR      r1,|L5.32|
000014  6909              LDR      r1,[r1,#0x10]
000016  2201              MOVS     r2,#1
000018  0412              LSLS     r2,r2,#16
00001a  4211              TST      r1,r2
00001c  d0f9              BEQ      |L5.18|
;;;19     }
00001e  4770              BX       lr
;;;20     
                          ENDP

                  |L5.32|
                          DCD      0xe000e000

                          AREA ||i.WriteData||, CODE, READONLY, ALIGN=2

                  WriteData PROC
;;;81     //*******************************
;;;82     void WriteData(unsigned char data)
000000  4914              LDR      r1,|L6.84|
;;;83     {
;;;84     	// Write Data
;;;85     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
000002  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000004  6889              LDR      r1,[r1,#8]
000006  0889              LSRS     r1,r1,#2
000008  0089              LSLS     r1,r1,#2
00000a  4a12              LDR      r2,|L6.84|
00000c  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
00000e  6091              STR      r1,[r2,#8]
;;;86     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;	   //chip select
000010  4910              LDR      r1,|L6.84|
000012  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000014  6889              LDR      r1,[r1,#8]
000016  0889              LSRS     r1,r1,#2
000018  0089              LSLS     r1,r1,#2
00001a  1c49              ADDS     r1,r1,#1
00001c  4a0d              LDR      r2,|L6.84|
00001e  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000020  6091              STR      r1,[r2,#8]
;;;87     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x100 | data;    	//write data
000022  21ff              MOVS     r1,#0xff
000024  3101              ADDS     r1,#1
000026  4301              ORRS     r1,r1,r0
000028  4a0a              LDR      r2,|L6.84|
00002a  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
00002c  6211              STR      r1,[r2,#0x20]
;;;88     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00002e  4909              LDR      r1,|L6.84|
000030  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000032  6809              LDR      r1,[r1,#0]
000034  0849              LSRS     r1,r1,#1
000036  0049              LSLS     r1,r1,#1
000038  1c49              ADDS     r1,r1,#1
00003a  4a06              LDR      r2,|L6.84|
00003c  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
00003e  6011              STR      r1,[r2,#0]
;;;89         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 ); //check data out?
000040  bf00              NOP      
                  |L6.66|
000042  4904              LDR      r1,|L6.84|
000044  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000046  6809              LDR      r1,[r1,#0]
000048  07c9              LSLS     r1,r1,#31
00004a  0fc9              LSRS     r1,r1,#31
00004c  2901              CMP      r1,#1
00004e  d0f8              BEQ      |L6.66|
;;;90     }
000050  4770              BX       lr
;;;91     
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      SPI_PORT

                          AREA ||i.clr_all_pannal||, CODE, READONLY, ALIGN=1

                  clr_all_pannal PROC
;;;164    
;;;165    void clr_all_pannal(void)
000000  b510              PUSH     {r4,lr}
;;;166    {
;;;167     int i=0;
000002  2400              MOVS     r4,#0
;;;168    	/*CLEAR ALL PANNAL*/
;;;169    	SetPACA(0x0, 0x0);
000004  2100              MOVS     r1,#0
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       SetPACA
;;;170    
;;;171    	for (i = 0; i < 132 *8; i++)
00000c  bf00              NOP      
00000e  e003              B        |L7.24|
                  |L7.16|
;;;172    	{
;;;173    		WriteData(0x00);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       WriteData
000016  1c64              ADDS     r4,r4,#1              ;171
                  |L7.24|
000018  2021              MOVS     r0,#0x21              ;171
00001a  0140              LSLS     r0,r0,#5              ;171
00001c  4284              CMP      r4,r0                 ;171
00001e  dbf7              BLT      |L7.16|
;;;174    	}
;;;175    	WriteData(0x0f);
000020  200f              MOVS     r0,#0xf
000022  f7fffffe          BL       WriteData
;;;176    }
000026  bd10              POP      {r4,pc}
;;;177    
                          ENDP


                          AREA ||i.print_lcd||, CODE, READONLY, ALIGN=1

                  print_lcd PROC
;;;150    
;;;151    void print_lcd(unsigned char line, char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;152    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;153    int i=0; 
000006  2500              MOVS     r5,#0
;;;154      do{   
000008  bf00              NOP      
                  |L8.10|
;;;155        Show_Word(line,i,*str++); 
00000a  7822              LDRB     r2,[r4,#0]
00000c  1c64              ADDS     r4,r4,#1
00000e  b2e9              UXTB     r1,r5
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       Show_Word
;;;156      	i++;
000016  1c6d              ADDS     r5,r5,#1
;;;157      	if(i>15)
000018  2d0f              CMP      r5,#0xf
00001a  dd00              BLE      |L8.30|
;;;158    	  break;
00001c  e002              B        |L8.36|
                  |L8.30|
;;;159        }
;;;160       while(*str!='\0');
00001e  7820              LDRB     r0,[r4,#0]
000020  2800              CMP      r0,#0
000022  d1f2              BNE      |L8.10|
                  |L8.36|
000024  bf00              NOP                            ;158
;;;161    }
000026  bd70              POP      {r4-r6,pc}
;;;162    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  SPI_PORT
                          DCD      0x40030000
                          DCD      0x40134000
                          DCD      0x40130000
                          DCD      0x40134000
