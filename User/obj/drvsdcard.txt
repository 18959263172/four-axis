; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvsdcard.o --depend=.\obj\drvsdcard.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvsdcard.crf ..\BSP_Lib\Src\NUC1xx-LB_002\DrvSDCard.c]
                          THUMB

                          AREA ||i.DrvSDCARD_Close||, CODE, READONLY, ALIGN=1

                  DrvSDCARD_Close PROC
;;;624    /*---------------------------------------------------------------------------------------------------------*/
;;;625    void DrvSDCARD_Close(void)
000000  b510              PUSH     {r4,lr}
;;;626    {
;;;627    	DrvSPI_Close(eDRVSPI_PORT1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       DrvSPI_Close
;;;628    }
000008  bd10              POP      {r4,pc}
;;;629    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.DrvSDCARD_GetCardSize||, CODE, READONLY, ALIGN=2

                  DrvSDCARD_GetCardSize PROC
;;;642    /*---------------------------------------------------------------------------------------------------------*/
;;;643    uint32_t DrvSDCARD_GetCardSize(uint32_t* pu32TotSecCnt)
000000  4601              MOV      r1,r0
;;;644    {
;;;645    	if (LogicSector == 0)
000002  4805              LDR      r0,|L2.24|
000004  6800              LDR      r0,[r0,#0]  ; LogicSector
000006  2800              CMP      r0,#0
000008  d100              BNE      |L2.12|
                  |L2.10|
;;;646    		return FALSE;
;;;647    	else 
;;;648    		*pu32TotSecCnt = LogicSector;
;;;649    
;;;650    	return TRUE;
;;;651    }
00000a  4770              BX       lr
                  |L2.12|
00000c  4802              LDR      r0,|L2.24|
00000e  6800              LDR      r0,[r0,#0]            ;648  ; LogicSector
000010  6008              STR      r0,[r1,#0]            ;648
000012  2001              MOVS     r0,#1                 ;650
000014  e7f9              B        |L2.10|
;;;652    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      LogicSector

                          AREA ||i.DrvSDCARD_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvSDCARD_GetVersion PROC
;;;683    /*---------------------------------------------------------------------------------------------------------*/
;;;684    uint32_t DrvSDCARD_GetVersion(void)
000000  4800              LDR      r0,|L3.4|
;;;685    {
;;;686    	return (DRVSDCARD_MAJOR_NUM << 16) | (DRVSDCARD_MINOR_NUM << 8) | DRVSDCARD_BUILD_NUM;
;;;687    }
000002  4770              BX       lr
;;;688    
                          ENDP

                  |L3.4|
                          DCD      0x00010001

                          AREA ||i.DrvSDCARD_Open||, CODE, READONLY, ALIGN=2

                  DrvSDCARD_Open PROC
;;;586    /*---------------------------------------------------------------------------------------------------------*/
;;;587    uint32_t DrvSDCARD_Open(void)
000000  b508              PUSH     {r3,lr}
;;;588    {
;;;589    
;;;590        DrvSYS_SetIPClock(E_SYS_SPI1_CLK,1);
000002  2101              MOVS     r1,#1
000004  200d              MOVS     r0,#0xd
000006  f7fffffe          BL       DrvSYS_SetIPClock
;;;591        DrvGPIO_InitFunction(E_FUNC_SPI1); // enable SPI funztion and pin 
00000a  2009              MOVS     r0,#9
00000c  f7fffffe          BL       DrvGPIO_InitFunction
;;;592        
;;;593    	DrvSPI_Open(eDRVSPI_PORT1,eDRVSPI_MASTER,eDRVSPI_TYPE1,8, FALSE);
000010  2300              MOVS     r3,#0
000012  9300              STR      r3,[sp,#0]
000014  2308              MOVS     r3,#8
000016  2201              MOVS     r2,#1
000018  2100              MOVS     r1,#0
00001a  4610              MOV      r0,r2
00001c  f7fffffe          BL       DrvSPI_Open
;;;594    	DrvSPI_DisableAutoSS(eDRVSPI_PORT1);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       DrvSPI_DisableAutoSS
;;;595    	DrvSPI_SetSlaveSelectActiveLevel(eDRVSPI_PORT1, eDRVSPI_ACTIVE_LOW_FALLING);
000026  2100              MOVS     r1,#0
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       DrvSPI_SetSlaveSelectActiveLevel
;;;596    	DrvSPI_SetEndian(eDRVSPI_PORT1, eDRVSPI_MSB_FIRST);
00002e  2101              MOVS     r1,#1
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       DrvSPI_SetEndian
;;;597    	DrvSPI_SetClockFreq(eDRVSPI_PORT1,300000,300000);
000036  4a0c              LDR      r2,|L4.104|
000038  4611              MOV      r1,r2
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       DrvSPI_SetClockFreq
;;;598        pfnSDCARD_Delay(0x20000);
000040  2001              MOVS     r0,#1
000042  0440              LSLS     r0,r0,#17
000044  f7fffffe          BL       pfnSDCARD_Delay
;;;599        MMC_FLASH_Init();
000048  f7fffffe          BL       MMC_FLASH_Init
;;;600    	DrvSPI_SetClockFreq(eDRVSPI_PORT1,12000000,12000000);
00004c  4a07              LDR      r2,|L4.108|
00004e  4611              MOV      r1,r2
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       DrvSPI_SetClockFreq
;;;601    
;;;602    	if (Is_Initialized)
000056  4806              LDR      r0,|L4.112|
000058  7800              LDRB     r0,[r0,#0]  ; Is_Initialized
00005a  2800              CMP      r0,#0
00005c  d001              BEQ      |L4.98|
;;;603    	{
;;;604    		DBG_PRINTF("SDCARD INIT OK\n\n");
;;;605    		return E_SUCCESS;
00005e  2000              MOVS     r0,#0
                  |L4.96|
;;;606    	}
;;;607    	else
;;;608    		return E_DRVSDCARD_INITIAL_FAIL;
;;;609    }
000060  bd08              POP      {r3,pc}
                  |L4.98|
000062  4804              LDR      r0,|L4.116|
000064  e7fc              B        |L4.96|
;;;610    
                          ENDP

000066  0000              DCW      0x0000
                  |L4.104|
                          DCD      0x000493e0
                  |L4.108|
                          DCD      0x00b71b00
                  |L4.112|
                          DCD      Is_Initialized
                  |L4.116|
                          DCD      0xffff9301

                          AREA ||i.GenerateCRC||, CODE, READONLY, ALIGN=1

                  GenerateCRC PROC
;;;150    /*---------------------------------------------------------------------------------------------------------*/
;;;151    static uint32_t GenerateCRC(uint32_t u32Data, uint32_t u32GenPoly, uint32_t u32Accum)
000000  b530              PUSH     {r4,r5,lr}
;;;152    {
000002  4603              MOV      r3,r0
;;;153    	volatile uint8_t i;
;;;154    
;;;155    	u32Data <<= 8;
000004  021b              LSLS     r3,r3,#8
;;;156    	for (i=8; i>0; i--)
000006  2408              MOVS     r4,#8
000008  e00d              B        |L5.38|
                  |L5.10|
;;;157    	{
;;;158    		if ((u32Data ^ u32Accum) & 0x8000)
00000a  4618              MOV      r0,r3
00000c  4050              EORS     r0,r0,r2
00000e  2501              MOVS     r5,#1
000010  03ed              LSLS     r5,r5,#15
000012  4228              TST      r0,r5
000014  d003              BEQ      |L5.30|
;;;159    			u32Accum = (u32Accum << 1) ^ u32GenPoly;
000016  0050              LSLS     r0,r2,#1
000018  4048              EORS     r0,r0,r1
00001a  4602              MOV      r2,r0
00001c  e000              B        |L5.32|
                  |L5.30|
;;;160    		else
;;;161    			u32Accum <<= 1;
00001e  0052              LSLS     r2,r2,#1
                  |L5.32|
;;;162    		u32Data <<= 1;
000020  005b              LSLS     r3,r3,#1
000022  1e60              SUBS     r0,r4,#1              ;156
000024  b2c4              UXTB     r4,r0                 ;156
                  |L5.38|
000026  2c00              CMP      r4,#0                 ;156
000028  dcef              BGT      |L5.10|
;;;163    	}
;;;164    	return u32Accum;
00002a  4610              MOV      r0,r2
;;;165    }  
00002c  bd30              POP      {r4,r5,pc}
;;;166    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.GetLogicSector||, CODE, READONLY, ALIGN=2

                  GetLogicSector PROC
;;;664    /*---------------------------------------------------------------------------------------------------------*/
;;;665    uint32_t GetLogicSector(void)
000000  4801              LDR      r0,|L6.8|
;;;666    {
;;;667    	return LogicSector;
000002  6800              LDR      r0,[r0,#0]  ; LogicSector
;;;668    }
000004  4770              BX       lr
;;;669    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      LogicSector

                          AREA ||i.MMC_Command_Exec||, CODE, READONLY, ALIGN=2

                  MMC_Command_Exec PROC
;;;226    /*---------------------------------------------------------------------------------------------------------*/
;;;227    uint32_t MMC_Command_Exec (uint8_t nCmd, uint32_t nArg,uint8_t *pchar, uint32_t *response)
000000  b5ff              PUSH     {r0-r7,lr}
;;;228    {
000002  b087              SUB      sp,sp,#0x1c
000004  4616              MOV      r6,r2
000006  461f              MOV      r7,r3
;;;229      	uint8_t	loopguard;
;;;230      	COMMAND current_command;      			// Local space for the command table 
;;;231      	UINT32	long_arg;               		// Local space for argument
;;;232      	static uint32_t current_blklen = 512;
;;;233      	uint32_t old_blklen = 512;     			
000008  2001              MOVS     r0,#1
00000a  0240              LSLS     r0,r0,#9
00000c  9003              STR      r0,[sp,#0xc]
;;;234      	int32_t counter = 0;     				// Byte counter for multi-byte fields;
00000e  2400              MOVS     r4,#0
;;;235      	UINT16 card_response;           			// Variable for storing card response;
;;;236      	uint8_t data_resp;      				// Variable for storing data response;
;;;237      	UINT16 dummy_CRC;      					// Dummy variable for storing CRC field;
;;;238    
;;;239      	card_response.i = 0;						  
000010  2100              MOVS     r1,#0
000012  9102              STR      r1,[sp,#8]
;;;240                                         
;;;241      	current_command = command_list[nCmd];// Retrieve desired command table entry
000014  2206              MOVS     r2,#6
000016  9807              LDR      r0,[sp,#0x1c]
000018  4350              MULS     r0,r2,r0
00001a  4afe              LDR      r2,|L7.1044|
00001c  1881              ADDS     r1,r0,r2
00001e  2206              MOVS     r2,#6
000020  a805              ADD      r0,sp,#0x14
000022  f7fffffe          BL       __aeabi_memcpy
;;;242    											// from code space;
;;;243    	if(current_command.command_byte & 0x80)	// Detect ACMD
000026  4668              MOV      r0,sp
000028  7d00              LDRB     r0,[r0,#0x14]
00002a  2180              MOVS     r1,#0x80
00002c  4208              TST      r0,r1
00002e  d009              BEQ      |L7.68|
;;;244    	{
;;;245    		if(MMC_Command_Exec(APP_CMD,EMPTY,EMPTY,response)==FALSE)//Send APP_CMD
000030  463b              MOV      r3,r7
000032  2200              MOVS     r2,#0
000034  4611              MOV      r1,r2
000036  2019              MOVS     r0,#0x19
000038  f7fffffe          BL       MMC_Command_Exec
00003c  2800              CMP      r0,#0
00003e  d101              BNE      |L7.68|
                  |L7.64|
;;;246    			return FALSE;
;;;247    	}
;;;248    
;;;249    
;;;250      	DrvSPI_SetSS(eDRVSPI_PORT1, eDRVSPI_SS0);	// CS = 0
;;;251      	SingleWrite(0xFF);
;;;252      	SingleWrite((current_command.command_byte | 0x40)&0x7f);
;;;253    	DBG_PRINTF("CMD:%d,",current_command.command_byte&0x7f);
;;;254    
;;;255      	long_arg.l = nArg;              	// Make argument byte addressable;
;;;256                                          		// If current command changes block
;;;257                                          		// length, update block length variable
;;;258                                          		// to keep track;
;;;259    		                                    // Command byte = 16 means that a set
;;;260    		                                    // block length command is taking place
;;;261    		                                    // and block length variable must be
;;;262    		                                    // set;
;;;263      	if(current_command.command_byte == 16) 
;;;264    	{current_blklen = nArg;} 
;;;265                                           // Command byte = 9 or 10 means that a
;;;266                                           // 16-byte register value is being read
;;;267                                           // from the card, block length must be
;;;268                                           // set to 16 bytes, and restored at the
;;;269                                           // end of the transfer;
;;;270      	if((current_command.command_byte == 9)||(current_command.command_byte == 10)) 
;;;271      	{
;;;272        	old_blklen = current_blklen;     // Command is a GET_CSD or GET_CID,
;;;273        	current_blklen = 16;             // set block length to 16-bytes;
;;;274      	}
;;;275                                           // If an argument is required, transmit
;;;276                                           // one, otherwise transmit 4 bytes of
;;;277                                           // 0x00;
;;;278      	if(current_command.arg_required == YES)
;;;279      	{
;;;280    		dummy_CRC.i = GenerateCRC((current_command.command_byte | 0x40), 0x1200, 0);
;;;281        	for(counter=3;counter>=0;counter--) 
;;;282    		{
;;;283    			SingleWrite(long_arg.b[counter]);
;;;284    			dummy_CRC.i = GenerateCRC(long_arg.b[counter], 0x1200, dummy_CRC.i);
;;;285    
;;;286    		}
;;;287    		dummy_CRC.i = (dummy_CRC.i >> 8)| 0x01;
;;;288    		SingleWrite(dummy_CRC.b[0]);
;;;289      	} else 
;;;290    	{
;;;291        	counter = 0;
;;;292        	while(counter <= 3) 
;;;293    		{
;;;294        		SingleWrite(0x00);
;;;295    			counter++;
;;;296    		}
;;;297    		SingleWrite(current_command.CRC);
;;;298      	}
;;;299    	
;;;300    											// The command table entry will indicate
;;;301                                           		// what type of response to expect for
;;;302                                           		// a given command;  The following 
;;;303                                           		// conditional handles the MMC response;
;;;304    	if(current_command.response == R1)  	// Read the R1 response from the card;
;;;305    	{
;;;306      		loopguard=0;
;;;307        	do{
;;;308    			card_response.b[0] = SingleWrite(0xFF);
;;;309          		if(!++loopguard) break;
;;;310    			//pfnSDCARD_Delay(20);
;;;311        	}while((card_response.b[0] & BUSY_BIT));
;;;312    		DBG_PRINTF("R1:0x%x, counter:%d\n",card_response.b[0],loopguard);
;;;313    		if(!loopguard){BACK_FROM_ERROR;}
;;;314    		*response=card_response.b[0];
;;;315        }                                     
;;;316        else if(current_command.response == R1b)// Read the R1b response; 
;;;317    	{
;;;318        	loopguard = 0;	
;;;319          	do {
;;;320    			card_response.b[0] =  SingleWrite(0xFF);
;;;321    			if(!++loopguard) break;
;;;322    			//pfnSDCARD_Delay(20);
;;;323          	}while((card_response.b[0] & BUSY_BIT));
;;;324    		while(SingleWrite(0xFF) == 0x00);
;;;325    	}
;;;326    	else if(current_command.response == R2) 
;;;327    	{
;;;328        	loopguard=0;
;;;329          	do{
;;;330    		    card_response.b[0] = SingleWrite(0xFF);
;;;331            	if(!++loopguard) break;
;;;332    			//pfnSDCARD_Delay(20);
;;;333          	}while((card_response.b[0] & BUSY_BIT));
;;;334    	    card_response.b[1] = SingleWrite(0xFF);
;;;335    		DBG_PRINTF("R2:0x%x, counter:%d\n",card_response.i,loopguard);
;;;336    		if(!loopguard) { BACK_FROM_ERROR; }
;;;337    		*response=card_response.i;		
;;;338        }else if(current_command.response == R3)  
;;;339    	{                               // Read R3 response;
;;;340        	loopguard=0;
;;;341          	do {
;;;342            	card_response.b[0] = SingleWrite(0xFF);
;;;343    		    if(!++loopguard) break;
;;;344    			//pfnSDCARD_Delay(20);
;;;345          	} while((card_response.b[0] & BUSY_BIT));
;;;346      		DBG_PRINTF("R3:0x%x, counter:%d\n",card_response.b[0],loopguard);
;;;347      	  	if(!loopguard) { BACK_FROM_ERROR; }
;;;348          	counter = 0;
;;;349          	while(counter <= 3)              // Read next three bytes and store them
;;;350          	{                                // in local memory;  These bytes make up
;;;351            	counter++;                    // the Operating Conditions Register
;;;352    	      	*pchar++ = SingleWrite(0xFF);
;;;353    	    }
;;;354    		*response=card_response.b[0];
;;;355        }else  
;;;356    	{                               // Read R7 response;
;;;357        	loopguard=0;
;;;358          	do {
;;;359            	card_response.b[0] = SingleWrite(0xFF);
;;;360    		    if(!++loopguard) break;
;;;361    			//pfnSDCARD_Delay(20);
;;;362          	} while((card_response.b[0] & BUSY_BIT));
;;;363      		DBG_PRINTF("R7:0x%x, counter:%d\n",card_response.b[0],loopguard);
;;;364      	  	if(!loopguard) { BACK_FROM_ERROR; }
;;;365          	counter = 0;
;;;366          	while(counter <= 3)              // Read next three bytes and store them
;;;367          	{                                // in local memory;  These bytes make up
;;;368            	counter++;                    // the Operating Conditions Register
;;;369    	      	*pchar++ = SingleWrite(0xFF);
;;;370    	    }
;;;371    		*response=card_response.b[0];
;;;372        }
;;;373    
;;;374    
;;;375    	switch(current_command.trans_type)  // This conditional handles all data 
;;;376        {                                   // operations;  The command entry
;;;377                                           // determines what type, if any, data
;;;378                                           // operations need to occur;
;;;379    		case RD:                         // Read data from the MMC;
;;;380      			loopguard = 0;
;;;381    
;;;382    	     	while(SingleWrite(0xFF)!=START_SBR) 
;;;383    			{
;;;384        	  		if(!++loopguard) {BACK_FROM_ERROR;}
;;;385    	      	}		
;;;386              	counter = 0;                  	// Reset byte counter;
;;;387                                           		// Read <current_blklen> bytes;
;;;388    			if(pchar)
;;;389    			{
;;;390    				for (counter=0; counter<current_blklen; counter++)
;;;391    				{ 
;;;392    					SPI1->TX[0] = 0xFF;
;;;393    					SPI1->CNTRL.GO_BUSY = 1;
;;;394    					while(SPI1->CNTRL.GO_BUSY);
;;;395    					*(pchar+counter)=SPI1->RX[0];										
;;;396    				}
;;;397    			}else
;;;398    			{
;;;399    				for (counter=0; counter<current_blklen; counter++)
;;;400    				{ 
;;;401    					SPI1->TX[0] = 0xFF;
;;;402    					SPI1->CNTRL.GO_BUSY = 1;
;;;403    					while(SPI1->CNTRL.GO_BUSY);									
;;;404    				}
;;;405    			}
;;;406               	dummy_CRC.b[1] = SingleWrite(0xFF);	// After all data is read, read the two
;;;407               	dummy_CRC.b[0] = SingleWrite(0xFF);	// CRC bytes;  These bytes are not used
;;;408                                   					// in this mode, but the placeholders 
;;;409                       								// must be read anyway;			      
;;;410              	break;
;;;411    
;;;412    		case WR: 			
;;;413    			SingleWrite(0xFF);
;;;414    			SingleWrite(START_SBW);
;;;415              
;;;416    			for (counter=0; counter<current_blklen; counter++)
;;;417    			{
;;;418    				dummy_CRC.i = GenerateCRC(*(pchar+counter), 0x1021, dummy_CRC.i);
;;;419    
;;;420    				SPI1->TX[0] = *(pchar+counter);
;;;421    				SPI1->CNTRL.GO_BUSY = 1;
;;;422    				while(SPI1->CNTRL.GO_BUSY);
;;;423    
;;;424    				//SingleWrite(*(pchar+counter));
;;;425    			}
;;;426    			SingleWrite(dummy_CRC.b[1]);
;;;427    			SingleWrite(dummy_CRC.b[0]);
;;;428    	
;;;429            	loopguard = 0;
;;;430    	        do                            // Read Data Response from card;
;;;431    	        {  
;;;432    	          	data_resp = SingleWrite(0xFF);
;;;433    	          	if(!++loopguard) break;
;;;434    	        }while((data_resp & DATA_RESP_MASK) != 0x01);	// When bit 0 of the MMC response
;;;435    	                                       					// is clear, a valid data response
;;;436    	                                       					// has been received;
;;;437    	        
;;;438    	        if(!loopguard) { BACK_FROM_ERROR; }
;;;439    
;;;440    
;;;441    	        while(SingleWrite(0xFF)!=0xFF);//Wait for Busy
;;;442    			SingleWrite(0xFF);	        
;;;443    	        break;
;;;444    		default: break;
;;;445    	}
;;;446        DrvSPI_ClrSS(eDRVSPI_PORT1, eDRVSPI_SS0);	// CS = 1
;;;447        if((current_command.command_byte == 9)||(current_command.command_byte == 10)) {
;;;448        	current_blklen = old_blklen;    
;;;449    	}
;;;450        return TRUE;
;;;451    }
000040  b00b              ADD      sp,sp,#0x2c
000042  bdf0              POP      {r4-r7,pc}
                  |L7.68|
000044  2101              MOVS     r1,#1                 ;250
000046  4608              MOV      r0,r1                 ;250
000048  f7fffffe          BL       DrvSPI_SetSS
00004c  20ff              MOVS     r0,#0xff              ;251
00004e  f7fffffe          BL       SingleWrite
000052  4669              MOV      r1,sp                 ;252
000054  7d09              LDRB     r1,[r1,#0x14]         ;252
000056  2240              MOVS     r2,#0x40              ;252
000058  4311              ORRS     r1,r1,r2              ;252
00005a  0648              LSLS     r0,r1,#25             ;252
00005c  0e40              LSRS     r0,r0,#25             ;252
00005e  f7fffffe          BL       SingleWrite
000062  9808              LDR      r0,[sp,#0x20]         ;255
000064  9004              STR      r0,[sp,#0x10]         ;255
000066  4669              MOV      r1,sp                 ;263
000068  7d08              LDRB     r0,[r1,#0x14]         ;263
00006a  2810              CMP      r0,#0x10              ;263
00006c  d102              BNE      |L7.116|
00006e  49ea              LDR      r1,|L7.1048|
000070  9808              LDR      r0,[sp,#0x20]         ;264
000072  6008              STR      r0,[r1,#0]            ;264  ; current_blklen
                  |L7.116|
000074  4668              MOV      r0,sp                 ;270
000076  7d00              LDRB     r0,[r0,#0x14]         ;270
000078  2809              CMP      r0,#9                 ;270
00007a  d003              BEQ      |L7.132|
00007c  4668              MOV      r0,sp                 ;270
00007e  7d00              LDRB     r0,[r0,#0x14]         ;270
000080  280a              CMP      r0,#0xa               ;270
000082  d105              BNE      |L7.144|
                  |L7.132|
000084  48e4              LDR      r0,|L7.1048|
000086  6800              LDR      r0,[r0,#0]            ;272  ; current_blklen
000088  9003              STR      r0,[sp,#0xc]          ;272
00008a  2010              MOVS     r0,#0x10              ;273
00008c  49e2              LDR      r1,|L7.1048|
00008e  6008              STR      r0,[r1,#0]            ;273  ; current_blklen
                  |L7.144|
000090  4668              MOV      r0,sp                 ;278
000092  7d40              LDRB     r0,[r0,#0x15]         ;278
000094  2801              CMP      r0,#1                 ;278
000096  d129              BNE      |L7.236|
000098  4669              MOV      r1,sp                 ;280
00009a  7d09              LDRB     r1,[r1,#0x14]         ;280
00009c  2240              MOVS     r2,#0x40              ;280
00009e  4311              ORRS     r1,r1,r2              ;280
0000a0  4608              MOV      r0,r1                 ;280
0000a2  2200              MOVS     r2,#0                 ;280
0000a4  2109              MOVS     r1,#9                 ;280
0000a6  0249              LSLS     r1,r1,#9              ;280
0000a8  f7fffffe          BL       GenerateCRC
0000ac  b280              UXTH     r0,r0                 ;280
0000ae  9000              STR      r0,[sp,#0]            ;280
0000b0  2403              MOVS     r4,#3                 ;281
0000b2  e00e              B        |L7.210|
                  |L7.180|
0000b4  a904              ADD      r1,sp,#0x10           ;283
0000b6  5d08              LDRB     r0,[r1,r4]            ;283
0000b8  f7fffffe          BL       SingleWrite
0000bc  4669              MOV      r1,sp                 ;284
0000be  880a              LDRH     r2,[r1,#0]            ;284
0000c0  a904              ADD      r1,sp,#0x10           ;284
0000c2  5d08              LDRB     r0,[r1,r4]            ;284
0000c4  2109              MOVS     r1,#9                 ;284
0000c6  0249              LSLS     r1,r1,#9              ;284
0000c8  f7fffffe          BL       GenerateCRC
0000cc  b280              UXTH     r0,r0                 ;284
0000ce  9000              STR      r0,[sp,#0]            ;284
0000d0  1e64              SUBS     r4,r4,#1              ;281
                  |L7.210|
0000d2  2c00              CMP      r4,#0                 ;281
0000d4  daee              BGE      |L7.180|
0000d6  4668              MOV      r0,sp                 ;287
0000d8  8800              LDRH     r0,[r0,#0]            ;287
0000da  1200              ASRS     r0,r0,#8              ;287
0000dc  2101              MOVS     r1,#1                 ;287
0000de  4301              ORRS     r1,r1,r0              ;287
0000e0  9100              STR      r1,[sp,#0]            ;287
0000e2  4669              MOV      r1,sp                 ;288
0000e4  7808              LDRB     r0,[r1,#0]            ;288
0000e6  f7fffffe          BL       SingleWrite
0000ea  e00b              B        |L7.260|
                  |L7.236|
0000ec  2400              MOVS     r4,#0                 ;291
0000ee  e003              B        |L7.248|
                  |L7.240|
0000f0  2000              MOVS     r0,#0                 ;294
0000f2  f7fffffe          BL       SingleWrite
0000f6  1c64              ADDS     r4,r4,#1              ;295
                  |L7.248|
0000f8  2c03              CMP      r4,#3                 ;292
0000fa  ddf9              BLE      |L7.240|
0000fc  4669              MOV      r1,sp                 ;297
0000fe  7d88              LDRB     r0,[r1,#0x16]         ;297
000100  f7fffffe          BL       SingleWrite
                  |L7.260|
000104  4668              MOV      r0,sp                 ;304
000106  7e00              LDRB     r0,[r0,#0x18]         ;304
000108  2800              CMP      r0,#0                 ;304
00010a  d120              BNE      |L7.334|
00010c  2500              MOVS     r5,#0                 ;306
00010e  bf00              NOP                            ;307
                  |L7.272|
000110  20ff              MOVS     r0,#0xff              ;308
000112  f7fffffe          BL       SingleWrite
000116  4669              MOV      r1,sp                 ;308
000118  7208              STRB     r0,[r1,#8]            ;308
00011a  1c68              ADDS     r0,r5,#1              ;309
00011c  b2c0              UXTB     r0,r0                 ;309
00011e  0005              MOVS     r5,r0                 ;309
000120  d100              BNE      |L7.292|
000122  e004              B        |L7.302|
                  |L7.292|
000124  4668              MOV      r0,sp                 ;311
000126  7a00              LDRB     r0,[r0,#8]            ;311
000128  2180              MOVS     r1,#0x80              ;311
00012a  4208              TST      r0,r1                 ;311
00012c  d1f0              BNE      |L7.272|
                  |L7.302|
00012e  bf00              NOP                            ;309
000130  2d00              CMP      r5,#0                 ;313
000132  d108              BNE      |L7.326|
000134  20ff              MOVS     r0,#0xff              ;313
000136  f7fffffe          BL       SingleWrite
00013a  2101              MOVS     r1,#1                 ;313
00013c  4608              MOV      r0,r1                 ;313
00013e  f7fffffe          BL       DrvSPI_ClrSS
000142  2000              MOVS     r0,#0                 ;313
000144  e77c              B        |L7.64|
                  |L7.326|
000146  4668              MOV      r0,sp                 ;314
000148  7a00              LDRB     r0,[r0,#8]            ;314
00014a  6038              STR      r0,[r7,#0]            ;314
00014c  e09f              B        |L7.654|
                  |L7.334|
00014e  4668              MOV      r0,sp                 ;316
000150  7e00              LDRB     r0,[r0,#0x18]         ;316
000152  2801              CMP      r0,#1                 ;316
000154  d118              BNE      |L7.392|
000156  2500              MOVS     r5,#0                 ;318
000158  bf00              NOP                            ;319
                  |L7.346|
00015a  20ff              MOVS     r0,#0xff              ;320
00015c  f7fffffe          BL       SingleWrite
000160  4669              MOV      r1,sp                 ;320
000162  7208              STRB     r0,[r1,#8]            ;320
000164  1c68              ADDS     r0,r5,#1              ;321
000166  b2c0              UXTB     r0,r0                 ;321
000168  0005              MOVS     r5,r0                 ;321
00016a  d100              BNE      |L7.366|
00016c  e004              B        |L7.376|
                  |L7.366|
00016e  4668              MOV      r0,sp                 ;323
000170  7a00              LDRB     r0,[r0,#8]            ;323
000172  2180              MOVS     r1,#0x80              ;323
000174  4208              TST      r0,r1                 ;323
000176  d1f0              BNE      |L7.346|
                  |L7.376|
000178  bf00              NOP                            ;321
00017a  bf00              NOP                            ;324
                  |L7.380|
00017c  20ff              MOVS     r0,#0xff              ;324
00017e  f7fffffe          BL       SingleWrite
000182  2800              CMP      r0,#0                 ;324
000184  d0fa              BEQ      |L7.380|
000186  e082              B        |L7.654|
                  |L7.392|
000188  4668              MOV      r0,sp                 ;326
00018a  7e00              LDRB     r0,[r0,#0x18]         ;326
00018c  2802              CMP      r0,#2                 ;326
00018e  d125              BNE      |L7.476|
000190  2500              MOVS     r5,#0                 ;328
000192  bf00              NOP                            ;329
                  |L7.404|
000194  20ff              MOVS     r0,#0xff              ;330
000196  f7fffffe          BL       SingleWrite
00019a  4669              MOV      r1,sp                 ;330
00019c  7208              STRB     r0,[r1,#8]            ;330
00019e  1c68              ADDS     r0,r5,#1              ;331
0001a0  b2c0              UXTB     r0,r0                 ;331
0001a2  0005              MOVS     r5,r0                 ;331
0001a4  d100              BNE      |L7.424|
0001a6  e004              B        |L7.434|
                  |L7.424|
0001a8  4668              MOV      r0,sp                 ;333
0001aa  7a00              LDRB     r0,[r0,#8]            ;333
0001ac  2180              MOVS     r1,#0x80              ;333
0001ae  4208              TST      r0,r1                 ;333
0001b0  d1f0              BNE      |L7.404|
                  |L7.434|
0001b2  bf00              NOP                            ;331
0001b4  20ff              MOVS     r0,#0xff              ;334
0001b6  f7fffffe          BL       SingleWrite
0001ba  4669              MOV      r1,sp                 ;334
0001bc  7248              STRB     r0,[r1,#9]            ;334
0001be  2d00              CMP      r5,#0                 ;336
0001c0  d108              BNE      |L7.468|
0001c2  20ff              MOVS     r0,#0xff              ;336
0001c4  f7fffffe          BL       SingleWrite
0001c8  2101              MOVS     r1,#1                 ;336
0001ca  4608              MOV      r0,r1                 ;336
0001cc  f7fffffe          BL       DrvSPI_ClrSS
0001d0  2000              MOVS     r0,#0                 ;336
0001d2  e735              B        |L7.64|
                  |L7.468|
0001d4  4668              MOV      r0,sp                 ;337
0001d6  8900              LDRH     r0,[r0,#8]            ;337
0001d8  6038              STR      r0,[r7,#0]            ;337
0001da  e058              B        |L7.654|
                  |L7.476|
0001dc  4668              MOV      r0,sp                 ;338
0001de  7e00              LDRB     r0,[r0,#0x18]         ;338
0001e0  2803              CMP      r0,#3                 ;338
0001e2  d12a              BNE      |L7.570|
0001e4  2500              MOVS     r5,#0                 ;340
0001e6  bf00              NOP                            ;341
                  |L7.488|
0001e8  20ff              MOVS     r0,#0xff              ;342
0001ea  f7fffffe          BL       SingleWrite
0001ee  4669              MOV      r1,sp                 ;342
0001f0  7208              STRB     r0,[r1,#8]            ;342
0001f2  1c68              ADDS     r0,r5,#1              ;343
0001f4  b2c0              UXTB     r0,r0                 ;343
0001f6  0005              MOVS     r5,r0                 ;343
0001f8  d100              BNE      |L7.508|
0001fa  e004              B        |L7.518|
                  |L7.508|
0001fc  4668              MOV      r0,sp                 ;345
0001fe  7a00              LDRB     r0,[r0,#8]            ;345
000200  2180              MOVS     r1,#0x80              ;345
000202  4208              TST      r0,r1                 ;345
000204  d1f0              BNE      |L7.488|
                  |L7.518|
000206  bf00              NOP                            ;343
000208  2d00              CMP      r5,#0                 ;347
00020a  d108              BNE      |L7.542|
00020c  20ff              MOVS     r0,#0xff              ;347
00020e  f7fffffe          BL       SingleWrite
000212  2101              MOVS     r1,#1                 ;347
000214  4608              MOV      r0,r1                 ;347
000216  f7fffffe          BL       DrvSPI_ClrSS
00021a  2000              MOVS     r0,#0                 ;347
00021c  e710              B        |L7.64|
                  |L7.542|
00021e  2400              MOVS     r4,#0                 ;348
000220  e005              B        |L7.558|
                  |L7.546|
000222  1c64              ADDS     r4,r4,#1              ;351
000224  20ff              MOVS     r0,#0xff              ;352
000226  f7fffffe          BL       SingleWrite
00022a  7030              STRB     r0,[r6,#0]            ;352
00022c  1c76              ADDS     r6,r6,#1              ;352
                  |L7.558|
00022e  2c03              CMP      r4,#3                 ;349
000230  ddf7              BLE      |L7.546|
000232  4668              MOV      r0,sp                 ;354
000234  7a00              LDRB     r0,[r0,#8]            ;354
000236  6038              STR      r0,[r7,#0]            ;354
000238  e029              B        |L7.654|
                  |L7.570|
00023a  2500              MOVS     r5,#0                 ;357
00023c  bf00              NOP                            ;358
                  |L7.574|
00023e  20ff              MOVS     r0,#0xff              ;359
000240  f7fffffe          BL       SingleWrite
000244  4669              MOV      r1,sp                 ;359
000246  7208              STRB     r0,[r1,#8]            ;359
000248  1c68              ADDS     r0,r5,#1              ;360
00024a  b2c0              UXTB     r0,r0                 ;360
00024c  0005              MOVS     r5,r0                 ;360
00024e  d100              BNE      |L7.594|
000250  e004              B        |L7.604|
                  |L7.594|
000252  4668              MOV      r0,sp                 ;362
000254  7a00              LDRB     r0,[r0,#8]            ;362
000256  2180              MOVS     r1,#0x80              ;362
000258  4208              TST      r0,r1                 ;362
00025a  d1f0              BNE      |L7.574|
                  |L7.604|
00025c  bf00              NOP                            ;360
00025e  2d00              CMP      r5,#0                 ;364
000260  d108              BNE      |L7.628|
000262  20ff              MOVS     r0,#0xff              ;364
000264  f7fffffe          BL       SingleWrite
000268  2101              MOVS     r1,#1                 ;364
00026a  4608              MOV      r0,r1                 ;364
00026c  f7fffffe          BL       DrvSPI_ClrSS
000270  2000              MOVS     r0,#0                 ;364
000272  e6e5              B        |L7.64|
                  |L7.628|
000274  2400              MOVS     r4,#0                 ;365
000276  e005              B        |L7.644|
                  |L7.632|
000278  1c64              ADDS     r4,r4,#1              ;368
00027a  20ff              MOVS     r0,#0xff              ;369
00027c  f7fffffe          BL       SingleWrite
000280  7030              STRB     r0,[r6,#0]            ;369
000282  1c76              ADDS     r6,r6,#1              ;369
                  |L7.644|
000284  2c03              CMP      r4,#3                 ;366
000286  ddf7              BLE      |L7.632|
000288  4668              MOV      r0,sp                 ;371
00028a  7a00              LDRB     r0,[r0,#8]            ;371
00028c  6038              STR      r0,[r7,#0]            ;371
                  |L7.654|
00028e  4668              MOV      r0,sp                 ;375
000290  7dc0              LDRB     r0,[r0,#0x17]         ;375
000292  2801              CMP      r0,#1                 ;375
000294  d002              BEQ      |L7.668|
000296  2802              CMP      r0,#2                 ;375
000298  d17e              BNE      |L7.920|
00029a  e053              B        |L7.836|
                  |L7.668|
00029c  2500              MOVS     r5,#0                 ;380
00029e  e00c              B        |L7.698|
                  |L7.672|
0002a0  1c68              ADDS     r0,r5,#1              ;384
0002a2  b2c0              UXTB     r0,r0                 ;384
0002a4  0005              MOVS     r5,r0                 ;384
0002a6  d108              BNE      |L7.698|
0002a8  20ff              MOVS     r0,#0xff              ;384
0002aa  f7fffffe          BL       SingleWrite
0002ae  2101              MOVS     r1,#1                 ;384
0002b0  4608              MOV      r0,r1                 ;384
0002b2  f7fffffe          BL       DrvSPI_ClrSS
0002b6  2000              MOVS     r0,#0                 ;384
0002b8  e6c2              B        |L7.64|
                  |L7.698|
0002ba  20ff              MOVS     r0,#0xff              ;382
0002bc  f7fffffe          BL       SingleWrite
0002c0  28fe              CMP      r0,#0xfe              ;382
0002c2  d1ed              BNE      |L7.672|
0002c4  2400              MOVS     r4,#0                 ;386
0002c6  2e00              CMP      r6,#0                 ;388
0002c8  d019              BEQ      |L7.766|
0002ca  bf00              NOP                            ;390
0002cc  e012              B        |L7.756|
                  |L7.718|
0002ce  20ff              MOVS     r0,#0xff              ;392
0002d0  4952              LDR      r1,|L7.1052|
0002d2  6208              STR      r0,[r1,#0x20]         ;392
0002d4  4608              MOV      r0,r1                 ;393
0002d6  6800              LDR      r0,[r0,#0]            ;393
0002d8  0840              LSRS     r0,r0,#1              ;393
0002da  0040              LSLS     r0,r0,#1              ;393
0002dc  1c40              ADDS     r0,r0,#1              ;393
0002de  6008              STR      r0,[r1,#0]            ;393
0002e0  bf00              NOP                            ;394
                  |L7.738|
0002e2  484e              LDR      r0,|L7.1052|
0002e4  6800              LDR      r0,[r0,#0]            ;394
0002e6  07c0              LSLS     r0,r0,#31             ;394
0002e8  0fc0              LSRS     r0,r0,#31             ;394
0002ea  d1fa              BNE      |L7.738|
0002ec  484b              LDR      r0,|L7.1052|
0002ee  6900              LDR      r0,[r0,#0x10]         ;395
0002f0  5530              STRB     r0,[r6,r4]            ;395
0002f2  1c64              ADDS     r4,r4,#1              ;390
                  |L7.756|
0002f4  4848              LDR      r0,|L7.1048|
0002f6  6800              LDR      r0,[r0,#0]            ;390  ; current_blklen
0002f8  4284              CMP      r4,r0                 ;390
0002fa  d3e8              BCC      |L7.718|
0002fc  e015              B        |L7.810|
                  |L7.766|
0002fe  2400              MOVS     r4,#0                 ;399
000300  e00f              B        |L7.802|
                  |L7.770|
000302  20ff              MOVS     r0,#0xff              ;401
000304  4945              LDR      r1,|L7.1052|
000306  6208              STR      r0,[r1,#0x20]         ;401
000308  4608              MOV      r0,r1                 ;402
00030a  6800              LDR      r0,[r0,#0]            ;402
00030c  0840              LSRS     r0,r0,#1              ;402
00030e  0040              LSLS     r0,r0,#1              ;402
000310  1c40              ADDS     r0,r0,#1              ;402
000312  6008              STR      r0,[r1,#0]            ;402
000314  bf00              NOP                            ;403
                  |L7.790|
000316  4841              LDR      r0,|L7.1052|
000318  6800              LDR      r0,[r0,#0]            ;403
00031a  07c0              LSLS     r0,r0,#31             ;403
00031c  0fc0              LSRS     r0,r0,#31             ;403
00031e  d1fa              BNE      |L7.790|
000320  1c64              ADDS     r4,r4,#1              ;399
                  |L7.802|
000322  483d              LDR      r0,|L7.1048|
000324  6800              LDR      r0,[r0,#0]            ;399  ; current_blklen
000326  4284              CMP      r4,r0                 ;399
000328  d3eb              BCC      |L7.770|
                  |L7.810|
00032a  20ff              MOVS     r0,#0xff              ;406
00032c  f7fffffe          BL       SingleWrite
000330  b2c1              UXTB     r1,r0                 ;406
000332  4668              MOV      r0,sp                 ;406
000334  7041              STRB     r1,[r0,#1]            ;406
000336  20ff              MOVS     r0,#0xff              ;407
000338  f7fffffe          BL       SingleWrite
00033c  b2c1              UXTB     r1,r0                 ;407
00033e  4668              MOV      r0,sp                 ;407
000340  7001              STRB     r1,[r0,#0]            ;407
000342  e054              B        |L7.1006|
                  |L7.836|
000344  20ff              MOVS     r0,#0xff              ;413
000346  f7fffffe          BL       SingleWrite
00034a  20fe              MOVS     r0,#0xfe              ;414
00034c  f7fffffe          BL       SingleWrite
000350  2400              MOVS     r4,#0                 ;416
000352  e017              B        |L7.900|
                  |L7.852|
000354  4669              MOV      r1,sp                 ;418
000356  880a              LDRH     r2,[r1,#0]            ;418
000358  5d30              LDRB     r0,[r6,r4]            ;418
00035a  4931              LDR      r1,|L7.1056|
00035c  f7fffffe          BL       GenerateCRC
000360  b280              UXTH     r0,r0                 ;418
000362  9000              STR      r0,[sp,#0]            ;418
000364  5d30              LDRB     r0,[r6,r4]            ;420
000366  492d              LDR      r1,|L7.1052|
000368  6208              STR      r0,[r1,#0x20]         ;420
00036a  4608              MOV      r0,r1                 ;421
00036c  6800              LDR      r0,[r0,#0]            ;421
00036e  0840              LSRS     r0,r0,#1              ;421
000370  0040              LSLS     r0,r0,#1              ;421
000372  1c40              ADDS     r0,r0,#1              ;421
000374  6008              STR      r0,[r1,#0]            ;421
000376  bf00              NOP                            ;422
                  |L7.888|
000378  4828              LDR      r0,|L7.1052|
00037a  6800              LDR      r0,[r0,#0]            ;422
00037c  07c0              LSLS     r0,r0,#31             ;422
00037e  0fc0              LSRS     r0,r0,#31             ;422
000380  d1fa              BNE      |L7.888|
000382  1c64              ADDS     r4,r4,#1              ;416
                  |L7.900|
000384  4824              LDR      r0,|L7.1048|
000386  6800              LDR      r0,[r0,#0]            ;416  ; current_blklen
000388  4284              CMP      r4,r0                 ;416
00038a  d3e3              BCC      |L7.852|
00038c  4669              MOV      r1,sp                 ;426
00038e  7848              LDRB     r0,[r1,#1]            ;426
000390  f7fffffe          BL       SingleWrite
000394  4669              MOV      r1,sp                 ;427
000396  e000              B        |L7.922|
                  |L7.920|
000398  e028              B        |L7.1004|
                  |L7.922|
00039a  7808              LDRB     r0,[r1,#0]            ;427
00039c  f7fffffe          BL       SingleWrite
0003a0  2500              MOVS     r5,#0                 ;429
0003a2  bf00              NOP                            ;430
                  |L7.932|
0003a4  20ff              MOVS     r0,#0xff              ;432
0003a6  f7fffffe          BL       SingleWrite
0003aa  b2c0              UXTB     r0,r0                 ;432
0003ac  9001              STR      r0,[sp,#4]            ;432
0003ae  1c68              ADDS     r0,r5,#1              ;433
0003b0  b2c0              UXTB     r0,r0                 ;433
0003b2  0005              MOVS     r5,r0                 ;433
0003b4  d100              BNE      |L7.952|
0003b6  e004              B        |L7.962|
                  |L7.952|
0003b8  2111              MOVS     r1,#0x11              ;434
0003ba  9801              LDR      r0,[sp,#4]            ;434
0003bc  4008              ANDS     r0,r0,r1              ;434
0003be  2801              CMP      r0,#1                 ;434
0003c0  d1f0              BNE      |L7.932|
                  |L7.962|
0003c2  bf00              NOP                            ;433
0003c4  2d00              CMP      r5,#0                 ;438
0003c6  d108              BNE      |L7.986|
0003c8  20ff              MOVS     r0,#0xff              ;438
0003ca  f7fffffe          BL       SingleWrite
0003ce  2101              MOVS     r1,#1                 ;438
0003d0  4608              MOV      r0,r1                 ;438
0003d2  f7fffffe          BL       DrvSPI_ClrSS
0003d6  2000              MOVS     r0,#0                 ;438
0003d8  e632              B        |L7.64|
                  |L7.986|
0003da  bf00              NOP                            ;441
                  |L7.988|
0003dc  20ff              MOVS     r0,#0xff              ;441
0003de  f7fffffe          BL       SingleWrite
0003e2  28ff              CMP      r0,#0xff              ;441
0003e4  d1fa              BNE      |L7.988|
0003e6  f7fffffe          BL       SingleWrite
0003ea  e000              B        |L7.1006|
                  |L7.1004|
0003ec  bf00              NOP                            ;444
                  |L7.1006|
0003ee  bf00              NOP                            ;410
0003f0  2101              MOVS     r1,#1                 ;446
0003f2  4608              MOV      r0,r1                 ;446
0003f4  f7fffffe          BL       DrvSPI_ClrSS
0003f8  4668              MOV      r0,sp                 ;447
0003fa  7d00              LDRB     r0,[r0,#0x14]         ;447
0003fc  2809              CMP      r0,#9                 ;447
0003fe  d003              BEQ      |L7.1032|
000400  4668              MOV      r0,sp                 ;447
000402  7d00              LDRB     r0,[r0,#0x14]         ;447
000404  280a              CMP      r0,#0xa               ;447
000406  d102              BNE      |L7.1038|
                  |L7.1032|
000408  4903              LDR      r1,|L7.1048|
00040a  9803              LDR      r0,[sp,#0xc]          ;448
00040c  6008              STR      r0,[r1,#0]            ;448  ; current_blklen
                  |L7.1038|
00040e  2001              MOVS     r0,#1                 ;450
000410  e616              B        |L7.64|
000412  0000              DCW      0x0000
                  |L7.1044|
                          DCD      command_list
                  |L7.1048|
                          DCD      current_blklen
                  |L7.1052|
                          DCD      0x40034000
                  |L7.1056|
                          DCD      0x00001021
                          ENDP


                          AREA ||i.MMC_FLASH_Init||, CODE, READONLY, ALIGN=2

                  MMC_FLASH_Init PROC
;;;464    /*---------------------------------------------------------------------------------------------------------*/
;;;465    void MMC_FLASH_Init(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;466    {
000002  b087              SUB      sp,sp,#0x1c
;;;467    	uint32_t response;
;;;468    	uint8_t loopguard;
;;;469      	uint32_t i;
;;;470      	uint8_t counter = 0;    		
000004  2000              MOVS     r0,#0
000006  9005              STR      r0,[sp,#0x14]
;;;471      	uint8_t pchar[16];         		// Data pointer for storing MMC 
;;;472      	uint32_t c_size,bl_len;
;;;473      	uint8_t c_mult;
;;;474    
;;;475    
;;;476    	Is_Initialized = 0;
000008  4996              LDR      r1,|L8.612|
00000a  7008              STRB     r0,[r1,#0]
;;;477    
;;;478    
;;;479    	DrvSPI_ClrSS(eDRVSPI_PORT1, eDRVSPI_SS0);	// CS = 1
00000c  2101              MOVS     r1,#1
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       DrvSPI_ClrSS
;;;480    	pfnSDCARD_Delay(0x20000);
000014  2001              MOVS     r0,#1
000016  0440              LSLS     r0,r0,#17
000018  f7fffffe          BL       pfnSDCARD_Delay
;;;481    
;;;482    		//--------------------------------------------------------
;;;483    		//	Send 74 SD clcok in SD mode for Toshiba SD Card
;;;484    		//--------------------------------------------------------	
;;;485      	for(counter = 0; counter < 10; counter++) {
00001c  2000              MOVS     r0,#0
00001e  9005              STR      r0,[sp,#0x14]
000020  e006              B        |L8.48|
                  |L8.34|
;;;486        	SingleWrite(0xFF);
000022  20ff              MOVS     r0,#0xff
000024  f7fffffe          BL       SingleWrite
000028  9805              LDR      r0,[sp,#0x14]         ;485
00002a  1c40              ADDS     r0,r0,#1              ;485
00002c  b2c0              UXTB     r0,r0                 ;485
00002e  9005              STR      r0,[sp,#0x14]         ;485
                  |L8.48|
000030  9805              LDR      r0,[sp,#0x14]         ;485
000032  280a              CMP      r0,#0xa               ;485
000034  dbf5              BLT      |L8.34|
;;;487      	}
;;;488      	DrvSPI_SetSS(eDRVSPI_PORT1, eDRVSPI_SS0);  // CS = 0
000036  2101              MOVS     r1,#1
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       DrvSPI_SetSS
;;;489    	pfnSDCARD_Delay(0x20000);			
00003e  2001              MOVS     r0,#1
000040  0440              LSLS     r0,r0,#17
000042  f7fffffe          BL       pfnSDCARD_Delay
;;;490    	while(MMC_Command_Exec(GO_IDLE_STATE,EMPTY,EMPTY,&response)==FALSE);
000046  bf00              NOP      
                  |L8.72|
000048  ab06              ADD      r3,sp,#0x18
00004a  2200              MOVS     r2,#0
00004c  4611              MOV      r1,r2
00004e  4610              MOV      r0,r2
000050  f7fffffe          BL       MMC_Command_Exec
000054  2800              CMP      r0,#0
000056  d0f7              BEQ      |L8.72|
;;;491      	if(response!=0x01)
000058  9806              LDR      r0,[sp,#0x18]
00005a  2801              CMP      r0,#1
00005c  d001              BEQ      |L8.98|
                  |L8.94|
;;;492    		return;
;;;493    	//pfnSDCARD_Delay(0x20000);
;;;494    	if(MMC_Command_Exec(SEND_IF_COND,0x15A,pchar,&response) && response==1)
;;;495    	{/* SDC ver 2.00 */
;;;496    		if (pchar[2] == 0x01 && pchar[3] == 0x5A) 
;;;497    		{	/* The card can work at vdd range of 2.7-3.6V */
;;;498    			loopguard=0;
;;;499    			do
;;;500    			{
;;;501    				MMC_Command_Exec(SD_SEND_OP_COND,0x40000000,EMPTY,&response);//Enable HCS(OCR[30])
;;;502    				if(!++loopguard) break;
;;;503    				pfnSDCARD_Delay(0x200);
;;;504    			}while(response!=0);
;;;505    			if(!loopguard) return;
;;;506    
;;;507    			MMC_Command_Exec(READ_OCR,EMPTY,pchar,&response);
;;;508    			SDtype=(pchar[0]&0x40)?SDv2|SDBlock:SDv2;
;;;509    		}
;;;510    	}else
;;;511    	{/* SDv1 or MMCv3 */
;;;512    		 MMC_Command_Exec(SD_SEND_OP_COND,0x00,EMPTY,&response);
;;;513    		if (response <= 1) 
;;;514    		{
;;;515    			loopguard=0;
;;;516    			do
;;;517    			{
;;;518    				MMC_Command_Exec(SD_SEND_OP_COND,0x00,EMPTY,&response);
;;;519    				if(!++loopguard) break;
;;;520    				pfnSDCARD_Delay(0x200);
;;;521    			}while(response!=0);
;;;522    			if(!loopguard) return;
;;;523    			SDtype=SDv1;	/* SDv1 */
;;;524    		} else 
;;;525    		{
;;;526    			loopguard=0;
;;;527    			do
;;;528    			{
;;;529    				MMC_Command_Exec(SEND_OP_COND,0x00,EMPTY,&response);
;;;530    				if(!++loopguard) break;
;;;531    				pfnSDCARD_Delay(0x200);
;;;532    			}while(response!=0);
;;;533    			if(!loopguard) return;
;;;534    			SDtype=MMCv3;	/* MMCv3 */
;;;535    		}
;;;536    		MMC_Command_Exec(SET_BLOCKLEN,(uint32_t)PHYSICAL_BLOCK_SIZE,EMPTY,&response);
;;;537    	}
;;;538    	if(MMC_Command_Exec(SEND_CSD,EMPTY,pchar,&response)==FALSE)
;;;539    		return;
;;;540    
;;;541      	if(response==0) 
;;;542    	{
;;;543        	DBG_PRINTF("Change speed:");
;;;544        	for(i=0;i<16;i++) {	DBG_PRINTF("0x%X ",pchar[i]);}
;;;545    
;;;546      	} else {
;;;547        	DBG_PRINTF("CARD STATUS 0x%X:\n",response);
;;;548      		for(i=0;i<16;i++) {	DBG_PRINTF("0x%X ",pchar[i]);}
;;;549        	LogicSector=0;
;;;550        	return;
;;;551      	}
;;;552    
;;;553     	if(SDtype&SDBlock)// Determine the number of MMC sectors;
;;;554    	{
;;;555    		bl_len = 1 << (pchar[5] & 0x0f) ;
;;;556    		c_size = ((pchar[7] & 0x3F) << 16) |(pchar[8] << 8) | (pchar[9]);
;;;557    		LogicSector=c_size*((512*1024)/bl_len);
;;;558    	}else
;;;559    	{
;;;560    	  	bl_len = 1 << (pchar[5] & 0x0f) ;
;;;561      		c_size = ((pchar[6] & 0x03) << 10) |(pchar[7] << 2) | ((pchar[8] &0xc0) >> 6);
;;;562      		c_mult = (((pchar[9] & 0x03) << 1) | ((pchar[10] & 0x80) >> 7));
;;;563    		LogicSector=(c_size+1)*(1 << (c_mult+2))*(bl_len/512);
;;;564      	}                                     
;;;565    		DBG_PRINTF("\nLogicSector:%d, PHYSICAL_SIZE:%dMB\n",LogicSector,(LogicSector/2/1024));
;;;566    
;;;567      	loopguard = 0;
;;;568      	while((MMC_Command_Exec(READ_SINGLE_BLOCK,0,0,&response)==FALSE)) {
;;;569        	if(!++loopguard) break;
;;;570      	} 
;;;571      	Is_Initialized = 1;
;;;572    }					  
00005e  b007              ADD      sp,sp,#0x1c
000060  bdf0              POP      {r4-r7,pc}
                  |L8.98|
000062  ab06              ADD      r3,sp,#0x18           ;494
000064  aa01              ADD      r2,sp,#4              ;494
000066  21ff              MOVS     r1,#0xff              ;494
000068  315b              ADDS     r1,r1,#0x5b           ;494
00006a  2002              MOVS     r0,#2                 ;494
00006c  f7fffffe          BL       MMC_Command_Exec
000070  2800              CMP      r0,#0                 ;494
000072  d035              BEQ      |L8.224|
000074  9806              LDR      r0,[sp,#0x18]         ;494
000076  2801              CMP      r0,#1                 ;494
000078  d132              BNE      |L8.224|
00007a  4668              MOV      r0,sp                 ;496
00007c  7980              LDRB     r0,[r0,#6]            ;496
00007e  2801              CMP      r0,#1                 ;496
000080  d175              BNE      |L8.366|
000082  4668              MOV      r0,sp                 ;496
000084  79c0              LDRB     r0,[r0,#7]            ;496
000086  285a              CMP      r0,#0x5a              ;496
000088  d171              BNE      |L8.366|
00008a  2400              MOVS     r4,#0                 ;498
00008c  bf00              NOP                            ;499
                  |L8.142|
00008e  ab06              ADD      r3,sp,#0x18           ;501
000090  2200              MOVS     r2,#0                 ;501
000092  2101              MOVS     r1,#1                 ;501
000094  0789              LSLS     r1,r1,#30             ;501
000096  201e              MOVS     r0,#0x1e              ;501
000098  f7fffffe          BL       MMC_Command_Exec
00009c  1c60              ADDS     r0,r4,#1              ;502
00009e  b2c0              UXTB     r0,r0                 ;502
0000a0  0004              MOVS     r4,r0                 ;502
0000a2  d100              BNE      |L8.166|
0000a4  e006              B        |L8.180|
                  |L8.166|
0000a6  2001              MOVS     r0,#1                 ;503
0000a8  0240              LSLS     r0,r0,#9              ;503
0000aa  f7fffffe          BL       pfnSDCARD_Delay
0000ae  9806              LDR      r0,[sp,#0x18]         ;504
0000b0  2800              CMP      r0,#0                 ;504
0000b2  d1ec              BNE      |L8.142|
                  |L8.180|
0000b4  bf00              NOP                            ;502
0000b6  2c00              CMP      r4,#0                 ;505
0000b8  d100              BNE      |L8.188|
0000ba  e7d0              B        |L8.94|
                  |L8.188|
0000bc  ab06              ADD      r3,sp,#0x18           ;507
0000be  aa01              ADD      r2,sp,#4              ;507
0000c0  2100              MOVS     r1,#0                 ;507
0000c2  201a              MOVS     r0,#0x1a              ;507
0000c4  f7fffffe          BL       MMC_Command_Exec
0000c8  4668              MOV      r0,sp                 ;508
0000ca  7900              LDRB     r0,[r0,#4]            ;508
0000cc  2140              MOVS     r1,#0x40              ;508
0000ce  4208              TST      r0,r1                 ;508
0000d0  d001              BEQ      |L8.214|
0000d2  2014              MOVS     r0,#0x14              ;508
0000d4  e000              B        |L8.216|
                  |L8.214|
0000d6  2004              MOVS     r0,#4                 ;508
                  |L8.216|
0000d8  b240              SXTB     r0,r0                 ;508
0000da  4963              LDR      r1,|L8.616|
0000dc  7008              STRB     r0,[r1,#0]            ;508
0000de  e046              B        |L8.366|
                  |L8.224|
0000e0  ab06              ADD      r3,sp,#0x18           ;512
0000e2  2200              MOVS     r2,#0                 ;512
0000e4  4611              MOV      r1,r2                 ;512
0000e6  201e              MOVS     r0,#0x1e              ;512
0000e8  f7fffffe          BL       MMC_Command_Exec
0000ec  9806              LDR      r0,[sp,#0x18]         ;513
0000ee  2801              CMP      r0,#1                 ;513
0000f0  d81b              BHI      |L8.298|
0000f2  2400              MOVS     r4,#0                 ;515
0000f4  bf00              NOP                            ;516
                  |L8.246|
0000f6  ab06              ADD      r3,sp,#0x18           ;518
0000f8  2200              MOVS     r2,#0                 ;518
0000fa  4611              MOV      r1,r2                 ;518
0000fc  201e              MOVS     r0,#0x1e              ;518
0000fe  f7fffffe          BL       MMC_Command_Exec
000102  1c60              ADDS     r0,r4,#1              ;519
000104  b2c0              UXTB     r0,r0                 ;519
000106  0004              MOVS     r4,r0                 ;519
000108  d100              BNE      |L8.268|
00010a  e006              B        |L8.282|
                  |L8.268|
00010c  2001              MOVS     r0,#1                 ;520
00010e  0240              LSLS     r0,r0,#9              ;520
000110  f7fffffe          BL       pfnSDCARD_Delay
000114  9806              LDR      r0,[sp,#0x18]         ;521
000116  2800              CMP      r0,#0                 ;521
000118  d1ed              BNE      |L8.246|
                  |L8.282|
00011a  bf00              NOP                            ;519
00011c  2c00              CMP      r4,#0                 ;522
00011e  d100              BNE      |L8.290|
000120  e79d              B        |L8.94|
                  |L8.290|
000122  2002              MOVS     r0,#2                 ;523
000124  4950              LDR      r1,|L8.616|
000126  7008              STRB     r0,[r1,#0]            ;523
000128  e01a              B        |L8.352|
                  |L8.298|
00012a  2400              MOVS     r4,#0                 ;526
00012c  bf00              NOP                            ;527
                  |L8.302|
00012e  ab06              ADD      r3,sp,#0x18           ;529
000130  2200              MOVS     r2,#0                 ;529
000132  4611              MOV      r1,r2                 ;529
000134  2001              MOVS     r0,#1                 ;529
000136  f7fffffe          BL       MMC_Command_Exec
00013a  1c60              ADDS     r0,r4,#1              ;530
00013c  b2c0              UXTB     r0,r0                 ;530
00013e  0004              MOVS     r4,r0                 ;530
000140  d100              BNE      |L8.324|
000142  e006              B        |L8.338|
                  |L8.324|
000144  2001              MOVS     r0,#1                 ;531
000146  0240              LSLS     r0,r0,#9              ;531
000148  f7fffffe          BL       pfnSDCARD_Delay
00014c  9806              LDR      r0,[sp,#0x18]         ;532
00014e  2800              CMP      r0,#0                 ;532
000150  d1ed              BNE      |L8.302|
                  |L8.338|
000152  bf00              NOP                            ;530
000154  2c00              CMP      r4,#0                 ;533
000156  d100              BNE      |L8.346|
000158  e781              B        |L8.94|
                  |L8.346|
00015a  2008              MOVS     r0,#8                 ;534
00015c  4942              LDR      r1,|L8.616|
00015e  7008              STRB     r0,[r1,#0]            ;534
                  |L8.352|
000160  ab06              ADD      r3,sp,#0x18           ;536
000162  2200              MOVS     r2,#0                 ;536
000164  2101              MOVS     r1,#1                 ;536
000166  0249              LSLS     r1,r1,#9              ;536
000168  2007              MOVS     r0,#7                 ;536
00016a  f7fffffe          BL       MMC_Command_Exec
                  |L8.366|
00016e  ab06              ADD      r3,sp,#0x18           ;538
000170  aa01              ADD      r2,sp,#4              ;538
000172  2100              MOVS     r1,#0                 ;538
000174  2003              MOVS     r0,#3                 ;538
000176  f7fffffe          BL       MMC_Command_Exec
00017a  2800              CMP      r0,#0                 ;538
00017c  d100              BNE      |L8.384|
00017e  e76e              B        |L8.94|
                  |L8.384|
000180  9806              LDR      r0,[sp,#0x18]         ;541
000182  2800              CMP      r0,#0                 ;541
000184  d105              BNE      |L8.402|
000186  2500              MOVS     r5,#0                 ;544
000188  e000              B        |L8.396|
                  |L8.394|
00018a  1c6d              ADDS     r5,r5,#1              ;544
                  |L8.396|
00018c  2d10              CMP      r5,#0x10              ;544
00018e  d3fc              BCC      |L8.394|
000190  e008              B        |L8.420|
                  |L8.402|
000192  2500              MOVS     r5,#0                 ;548
000194  e000              B        |L8.408|
                  |L8.406|
000196  1c6d              ADDS     r5,r5,#1              ;548
                  |L8.408|
000198  2d10              CMP      r5,#0x10              ;548
00019a  d3fc              BCC      |L8.406|
00019c  2000              MOVS     r0,#0                 ;549
00019e  4933              LDR      r1,|L8.620|
0001a0  6008              STR      r0,[r1,#0]            ;549  ; LogicSector
0001a2  e75c              B        |L8.94|
                  |L8.420|
0001a4  4930              LDR      r1,|L8.616|
0001a6  2000              MOVS     r0,#0                 ;553
0001a8  5608              LDRSB    r0,[r1,r0]            ;553  ; SDtype
0001aa  2110              MOVS     r1,#0x10              ;553
0001ac  4208              TST      r0,r1                 ;553
0001ae  d01a              BEQ      |L8.486|
0001b0  4668              MOV      r0,sp                 ;555
0001b2  7a40              LDRB     r0,[r0,#9]            ;555
0001b4  0701              LSLS     r1,r0,#28             ;555
0001b6  0f09              LSRS     r1,r1,#28             ;555
0001b8  2701              MOVS     r7,#1                 ;555
0001ba  408f              LSLS     r7,r7,r1              ;555
0001bc  4668              MOV      r0,sp                 ;556
0001be  7ac0              LDRB     r0,[r0,#0xb]          ;556
0001c0  0680              LSLS     r0,r0,#26             ;556
0001c2  0a81              LSRS     r1,r0,#10             ;556
0001c4  4668              MOV      r0,sp                 ;556
0001c6  7b00              LDRB     r0,[r0,#0xc]          ;556
0001c8  0200              LSLS     r0,r0,#8              ;556
0001ca  4308              ORRS     r0,r0,r1              ;556
0001cc  4669              MOV      r1,sp                 ;556
0001ce  7b49              LDRB     r1,[r1,#0xd]          ;556
0001d0  4606              MOV      r6,r0                 ;556
0001d2  430e              ORRS     r6,r6,r1              ;556
0001d4  4639              MOV      r1,r7                 ;557
0001d6  2001              MOVS     r0,#1                 ;557
0001d8  04c0              LSLS     r0,r0,#19             ;557
0001da  f7fffffe          BL       __aeabi_uidivmod
0001de  4370              MULS     r0,r6,r0              ;557
0001e0  4922              LDR      r1,|L8.620|
0001e2  6008              STR      r0,[r1,#0]            ;557  ; LogicSector
0001e4  e028              B        |L8.568|
                  |L8.486|
0001e6  4668              MOV      r0,sp                 ;560
0001e8  7a40              LDRB     r0,[r0,#9]            ;560
0001ea  0701              LSLS     r1,r0,#28             ;560
0001ec  0f09              LSRS     r1,r1,#28             ;560
0001ee  2701              MOVS     r7,#1                 ;560
0001f0  408f              LSLS     r7,r7,r1              ;560
0001f2  4668              MOV      r0,sp                 ;561
0001f4  7a80              LDRB     r0,[r0,#0xa]          ;561
0001f6  0780              LSLS     r0,r0,#30             ;561
0001f8  0d01              LSRS     r1,r0,#20             ;561
0001fa  4668              MOV      r0,sp                 ;561
0001fc  7ac0              LDRB     r0,[r0,#0xb]          ;561
0001fe  0080              LSLS     r0,r0,#2              ;561
000200  4308              ORRS     r0,r0,r1              ;561
000202  4669              MOV      r1,sp                 ;561
000204  7b09              LDRB     r1,[r1,#0xc]          ;561
000206  22c0              MOVS     r2,#0xc0              ;561
000208  4011              ANDS     r1,r1,r2              ;561
00020a  1189              ASRS     r1,r1,#6              ;561
00020c  4606              MOV      r6,r0                 ;561
00020e  430e              ORRS     r6,r6,r1              ;561
000210  4669              MOV      r1,sp                 ;562
000212  7b48              LDRB     r0,[r1,#0xd]          ;562
000214  0780              LSLS     r0,r0,#30             ;562
000216  0f40              LSRS     r0,r0,#29             ;562
000218  7b89              LDRB     r1,[r1,#0xe]          ;562
00021a  2280              MOVS     r2,#0x80              ;562
00021c  4011              ANDS     r1,r1,r2              ;562
00021e  11c9              ASRS     r1,r1,#7              ;562
000220  4308              ORRS     r0,r0,r1              ;562
000222  9000              STR      r0,[sp,#0]            ;562
000224  9800              LDR      r0,[sp,#0]            ;563
000226  1c81              ADDS     r1,r0,#2              ;563
000228  2001              MOVS     r0,#1                 ;563
00022a  4088              LSLS     r0,r0,r1              ;563
00022c  1c71              ADDS     r1,r6,#1              ;563
00022e  4348              MULS     r0,r1,r0              ;563
000230  0a79              LSRS     r1,r7,#9              ;563
000232  4348              MULS     r0,r1,r0              ;563
000234  490d              LDR      r1,|L8.620|
000236  6008              STR      r0,[r1,#0]            ;563  ; LogicSector
                  |L8.568|
000238  2400              MOVS     r4,#0                 ;567
00023a  e004              B        |L8.582|
                  |L8.572|
00023c  1c60              ADDS     r0,r4,#1              ;569
00023e  b2c0              UXTB     r0,r0                 ;569
000240  0004              MOVS     r4,r0                 ;569
000242  d100              BNE      |L8.582|
000244  e007              B        |L8.598|
                  |L8.582|
000246  ab06              ADD      r3,sp,#0x18           ;568
000248  2200              MOVS     r2,#0                 ;568
00024a  4611              MOV      r1,r2                 ;568
00024c  2008              MOVS     r0,#8                 ;568
00024e  f7fffffe          BL       MMC_Command_Exec
000252  2800              CMP      r0,#0                 ;568
000254  d0f2              BEQ      |L8.572|
                  |L8.598|
000256  bf00              NOP                            ;569
000258  2001              MOVS     r0,#1                 ;571
00025a  4902              LDR      r1,|L8.612|
00025c  7008              STRB     r0,[r1,#0]            ;571
00025e  bf00              NOP      
000260  e6fd              B        |L8.94|
;;;573    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

000262  0000              DCW      0x0000
                  |L8.612|
                          DCD      Is_Initialized
                  |L8.616|
                          DCD      SDtype
                  |L8.620|
                          DCD      LogicSector

                          AREA ||i.SingleWrite||, CODE, READONLY, ALIGN=1

                  SingleWrite PROC
;;;178    /*---------------------------------------------------------------------------------------------------------*/
;;;179    static uint32_t SingleWrite(uint32_t u32Data)
000000  b538              PUSH     {r3-r5,lr}
;;;180    {
000002  4604              MOV      r4,r0
;;;181    	uint32_t SPIdata=u32Data;
000004  9400              STR      r4,[sp,#0]
;;;182    	DrvSPI_BurstTransfer(eDRVSPI_PORT1,1,2);
000006  2202              MOVS     r2,#2
000008  2101              MOVS     r1,#1
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       DrvSPI_BurstTransfer
;;;183    	DrvSPI_SingleWrite(eDRVSPI_PORT1,&SPIdata);
000010  4669              MOV      r1,sp
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       DrvSPI_SingleWrite
;;;184        while (DrvSPI_IsBusy(eDRVSPI_PORT1));
000018  bf00              NOP      
                  |L9.26|
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       DrvSPI_IsBusy
000020  2800              CMP      r0,#0
000022  d1fa              BNE      |L9.26|
;;;185    	DrvSPI_DumpRxRegister(eDRVSPI_PORT1,&SPIdata,1);
000024  2201              MOVS     r2,#1
000026  4669              MOV      r1,sp
000028  4610              MOV      r0,r2
00002a  f7fffffe          BL       DrvSPI_DumpRxRegister
;;;186    	return SPIdata;
00002e  9800              LDR      r0,[sp,#0]
;;;187    }
000030  bd38              POP      {r3-r5,pc}
;;;188    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.SpiRead||, CODE, READONLY, ALIGN=2

                  SpiRead PROC
;;;704    /*---------------------------------------------------------------------------------------------------------*/
;;;705    void SpiRead(uint32_t addr, uint32_t size, uint8_t* buffer)
000000  b5f8              PUSH     {r3-r7,lr}
;;;706    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;707        /* This is low level read function of USB Mass Storage */
;;;708    	uint32_t response;
;;;709    	if(SDtype&SDBlock)
000008  4917              LDR      r1,|L10.104|
00000a  2000              MOVS     r0,#0
00000c  5608              LDRSB    r0,[r1,r0]  ; SDtype
00000e  2110              MOVS     r1,#0x10
000010  4208              TST      r0,r1
000012  d012              BEQ      |L10.58|
;;;710    	{
;;;711    		while(size >= PHYSICAL_BLOCK_SIZE)
000014  e00c              B        |L10.48|
                  |L10.22|
;;;712    		{
;;;713    			MMC_Command_Exec(READ_SINGLE_BLOCK,addr,buffer,&response);
000016  466b              MOV      r3,sp
000018  4632              MOV      r2,r6
00001a  4621              MOV      r1,r4
00001c  2008              MOVS     r0,#8
00001e  f7fffffe          BL       MMC_Command_Exec
;;;714    			addr   ++;
000022  1c64              ADDS     r4,r4,#1
;;;715    			buffer += PHYSICAL_BLOCK_SIZE;
000024  36ff              ADDS     r6,r6,#0xff
000026  36ff              ADDS     r6,r6,#0xff
000028  3602              ADDS     r6,#2
;;;716    			size  -= PHYSICAL_BLOCK_SIZE;
00002a  3dff              SUBS     r5,r5,#0xff
00002c  3dff              SUBS     r5,r5,#0xff
00002e  3d02              SUBS     r5,#2
                  |L10.48|
000030  2001              MOVS     r0,#1                 ;711
000032  0240              LSLS     r0,r0,#9              ;711
000034  4285              CMP      r5,r0                 ;711
000036  d2ee              BCS      |L10.22|
000038  e014              B        |L10.100|
                  |L10.58|
;;;717    		}
;;;718    
;;;719    	}else
;;;720    	{
;;;721    		addr*=PHYSICAL_BLOCK_SIZE;
00003a  0264              LSLS     r4,r4,#9
;;;722    		while(size >= PHYSICAL_BLOCK_SIZE)
00003c  e00e              B        |L10.92|
                  |L10.62|
;;;723    		{
;;;724    			MMC_Command_Exec(READ_SINGLE_BLOCK,addr,buffer,&response);
00003e  466b              MOV      r3,sp
000040  4632              MOV      r2,r6
000042  4621              MOV      r1,r4
000044  2008              MOVS     r0,#8
000046  f7fffffe          BL       MMC_Command_Exec
;;;725    			addr   += PHYSICAL_BLOCK_SIZE;
00004a  34ff              ADDS     r4,r4,#0xff
00004c  34ff              ADDS     r4,r4,#0xff
00004e  3402              ADDS     r4,#2
;;;726    			buffer += PHYSICAL_BLOCK_SIZE;
000050  36ff              ADDS     r6,r6,#0xff
000052  36ff              ADDS     r6,r6,#0xff
000054  3602              ADDS     r6,#2
;;;727    			size  -= PHYSICAL_BLOCK_SIZE;
000056  3dff              SUBS     r5,r5,#0xff
000058  3dff              SUBS     r5,r5,#0xff
00005a  3d02              SUBS     r5,#2
                  |L10.92|
00005c  2001              MOVS     r0,#1                 ;722
00005e  0240              LSLS     r0,r0,#9              ;722
000060  4285              CMP      r5,r0                 ;722
000062  d2ec              BCS      |L10.62|
                  |L10.100|
;;;728    		}
;;;729    	}
;;;730    }
000064  bdf8              POP      {r3-r7,pc}
;;;731    
                          ENDP

000066  0000              DCW      0x0000
                  |L10.104|
                          DCD      SDtype

                          AREA ||i.SpiWrite||, CODE, READONLY, ALIGN=2

                  SpiWrite PROC
;;;747    /*---------------------------------------------------------------------------------------------------------*/
;;;748    void SpiWrite(uint32_t addr, uint32_t size, uint8_t* buffer)
000000  b5f8              PUSH     {r3-r7,lr}
;;;749    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;750    	uint32_t response;
;;;751    	if(SDtype&SDBlock)
000008  4917              LDR      r1,|L11.104|
00000a  2000              MOVS     r0,#0
00000c  5608              LDRSB    r0,[r1,r0]  ; SDtype
00000e  2110              MOVS     r1,#0x10
000010  4208              TST      r0,r1
000012  d012              BEQ      |L11.58|
;;;752    	{
;;;753    		while(size >= PHYSICAL_BLOCK_SIZE)
000014  e00c              B        |L11.48|
                  |L11.22|
;;;754    		{
;;;755    			MMC_Command_Exec(WRITE_BLOCK,addr,buffer,&response);
000016  466b              MOV      r3,sp
000018  4632              MOV      r2,r6
00001a  4621              MOV      r1,r4
00001c  200b              MOVS     r0,#0xb
00001e  f7fffffe          BL       MMC_Command_Exec
;;;756    			addr   ++;
000022  1c64              ADDS     r4,r4,#1
;;;757    			buffer += PHYSICAL_BLOCK_SIZE;
000024  36ff              ADDS     r6,r6,#0xff
000026  36ff              ADDS     r6,r6,#0xff
000028  3602              ADDS     r6,#2
;;;758    			size  -= PHYSICAL_BLOCK_SIZE;
00002a  3dff              SUBS     r5,r5,#0xff
00002c  3dff              SUBS     r5,r5,#0xff
00002e  3d02              SUBS     r5,#2
                  |L11.48|
000030  2001              MOVS     r0,#1                 ;753
000032  0240              LSLS     r0,r0,#9              ;753
000034  4285              CMP      r5,r0                 ;753
000036  d2ee              BCS      |L11.22|
000038  e014              B        |L11.100|
                  |L11.58|
;;;759    		}
;;;760    	}else
;;;761    	{
;;;762    		addr*=PHYSICAL_BLOCK_SIZE;
00003a  0264              LSLS     r4,r4,#9
;;;763    		while(size >= PHYSICAL_BLOCK_SIZE)
00003c  e00e              B        |L11.92|
                  |L11.62|
;;;764    		{
;;;765    			MMC_Command_Exec(WRITE_BLOCK,addr,buffer,&response);
00003e  466b              MOV      r3,sp
000040  4632              MOV      r2,r6
000042  4621              MOV      r1,r4
000044  200b              MOVS     r0,#0xb
000046  f7fffffe          BL       MMC_Command_Exec
;;;766    			addr   += (PHYSICAL_BLOCK_SIZE);
00004a  34ff              ADDS     r4,r4,#0xff
00004c  34ff              ADDS     r4,r4,#0xff
00004e  3402              ADDS     r4,#2
;;;767    			buffer += PHYSICAL_BLOCK_SIZE;
000050  36ff              ADDS     r6,r6,#0xff
000052  36ff              ADDS     r6,r6,#0xff
000054  3602              ADDS     r6,#2
;;;768    			size  -= PHYSICAL_BLOCK_SIZE;
000056  3dff              SUBS     r5,r5,#0xff
000058  3dff              SUBS     r5,r5,#0xff
00005a  3d02              SUBS     r5,#2
                  |L11.92|
00005c  2001              MOVS     r0,#1                 ;763
00005e  0240              LSLS     r0,r0,#9              ;763
000060  4285              CMP      r5,r0                 ;763
000062  d2ec              BCS      |L11.62|
                  |L11.100|
;;;769    		}
;;;770    	}
;;;771    }
000064  bdf8              POP      {r3-r7,pc}
;;;772    
                          ENDP

000066  0000              DCW      0x0000
                  |L11.104|
                          DCD      SDtype

                          AREA ||i.pfnSDCARD_Delay||, CODE, READONLY, ALIGN=1

                  pfnSDCARD_Delay PROC
;;;201    /*---------------------------------------------------------------------------------------------------------*/
;;;202    static void pfnSDCARD_Delay(uint32_t nCount)
000000  4601              MOV      r1,r0
;;;203    {
;;;204    	uint32_t i;
;;;205    	for(i=nCount;i>0;i--)
000002  e001              B        |L12.8|
                  |L12.4|
;;;206    		__NOP();
000004  bf00              NOP      
000006  1e49              SUBS     r1,r1,#1              ;205
                  |L12.8|
000008  2900              CMP      r1,#0                 ;205
00000a  d1fb              BNE      |L12.4|
;;;207    	
;;;208    }
00000c  4770              BX       lr
;;;209    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  command_list
000000  00009500          DCB      0x00,0x00,0x95,0x00
000004  00000100          DCB      0x00,0x00,0x01,0x00
000008  ff000000          DCB      0xff,0x00,0x00,0x00
00000c  0801ff00          DCB      0x08,0x01,0xff,0x00
000010  04000900          DCB      0x04,0x00,0x09,0x00
000014  ff010000          DCB      0xff,0x01,0x00,0x00
000018  0a00ff01          DCB      0x0a,0x00,0xff,0x01
00001c  00000c00          DCB      0x00,0x00,0x0c,0x00
000020  ff000100          DCB      0xff,0x00,0x01,0x00
000024  0d00ff00          DCB      0x0d,0x00,0xff,0x00
000028  02001001          DCB      0x02,0x00,0x10,0x01
00002c  ff000000          DCB      0xff,0x00,0x00,0x00
000030  1101ff01          DCB      0x11,0x01,0xff,0x01
000034  00001201          DCB      0x00,0x00,0x12,0x01
000038  ff010001          DCB      0xff,0x01,0x00,0x01
00003c  1700ff00          DCB      0x17,0x00,0xff,0x00
000040  00001801          DCB      0x00,0x00,0x18,0x01
000044  ff020000          DCB      0xff,0x02,0x00,0x00
000048  1901ff02          DCB      0x19,0x01,0xff,0x02
00004c  00011b00          DCB      0x00,0x01,0x1b,0x00
000050  ff000000          DCB      0xff,0x00,0x00,0x00
000054  1c01ff00          DCB      0x1c,0x01,0xff,0x00
000058  01001d01          DCB      0x01,0x00,0x1d,0x01
00005c  ff000100          DCB      0xff,0x00,0x01,0x00
000060  1e01ff00          DCB      0x1e,0x01,0xff,0x00
000064  00002001          DCB      0x00,0x00,0x20,0x01
000068  ff000000          DCB      0xff,0x00,0x00,0x00
00006c  2101ff00          DCB      0x21,0x01,0xff,0x00
000070  00002201          DCB      0x00,0x00,0x22,0x01
000074  ff000000          DCB      0xff,0x00,0x00,0x00
000078  2301ff00          DCB      0x23,0x01,0xff,0x00
00007c  00002401          DCB      0x00,0x00,0x24,0x01
000080  ff000000          DCB      0xff,0x00,0x00,0x00
000084  2501ff00          DCB      0x25,0x01,0xff,0x00
000088  00002601          DCB      0x00,0x00,0x26,0x01
00008c  ff000100          DCB      0xff,0x00,0x01,0x00
000090  2a01ff00          DCB      0x2a,0x01,0xff,0x00
000094  00003700          DCB      0x00,0x00,0x37,0x00
000098  ff000000          DCB      0xff,0x00,0x00,0x00
00009c  3a00ff00          DCB      0x3a,0x00,0xff,0x00
0000a0  03003b01          DCB      0x03,0x00,0x3b,0x01
0000a4  ff000000          DCB      0xff,0x00,0x00,0x00
0000a8  8d00ff00          DCB      0x8d,0x00,0xff,0x00
0000ac  02009701          DCB      0x02,0x00,0x97,0x01
0000b0  ff000000          DCB      0xff,0x00,0x00,0x00
0000b4  a901ff00          DCB      0xa9,0x01,0xff,0x00
0000b8  0000              DCB      0x00,0x00
                  Is_Initialized
0000ba  00                DCB      0x00
                  SDtype
0000bb  00                DCB      0x00
                  LogicSector
                          DCD      0x00000000
                  current_blklen
                          DCD      0x00000200
