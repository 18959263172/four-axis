; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvi2c.o --depend=.\obj\drvi2c.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvi2c.crf ..\BSP_Lib\Src\Driver\DrvI2C.c]
                          THUMB

                          AREA ||i.DrvI2C_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  DrvI2C_ClearIntFlag PROC
;;;236    /*---------------------------------------------------------------------------------------------------------*/
;;;237    void DrvI2C_ClearIntFlag(E_I2C_PORT port)
000000  2800              CMP      r0,#0
;;;238    {
;;;239    	if (port)
000002  d007              BEQ      |L1.20|
;;;240    	{						   
;;;241    		I2C1->CON.SI = 1;
000004  4907              LDR      r1,|L1.36|
000006  6809              LDR      r1,[r1,#0]
000008  2208              MOVS     r2,#8
00000a  4391              BICS     r1,r1,r2
00000c  3108              ADDS     r1,r1,#8
00000e  4a05              LDR      r2,|L1.36|
000010  6011              STR      r1,[r2,#0]
000012  e006              B        |L1.34|
                  |L1.20|
;;;242    	}	
;;;243    	else
;;;244    	{
;;;245    		I2C0->CON.SI = 1;	
000014  4904              LDR      r1,|L1.40|
000016  6809              LDR      r1,[r1,#0]
000018  2208              MOVS     r2,#8
00001a  4391              BICS     r1,r1,r2
00001c  3108              ADDS     r1,r1,#8
00001e  4a02              LDR      r2,|L1.40|
000020  6011              STR      r1,[r2,#0]
                  |L1.34|
;;;246    	}	    	
;;;247    }
000022  4770              BX       lr
;;;248    
                          ENDP

                  |L1.36|
                          DCD      0x40120000
                  |L1.40|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_ClearTimeoutFlag||, CODE, READONLY, ALIGN=2

                  DrvI2C_ClearTimeoutFlag PROC
;;;259    /*---------------------------------------------------------------------------------------------------------*/
;;;260    void DrvI2C_ClearTimeoutFlag(E_I2C_PORT port)
000000  2800              CMP      r0,#0
;;;261    {
;;;262    	if (port)
000002  d007              BEQ      |L2.20|
;;;263    	{						   
;;;264    		I2C1->TOC.TIF = 1;
000004  4907              LDR      r1,|L2.36|
000006  6949              LDR      r1,[r1,#0x14]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  1c49              ADDS     r1,r1,#1
00000e  4a05              LDR      r2,|L2.36|
000010  6151              STR      r1,[r2,#0x14]
000012  e006              B        |L2.34|
                  |L2.20|
;;;265    	}	
;;;266    	else
;;;267    	{
;;;268    		I2C0->TOC.TIF = 1;	
000014  4904              LDR      r1,|L2.40|
000016  6949              LDR      r1,[r1,#0x14]
000018  0849              LSRS     r1,r1,#1
00001a  0049              LSLS     r1,r1,#1
00001c  1c49              ADDS     r1,r1,#1
00001e  4a02              LDR      r2,|L2.40|
000020  6151              STR      r1,[r2,#0x14]
                  |L2.34|
;;;269    	}	    	
;;;270    }
000022  4770              BX       lr
;;;271    
                          ENDP

                  |L2.36|
                          DCD      0x40120000
                  |L2.40|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_Close||, CODE, READONLY, ALIGN=2

                  DrvI2C_Close PROC
;;;344    /*---------------------------------------------------------------------------------------------------------*/
;;;345    int32_t DrvI2C_Close(E_I2C_PORT port)
000000  4601              MOV      r1,r0
;;;346    {
;;;347        if (port)
000002  2900              CMP      r1,#0
000004  d01e              BEQ      |L3.68|
;;;348    	{
;;;349    		I2C1->CON.ENSI = 0;
000006  481f              LDR      r0,|L3.132|
000008  6800              LDR      r0,[r0,#0]
00000a  2240              MOVS     r2,#0x40
00000c  4390              BICS     r0,r0,r2
00000e  4a1d              LDR      r2,|L3.132|
000010  6010              STR      r0,[r2,#0]
;;;350    		SYS->IPRSTC2.I2C1_RST = 1;
000012  2005              MOVS     r0,#5
000014  0700              LSLS     r0,r0,#28
000016  68c0              LDR      r0,[r0,#0xc]
000018  1552              ASRS     r2,r2,#21
00001a  4390              BICS     r0,r0,r2
00001c  1880              ADDS     r0,r0,r2
00001e  2205              MOVS     r2,#5
000020  0712              LSLS     r2,r2,#28
000022  60d0              STR      r0,[r2,#0xc]
;;;351    		SYS->IPRSTC2.I2C1_RST = 0;
000024  4610              MOV      r0,r2
000026  68c0              LDR      r0,[r0,#0xc]
000028  2201              MOVS     r2,#1
00002a  0252              LSLS     r2,r2,#9
00002c  4390              BICS     r0,r0,r2
00002e  2205              MOVS     r2,#5
000030  0712              LSLS     r2,r2,#28
000032  60d0              STR      r0,[r2,#0xc]
;;;352    		SYSCLK->APBCLK.I2C1_EN = 0;
000034  4814              LDR      r0,|L3.136|
000036  6880              LDR      r0,[r0,#8]
000038  2201              MOVS     r2,#1
00003a  0252              LSLS     r2,r2,#9
00003c  4390              BICS     r0,r0,r2
00003e  4a12              LDR      r2,|L3.136|
000040  6090              STR      r0,[r2,#8]
000042  e01d              B        |L3.128|
                  |L3.68|
;;;353    	}
;;;354    	else
;;;355    	{
;;;356    		I2C0->CON.ENSI = 0;
000044  4811              LDR      r0,|L3.140|
000046  6800              LDR      r0,[r0,#0]
000048  2240              MOVS     r2,#0x40
00004a  4390              BICS     r0,r0,r2
00004c  4a0f              LDR      r2,|L3.140|
00004e  6010              STR      r0,[r2,#0]
;;;357    		SYS->IPRSTC2.I2C0_RST = 1;
000050  2005              MOVS     r0,#5
000052  0700              LSLS     r0,r0,#28
000054  68c0              LDR      r0,[r0,#0xc]
000056  1592              ASRS     r2,r2,#22
000058  4390              BICS     r0,r0,r2
00005a  1880              ADDS     r0,r0,r2
00005c  2205              MOVS     r2,#5
00005e  0712              LSLS     r2,r2,#28
000060  60d0              STR      r0,[r2,#0xc]
;;;358    		SYS->IPRSTC2.I2C0_RST = 0;
000062  4610              MOV      r0,r2
000064  68c0              LDR      r0,[r0,#0xc]
000066  22ff              MOVS     r2,#0xff
000068  3201              ADDS     r2,#1
00006a  4390              BICS     r0,r0,r2
00006c  2205              MOVS     r2,#5
00006e  0712              LSLS     r2,r2,#28
000070  60d0              STR      r0,[r2,#0xc]
;;;359    		SYSCLK->APBCLK.I2C0_EN = 0;
000072  4805              LDR      r0,|L3.136|
000074  6880              LDR      r0,[r0,#8]
000076  22ff              MOVS     r2,#0xff
000078  3201              ADDS     r2,#1
00007a  4390              BICS     r0,r0,r2
00007c  4a02              LDR      r2,|L3.136|
00007e  6090              STR      r0,[r2,#8]
                  |L3.128|
;;;360    	}
;;;361    	
;;;362    	return 0;
000080  2000              MOVS     r0,#0
;;;363    }
000082  4770              BX       lr
;;;364    
                          ENDP

                  |L3.132|
                          DCD      0x40120000
                  |L3.136|
                          DCD      0x50000200
                  |L3.140|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_Ctrl||, CODE, READONLY, ALIGN=2

                  DrvI2C_Ctrl PROC
;;;135    /*---------------------------------------------------------------------------------------------------------*/
;;;136    void DrvI2C_Ctrl(E_I2C_PORT port, uint8_t start, uint8_t stop, uint8_t intFlag, uint8_t ack)
000000  b5f0              PUSH     {r4-r7,lr}
;;;137    {
000002  9c05              LDR      r4,[sp,#0x14]
;;;138    	
;;;139    	uint32_t Reg = 0;
000004  2500              MOVS     r5,#0
;;;140    		
;;;141    	if (start)
000006  2900              CMP      r1,#0
000008  d001              BEQ      |L4.14|
;;;142    		Reg |= I2C_STA;
00000a  2620              MOVS     r6,#0x20
00000c  4335              ORRS     r5,r5,r6
                  |L4.14|
;;;143    	if (stop)
00000e  2a00              CMP      r2,#0
000010  d001              BEQ      |L4.22|
;;;144    	    Reg |= I2C_STO;
000012  2610              MOVS     r6,#0x10
000014  4335              ORRS     r5,r5,r6
                  |L4.22|
;;;145    	if (intFlag)
000016  2b00              CMP      r3,#0
000018  d001              BEQ      |L4.30|
;;;146    		Reg |= I2C_SI;
00001a  2608              MOVS     r6,#8
00001c  4335              ORRS     r5,r5,r6
                  |L4.30|
;;;147    	if (ack)
00001e  2c00              CMP      r4,#0
000020  d001              BEQ      |L4.38|
;;;148    		Reg |= I2C_AA;
000022  2604              MOVS     r6,#4
000024  4335              ORRS     r5,r5,r6
                  |L4.38|
;;;149    
;;;150    	if (port)
000026  2800              CMP      r0,#0
000028  d007              BEQ      |L4.58|
;;;151    		*((__IO uint32_t *)&I2C1->CON) = (*((__IO uint32_t *)&I2C1->CON) & ~0x3C) | Reg;
00002a  4e08              LDR      r6,|L4.76|
00002c  6836              LDR      r6,[r6,#0]
00002e  273c              MOVS     r7,#0x3c
000030  43be              BICS     r6,r6,r7
000032  432e              ORRS     r6,r6,r5
000034  4f05              LDR      r7,|L4.76|
000036  603e              STR      r6,[r7,#0]
000038  e006              B        |L4.72|
                  |L4.58|
;;;152    	else
;;;153    		*((__IO uint32_t *)&I2C0->CON) = (*((__IO uint32_t *)&I2C0->CON) & ~0x3C) | Reg;	    	
00003a  4e05              LDR      r6,|L4.80|
00003c  6836              LDR      r6,[r6,#0]
00003e  273c              MOVS     r7,#0x3c
000040  43be              BICS     r6,r6,r7
000042  432e              ORRS     r6,r6,r5
000044  4f02              LDR      r7,|L4.80|
000046  603e              STR      r6,[r7,#0]
                  |L4.72|
;;;154    }
000048  bdf0              POP      {r4-r7,pc}
;;;155    
                          ENDP

00004a  0000              DCW      0x0000
                  |L4.76|
                          DCD      0x40120000
                  |L4.80|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvI2C_DisableInt PROC
;;;450    /*---------------------------------------------------------------------------------------------------------*/
;;;451    int32_t DrvI2C_DisableInt(E_I2C_PORT port)
000000  b510              PUSH     {r4,lr}
;;;452    {
000002  4604              MOV      r4,r0
;;;453        if (port)
000004  2c00              CMP      r4,#0
000006  d009              BEQ      |L5.28|
;;;454    	{
;;;455    		I2C1->CON.EI = 0;
000008  480a              LDR      r0,|L5.52|
00000a  6800              LDR      r0,[r0,#0]
00000c  2180              MOVS     r1,#0x80
00000e  4388              BICS     r0,r0,r1
000010  4908              LDR      r1,|L5.52|
000012  6008              STR      r0,[r1,#0]
;;;456    		NVIC_DisableIRQ(I2C1_IRQn);
000014  2013              MOVS     r0,#0x13
000016  f7fffffe          BL       NVIC_DisableIRQ
00001a  e008              B        |L5.46|
                  |L5.28|
;;;457    	}
;;;458    	else
;;;459    	{
;;;460    	    I2C0->CON.EI = 0;
00001c  4806              LDR      r0,|L5.56|
00001e  6800              LDR      r0,[r0,#0]
000020  2180              MOVS     r1,#0x80
000022  4388              BICS     r0,r0,r1
000024  4904              LDR      r1,|L5.56|
000026  6008              STR      r0,[r1,#0]
;;;461    		NVIC_DisableIRQ(I2C0_IRQn);
000028  2012              MOVS     r0,#0x12
00002a  f7fffffe          BL       NVIC_DisableIRQ
                  |L5.46|
;;;462    	}
;;;463    
;;;464    	return 0;
00002e  2000              MOVS     r0,#0
;;;465    }
000030  bd10              POP      {r4,pc}
;;;466    
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      0x40120000
                  |L5.56|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvI2C_EnableInt PROC
;;;423    /*---------------------------------------------------------------------------------------------------------*/
;;;424    int32_t DrvI2C_EnableInt(E_I2C_PORT port)
000000  b510              PUSH     {r4,lr}
;;;425    {
000002  4604              MOV      r4,r0
;;;426        if (port)
000004  2c00              CMP      r4,#0
000006  d00a              BEQ      |L6.30|
;;;427    	{
;;;428    		I2C1->CON.EI = 1;
000008  480b              LDR      r0,|L6.56|
00000a  6800              LDR      r0,[r0,#0]
00000c  2180              MOVS     r1,#0x80
00000e  4388              BICS     r0,r0,r1
000010  3080              ADDS     r0,r0,#0x80
000012  4909              LDR      r1,|L6.56|
000014  6008              STR      r0,[r1,#0]
;;;429    		NVIC_EnableIRQ(I2C1_IRQn);
000016  2013              MOVS     r0,#0x13
000018  f7fffffe          BL       NVIC_EnableIRQ
00001c  e009              B        |L6.50|
                  |L6.30|
;;;430    	}
;;;431    	else
;;;432    	{
;;;433    	    I2C0->CON.EI = 1;
00001e  4807              LDR      r0,|L6.60|
000020  6800              LDR      r0,[r0,#0]
000022  2180              MOVS     r1,#0x80
000024  4388              BICS     r0,r0,r1
000026  3080              ADDS     r0,r0,#0x80
000028  4904              LDR      r1,|L6.60|
00002a  6008              STR      r0,[r1,#0]
;;;434    		NVIC_EnableIRQ(I2C0_IRQn);
00002c  2012              MOVS     r0,#0x12
00002e  f7fffffe          BL       NVIC_EnableIRQ
                  |L6.50|
;;;435    	}
;;;436    
;;;437    	return 0;
000032  2000              MOVS     r0,#0
;;;438    }
000034  bd10              POP      {r4,pc}
;;;439    
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
                          DCD      0x40120000
                  |L6.60|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_GetClockFreq||, CODE, READONLY, ALIGN=2

                  DrvI2C_GetClockFreq PROC
;;;404    /*---------------------------------------------------------------------------------------------------------*/
;;;405    uint32_t DrvI2C_GetClockFreq(E_I2C_PORT port)
000000  b570              PUSH     {r4-r6,lr}
;;;406    {
000002  4604              MOV      r4,r0
;;;407        uint32_t divider;     
;;;408     
;;;409    	divider = ( (port)? I2C1->CLK:I2C0->CLK );
000004  2c00              CMP      r4,#0
000006  d002              BEQ      |L7.14|
000008  4806              LDR      r0,|L7.36|
00000a  6900              LDR      r0,[r0,#0x10]
00000c  e001              B        |L7.18|
                  |L7.14|
00000e  4806              LDR      r0,|L7.40|
000010  6900              LDR      r0,[r0,#0x10]
                  |L7.18|
000012  4605              MOV      r5,r0
;;;410    	return ( SystemCoreClock / ((divider+1)<<2) );
000014  1c68              ADDS     r0,r5,#1
000016  0081              LSLS     r1,r0,#2
000018  4804              LDR      r0,|L7.44|
00001a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001c  f7fffffe          BL       __aeabi_uidivmod
;;;411    }
000020  bd70              POP      {r4-r6,pc}
;;;412    
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      0x40120000
                  |L7.40|
                          DCD      0x40020000
                  |L7.44|
                          DCD      SystemCoreClock

                          AREA ||i.DrvI2C_GetIntFlag||, CODE, READONLY, ALIGN=2

                  DrvI2C_GetIntFlag PROC
;;;213    /*---------------------------------------------------------------------------------------------------------*/
;;;214    uint8_t DrvI2C_GetIntFlag(E_I2C_PORT port)
000000  4601              MOV      r1,r0
;;;215    {
;;;216    	if (port)
000002  2900              CMP      r1,#0
000004  d004              BEQ      |L8.16|
;;;217    	{						   
;;;218    		return I2C1->CON.SI;
000006  4805              LDR      r0,|L8.28|
000008  6800              LDR      r0,[r0,#0]
00000a  0700              LSLS     r0,r0,#28
00000c  0fc0              LSRS     r0,r0,#31
                  |L8.14|
;;;219    	}	
;;;220    	else
;;;221    	{
;;;222    		return I2C0->CON.SI;	
;;;223    	}
;;;224    }
00000e  4770              BX       lr
                  |L8.16|
000010  4803              LDR      r0,|L8.32|
000012  6800              LDR      r0,[r0,#0]            ;222
000014  0700              LSLS     r0,r0,#28             ;222
000016  0fc0              LSRS     r0,r0,#31             ;222
000018  e7f9              B        |L8.14|
;;;225    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x40120000
                  |L8.32|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_GetStatus||, CODE, READONLY, ALIGN=2

                  DrvI2C_GetStatus PROC
;;;282    /*---------------------------------------------------------------------------------------------------------*/
;;;283    uint32_t DrvI2C_GetStatus(E_I2C_PORT port)
000000  4601              MOV      r1,r0
;;;284    {
;;;285    	if (port)
000002  2900              CMP      r1,#0
000004  d002              BEQ      |L9.12|
;;;286    	{
;;;287    		return I2C1->STATUS;
000006  4803              LDR      r0,|L9.20|
000008  68c0              LDR      r0,[r0,#0xc]
                  |L9.10|
;;;288    	}
;;;289    	else
;;;290    	{
;;;291    		return I2C0->STATUS;
;;;292    	}	
;;;293    }
00000a  4770              BX       lr
                  |L9.12|
00000c  4802              LDR      r0,|L9.24|
00000e  68c0              LDR      r0,[r0,#0xc]          ;291
000010  e7fb              B        |L9.10|
;;;294    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40120000
                  |L9.24|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvI2C_GetVersion PROC
;;;786    /*---------------------------------------------------------------------------------------------------------*/
;;;787    uint32_t DrvI2C_GetVersion(void)
000000  4800              LDR      r0,|L10.4|
;;;788    {
;;;789    	return DRVI2C_VERSION_NUM;
;;;790    }
000002  4770              BX       lr
;;;791    
                          ENDP

                  |L10.4|
                          DCD      0x00010202

                          AREA ||i.DrvI2C_InstallCallback||, CODE, READONLY, ALIGN=2

                  DrvI2C_InstallCallback PROC
;;;637    /*---------------------------------------------------------------------------------------------------------*/
;;;638    int32_t DrvI2C_InstallCallback(E_I2C_PORT port, E_I2C_CALLBACK_TYPE Type, I2C_CALLBACK callbackfn)
000000  4603              MOV      r3,r0
;;;639    {
;;;640    	if (port == I2C_PORT0)
000002  2b00              CMP      r3,#0
000004  d117              BNE      |L11.54|
;;;641    	{	
;;;642    		switch(Type)
000006  2900              CMP      r1,#0
000008  d006              BEQ      |L11.24|
00000a  2901              CMP      r1,#1
00000c  d007              BEQ      |L11.30|
00000e  2902              CMP      r1,#2
000010  d008              BEQ      |L11.36|
000012  2903              CMP      r1,#3
000014  d10c              BNE      |L11.48|
000016  e008              B        |L11.42|
                  |L11.24|
;;;643        	{
;;;644            	case I2CFUNC:
;;;645            	{
;;;646                	I2CHandler0.I2CCallBackFn = callbackfn;  
000018  4815              LDR      r0,|L11.112|
00001a  6002              STR      r2,[r0,#0]  ; I2CHandler0
;;;647            		break;
00001c  e00a              B        |L11.52|
                  |L11.30|
;;;648            	}
;;;649            	case ARBITLOSS:
;;;650            	{
;;;651                	I2CHandler0.ArbitLossCallBackFn = callbackfn;  
00001e  4814              LDR      r0,|L11.112|
000020  6042              STR      r2,[r0,#4]  ; I2CHandler0
;;;652            		break;
000022  e007              B        |L11.52|
                  |L11.36|
;;;653            	}
;;;654            	case BUSERROR:
;;;655            	{
;;;656                	I2CHandler0.BusErrCallBackFn = callbackfn;  
000024  4812              LDR      r0,|L11.112|
000026  6082              STR      r2,[r0,#8]  ; I2CHandler0
;;;657            		break;
000028  e004              B        |L11.52|
                  |L11.42|
;;;658            	}        
;;;659            	case TIMEOUT:
;;;660            	{
;;;661                	I2CHandler0.TimeoutCallBackFn = callbackfn;  
00002a  4811              LDR      r0,|L11.112|
00002c  60c2              STR      r2,[r0,#0xc]  ; I2CHandler0
;;;662            		break;
00002e  e001              B        |L11.52|
                  |L11.48|
;;;663            	}
;;;664    			default:
;;;665    				return E_DRVI2C_ERR_ARGUMENT;                             	
000030  4810              LDR      r0,|L11.116|
                  |L11.50|
;;;666    		}
;;;667    	}
;;;668    	else if (port == I2C_PORT1)
;;;669    	{	
;;;670    		switch(Type)
;;;671        	{
;;;672            	case I2CFUNC:
;;;673            	{
;;;674                	I2CHandler1.I2CCallBackFn = callbackfn;  
;;;675            		break;
;;;676            	}
;;;677            	case ARBITLOSS:
;;;678            	{
;;;679                	I2CHandler1.ArbitLossCallBackFn = callbackfn;  
;;;680            		break;
;;;681            	}
;;;682            	case BUSERROR:
;;;683            	{
;;;684                	I2CHandler1.BusErrCallBackFn = callbackfn;  
;;;685            		break;
;;;686            	}        
;;;687            	case TIMEOUT:
;;;688            	{
;;;689                	I2CHandler1.TimeoutCallBackFn = callbackfn;  
;;;690            		break;
;;;691            	}
;;;692    			default:
;;;693    				return E_DRVI2C_ERR_ARGUMENT;                             	
;;;694    		}
;;;695    	}		
;;;696    	return 0;
;;;697    }
000032  4770              BX       lr
                  |L11.52|
000034  e019              B        |L11.106|
                  |L11.54|
000036  2b01              CMP      r3,#1                 ;668
000038  d117              BNE      |L11.106|
00003a  2900              CMP      r1,#0                 ;670
00003c  d006              BEQ      |L11.76|
00003e  2901              CMP      r1,#1                 ;670
000040  d007              BEQ      |L11.82|
000042  2902              CMP      r1,#2                 ;670
000044  d008              BEQ      |L11.88|
000046  2903              CMP      r1,#3                 ;670
000048  d10c              BNE      |L11.100|
00004a  e008              B        |L11.94|
                  |L11.76|
00004c  480a              LDR      r0,|L11.120|
00004e  6002              STR      r2,[r0,#0]            ;674  ; I2CHandler1
000050  e00a              B        |L11.104|
                  |L11.82|
000052  4809              LDR      r0,|L11.120|
000054  6042              STR      r2,[r0,#4]            ;679  ; I2CHandler1
000056  e007              B        |L11.104|
                  |L11.88|
000058  4807              LDR      r0,|L11.120|
00005a  6082              STR      r2,[r0,#8]            ;684  ; I2CHandler1
00005c  e004              B        |L11.104|
                  |L11.94|
00005e  4806              LDR      r0,|L11.120|
000060  60c2              STR      r2,[r0,#0xc]          ;689  ; I2CHandler1
000062  e001              B        |L11.104|
                  |L11.100|
000064  4803              LDR      r0,|L11.116|
000066  e7e4              B        |L11.50|
                  |L11.104|
000068  bf00              NOP                            ;675
                  |L11.106|
00006a  2000              MOVS     r0,#0                 ;696
00006c  e7e1              B        |L11.50|
;;;698    
                          ENDP

00006e  0000              DCW      0x0000
                  |L11.112|
                          DCD      I2CHandler0
                  |L11.116|
                          DCD      0xffff8b01
                  |L11.120|
                          DCD      I2CHandler1

                          AREA ||i.DrvI2C_Open||, CODE, READONLY, ALIGN=2

                  DrvI2C_Open PROC
;;;307    /*---------------------------------------------------------------------------------------------------------*/
;;;308    int32_t DrvI2C_Open(E_I2C_PORT port, uint32_t u32BusClock)
000000  b5f8              PUSH     {r3-r7,lr}
;;;309    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;310        uint32_t divider;     
;;;311     
;;;312    	divider = (uint32_t) (((SystemCoreClock*10)/(u32BusClock * 4) + 5) / 10 - 1);	/* Compute proper divider for I2C clock */
000006  00a9              LSLS     r1,r5,#2
000008  4a2b              LDR      r2,|L12.184|
00000a  6812              LDR      r2,[r2,#0]  ; SystemCoreClock
00000c  230a              MOVS     r3,#0xa
00000e  435a              MULS     r2,r3,r2
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       __aeabi_uidivmod
000016  1d47              ADDS     r7,r0,#5
000018  210a              MOVS     r1,#0xa
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  1e46              SUBS     r6,r0,#1
;;;313    	
;;;314        if (port)
000022  2c00              CMP      r4,#0
000024  d023              BEQ      |L12.110|
;;;315    	{
;;;316    		SYSCLK->APBCLK.I2C1_EN = 1;
000026  4825              LDR      r0,|L12.188|
000028  6880              LDR      r0,[r0,#8]
00002a  2101              MOVS     r1,#1
00002c  0249              LSLS     r1,r1,#9
00002e  4388              BICS     r0,r0,r1
000030  1840              ADDS     r0,r0,r1
000032  4922              LDR      r1,|L12.188|
000034  6088              STR      r0,[r1,#8]
;;;317    		SYS->IPRSTC2.I2C1_RST = 1;
000036  2005              MOVS     r0,#5
000038  0700              LSLS     r0,r0,#28
00003a  68c0              LDR      r0,[r0,#0xc]
00003c  2101              MOVS     r1,#1
00003e  0249              LSLS     r1,r1,#9
000040  4388              BICS     r0,r0,r1
000042  1840              ADDS     r0,r0,r1
000044  2105              MOVS     r1,#5
000046  0709              LSLS     r1,r1,#28
000048  60c8              STR      r0,[r1,#0xc]
;;;318    		SYS->IPRSTC2.I2C1_RST = 0;
00004a  4608              MOV      r0,r1
00004c  68c0              LDR      r0,[r0,#0xc]
00004e  2101              MOVS     r1,#1
000050  0249              LSLS     r1,r1,#9
000052  4388              BICS     r0,r0,r1
000054  2105              MOVS     r1,#5
000056  0709              LSLS     r1,r1,#28
000058  60c8              STR      r0,[r1,#0xc]
;;;319    		I2C1->CON.ENSI = 1;
00005a  4819              LDR      r0,|L12.192|
00005c  6800              LDR      r0,[r0,#0]
00005e  2140              MOVS     r1,#0x40
000060  4388              BICS     r0,r0,r1
000062  3040              ADDS     r0,r0,#0x40
000064  4916              LDR      r1,|L12.192|
000066  6008              STR      r0,[r1,#0]
;;;320    		I2C1->CLK = divider;
000068  4608              MOV      r0,r1
00006a  6106              STR      r6,[r0,#0x10]
00006c  e022              B        |L12.180|
                  |L12.110|
;;;321    	}
;;;322    	else
;;;323    	{
;;;324    		SYSCLK->APBCLK.I2C0_EN = 1;
00006e  4813              LDR      r0,|L12.188|
000070  6880              LDR      r0,[r0,#8]
000072  21ff              MOVS     r1,#0xff
000074  3101              ADDS     r1,#1
000076  4388              BICS     r0,r0,r1
000078  1840              ADDS     r0,r0,r1
00007a  4910              LDR      r1,|L12.188|
00007c  6088              STR      r0,[r1,#8]
;;;325    		SYS->IPRSTC2.I2C0_RST = 1;
00007e  2005              MOVS     r0,#5
000080  0700              LSLS     r0,r0,#28
000082  68c0              LDR      r0,[r0,#0xc]
000084  21ff              MOVS     r1,#0xff
000086  3101              ADDS     r1,#1
000088  4388              BICS     r0,r0,r1
00008a  1840              ADDS     r0,r0,r1
00008c  2105              MOVS     r1,#5
00008e  0709              LSLS     r1,r1,#28
000090  60c8              STR      r0,[r1,#0xc]
;;;326    		SYS->IPRSTC2.I2C0_RST = 0;	
000092  4608              MOV      r0,r1
000094  68c0              LDR      r0,[r0,#0xc]
000096  21ff              MOVS     r1,#0xff
000098  3101              ADDS     r1,#1
00009a  4388              BICS     r0,r0,r1
00009c  2105              MOVS     r1,#5
00009e  0709              LSLS     r1,r1,#28
0000a0  60c8              STR      r0,[r1,#0xc]
;;;327    		I2C0->CON.ENSI = 1;
0000a2  4808              LDR      r0,|L12.196|
0000a4  6800              LDR      r0,[r0,#0]
0000a6  2140              MOVS     r1,#0x40
0000a8  4388              BICS     r0,r0,r1
0000aa  3040              ADDS     r0,r0,#0x40
0000ac  4905              LDR      r1,|L12.196|
0000ae  6008              STR      r0,[r1,#0]
;;;328    		I2C0->CLK = divider;
0000b0  4608              MOV      r0,r1
0000b2  6106              STR      r6,[r0,#0x10]
                  |L12.180|
;;;329    	}
;;;330    
;;;331    	return 0;
0000b4  2000              MOVS     r0,#0
;;;332    }
0000b6  bdf8              POP      {r3-r7,pc}
;;;333    
                          ENDP

                  |L12.184|
                          DCD      SystemCoreClock
                  |L12.188|
                          DCD      0x50000200
                  |L12.192|
                          DCD      0x40120000
                  |L12.196|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_ReadData||, CODE, READONLY, ALIGN=2

                  DrvI2C_ReadData PROC
;;;190    /*---------------------------------------------------------------------------------------------------------*/
;;;191    uint8_t DrvI2C_ReadData(E_I2C_PORT port)
000000  4601              MOV      r1,r0
;;;192    {
;;;193    	if (port)
000002  2900              CMP      r1,#0
000004  d003              BEQ      |L13.14|
;;;194    	{						   
;;;195    		return I2C1->DATA;
000006  4804              LDR      r0,|L13.24|
000008  6880              LDR      r0,[r0,#8]
00000a  b2c0              UXTB     r0,r0
                  |L13.12|
;;;196    	}	
;;;197    	else
;;;198    	{
;;;199    		return I2C0->DATA;	
;;;200    	}
;;;201    }
00000c  4770              BX       lr
                  |L13.14|
00000e  4803              LDR      r0,|L13.28|
000010  6880              LDR      r0,[r0,#8]            ;199
000012  b2c0              UXTB     r0,r0                 ;199
000014  e7fa              B        |L13.12|
;;;202    
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      0x40120000
                  |L13.28|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_SetAddress||, CODE, READONLY, ALIGN=2

                  DrvI2C_SetAddress PROC
;;;508    /*---------------------------------------------------------------------------------------------------------*/
;;;509    int32_t DrvI2C_SetAddress(E_I2C_PORT port, uint8_t slaveNo, uint8_t slave_addr, uint8_t GC_Flag)
000000  b570              PUSH     {r4-r6,lr}
;;;510    {
000002  4604              MOV      r4,r0
;;;511    	if (port)
000004  2c00              CMP      r4,#0
000006  d05b              BEQ      |L14.192|
;;;512    	{
;;;513    		switch (slaveNo)
000008  2900              CMP      r1,#0
00000a  d006              BEQ      |L14.26|
00000c  2901              CMP      r1,#1
00000e  d018              BEQ      |L14.66|
000010  2902              CMP      r1,#2
000012  d02a              BEQ      |L14.106|
000014  2903              CMP      r1,#3
000016  d150              BNE      |L14.186|
000018  e03b              B        |L14.146|
                  |L14.26|
;;;514    		{
;;;515    			case 0:
;;;516    				I2C1->ADDR0.ADDR = slave_addr;
00001a  4858              LDR      r0,|L14.380|
00001c  6840              LDR      r0,[r0,#4]
00001e  25fe              MOVS     r5,#0xfe
000020  43a8              BICS     r0,r0,r5
000022  0055              LSLS     r5,r2,#1
000024  26fe              MOVS     r6,#0xfe
000026  4035              ANDS     r5,r5,r6
000028  4328              ORRS     r0,r0,r5
00002a  4d54              LDR      r5,|L14.380|
00002c  6068              STR      r0,[r5,#4]
;;;517    				I2C1->ADDR0.GC   = GC_Flag;
00002e  4628              MOV      r0,r5
000030  6840              LDR      r0,[r0,#4]
000032  0840              LSRS     r0,r0,#1
000034  0040              LSLS     r0,r0,#1
000036  07dd              LSLS     r5,r3,#31
000038  0fed              LSRS     r5,r5,#31
00003a  4328              ORRS     r0,r0,r5
00003c  4d4f              LDR      r5,|L14.380|
00003e  6068              STR      r0,[r5,#4]
;;;518    				break;
000040  e03d              B        |L14.190|
                  |L14.66|
;;;519    			case 1:
;;;520    				I2C1->ADDR1.ADDR = slave_addr;
000042  484e              LDR      r0,|L14.380|
000044  6980              LDR      r0,[r0,#0x18]
000046  25fe              MOVS     r5,#0xfe
000048  43a8              BICS     r0,r0,r5
00004a  0055              LSLS     r5,r2,#1
00004c  26fe              MOVS     r6,#0xfe
00004e  4035              ANDS     r5,r5,r6
000050  4328              ORRS     r0,r0,r5
000052  4d4a              LDR      r5,|L14.380|
000054  61a8              STR      r0,[r5,#0x18]
;;;521    				I2C1->ADDR1.GC   =	GC_Flag;
000056  4628              MOV      r0,r5
000058  6980              LDR      r0,[r0,#0x18]
00005a  0840              LSRS     r0,r0,#1
00005c  0040              LSLS     r0,r0,#1
00005e  07dd              LSLS     r5,r3,#31
000060  0fed              LSRS     r5,r5,#31
000062  4328              ORRS     r0,r0,r5
000064  4d45              LDR      r5,|L14.380|
000066  61a8              STR      r0,[r5,#0x18]
;;;522    				break;
000068  e029              B        |L14.190|
                  |L14.106|
;;;523    			case 2:
;;;524    				I2C1->ADDR2.ADDR = slave_addr;
00006a  4844              LDR      r0,|L14.380|
00006c  69c0              LDR      r0,[r0,#0x1c]
00006e  25fe              MOVS     r5,#0xfe
000070  43a8              BICS     r0,r0,r5
000072  0055              LSLS     r5,r2,#1
000074  26fe              MOVS     r6,#0xfe
000076  4035              ANDS     r5,r5,r6
000078  4328              ORRS     r0,r0,r5
00007a  4d40              LDR      r5,|L14.380|
00007c  61e8              STR      r0,[r5,#0x1c]
;;;525    				I2C1->ADDR2.GC   =	GC_Flag;
00007e  4628              MOV      r0,r5
000080  69c0              LDR      r0,[r0,#0x1c]
000082  0840              LSRS     r0,r0,#1
000084  0040              LSLS     r0,r0,#1
000086  07dd              LSLS     r5,r3,#31
000088  0fed              LSRS     r5,r5,#31
00008a  4328              ORRS     r0,r0,r5
00008c  4d3b              LDR      r5,|L14.380|
00008e  61e8              STR      r0,[r5,#0x1c]
;;;526    				break;
000090  e015              B        |L14.190|
                  |L14.146|
;;;527    			case 3:
;;;528    				I2C1->ADDR3.ADDR = slave_addr;
000092  483a              LDR      r0,|L14.380|
000094  6a00              LDR      r0,[r0,#0x20]
000096  25fe              MOVS     r5,#0xfe
000098  43a8              BICS     r0,r0,r5
00009a  0055              LSLS     r5,r2,#1
00009c  26fe              MOVS     r6,#0xfe
00009e  4035              ANDS     r5,r5,r6
0000a0  4328              ORRS     r0,r0,r5
0000a2  4d36              LDR      r5,|L14.380|
0000a4  6228              STR      r0,[r5,#0x20]
;;;529    				I2C1->ADDR3.GC   =	GC_Flag;
0000a6  4628              MOV      r0,r5
0000a8  6a00              LDR      r0,[r0,#0x20]
0000aa  0840              LSRS     r0,r0,#1
0000ac  0040              LSLS     r0,r0,#1
0000ae  07dd              LSLS     r5,r3,#31
0000b0  0fed              LSRS     r5,r5,#31
0000b2  4328              ORRS     r0,r0,r5
0000b4  4d31              LDR      r5,|L14.380|
0000b6  6228              STR      r0,[r5,#0x20]
;;;530    				break;
0000b8  e001              B        |L14.190|
                  |L14.186|
;;;531    			default:
;;;532    				return E_DRVI2C_ERR_ARGUMENT;
0000ba  4831              LDR      r0,|L14.384|
                  |L14.188|
;;;533    		}
;;;534    	}
;;;535    	else
;;;536    	{
;;;537    		switch (slaveNo)
;;;538    		{
;;;539    			case 0:
;;;540    				I2C0->ADDR0.ADDR  = slave_addr;
;;;541    				I2C0->ADDR0.GC    = GC_Flag;
;;;542    				break;
;;;543    			case 1:
;;;544    				I2C0->ADDR1.ADDR = slave_addr;
;;;545    				I2C0->ADDR1.GC   =	GC_Flag;
;;;546    				break;
;;;547    			case 2:
;;;548    				I2C0->ADDR2.ADDR = slave_addr;
;;;549    				I2C0->ADDR2.GC   =	GC_Flag;
;;;550    				break;
;;;551    			case 3:
;;;552    				I2C0->ADDR3.ADDR = slave_addr;
;;;553    				I2C0->ADDR3.GC   =	GC_Flag;
;;;554    				break;
;;;555    			default:
;;;556    				return E_DRVI2C_ERR_ARGUMENT;
;;;557    		}	
;;;558    	}
;;;559    	return 0;
;;;560    }
0000bc  bd70              POP      {r4-r6,pc}
                  |L14.190|
0000be  e05b              B        |L14.376|
                  |L14.192|
0000c0  2900              CMP      r1,#0                 ;537
0000c2  d006              BEQ      |L14.210|
0000c4  2901              CMP      r1,#1                 ;537
0000c6  d018              BEQ      |L14.250|
0000c8  2902              CMP      r1,#2                 ;537
0000ca  d02a              BEQ      |L14.290|
0000cc  2903              CMP      r1,#3                 ;537
0000ce  d150              BNE      |L14.370|
0000d0  e03b              B        |L14.330|
                  |L14.210|
0000d2  482c              LDR      r0,|L14.388|
0000d4  6840              LDR      r0,[r0,#4]            ;540
0000d6  25fe              MOVS     r5,#0xfe              ;540
0000d8  43a8              BICS     r0,r0,r5              ;540
0000da  0055              LSLS     r5,r2,#1              ;540
0000dc  26fe              MOVS     r6,#0xfe              ;540
0000de  4035              ANDS     r5,r5,r6              ;540
0000e0  4328              ORRS     r0,r0,r5              ;540
0000e2  4d28              LDR      r5,|L14.388|
0000e4  6068              STR      r0,[r5,#4]            ;540
0000e6  4628              MOV      r0,r5                 ;541
0000e8  6840              LDR      r0,[r0,#4]            ;541
0000ea  0840              LSRS     r0,r0,#1              ;541
0000ec  0040              LSLS     r0,r0,#1              ;541
0000ee  07dd              LSLS     r5,r3,#31             ;541
0000f0  0fed              LSRS     r5,r5,#31             ;541
0000f2  4328              ORRS     r0,r0,r5              ;541
0000f4  4d23              LDR      r5,|L14.388|
0000f6  6068              STR      r0,[r5,#4]            ;541
0000f8  e03d              B        |L14.374|
                  |L14.250|
0000fa  4822              LDR      r0,|L14.388|
0000fc  6980              LDR      r0,[r0,#0x18]         ;544
0000fe  25fe              MOVS     r5,#0xfe              ;544
000100  43a8              BICS     r0,r0,r5              ;544
000102  0055              LSLS     r5,r2,#1              ;544
000104  26fe              MOVS     r6,#0xfe              ;544
000106  4035              ANDS     r5,r5,r6              ;544
000108  4328              ORRS     r0,r0,r5              ;544
00010a  4d1e              LDR      r5,|L14.388|
00010c  61a8              STR      r0,[r5,#0x18]         ;544
00010e  4628              MOV      r0,r5                 ;545
000110  6980              LDR      r0,[r0,#0x18]         ;545
000112  0840              LSRS     r0,r0,#1              ;545
000114  0040              LSLS     r0,r0,#1              ;545
000116  07dd              LSLS     r5,r3,#31             ;545
000118  0fed              LSRS     r5,r5,#31             ;545
00011a  4328              ORRS     r0,r0,r5              ;545
00011c  4d19              LDR      r5,|L14.388|
00011e  61a8              STR      r0,[r5,#0x18]         ;545
000120  e029              B        |L14.374|
                  |L14.290|
000122  4818              LDR      r0,|L14.388|
000124  69c0              LDR      r0,[r0,#0x1c]         ;548
000126  25fe              MOVS     r5,#0xfe              ;548
000128  43a8              BICS     r0,r0,r5              ;548
00012a  0055              LSLS     r5,r2,#1              ;548
00012c  26fe              MOVS     r6,#0xfe              ;548
00012e  4035              ANDS     r5,r5,r6              ;548
000130  4328              ORRS     r0,r0,r5              ;548
000132  4d14              LDR      r5,|L14.388|
000134  61e8              STR      r0,[r5,#0x1c]         ;548
000136  4628              MOV      r0,r5                 ;549
000138  69c0              LDR      r0,[r0,#0x1c]         ;549
00013a  0840              LSRS     r0,r0,#1              ;549
00013c  0040              LSLS     r0,r0,#1              ;549
00013e  07dd              LSLS     r5,r3,#31             ;549
000140  0fed              LSRS     r5,r5,#31             ;549
000142  4328              ORRS     r0,r0,r5              ;549
000144  4d0f              LDR      r5,|L14.388|
000146  61e8              STR      r0,[r5,#0x1c]         ;549
000148  e015              B        |L14.374|
                  |L14.330|
00014a  480e              LDR      r0,|L14.388|
00014c  6a00              LDR      r0,[r0,#0x20]         ;552
00014e  25fe              MOVS     r5,#0xfe              ;552
000150  43a8              BICS     r0,r0,r5              ;552
000152  0055              LSLS     r5,r2,#1              ;552
000154  26fe              MOVS     r6,#0xfe              ;552
000156  4035              ANDS     r5,r5,r6              ;552
000158  4328              ORRS     r0,r0,r5              ;552
00015a  4d0a              LDR      r5,|L14.388|
00015c  6228              STR      r0,[r5,#0x20]         ;552
00015e  4628              MOV      r0,r5                 ;553
000160  6a00              LDR      r0,[r0,#0x20]         ;553
000162  0840              LSRS     r0,r0,#1              ;553
000164  0040              LSLS     r0,r0,#1              ;553
000166  07dd              LSLS     r5,r3,#31             ;553
000168  0fed              LSRS     r5,r5,#31             ;553
00016a  4328              ORRS     r0,r0,r5              ;553
00016c  4d05              LDR      r5,|L14.388|
00016e  6228              STR      r0,[r5,#0x20]         ;553
000170  e001              B        |L14.374|
                  |L14.370|
000172  4803              LDR      r0,|L14.384|
000174  e7a2              B        |L14.188|
                  |L14.374|
000176  bf00              NOP                            ;542
                  |L14.376|
000178  2000              MOVS     r0,#0                 ;559
00017a  e79f              B        |L14.188|
;;;561    
                          ENDP

                  |L14.380|
                          DCD      0x40120000
                  |L14.384|
                          DCD      0xffff8b01
                  |L14.388|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_SetAddressMask||, CODE, READONLY, ALIGN=2

                  DrvI2C_SetAddressMask PROC
;;;575    /*---------------------------------------------------------------------------------------------------------*/
;;;576    int32_t DrvI2C_SetAddressMask(E_I2C_PORT port, uint8_t slaveNo, uint8_t slaveAddrMask)
000000  b530              PUSH     {r4,r5,lr}
;;;577    {
000002  4603              MOV      r3,r0
;;;578    	slaveAddrMask <<= 1;
000004  0650              LSLS     r0,r2,#25
000006  0e02              LSRS     r2,r0,#24
;;;579    	if (port)
000008  2b00              CMP      r3,#0
00000a  d037              BEQ      |L15.124|
;;;580    	{
;;;581    		switch (slaveNo)
00000c  2900              CMP      r1,#0
00000e  d006              BEQ      |L15.30|
000010  2901              CMP      r1,#1
000012  d00f              BEQ      |L15.52|
000014  2902              CMP      r1,#2
000016  d018              BEQ      |L15.74|
000018  2903              CMP      r1,#3
00001a  d12c              BNE      |L15.118|
00001c  e020              B        |L15.96|
                  |L15.30|
;;;582    		{
;;;583    			case 0:
;;;584    				I2C1->ADRM0.ADM = slaveAddrMask;
00001e  4834              LDR      r0,|L15.240|
000020  6a40              LDR      r0,[r0,#0x24]
000022  24fe              MOVS     r4,#0xfe
000024  43a0              BICS     r0,r0,r4
000026  0054              LSLS     r4,r2,#1
000028  25fe              MOVS     r5,#0xfe
00002a  402c              ANDS     r4,r4,r5
00002c  4320              ORRS     r0,r0,r4
00002e  4c30              LDR      r4,|L15.240|
000030  6260              STR      r0,[r4,#0x24]
;;;585    				break;
000032  e022              B        |L15.122|
                  |L15.52|
;;;586    			case 1:
;;;587    				I2C1->ADRM1.ADM = slaveAddrMask;
000034  482e              LDR      r0,|L15.240|
000036  6a80              LDR      r0,[r0,#0x28]
000038  24fe              MOVS     r4,#0xfe
00003a  43a0              BICS     r0,r0,r4
00003c  0054              LSLS     r4,r2,#1
00003e  25fe              MOVS     r5,#0xfe
000040  402c              ANDS     r4,r4,r5
000042  4320              ORRS     r0,r0,r4
000044  4c2a              LDR      r4,|L15.240|
000046  62a0              STR      r0,[r4,#0x28]
;;;588    				break;
000048  e017              B        |L15.122|
                  |L15.74|
;;;589    			case 2:
;;;590    				I2C1->ADRM2.ADM = slaveAddrMask;
00004a  4829              LDR      r0,|L15.240|
00004c  6ac0              LDR      r0,[r0,#0x2c]
00004e  24fe              MOVS     r4,#0xfe
000050  43a0              BICS     r0,r0,r4
000052  0054              LSLS     r4,r2,#1
000054  25fe              MOVS     r5,#0xfe
000056  402c              ANDS     r4,r4,r5
000058  4320              ORRS     r0,r0,r4
00005a  4c25              LDR      r4,|L15.240|
00005c  62e0              STR      r0,[r4,#0x2c]
;;;591    				break;
00005e  e00c              B        |L15.122|
                  |L15.96|
;;;592    			case 3:
;;;593    				I2C1->ADRM3.ADM = slaveAddrMask;
000060  4823              LDR      r0,|L15.240|
000062  6b00              LDR      r0,[r0,#0x30]
000064  24fe              MOVS     r4,#0xfe
000066  43a0              BICS     r0,r0,r4
000068  0054              LSLS     r4,r2,#1
00006a  25fe              MOVS     r5,#0xfe
00006c  402c              ANDS     r4,r4,r5
00006e  4320              ORRS     r0,r0,r4
000070  4c1f              LDR      r4,|L15.240|
000072  6320              STR      r0,[r4,#0x30]
;;;594    				break;
000074  e001              B        |L15.122|
                  |L15.118|
;;;595    			default:
;;;596    				return E_DRVI2C_ERR_ARGUMENT;
000076  481f              LDR      r0,|L15.244|
                  |L15.120|
;;;597    		}
;;;598    	}
;;;599    	else
;;;600    	{
;;;601    		switch (slaveNo)
;;;602    		{
;;;603    			case 0:
;;;604    				I2C0->ADRM0.ADM = slaveAddrMask;
;;;605    				break;
;;;606    			case 1:
;;;607    				I2C0->ADRM1.ADM = slaveAddrMask;
;;;608    				break;
;;;609    			case 2:
;;;610    				I2C0->ADRM2.ADM = slaveAddrMask;
;;;611    				break;
;;;612    			case 3:
;;;613    				I2C0->ADRM3.ADM = slaveAddrMask;
;;;614    				break;
;;;615    			default:
;;;616    				return E_DRVI2C_ERR_ARGUMENT;
;;;617    		}	
;;;618    	}
;;;619    	return 0;
;;;620    }
000078  bd30              POP      {r4,r5,pc}
                  |L15.122|
00007a  e037              B        |L15.236|
                  |L15.124|
00007c  2900              CMP      r1,#0                 ;601
00007e  d006              BEQ      |L15.142|
000080  2901              CMP      r1,#1                 ;601
000082  d00f              BEQ      |L15.164|
000084  2902              CMP      r1,#2                 ;601
000086  d018              BEQ      |L15.186|
000088  2903              CMP      r1,#3                 ;601
00008a  d12c              BNE      |L15.230|
00008c  e020              B        |L15.208|
                  |L15.142|
00008e  481a              LDR      r0,|L15.248|
000090  6a40              LDR      r0,[r0,#0x24]         ;604
000092  24fe              MOVS     r4,#0xfe              ;604
000094  43a0              BICS     r0,r0,r4              ;604
000096  0054              LSLS     r4,r2,#1              ;604
000098  25fe              MOVS     r5,#0xfe              ;604
00009a  402c              ANDS     r4,r4,r5              ;604
00009c  4320              ORRS     r0,r0,r4              ;604
00009e  4c16              LDR      r4,|L15.248|
0000a0  6260              STR      r0,[r4,#0x24]         ;604
0000a2  e022              B        |L15.234|
                  |L15.164|
0000a4  4814              LDR      r0,|L15.248|
0000a6  6a80              LDR      r0,[r0,#0x28]         ;607
0000a8  24fe              MOVS     r4,#0xfe              ;607
0000aa  43a0              BICS     r0,r0,r4              ;607
0000ac  0054              LSLS     r4,r2,#1              ;607
0000ae  25fe              MOVS     r5,#0xfe              ;607
0000b0  402c              ANDS     r4,r4,r5              ;607
0000b2  4320              ORRS     r0,r0,r4              ;607
0000b4  4c10              LDR      r4,|L15.248|
0000b6  62a0              STR      r0,[r4,#0x28]         ;607
0000b8  e017              B        |L15.234|
                  |L15.186|
0000ba  480f              LDR      r0,|L15.248|
0000bc  6ac0              LDR      r0,[r0,#0x2c]         ;610
0000be  24fe              MOVS     r4,#0xfe              ;610
0000c0  43a0              BICS     r0,r0,r4              ;610
0000c2  0054              LSLS     r4,r2,#1              ;610
0000c4  25fe              MOVS     r5,#0xfe              ;610
0000c6  402c              ANDS     r4,r4,r5              ;610
0000c8  4320              ORRS     r0,r0,r4              ;610
0000ca  4c0b              LDR      r4,|L15.248|
0000cc  62e0              STR      r0,[r4,#0x2c]         ;610
0000ce  e00c              B        |L15.234|
                  |L15.208|
0000d0  4809              LDR      r0,|L15.248|
0000d2  6b00              LDR      r0,[r0,#0x30]         ;613
0000d4  24fe              MOVS     r4,#0xfe              ;613
0000d6  43a0              BICS     r0,r0,r4              ;613
0000d8  0054              LSLS     r4,r2,#1              ;613
0000da  25fe              MOVS     r5,#0xfe              ;613
0000dc  402c              ANDS     r4,r4,r5              ;613
0000de  4320              ORRS     r0,r0,r4              ;613
0000e0  4c05              LDR      r4,|L15.248|
0000e2  6320              STR      r0,[r4,#0x30]         ;613
0000e4  e001              B        |L15.234|
                  |L15.230|
0000e6  4803              LDR      r0,|L15.244|
0000e8  e7c6              B        |L15.120|
                  |L15.234|
0000ea  bf00              NOP                            ;605
                  |L15.236|
0000ec  2000              MOVS     r0,#0                 ;619
0000ee  e7c3              B        |L15.120|
;;;621    
                          ENDP

                  |L15.240|
                          DCD      0x40120000
                  |L15.244|
                          DCD      0xffff8b01
                  |L15.248|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_SetClockFreq||, CODE, READONLY, ALIGN=2

                  DrvI2C_SetClockFreq PROC
;;;377    /*---------------------------------------------------------------------------------------------------------*/
;;;378    int32_t DrvI2C_SetClockFreq(E_I2C_PORT port, uint32_t u32BusClock)
000000  b5f8              PUSH     {r3-r7,lr}
;;;379    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;380        uint32_t divider;     
;;;381     
;;;382    	divider = (uint32_t) (((SystemCoreClock*10)/(u32BusClock * 4) + 5) / 10 - 1);
000006  00a9              LSLS     r1,r5,#2
000008  4a0a              LDR      r2,|L16.52|
00000a  6812              LDR      r2,[r2,#0]  ; SystemCoreClock
00000c  230a              MOVS     r3,#0xa
00000e  435a              MULS     r2,r3,r2
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       __aeabi_uidivmod
000016  1d47              ADDS     r7,r0,#5
000018  210a              MOVS     r1,#0xa
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  1e46              SUBS     r6,r0,#1
;;;383        if (port)
000022  2c00              CMP      r4,#0
000024  d002              BEQ      |L16.44|
;;;384    	{
;;;385    		I2C1->CLK = divider;
000026  4804              LDR      r0,|L16.56|
000028  6106              STR      r6,[r0,#0x10]
00002a  e001              B        |L16.48|
                  |L16.44|
;;;386    	}
;;;387    	else
;;;388    	{
;;;389    		I2C0->CLK = divider;
00002c  4803              LDR      r0,|L16.60|
00002e  6106              STR      r6,[r0,#0x10]
                  |L16.48|
;;;390    	}
;;;391    	return 0;
000030  2000              MOVS     r0,#0
;;;392    }
000032  bdf8              POP      {r3-r7,pc}
;;;393    
                          ENDP

                  |L16.52|
                          DCD      SystemCoreClock
                  |L16.56|
                          DCD      0x40120000
                  |L16.60|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_SetTimeoutCounter||, CODE, READONLY, ALIGN=2

                  DrvI2C_SetTimeoutCounter PROC
;;;479    /*---------------------------------------------------------------------------------------------------------*/
;;;480    int32_t DrvI2C_SetTimeoutCounter(E_I2C_PORT port, int32_t i32enable, uint8_t u8div4)
000000  b530              PUSH     {r4,r5,lr}
;;;481    {
000002  4603              MOV      r3,r0
;;;482        if (port)
000004  2b00              CMP      r3,#0
000006  d014              BEQ      |L17.50|
;;;483    	{
;;;484    		I2C1->TOC.DIV4 = u8div4;
000008  4815              LDR      r0,|L17.96|
00000a  6940              LDR      r0,[r0,#0x14]
00000c  2402              MOVS     r4,#2
00000e  43a0              BICS     r0,r0,r4
000010  0054              LSLS     r4,r2,#1
000012  2502              MOVS     r5,#2
000014  402c              ANDS     r4,r4,r5
000016  4320              ORRS     r0,r0,r4
000018  4c11              LDR      r4,|L17.96|
00001a  6160              STR      r0,[r4,#0x14]
;;;485    		I2C1->TOC.ENTI = i32enable;
00001c  4620              MOV      r0,r4
00001e  6940              LDR      r0,[r0,#0x14]
000020  2404              MOVS     r4,#4
000022  43a0              BICS     r0,r0,r4
000024  008c              LSLS     r4,r1,#2
000026  2504              MOVS     r5,#4
000028  402c              ANDS     r4,r4,r5
00002a  4320              ORRS     r0,r0,r4
00002c  4c0c              LDR      r4,|L17.96|
00002e  6160              STR      r0,[r4,#0x14]
000030  e013              B        |L17.90|
                  |L17.50|
;;;486    	}
;;;487    	else
;;;488    	{
;;;489    	    I2C0->TOC.DIV4 = u8div4;
000032  480c              LDR      r0,|L17.100|
000034  6940              LDR      r0,[r0,#0x14]
000036  2402              MOVS     r4,#2
000038  43a0              BICS     r0,r0,r4
00003a  0054              LSLS     r4,r2,#1
00003c  2502              MOVS     r5,#2
00003e  402c              ANDS     r4,r4,r5
000040  4320              ORRS     r0,r0,r4
000042  4c08              LDR      r4,|L17.100|
000044  6160              STR      r0,[r4,#0x14]
;;;490    		I2C0->TOC.ENTI = i32enable;
000046  4620              MOV      r0,r4
000048  6940              LDR      r0,[r0,#0x14]
00004a  2404              MOVS     r4,#4
00004c  43a0              BICS     r0,r0,r4
00004e  008c              LSLS     r4,r1,#2
000050  2504              MOVS     r5,#4
000052  402c              ANDS     r4,r4,r5
000054  4320              ORRS     r0,r0,r4
000056  4c03              LDR      r4,|L17.100|
000058  6160              STR      r0,[r4,#0x14]
                  |L17.90|
;;;491    	}
;;;492    	return 0;
00005a  2000              MOVS     r0,#0
;;;493    }
00005c  bd30              POP      {r4,r5,pc}
;;;494    
                          ENDP

00005e  0000              DCW      0x0000
                  |L17.96|
                          DCD      0x40120000
                  |L17.100|
                          DCD      0x40020000

                          AREA ||i.DrvI2C_UninstallCallBack||, CODE, READONLY, ALIGN=2

                  DrvI2C_UninstallCallBack PROC
;;;713    /*---------------------------------------------------------------------------------------------------------*/
;;;714    int32_t DrvI2C_UninstallCallBack(E_I2C_PORT port, E_I2C_CALLBACK_TYPE Type)
000000  4602              MOV      r2,r0
;;;715    {
;;;716    	if (port == I2C_PORT0)
000002  2a00              CMP      r2,#0
000004  d11b              BNE      |L18.62|
;;;717    	{ 
;;;718    		switch(Type)
000006  2900              CMP      r1,#0
000008  d006              BEQ      |L18.24|
00000a  2901              CMP      r1,#1
00000c  d008              BEQ      |L18.32|
00000e  2902              CMP      r1,#2
000010  d00a              BEQ      |L18.40|
000012  2903              CMP      r1,#3
000014  d110              BNE      |L18.56|
000016  e00b              B        |L18.48|
                  |L18.24|
;;;719        	{
;;;720            	case I2CFUNC:
;;;721            	{
;;;722                	I2CHandler0.I2CCallBackFn = 0;  
000018  2000              MOVS     r0,#0
00001a  4b19              LDR      r3,|L18.128|
00001c  6018              STR      r0,[r3,#0]  ; I2CHandler0
;;;723            		break;
00001e  e00d              B        |L18.60|
                  |L18.32|
;;;724            	}
;;;725            	case ARBITLOSS:
;;;726            	{
;;;727                	I2CHandler0.ArbitLossCallBackFn = 0;  
000020  2000              MOVS     r0,#0
000022  4b17              LDR      r3,|L18.128|
000024  6058              STR      r0,[r3,#4]  ; I2CHandler0
;;;728            		break;
000026  e009              B        |L18.60|
                  |L18.40|
;;;729            	}
;;;730            	case BUSERROR:
;;;731            	{
;;;732                	I2CHandler0.BusErrCallBackFn = 0;  
000028  2000              MOVS     r0,#0
00002a  4b15              LDR      r3,|L18.128|
00002c  6098              STR      r0,[r3,#8]  ; I2CHandler0
;;;733            		break;
00002e  e005              B        |L18.60|
                  |L18.48|
;;;734            	}        
;;;735            	case TIMEOUT:
;;;736            	{
;;;737                	I2CHandler0.TimeoutCallBackFn = 0;  
000030  2000              MOVS     r0,#0
000032  4b13              LDR      r3,|L18.128|
000034  60d8              STR      r0,[r3,#0xc]  ; I2CHandler0
;;;738            		break;
000036  e001              B        |L18.60|
                  |L18.56|
;;;739            	}
;;;740    			default:
;;;741    				return E_DRVI2C_ERR_ARGUMENT;                             	
000038  4812              LDR      r0,|L18.132|
                  |L18.58|
;;;742    		}	                  	
;;;743    	}
;;;744    	else if (port == I2C_PORT1)
;;;745    	{ 
;;;746    		switch(Type)
;;;747        	{
;;;748            	case I2CFUNC:
;;;749            	{
;;;750                	I2CHandler1.I2CCallBackFn = 0;  
;;;751            		break;
;;;752            	}
;;;753            	case ARBITLOSS:
;;;754            	{
;;;755                	I2CHandler1.ArbitLossCallBackFn = 0;  
;;;756            		break;
;;;757            	}
;;;758            	case BUSERROR:
;;;759            	{
;;;760                	I2CHandler1.BusErrCallBackFn = 0;  
;;;761            		break;
;;;762            	}        
;;;763            	case TIMEOUT:
;;;764            	{
;;;765                	I2CHandler1.TimeoutCallBackFn = 0;  
;;;766            		break;
;;;767            	}
;;;768    			default:
;;;769    				return E_DRVI2C_ERR_ARGUMENT;                             	
;;;770    		}	                  	
;;;771    	}		
;;;772    	return 0;
;;;773    }
00003a  4770              BX       lr
                  |L18.60|
00003c  e01d              B        |L18.122|
                  |L18.62|
00003e  2a01              CMP      r2,#1                 ;744
000040  d11b              BNE      |L18.122|
000042  2900              CMP      r1,#0                 ;746
000044  d006              BEQ      |L18.84|
000046  2901              CMP      r1,#1                 ;746
000048  d008              BEQ      |L18.92|
00004a  2902              CMP      r1,#2                 ;746
00004c  d00a              BEQ      |L18.100|
00004e  2903              CMP      r1,#3                 ;746
000050  d110              BNE      |L18.116|
000052  e00b              B        |L18.108|
                  |L18.84|
000054  2000              MOVS     r0,#0                 ;750
000056  4b0c              LDR      r3,|L18.136|
000058  6018              STR      r0,[r3,#0]            ;750  ; I2CHandler1
00005a  e00d              B        |L18.120|
                  |L18.92|
00005c  2000              MOVS     r0,#0                 ;755
00005e  4b0a              LDR      r3,|L18.136|
000060  6058              STR      r0,[r3,#4]            ;755  ; I2CHandler1
000062  e009              B        |L18.120|
                  |L18.100|
000064  2000              MOVS     r0,#0                 ;760
000066  4b08              LDR      r3,|L18.136|
000068  6098              STR      r0,[r3,#8]            ;760  ; I2CHandler1
00006a  e005              B        |L18.120|
                  |L18.108|
00006c  2000              MOVS     r0,#0                 ;765
00006e  4b06              LDR      r3,|L18.136|
000070  60d8              STR      r0,[r3,#0xc]          ;765  ; I2CHandler1
000072  e001              B        |L18.120|
                  |L18.116|
000074  4803              LDR      r0,|L18.132|
000076  e7e0              B        |L18.58|
                  |L18.120|
000078  bf00              NOP                            ;751
                  |L18.122|
00007a  2000              MOVS     r0,#0                 ;772
00007c  e7dd              B        |L18.58|
;;;774    
                          ENDP

00007e  0000              DCW      0x0000
                  |L18.128|
                          DCD      I2CHandler0
                  |L18.132|
                          DCD      0xffff8b01
                  |L18.136|
                          DCD      I2CHandler1

                          AREA ||i.DrvI2C_WriteData||, CODE, READONLY, ALIGN=2

                  DrvI2C_WriteData PROC
;;;167    /*---------------------------------------------------------------------------------------------------------*/
;;;168    void DrvI2C_WriteData(E_I2C_PORT port, uint8_t u8data)
000000  2800              CMP      r0,#0
;;;169    {
;;;170    	if (port)
000002  d002              BEQ      |L19.10|
;;;171    	{						   
;;;172    		I2C1->DATA = u8data;
000004  4a02              LDR      r2,|L19.16|
000006  6091              STR      r1,[r2,#8]
000008  e001              B        |L19.14|
                  |L19.10|
;;;173    	}	
;;;174    	else
;;;175    	{
;;;176    		I2C0->DATA = u8data;	
00000a  4a02              LDR      r2,|L19.20|
00000c  6091              STR      r1,[r2,#8]
                  |L19.14|
;;;177    	}
;;;178    }
00000e  4770              BX       lr
;;;179    
                          ENDP

                  |L19.16|
                          DCD      0x40120000
                  |L19.20|
                          DCD      0x40020000

                          AREA ||i.I2C0_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2C0_IRQHandler PROC
;;;29     /*---------------------------------------------------------------------------------------------------------*/
;;;30     void I2C0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;31     {
;;;32         uint32_t status;
;;;33     
;;;34       	status  = I2C0->STATUS;
000002  481b              LDR      r0,|L20.112|
000004  68c4              LDR      r4,[r0,#0xc]
;;;35     
;;;36         if (I2C0->TOC.TIF)
000006  6940              LDR      r0,[r0,#0x14]
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
00000c  d00f              BEQ      |L20.46|
;;;37     	{
;;;38     		I2C0->TOC.TIF = 1;	/* Clear TIF */
00000e  4818              LDR      r0,|L20.112|
000010  6940              LDR      r0,[r0,#0x14]
000012  0840              LSRS     r0,r0,#1
000014  0040              LSLS     r0,r0,#1
000016  1c40              ADDS     r0,r0,#1
000018  4915              LDR      r1,|L20.112|
00001a  6148              STR      r0,[r1,#0x14]
;;;39            	
;;;40     		if (I2CHandler0.TimeoutCallBackFn)
00001c  4815              LDR      r0,|L20.116|
00001e  68c0              LDR      r0,[r0,#0xc]  ; I2CHandler0
000020  2800              CMP      r0,#0
000022  d024              BEQ      |L20.110|
;;;41     		{
;;;42     			I2CHandler0.TimeoutCallBackFn(status); 
000024  4813              LDR      r0,|L20.116|
000026  68c1              LDR      r1,[r0,#0xc]  ; I2CHandler0
000028  4620              MOV      r0,r4
00002a  4788              BLX      r1
00002c  e01f              B        |L20.110|
                  |L20.46|
;;;43     		}
;;;44     	}
;;;45     	else
;;;46     	{
;;;47     		switch (status)
00002e  2c00              CMP      r4,#0
000030  d00a              BEQ      |L20.72|
000032  2c38              CMP      r4,#0x38
000034  d111              BNE      |L20.90|
;;;48         	{	
;;;49          		case 0x38:	/* Arbitration loss */
;;;50          		{
;;;51             		if (I2CHandler0.ArbitLossCallBackFn)
000036  480f              LDR      r0,|L20.116|
000038  6840              LDR      r0,[r0,#4]  ; I2CHandler0
00003a  2800              CMP      r0,#0
00003c  d003              BEQ      |L20.70|
;;;52     					I2CHandler0.ArbitLossCallBackFn(status); 
00003e  480d              LDR      r0,|L20.116|
000040  6841              LDR      r1,[r0,#4]  ; I2CHandler0
000042  4620              MOV      r0,r4
000044  4788              BLX      r1
                  |L20.70|
;;;53          	    	break;
000046  e011              B        |L20.108|
                  |L20.72|
;;;54          		}
;;;55      			case 0x00: 	/* Bus error */
;;;56     			{
;;;57             		if (I2CHandler0.BusErrCallBackFn)
000048  480a              LDR      r0,|L20.116|
00004a  6880              LDR      r0,[r0,#8]  ; I2CHandler0
00004c  2800              CMP      r0,#0
00004e  d003              BEQ      |L20.88|
;;;58     					I2CHandler0.BusErrCallBackFn(status); 
000050  4808              LDR      r0,|L20.116|
000052  6881              LDR      r1,[r0,#8]  ; I2CHandler0
000054  4620              MOV      r0,r4
000056  4788              BLX      r1
                  |L20.88|
;;;59          	    	break;
000058  e008              B        |L20.108|
                  |L20.90|
;;;60     			}
;;;61     			default:
;;;62     			{
;;;63             		if (I2CHandler0.I2CCallBackFn)
00005a  4806              LDR      r0,|L20.116|
00005c  6800              LDR      r0,[r0,#0]  ; I2CHandler0
00005e  2800              CMP      r0,#0
000060  d003              BEQ      |L20.106|
;;;64     					I2CHandler0.I2CCallBackFn(status); 			
000062  4804              LDR      r0,|L20.116|
000064  6801              LDR      r1,[r0,#0]  ; I2CHandler0
000066  4620              MOV      r0,r4
000068  4788              BLX      r1
                  |L20.106|
00006a  bf00              NOP                            ;47
                  |L20.108|
00006c  bf00              NOP                            ;53
                  |L20.110|
;;;65     			}		
;;;66     		}	
;;;67     	}
;;;68     }
00006e  bd10              POP      {r4,pc}
;;;69     
                          ENDP

                  |L20.112|
                          DCD      0x40020000
                  |L20.116|
                          DCD      I2CHandler0

                          AREA ||i.I2C1_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2C1_IRQHandler PROC
;;;80     /*---------------------------------------------------------------------------------------------------------*/
;;;81     void I2C1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;82     {
;;;83         uint32_t status;
;;;84     
;;;85       	status  = I2C1->STATUS;
000002  481b              LDR      r0,|L21.112|
000004  68c4              LDR      r4,[r0,#0xc]
;;;86     
;;;87         if (I2C1->TOC.TIF)
000006  6940              LDR      r0,[r0,#0x14]
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
00000c  d00f              BEQ      |L21.46|
;;;88     	{
;;;89     		I2C1->TOC.TIF = 1;	/* Clear TIF */
00000e  4818              LDR      r0,|L21.112|
000010  6940              LDR      r0,[r0,#0x14]
000012  0840              LSRS     r0,r0,#1
000014  0040              LSLS     r0,r0,#1
000016  1c40              ADDS     r0,r0,#1
000018  4915              LDR      r1,|L21.112|
00001a  6148              STR      r0,[r1,#0x14]
;;;90            	
;;;91     		if (I2CHandler1.TimeoutCallBackFn)
00001c  4815              LDR      r0,|L21.116|
00001e  68c0              LDR      r0,[r0,#0xc]  ; I2CHandler1
000020  2800              CMP      r0,#0
000022  d024              BEQ      |L21.110|
;;;92     		{
;;;93     			I2CHandler1.TimeoutCallBackFn(status); 
000024  4813              LDR      r0,|L21.116|
000026  68c1              LDR      r1,[r0,#0xc]  ; I2CHandler1
000028  4620              MOV      r0,r4
00002a  4788              BLX      r1
00002c  e01f              B        |L21.110|
                  |L21.46|
;;;94     		}
;;;95     	}
;;;96     	else
;;;97     	{
;;;98     		switch (status)
00002e  2c00              CMP      r4,#0
000030  d00a              BEQ      |L21.72|
000032  2c38              CMP      r4,#0x38
000034  d111              BNE      |L21.90|
;;;99         	{	
;;;100         		case 0x38:	/* Arbitration loss */
;;;101         		{
;;;102            		if (I2CHandler1.ArbitLossCallBackFn)
000036  480f              LDR      r0,|L21.116|
000038  6840              LDR      r0,[r0,#4]  ; I2CHandler1
00003a  2800              CMP      r0,#0
00003c  d003              BEQ      |L21.70|
;;;103    					I2CHandler1.ArbitLossCallBackFn(status); 
00003e  480d              LDR      r0,|L21.116|
000040  6841              LDR      r1,[r0,#4]  ; I2CHandler1
000042  4620              MOV      r0,r4
000044  4788              BLX      r1
                  |L21.70|
;;;104         	    	break;
000046  e011              B        |L21.108|
                  |L21.72|
;;;105         		}
;;;106     			case 0x00:	/* Bus error */
;;;107    			{
;;;108            		if (I2CHandler1.BusErrCallBackFn)
000048  480a              LDR      r0,|L21.116|
00004a  6880              LDR      r0,[r0,#8]  ; I2CHandler1
00004c  2800              CMP      r0,#0
00004e  d003              BEQ      |L21.88|
;;;109    					I2CHandler1.BusErrCallBackFn(status); 
000050  4808              LDR      r0,|L21.116|
000052  6881              LDR      r1,[r0,#8]  ; I2CHandler1
000054  4620              MOV      r0,r4
000056  4788              BLX      r1
                  |L21.88|
;;;110         	    	break;
000058  e008              B        |L21.108|
                  |L21.90|
;;;111    			}
;;;112    			default:
;;;113    			{
;;;114            		if (I2CHandler1.I2CCallBackFn)
00005a  4806              LDR      r0,|L21.116|
00005c  6800              LDR      r0,[r0,#0]  ; I2CHandler1
00005e  2800              CMP      r0,#0
000060  d003              BEQ      |L21.106|
;;;115    					I2CHandler1.I2CCallBackFn(status); 			
000062  4804              LDR      r0,|L21.116|
000064  6801              LDR      r1,[r0,#0]  ; I2CHandler1
000066  4620              MOV      r0,r4
000068  4788              BLX      r1
                  |L21.106|
00006a  bf00              NOP                            ;98
                  |L21.108|
00006c  bf00              NOP                            ;104
                  |L21.110|
;;;116    			}		
;;;117    		}	
;;;118    	}  
;;;119    }
00006e  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  |L21.112|
                          DCD      0x40120000
                  |L21.116|
                          DCD      I2CHandler1

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L22.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L22.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L23.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L23.16|
                          DCD      0xe000e100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  I2CHandler0
                          %        16
                  I2CHandler1
                          %        16
