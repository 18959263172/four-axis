; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvcan.o --depend=.\obj\drvcan.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvcan.crf ..\BSP_Lib\Src\Driver\DrvCAN.c]
                          THUMB

                          AREA ||i.CAN0_IRQHandler||, CODE, READONLY, ALIGN=2

                  CAN0_IRQHandler PROC
;;;23     /*---------------------------------------------------------------------------------------------------------*/
;;;24     void CAN0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26         uint32_t status;
;;;27     	status  = inpw(&CAN0->INTR);
000002  4838              LDR      r0,|L1.228|
000004  68c4              LDR      r4,[r0,#0xc]
;;;28     	 	
;;;29     	if(CAN0->INTR.BEI ==1)								/* Bus Error Interrupt */
000006  68c0              LDR      r0,[r0,#0xc]
000008  0600              LSLS     r0,r0,#24
00000a  0fc0              LSRS     r0,r0,#31
00000c  2801              CMP      r0,#1
00000e  d10e              BNE      |L1.46|
;;;30     	{
;;;31     		CAN0->INTR.BEI =1 ; 							/* Clear Bus Error Interrupt Flag */			
000010  4834              LDR      r0,|L1.228|
000012  68c0              LDR      r0,[r0,#0xc]
000014  2180              MOVS     r1,#0x80
000016  4388              BICS     r0,r0,r1
000018  3080              ADDS     r0,r0,#0x80
00001a  4932              LDR      r1,|L1.228|
00001c  60c8              STR      r0,[r1,#0xc]
;;;32     
;;;33         	if (CANHandler.BusErrorCallBackFn)				/* Bus Error Interrupt Callback Function */ 
00001e  4832              LDR      r0,|L1.232|
000020  6800              LDR      r0,[r0,#0]  ; CANHandler
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L1.46|
;;;34     		{
;;;35     			CANHandler.BusErrorCallBackFn(status); 
000026  4830              LDR      r0,|L1.232|
000028  6801              LDR      r1,[r0,#0]  ; CANHandler
00002a  4620              MOV      r0,r4
00002c  4788              BLX      r1
                  |L1.46|
;;;36     		}
;;;37     
;;;38     		CAN_DEBUG("Bus Error Interrupt\n");
;;;39      	}
;;;40     				   
;;;41     	if(CAN0->INTR.ALI ==1)		/* Arbitration Lost Interrupt */
00002e  482d              LDR      r0,|L1.228|
000030  68c0              LDR      r0,[r0,#0xc]
000032  0640              LSLS     r0,r0,#25
000034  0fc0              LSRS     r0,r0,#31
000036  2801              CMP      r0,#1
000038  d10e              BNE      |L1.88|
;;;42     	{
;;;43     		CAN0->INTR.ALI =1 ; 						   	/* Clear Arbitration Lost Interrupt Flag */
00003a  482a              LDR      r0,|L1.228|
00003c  68c0              LDR      r0,[r0,#0xc]
00003e  2140              MOVS     r1,#0x40
000040  4388              BICS     r0,r0,r1
000042  3040              ADDS     r0,r0,#0x40
000044  4927              LDR      r1,|L1.228|
000046  60c8              STR      r0,[r1,#0xc]
;;;44     
;;;45     		if (CANHandler.ArbitLostCallBackFn)				/* Arbitration Lost Interrupt Callback Function */
000048  4827              LDR      r0,|L1.232|
00004a  6840              LDR      r0,[r0,#4]  ; CANHandler
00004c  2800              CMP      r0,#0
00004e  d003              BEQ      |L1.88|
;;;46     		{
;;;47     			CANHandler.ArbitLostCallBackFn(status); 
000050  4825              LDR      r0,|L1.232|
000052  6841              LDR      r1,[r0,#4]  ; CANHandler
000054  4620              MOV      r0,r4
000056  4788              BLX      r1
                  |L1.88|
;;;48     		}
;;;49     		CAN_DEBUG("Arbitration Lost Interrupt\n");
;;;50     
;;;51       	}			   
;;;52     	
;;;53     	if(CAN0->INTR.WUI ==1)		/* Wake-Up Interrupt */
000058  4822              LDR      r0,|L1.228|
00005a  68c0              LDR      r0,[r0,#0xc]
00005c  06c0              LSLS     r0,r0,#27
00005e  0fc0              LSRS     r0,r0,#31
000060  2801              CMP      r0,#1
000062  d114              BNE      |L1.142|
;;;54     	{												  	
;;;55     		CAN0->CMD.WAKEUP_EN = 0; 						/* When the system being wakeup, this bit must be
000064  481f              LDR      r0,|L1.228|
000066  6840              LDR      r0,[r0,#4]
000068  2140              MOVS     r1,#0x40
00006a  4388              BICS     r0,r0,r1
00006c  491d              LDR      r1,|L1.228|
00006e  6048              STR      r0,[r1,#4]
;;;56     														   clear before the user clears the interrupt flag.*/
;;;57     		CAN0->INTR.WUI =1 ; 						  	/* Clear Wake-Up Interrupt Flag */
000070  4608              MOV      r0,r1
000072  68c0              LDR      r0,[r0,#0xc]
000074  2110              MOVS     r1,#0x10
000076  4388              BICS     r0,r0,r1
000078  3010              ADDS     r0,r0,#0x10
00007a  491a              LDR      r1,|L1.228|
00007c  60c8              STR      r0,[r1,#0xc]
;;;58     
;;;59             if (CANHandler.WakeUpCallBackFn)				/* Wake-Up Interrupt Callback Function */
00007e  481a              LDR      r0,|L1.232|
000080  6880              LDR      r0,[r0,#8]  ; CANHandler
000082  2800              CMP      r0,#0
000084  d003              BEQ      |L1.142|
;;;60     		{
;;;61     			CANHandler.WakeUpCallBackFn(status); 
000086  4818              LDR      r0,|L1.232|
000088  6881              LDR      r1,[r0,#8]  ; CANHandler
00008a  4620              MOV      r0,r4
00008c  4788              BLX      r1
                  |L1.142|
;;;62     		}
;;;63     		CAN_DEBUG("Wake up Interrupt\n");
;;;64     
;;;65       	}			   
;;;66     	if(CAN0->INTR.TI ==1)	 	/* Transmit Interrupt */
00008e  4815              LDR      r0,|L1.228|
000090  68c0              LDR      r0,[r0,#0xc]
000092  0780              LSLS     r0,r0,#30
000094  0fc0              LSRS     r0,r0,#31
000096  2801              CMP      r0,#1
000098  d10e              BNE      |L1.184|
;;;67     	{
;;;68     		CAN0->INTR.TI =1 ; 							   	/* Clear Transmit Interrupt Flag */
00009a  4812              LDR      r0,|L1.228|
00009c  68c0              LDR      r0,[r0,#0xc]
00009e  2102              MOVS     r1,#2
0000a0  4388              BICS     r0,r0,r1
0000a2  1c80              ADDS     r0,r0,#2
0000a4  490f              LDR      r1,|L1.228|
0000a6  60c8              STR      r0,[r1,#0xc]
;;;69     
;;;70     		if (CANHandler.TransmitCallBackFn)				/* Transmit Interrupt Callback Function */
0000a8  480f              LDR      r0,|L1.232|
0000aa  68c0              LDR      r0,[r0,#0xc]  ; CANHandler
0000ac  2800              CMP      r0,#0
0000ae  d003              BEQ      |L1.184|
;;;71     		{
;;;72     			CANHandler.TransmitCallBackFn(status); 
0000b0  480d              LDR      r0,|L1.232|
0000b2  68c1              LDR      r1,[r0,#0xc]  ; CANHandler
0000b4  4620              MOV      r0,r4
0000b6  4788              BLX      r1
                  |L1.184|
;;;73     		}
;;;74     		CAN_DEBUG("Transmit Interrupt\n");
;;;75     
;;;76       	}			   
;;;77     	if(CAN0->INTR.RI ==1)		/* Receive Interrupt */
0000b8  480a              LDR      r0,|L1.228|
0000ba  68c0              LDR      r0,[r0,#0xc]
0000bc  07c0              LSLS     r0,r0,#31
0000be  0fc0              LSRS     r0,r0,#31
0000c0  2801              CMP      r0,#1
0000c2  d10e              BNE      |L1.226|
;;;78     	{
;;;79     		CAN0->INTR.RI =1 ; 							  	/* Clear Receive Interrupt Flag */
0000c4  4807              LDR      r0,|L1.228|
0000c6  68c0              LDR      r0,[r0,#0xc]
0000c8  0840              LSRS     r0,r0,#1
0000ca  0040              LSLS     r0,r0,#1
0000cc  1c40              ADDS     r0,r0,#1
0000ce  4905              LDR      r1,|L1.228|
0000d0  60c8              STR      r0,[r1,#0xc]
;;;80     
;;;81     		if (CANHandler.ReceiveCallBackFn)				/* Receive Interrupt Callback Function */
0000d2  4805              LDR      r0,|L1.232|
0000d4  6900              LDR      r0,[r0,#0x10]  ; CANHandler
0000d6  2800              CMP      r0,#0
0000d8  d003              BEQ      |L1.226|
;;;82     		{
;;;83     			CANHandler.ReceiveCallBackFn(status); 
0000da  4803              LDR      r0,|L1.232|
0000dc  6901              LDR      r1,[r0,#0x10]  ; CANHandler
0000de  4620              MOV      r0,r4
0000e0  4788              BLX      r1
                  |L1.226|
;;;84     		}
;;;85     		CAN_DEBUG("Receive Interrupt\n");
;;;86       	}			   
;;;87     
;;;88     
;;;89     }
0000e2  bd10              POP      {r4,pc}
;;;90     
                          ENDP

                  |L1.228|
                          DCD      0x40180000
                  |L1.232|
                          DCD      CANHandler

                          AREA ||i.DrvCAN_Close||, CODE, READONLY, ALIGN=2

                  DrvCAN_Close PROC
;;;198    
;;;199    int32_t DrvCAN_Close()
000000  4807              LDR      r0,|L2.32|
;;;200    {
;;;201    	/*Disable APB CLK & CAN BUS*/
;;;202    	SYSCLK->APBCLK.CAN0_EN =0;
000002  6880              LDR      r0,[r0,#8]
000004  2101              MOVS     r1,#1
000006  0609              LSLS     r1,r1,#24
000008  4388              BICS     r0,r0,r1
00000a  4905              LDR      r1,|L2.32|
00000c  6088              STR      r0,[r1,#8]
;;;203    	
;;;204    	CAN0->CMD.CAN_EN =0;
00000e  4805              LDR      r0,|L2.36|
000010  6840              LDR      r0,[r0,#4]
000012  2180              MOVS     r1,#0x80
000014  4388              BICS     r0,r0,r1
000016  4903              LDR      r1,|L2.36|
000018  6048              STR      r0,[r1,#4]
;;;205    
;;;206    	return E_SUCCESS;
00001a  2000              MOVS     r0,#0
;;;207    
;;;208    }
00001c  4770              BX       lr
;;;209    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0x50000200
                  |L2.36|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvCAN_DisableInt PROC
;;;442    /*---------------------------------------------------------------------------------------------------------*/
;;;443    int32_t DrvCAN_DisableInt(uint32_t u32InterruptSrc)
000000  4601              MOV      r1,r0
;;;444    {
;;;445     	if(u32InterruptSrc & DRVCAN_INT_BEI)
000002  2080              MOVS     r0,#0x80
000004  4201              TST      r1,r0
000006  d002              BEQ      |L3.14|
;;;446    		CANHandler.BusErrorCallBackFn 	= NULL;
000008  2000              MOVS     r0,#0
00000a  4a14              LDR      r2,|L3.92|
00000c  6010              STR      r0,[r2,#0]  ; CANHandler
                  |L3.14|
;;;447    	
;;;448    	if(u32InterruptSrc & DRVCAN_INT_ALI)
00000e  2040              MOVS     r0,#0x40
000010  4201              TST      r1,r0
000012  d002              BEQ      |L3.26|
;;;449    		CANHandler.ArbitLostCallBackFn 	= NULL;
000014  2000              MOVS     r0,#0
000016  4a11              LDR      r2,|L3.92|
000018  6050              STR      r0,[r2,#4]  ; CANHandler
                  |L3.26|
;;;450    
;;;451    	if(u32InterruptSrc & DRVCAN_INT_TI)
00001a  2002              MOVS     r0,#2
00001c  4201              TST      r1,r0
00001e  d002              BEQ      |L3.38|
;;;452    		CANHandler.TransmitCallBackFn	= NULL;
000020  2000              MOVS     r0,#0
000022  4a0e              LDR      r2,|L3.92|
000024  60d0              STR      r0,[r2,#0xc]  ; CANHandler
                  |L3.38|
;;;453    	
;;;454    	if(u32InterruptSrc & DRVCAN_INT_WUI)
000026  2010              MOVS     r0,#0x10
000028  4201              TST      r1,r0
00002a  d002              BEQ      |L3.50|
;;;455    		CANHandler.WakeUpCallBackFn		= NULL;
00002c  2000              MOVS     r0,#0
00002e  4a0b              LDR      r2,|L3.92|
000030  6090              STR      r0,[r2,#8]  ; CANHandler
                  |L3.50|
;;;456    	
;;;457    	if(u32InterruptSrc & DRVCAN_INT_RI)
000032  07c8              LSLS     r0,r1,#31
000034  0fc0              LSRS     r0,r0,#31
000036  d002              BEQ      |L3.62|
;;;458    		CANHandler.ReceiveCallBackFn 	= NULL;
000038  2000              MOVS     r0,#0
00003a  4a08              LDR      r2,|L3.92|
00003c  6110              STR      r0,[r2,#0x10]  ; CANHandler
                  |L3.62|
;;;459    
;;;460    
;;;461    	outpw(&CAN0->INTEN,inpw(&CAN0->INTEN)&~u32InterruptSrc);
00003e  4808              LDR      r0,|L3.96|
000040  6900              LDR      r0,[r0,#0x10]
000042  4388              BICS     r0,r0,r1
000044  4a06              LDR      r2,|L3.96|
000046  6110              STR      r0,[r2,#0x10]
;;;462        NVIC_DisableIRQ(CAN0_IRQn);   
000048  bf00              NOP      
00004a  2014              MOVS     r0,#0x14
00004c  2201              MOVS     r2,#1
00004e  4082              LSLS     r2,r2,r0
000050  4804              LDR      r0,|L3.100|
000052  6002              STR      r2,[r0,#0]
000054  bf00              NOP      
;;;463    
;;;464    	return E_SUCCESS;
000056  2000              MOVS     r0,#0
;;;465    
;;;466    }
000058  4770              BX       lr
;;;467    
                          ENDP

00005a  0000              DCW      0x0000
                  |L3.92|
                          DCD      CANHandler
                  |L3.96|
                          DCD      0x40180000
                  |L3.100|
                          DCD      0xe000e180

                          AREA ||i.DrvCAN_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvCAN_EnableInt PROC
;;;301    /*---------------------------------------------------------------------------------------------------------*/
;;;302    int32_t DrvCAN_EnableInt(uint32_t u32InterruptSrc)
000000  4601              MOV      r1,r0
;;;303    {
;;;304    	
;;;305    	CAN0->INTEN.BEIE		=(u32InterruptSrc & DRVCAN_INT_BEI)?1:0 ;
000002  4826              LDR      r0,|L4.156|
000004  6900              LDR      r0,[r0,#0x10]
000006  2280              MOVS     r2,#0x80
000008  4390              BICS     r0,r0,r2
00000a  400a              ANDS     r2,r2,r1
00000c  09d2              LSRS     r2,r2,#7
00000e  01d2              LSLS     r2,r2,#7
000010  2380              MOVS     r3,#0x80
000012  401a              ANDS     r2,r2,r3
000014  4310              ORRS     r0,r0,r2
000016  4a21              LDR      r2,|L4.156|
000018  6110              STR      r0,[r2,#0x10]
;;;306    	CAN0->INTEN.ALIE		=(u32InterruptSrc & DRVCAN_INT_ALI)?1:0;
00001a  4610              MOV      r0,r2
00001c  6900              LDR      r0,[r0,#0x10]
00001e  2240              MOVS     r2,#0x40
000020  4390              BICS     r0,r0,r2
000022  400a              ANDS     r2,r2,r1
000024  0992              LSRS     r2,r2,#6
000026  0192              LSLS     r2,r2,#6
000028  2340              MOVS     r3,#0x40
00002a  401a              ANDS     r2,r2,r3
00002c  4310              ORRS     r0,r0,r2
00002e  4a1b              LDR      r2,|L4.156|
000030  6110              STR      r0,[r2,#0x10]
;;;307    	CAN0->INTEN.WUIE		=(u32InterruptSrc & DRVCAN_INT_WUI)?1:0;
000032  4610              MOV      r0,r2
000034  6900              LDR      r0,[r0,#0x10]
000036  2210              MOVS     r2,#0x10
000038  4390              BICS     r0,r0,r2
00003a  400a              ANDS     r2,r2,r1
00003c  0912              LSRS     r2,r2,#4
00003e  0112              LSLS     r2,r2,#4
000040  2310              MOVS     r3,#0x10
000042  401a              ANDS     r2,r2,r3
000044  4310              ORRS     r0,r0,r2
000046  4a15              LDR      r2,|L4.156|
000048  6110              STR      r0,[r2,#0x10]
;;;308    	CAN0->INTEN.TIE			=(u32InterruptSrc & DRVCAN_INT_TI)?1:0;
00004a  4610              MOV      r0,r2
00004c  6900              LDR      r0,[r0,#0x10]
00004e  2202              MOVS     r2,#2
000050  4390              BICS     r0,r0,r2
000052  400a              ANDS     r2,r2,r1
000054  0852              LSRS     r2,r2,#1
000056  0052              LSLS     r2,r2,#1
000058  2302              MOVS     r3,#2
00005a  401a              ANDS     r2,r2,r3
00005c  4310              ORRS     r0,r0,r2
00005e  4a0f              LDR      r2,|L4.156|
000060  6110              STR      r0,[r2,#0x10]
;;;309    	CAN0->INTEN.RIE			=(u32InterruptSrc & DRVCAN_INT_RI)?1:0;
000062  4610              MOV      r0,r2
000064  6900              LDR      r0,[r0,#0x10]
000066  0840              LSRS     r0,r0,#1
000068  0040              LSLS     r0,r0,#1
00006a  07ca              LSLS     r2,r1,#31
00006c  0fd2              LSRS     r2,r2,#31
00006e  4310              ORRS     r0,r0,r2
000070  4a0a              LDR      r2,|L4.156|
000072  6110              STR      r0,[r2,#0x10]
;;;310    
;;;311    	if(u32InterruptSrc&DRVCAN_INT_WUI)				/* Wakeup Function Enable when wakeup INT Enable */
000074  2010              MOVS     r0,#0x10
000076  4201              TST      r1,r0
000078  d006              BEQ      |L4.136|
;;;312    	 	CAN0->CMD.WAKEUP_EN = 1; 
00007a  4610              MOV      r0,r2
00007c  6840              LDR      r0,[r0,#4]
00007e  2240              MOVS     r2,#0x40
000080  4390              BICS     r0,r0,r2
000082  3040              ADDS     r0,r0,#0x40
000084  4a05              LDR      r2,|L4.156|
000086  6050              STR      r0,[r2,#4]
                  |L4.136|
;;;313    
;;;314    	NVIC_EnableIRQ(CAN0_IRQn); 
000088  bf00              NOP      
00008a  2014              MOVS     r0,#0x14
00008c  2201              MOVS     r2,#1
00008e  4082              LSLS     r2,r2,r0
000090  4803              LDR      r0,|L4.160|
000092  6002              STR      r2,[r0,#0]
000094  bf00              NOP      
;;;315    	return TRUE;
000096  2001              MOVS     r0,#1
;;;316    
;;;317    }
000098  4770              BX       lr
;;;318    
                          ENDP

00009a  0000              DCW      0x0000
                  |L4.156|
                          DCD      0x40180000
                  |L4.160|
                          DCD      0xe000e100

                          AREA ||i.DrvCAN_GetClockFreq||, CODE, READONLY, ALIGN=2

                  DrvCAN_GetClockFreq PROC
;;;611    /*---------------------------------------------------------------------------------------------------------*/
;;;612    int32_t DrvCAN_GetClockFreq(void)
000000  b510              PUSH     {r4,lr}
;;;613    {
;;;614    	uint32_t clk =0 ;
000002  2400              MOVS     r4,#0
;;;615    											/* Check UART Clock Source Setting */
;;;616    	if(SYSCLK->CLKSEL1.CAN_S == 0)			
000004  480a              LDR      r0,|L5.48|
000006  6940              LDR      r0,[r0,#0x14]
000008  0100              LSLS     r0,r0,#4
00000a  0f80              LSRS     r0,r0,#30
00000c  d103              BNE      |L5.22|
;;;617    	{
;;;618    		clk = DrvSYS_GetExtClockFreq();			/* Get External Clock From DrvSYS Setting */
00000e  f7fffffe          BL       DrvSYS_GetExtClockFreq
000012  4604              MOV      r4,r0
000014  e00a              B        |L5.44|
                  |L5.22|
;;;619    	}
;;;620    	else if(SYSCLK->CLKSEL1.CAN_S == 1)
000016  4806              LDR      r0,|L5.48|
000018  6940              LDR      r0,[r0,#0x14]
00001a  0100              LSLS     r0,r0,#4
00001c  0f80              LSRS     r0,r0,#30
00001e  2801              CMP      r0,#1
000020  d103              BNE      |L5.42|
;;;621    	{
;;;622    		clk = DrvSYS_GetPLLClockFreq();         /* According PLL Clock */
000022  f7fffffe          BL       DrvSYS_GetPLLClockFreq
000026  4604              MOV      r4,r0
000028  e000              B        |L5.44|
                  |L5.42|
;;;623    	}
;;;624    	else
;;;625    		clk = __IRC22M;						/* Clock 22Mhz  */
00002a  4c02              LDR      r4,|L5.52|
                  |L5.44|
;;;626    
;;;627    	return clk;
00002c  4620              MOV      r0,r4
;;;628    }
00002e  bd10              POP      {r4,pc}
;;;629    
                          ENDP

                  |L5.48|
                          DCD      0x50000200
                  |L5.52|
                          DCD      0x01518000

                          AREA ||i.DrvCAN_GetErrorStatus||, CODE, READONLY, ALIGN=2

                  DrvCAN_GetErrorStatus PROC
;;;487    /*---------------------------------------------------------------------------------------------------------*/
;;;488    int32_t DrvCAN_GetErrorStatus(E_DRVCAN_ERRFLAG u32ErrorFlag)
000000  b500              PUSH     {lr}
;;;489    {
000002  4601              MOV      r1,r0
;;;490    	
;;;491    	switch(u32ErrorFlag)
000004  460b              MOV      r3,r1
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0504              DCB      0x05,0x04
00000c  0c141c24          DCB      0x0c,0x14,0x1c,0x24
000010  2c00              DCB      0x2c,0x00
;;;492    	{
;;;493    		case DRVCAN_ERRSTUFF:
;;;494    			if(CAN0->ERRCR.STUFF_ERR)	
000012  4816              LDR      r0,|L6.108|
000014  6a00              LDR      r0,[r0,#0x20]
000016  06c0              LSLS     r0,r0,#27
000018  0fc0              LSRS     r0,r0,#31
00001a  d001              BEQ      |L6.32|
;;;495    				return TRUE;
00001c  2001              MOVS     r0,#1
                  |L6.30|
;;;496    			break;
;;;497    	
;;;498    		case DRVCAN_ERRFORM:
;;;499    			if(CAN0->ERRCR.FORM_ERR)	
;;;500    				return TRUE;
;;;501    			break;
;;;502    
;;;503    		case DRVCAN_ERRCRC:
;;;504    			if(CAN0->ERRCR.CRC_ERR)	
;;;505    				return TRUE;
;;;506    			break;
;;;507    			  
;;;508    		case DRVCAN_ERRACK:
;;;509    			if(CAN0->ERRCR.ACK_ERR)	
;;;510    				return TRUE;
;;;511    			break;
;;;512    			
;;;513    		case DRVCAN_ERRBIT:
;;;514    			if(CAN0->ERRCR.BIT_ERR)	
;;;515    				return TRUE;
;;;516    			break;
;;;517    
;;;518    		default:
;;;519    			break;
;;;520    	}
;;;521    	
;;;522    	return E_SUCCESS;
;;;523    }
00001e  bd00              POP      {pc}
                  |L6.32|
000020  e020              B        |L6.100|
000022  4812              LDR      r0,|L6.108|
000024  6a00              LDR      r0,[r0,#0x20]         ;499
000026  0700              LSLS     r0,r0,#28             ;499
000028  0fc0              LSRS     r0,r0,#31             ;499
00002a  d001              BEQ      |L6.48|
00002c  2001              MOVS     r0,#1                 ;500
00002e  e7f6              B        |L6.30|
                  |L6.48|
000030  e018              B        |L6.100|
000032  480e              LDR      r0,|L6.108|
000034  6a00              LDR      r0,[r0,#0x20]         ;504
000036  0740              LSLS     r0,r0,#29             ;504
000038  0fc0              LSRS     r0,r0,#31             ;504
00003a  d001              BEQ      |L6.64|
00003c  2001              MOVS     r0,#1                 ;505
00003e  e7ee              B        |L6.30|
                  |L6.64|
000040  e010              B        |L6.100|
000042  480a              LDR      r0,|L6.108|
000044  6a00              LDR      r0,[r0,#0x20]         ;509
000046  0780              LSLS     r0,r0,#30             ;509
000048  0fc0              LSRS     r0,r0,#31             ;509
00004a  d001              BEQ      |L6.80|
00004c  2001              MOVS     r0,#1                 ;510
00004e  e7e6              B        |L6.30|
                  |L6.80|
000050  e008              B        |L6.100|
000052  4806              LDR      r0,|L6.108|
000054  6a00              LDR      r0,[r0,#0x20]         ;514
000056  07c0              LSLS     r0,r0,#31             ;514
000058  0fc0              LSRS     r0,r0,#31             ;514
00005a  d001              BEQ      |L6.96|
00005c  2001              MOVS     r0,#1                 ;515
00005e  e7de              B        |L6.30|
                  |L6.96|
000060  e000              B        |L6.100|
000062  bf00              NOP                            ;519
                  |L6.100|
000064  bf00              NOP                            ;496
000066  2000              MOVS     r0,#0                 ;522
000068  e7d9              B        |L6.30|
;;;524    
                          ENDP

00006a  0000              DCW      0x0000
                  |L6.108|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_GetRxErrorCount||, CODE, READONLY, ALIGN=2

                  DrvCAN_GetRxErrorCount PROC
;;;656    /*---------------------------------------------------------------------------------------------------------*/
;;;657    int32_t DrvCAN_GetRxErrorCount(void)
000000  4801              LDR      r0,|L7.8|
;;;658    {
;;;659    	return CAN0->RECNTR.RECNT;
000002  6a80              LDR      r0,[r0,#0x28]
000004  b2c0              UXTB     r0,r0
;;;660    
;;;661    }
000006  4770              BX       lr
;;;662    
                          ENDP

                  |L7.8|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_GetTxErrorCount||, CODE, READONLY, ALIGN=2

                  DrvCAN_GetTxErrorCount PROC
;;;640    /*---------------------------------------------------------------------------------------------------------*/
;;;641    int32_t DrvCAN_GetTxErrorCount(void)
000000  4801              LDR      r0,|L8.8|
;;;642    {
;;;643    	return CAN0->TECNTR.TECNT;
000002  6ac0              LDR      r0,[r0,#0x2c]
000004  b2c0              UXTB     r0,r0
;;;644      
;;;645    }
000006  4770              BX       lr
;;;646    
                          ENDP

                  |L8.8|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvCAN_GetVersion PROC
;;;689    /*---------------------------------------------------------------------------------------------------------*/
;;;690    int32_t DrvCAN_GetVersion(void)
000000  4800              LDR      r0,|L9.4|
;;;691    {
;;;692    	return DRVCAN_VERSION_NUM;
;;;693    	
;;;694    }
000002  4770              BX       lr
;;;695    
                          ENDP

                  |L9.4|
                          DCD      0x00010202

                          AREA ||i.DrvCAN_Init||, CODE, READONLY, ALIGN=2

                  DrvCAN_Init PROC
;;;102    /*---------------------------------------------------------------------------------------------------------*/
;;;103    void DrvCAN_Init(void)
000000  2005              MOVS     r0,#5
;;;104    {
;;;105    	SYS->IPRSTC2.CAN0_RST =1;  /* Reset CAN0 */
000002  0700              LSLS     r0,r0,#28
000004  68c0              LDR      r0,[r0,#0xc]
000006  2101              MOVS     r1,#1
000008  0609              LSLS     r1,r1,#24
00000a  4388              BICS     r0,r0,r1
00000c  1840              ADDS     r0,r0,r1
00000e  2105              MOVS     r1,#5
000010  0709              LSLS     r1,r1,#28
000012  60c8              STR      r0,[r1,#0xc]
;;;106    	SYS->IPRSTC2.CAN0_RST =0;
000014  4608              MOV      r0,r1
000016  68c0              LDR      r0,[r0,#0xc]
000018  2101              MOVS     r1,#1
00001a  0609              LSLS     r1,r1,#24
00001c  4388              BICS     r0,r0,r1
00001e  2105              MOVS     r1,#5
000020  0709              LSLS     r1,r1,#28
000022  60c8              STR      r0,[r1,#0xc]
;;;107    
;;;108    	SYSCLK->APBCLK.CAN0_EN 	= 1;
000024  4804              LDR      r0,|L10.56|
000026  6880              LDR      r0,[r0,#8]
000028  2101              MOVS     r1,#1
00002a  0609              LSLS     r1,r1,#24
00002c  4388              BICS     r0,r0,r1
00002e  1840              ADDS     r0,r0,r1
000030  4901              LDR      r1,|L10.56|
000032  6088              STR      r0,[r1,#8]
;;;109    
;;;110    }
000034  4770              BX       lr
;;;111    
                          ENDP

000036  0000              DCW      0x0000
                  |L10.56|
                          DCD      0x50000200

                          AREA ||i.DrvCAN_InstallCallback||, CODE, READONLY, ALIGN=2

                  DrvCAN_InstallCallback PROC
;;;339    
;;;340    void DrvCAN_InstallCallback(E_DRVCAN_CALLBACK_TYPE Type, PFN_DRVCAN_CALLBACK callbackfn)
000000  b500              PUSH     {lr}
;;;341    {
;;;342    	switch(Type)
000002  4603              MOV      r3,r0
000004  f7fffffe          BL       __ARM_common_switch8
000008  05100d0a          DCB      0x05,0x10,0x0d,0x0a
00000c  07041300          DCB      0x07,0x04,0x13,0x00
;;;343       	{
;;;344           	case TYPE_BEI:
;;;345           	{
;;;346    			CANHandler.BusErrorCallBackFn = callbackfn;
000010  4a08              LDR      r2,|L11.52|
000012  6011              STR      r1,[r2,#0]  ; CANHandler
;;;347           		break;
000014  e00b              B        |L11.46|
;;;348    		}
;;;349           	case TYPE_ALI:
;;;350           	{
;;;351    			CANHandler.ArbitLostCallBackFn = callbackfn;
000016  4a07              LDR      r2,|L11.52|
000018  6051              STR      r1,[r2,#4]  ; CANHandler
;;;352           		break;
00001a  e008              B        |L11.46|
;;;353    		}
;;;354           	case TYPE_WUI:
;;;355           	{
;;;356    			CANHandler.WakeUpCallBackFn = callbackfn;
00001c  4a05              LDR      r2,|L11.52|
00001e  6091              STR      r1,[r2,#8]  ; CANHandler
;;;357           		break;
000020  e005              B        |L11.46|
;;;358    		}
;;;359           	case TYPE_TI:
;;;360           	{
;;;361    			CANHandler.TransmitCallBackFn = callbackfn;
000022  4a04              LDR      r2,|L11.52|
000024  60d1              STR      r1,[r2,#0xc]  ; CANHandler
;;;362           		break;
000026  e002              B        |L11.46|
;;;363    		}
;;;364           	case TYPE_RI:
;;;365           	{
;;;366    			CANHandler.ReceiveCallBackFn = callbackfn;
000028  4a02              LDR      r2,|L11.52|
00002a  6111              STR      r1,[r2,#0x10]  ; CANHandler
;;;367           		break;
00002c  bf00              NOP      
                  |L11.46|
00002e  bf00              NOP                            ;347
;;;368    		}
;;;369    	}
;;;370    	return ;
;;;371    	
;;;372    }
000030  bd00              POP      {pc}
;;;373    
                          ENDP

000032  0000              DCW      0x0000
                  |L11.52|
                          DCD      CANHandler

                          AREA ||i.DrvCAN_Open||, CODE, READONLY, ALIGN=2

                  DrvCAN_Open PROC
;;;143    
;;;144    int32_t DrvCAN_Open(int32_t i32CANKiloBitRate,int16_t i16SamplePointPos)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;145    {
000002  b083              SUB      sp,sp,#0xc
000004  460f              MOV      r7,r1
;;;146     	int32_t i32FinClk,i32Div,i32Sum,i32TSEG1,i32TSEG2;
;;;147    	
;;;148    	CAN0->CMD.CAN_EN 		= 1;
000006  482b              LDR      r0,|L12.180|
000008  6840              LDR      r0,[r0,#4]
00000a  2180              MOVS     r1,#0x80
00000c  4388              BICS     r0,r0,r1
00000e  3080              ADDS     r0,r0,#0x80
000010  4928              LDR      r1,|L12.180|
000012  6048              STR      r0,[r1,#4]
;;;149    	
;;;150    	if(i16SamplePointPos >1000)
000014  207d              MOVS     r0,#0x7d
000016  00c0              LSLS     r0,r0,#3
000018  4287              CMP      r7,r0
00001a  dd02              BLE      |L12.34|
;;;151    		return E_DRVCAN_ERR_BITRATE;
00001c  4826              LDR      r0,|L12.184|
                  |L12.30|
;;;152    
;;;153    	/* According CLK Source to compute */
;;;154    	i32FinClk = DrvCAN_GetClockFreq()*1000;
;;;155    
;;;156    	i32Div = 1;
;;;157    
;;;158    STR:		
;;;159    	/* Get the sum of TSEG1 and TSEG2 */
;;;160    	i32Sum = i32FinClk / (i32CANKiloBitRate*i32Div) -3;
;;;161    	
;;;162    	if(i32Sum < 0)
;;;163    		return E_DRVCAN_ERR_BITRATE;
;;;164    	/* The setting is not exist*/
;;;165    	i32TSEG1 = (i32Sum + 1)* i16SamplePointPos /1000;
;;;166    
;;;167    	if((i32Sum > 48)||(i32TSEG1>32))
;;;168    	{
;;;169    		i32Div++;
;;;170    		if( i32Div > 1024)			
;;;171    			return E_DRVCAN_ERR_BITRATE;
;;;172    		goto STR;
;;;173    	}
;;;174    
;;;175    	i32TSEG2 = i32Sum - i32TSEG1;
;;;176    		
;;;177    	CAN0->BTIMR.TSEG1 = i32TSEG1;
;;;178    
;;;179    	CAN0->BTIMR.TSEG2 = i32TSEG2;
;;;180    
;;;181    	DrvSYS_SetClockDivider(E_SYS_CAN_DIV,i32Div-1);
;;;182    
;;;183    	return E_SUCCESS;
;;;184    }
00001e  b005              ADD      sp,sp,#0x14
000020  bdf0              POP      {r4-r7,pc}
                  |L12.34|
000022  f7fffffe          BL       DrvCAN_GetClockFreq
000026  217d              MOVS     r1,#0x7d              ;154
000028  00c9              LSLS     r1,r1,#3              ;154
00002a  4348              MULS     r0,r1,r0              ;154
00002c  9002              STR      r0,[sp,#8]            ;154
00002e  2401              MOVS     r4,#1                 ;156
000030  bf00              NOP                            ;158
                  |L12.50|
000032  9803              LDR      r0,[sp,#0xc]          ;160
000034  4360              MULS     r0,r4,r0              ;160
000036  4601              MOV      r1,r0                 ;160
000038  9802              LDR      r0,[sp,#8]            ;160
00003a  f7fffffe          BL       __aeabi_idivmod
00003e  1ec5              SUBS     r5,r0,#3              ;160
000040  2d00              CMP      r5,#0                 ;162
000042  da01              BGE      |L12.72|
000044  481c              LDR      r0,|L12.184|
000046  e7ea              B        |L12.30|
                  |L12.72|
000048  1c69              ADDS     r1,r5,#1              ;165
00004a  4379              MULS     r1,r7,r1              ;165
00004c  4608              MOV      r0,r1                 ;165
00004e  217d              MOVS     r1,#0x7d              ;165
000050  00c9              LSLS     r1,r1,#3              ;165
000052  f7fffffe          BL       __aeabi_idivmod
000056  4606              MOV      r6,r0                 ;165
000058  2d30              CMP      r5,#0x30              ;167
00005a  dc01              BGT      |L12.96|
00005c  2e20              CMP      r6,#0x20              ;167
00005e  dd07              BLE      |L12.112|
                  |L12.96|
000060  1c64              ADDS     r4,r4,#1              ;169
000062  2001              MOVS     r0,#1                 ;170
000064  0280              LSLS     r0,r0,#10             ;170
000066  4284              CMP      r4,r0                 ;170
000068  dd01              BLE      |L12.110|
00006a  4813              LDR      r0,|L12.184|
00006c  e7d7              B        |L12.30|
                  |L12.110|
00006e  e7e0              B        |L12.50|
                  |L12.112|
000070  1ba9              SUBS     r1,r5,r6              ;175
000072  9101              STR      r1,[sp,#4]            ;175
000074  480f              LDR      r0,|L12.180|
000076  6940              LDR      r0,[r0,#0x14]         ;177
000078  211f              MOVS     r1,#0x1f              ;177
00007a  0189              LSLS     r1,r1,#6              ;177
00007c  4388              BICS     r0,r0,r1              ;177
00007e  01b1              LSLS     r1,r6,#6              ;177
000080  221f              MOVS     r2,#0x1f              ;177
000082  0192              LSLS     r2,r2,#6              ;177
000084  4011              ANDS     r1,r1,r2              ;177
000086  4308              ORRS     r0,r0,r1              ;177
000088  490a              LDR      r1,|L12.180|
00008a  6148              STR      r0,[r1,#0x14]         ;177
00008c  4608              MOV      r0,r1                 ;179
00008e  6940              LDR      r0,[r0,#0x14]         ;179
000090  210f              MOVS     r1,#0xf               ;179
000092  02c9              LSLS     r1,r1,#11             ;179
000094  4388              BICS     r0,r0,r1              ;179
000096  9901              LDR      r1,[sp,#4]            ;179
000098  02c9              LSLS     r1,r1,#11             ;179
00009a  220f              MOVS     r2,#0xf               ;179
00009c  02d2              LSLS     r2,r2,#11             ;179
00009e  4011              ANDS     r1,r1,r2              ;179
0000a0  4308              ORRS     r0,r0,r1              ;179
0000a2  4904              LDR      r1,|L12.180|
0000a4  6148              STR      r0,[r1,#0x14]         ;179
0000a6  1e61              SUBS     r1,r4,#1              ;181
0000a8  2001              MOVS     r0,#1                 ;181
0000aa  f7fffffe          BL       DrvSYS_SetClockDivider
0000ae  2000              MOVS     r0,#0                 ;183
0000b0  e7b5              B        |L12.30|
;;;185    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L12.180|
                          DCD      0x40180000
                  |L12.184|
                          DCD      0xffff8584

                          AREA ||i.DrvCAN_ReTransmission||, CODE, READONLY, ALIGN=2

                  DrvCAN_ReTransmission PROC
;;;673    /*---------------------------------------------------------------------------------------------------------*/
;;;674    void DrvCAN_ReTransmission(int32_t bIsEnable)
000000  4907              LDR      r1,|L13.32|
;;;675    {
;;;676    	CAN0->CMD.ABRT = bIsEnable?1:0 ;
000002  6849              LDR      r1,[r1,#4]
000004  2202              MOVS     r2,#2
000006  4391              BICS     r1,r1,r2
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L13.16|
00000c  2201              MOVS     r2,#1
00000e  e000              B        |L13.18|
                  |L13.16|
000010  2200              MOVS     r2,#0
                  |L13.18|
000012  0052              LSLS     r2,r2,#1
000014  2302              MOVS     r3,#2
000016  401a              ANDS     r2,r2,r3
000018  4311              ORRS     r1,r1,r2
00001a  4a01              LDR      r2,|L13.32|
00001c  6051              STR      r1,[r2,#4]
;;;677    }
00001e  4770              BX       lr
;;;678    
                          ENDP

                  |L13.32|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_Read||, CODE, READONLY, ALIGN=2

                  DrvCAN_Read PROC
;;;261    
;;;262    STR_CAN_T DrvCAN_Read(void)
000000  b510              PUSH     {r4,lr}
;;;263    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;264    	STR_CAN_T recCAN;
;;;265    
;;;266    	recCAN.u8cLen 		= CAN0->RXFINFO.RXDLC; 
000006  4815              LDR      r0,|L14.92|
000008  6800              LDR      r0,[r0,#0]
00000a  0700              LSLS     r0,r0,#28
00000c  0f00              LSRS     r0,r0,#28
00000e  9004              STR      r0,[sp,#0x10]
;;;267    	recCAN.u8cFormat	= CAN0->RXFINFO.RXIDE; 
000010  4812              LDR      r0,|L14.92|
000012  6800              LDR      r0,[r0,#0]
000014  0600              LSLS     r0,r0,#24
000016  0fc0              LSRS     r0,r0,#31
000018  4669              MOV      r1,sp
00001a  7508              STRB     r0,[r1,#0x14]
;;;268    	if(recCAN.u8cFormat==1)   
00001c  7d08              LDRB     r0,[r1,#0x14]
00001e  2801              CMP      r0,#1
000020  d104              BNE      |L14.44|
;;;269    		recCAN.id 		= CAN0->RXIDR.RXID;
000022  480e              LDR      r0,|L14.92|
000024  6840              LDR      r0,[r0,#4]
000026  08c0              LSRS     r0,r0,#3
000028  9001              STR      r0,[sp,#4]
00002a  e003              B        |L14.52|
                  |L14.44|
;;;270    	else
;;;271    		recCAN.id 		= (CAN0->RXIDR.RXID)>>18;
00002c  480b              LDR      r0,|L14.92|
00002e  6840              LDR      r0,[r0,#4]
000030  0d40              LSRS     r0,r0,#21
000032  9001              STR      r0,[sp,#4]
                  |L14.52|
;;;272    	
;;;273    	recCAN.u8cType		= CAN0->RXFINFO.RXRTR; 
000034  4809              LDR      r0,|L14.92|
000036  6800              LDR      r0,[r0,#0]
000038  0640              LSLS     r0,r0,#25
00003a  0fc0              LSRS     r0,r0,#31
00003c  4669              MOV      r1,sp
00003e  7548              STRB     r0,[r1,#0x15]
;;;274    
;;;275    	recCAN.u32cData[0] 	= CAN0->RX_DATA[0] ; 
000040  4806              LDR      r0,|L14.92|
000042  6880              LDR      r0,[r0,#8]
000044  9002              STR      r0,[sp,#8]
;;;276    	recCAN.u32cData[1] 	= CAN0->RX_DATA[1] ; 
000046  4805              LDR      r0,|L14.92|
000048  3840              SUBS     r0,r0,#0x40
00004a  6cc1              LDR      r1,[r0,#0x4c]
00004c  9103              STR      r1,[sp,#0xc]
;;;277    
;;;278     	return recCAN;
00004e  2214              MOVS     r2,#0x14
000050  a901              ADD      r1,sp,#4
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       __aeabi_memcpy4
;;;279    }		  
000058  b006              ADD      sp,sp,#0x18
00005a  bd10              POP      {r4,pc}
;;;280    
                          ENDP

                  |L14.92|
                          DCD      0x40180040

                          AREA ||i.DrvCAN_SetAcceptanceFilter||, CODE, READONLY, ALIGN=2

                  DrvCAN_SetAcceptanceFilter PROC
;;;539    /*---------------------------------------------------------------------------------------------------------*/
;;;540    int32_t DrvCAN_SetAcceptanceFilter(int32_t id_Filter )
000000  4601              MOV      r1,r0
;;;541    {
;;;542    	CAN0->ACR.ACRID =id_Filter;	
000002  4806              LDR      r0,|L15.28|
000004  6900              LDR      r0,[r0,#0x10]
000006  0740              LSLS     r0,r0,#29
000008  0f40              LSRS     r0,r0,#29
00000a  00ca              LSLS     r2,r1,#3
00000c  08d2              LSRS     r2,r2,#3
00000e  00d2              LSLS     r2,r2,#3
000010  4310              ORRS     r0,r0,r2
000012  4a02              LDR      r2,|L15.28|
000014  6110              STR      r0,[r2,#0x10]
;;;543    
;;;544    	return E_SUCCESS;
000016  2000              MOVS     r0,#0
;;;545    }
000018  4770              BX       lr
;;;546    
                          ENDP

00001a  0000              DCW      0x0000
                  |L15.28|
                          DCD      0x40180040

                          AREA ||i.DrvCAN_SetBusTiming||, CODE, READONLY, ALIGN=2

                  DrvCAN_SetBusTiming PROC
;;;580    /*---------------------------------------------------------------------------------------------------------*/
;;;581    int32_t DrvCAN_SetBusTiming(
000000  b570              PUSH     {r4-r6,lr}
;;;582    	int8_t i8SynJumpWidth,
;;;583    	int16_t i16TimeSeg1,
;;;584    	int8_t i8TimeSeg2,
;;;585    	int8_t i8SampPtNo
;;;586    )
;;;587    {
000002  4604              MOV      r4,r0
;;;588    	if((i8SynJumpWidth>3) || (i16TimeSeg1 >31 || (i8TimeSeg2 > 15) || (i8SampPtNo >1)))
000004  2c03              CMP      r4,#3
000006  dc05              BGT      |L16.20|
000008  291f              CMP      r1,#0x1f
00000a  dc03              BGT      |L16.20|
00000c  2a0f              CMP      r2,#0xf
00000e  dc01              BGT      |L16.20|
000010  2b01              CMP      r3,#1
000012  dd01              BLE      |L16.24|
                  |L16.20|
;;;589    	{
;;;590    	   return E_DRVCAN_ERR_ARGUMENT;
000014  4818              LDR      r0,|L16.120|
                  |L16.22|
;;;591    	}
;;;592    
;;;593    	CAN0->BTIMR.SJW 	= i8SynJumpWidth;
;;;594    	CAN0->BTIMR.TSEG1 	= i16TimeSeg1;
;;;595    	CAN0->BTIMR.TSEG2 	= i8TimeSeg2;
;;;596    	CAN0->BTIMR.SAMP 	= i8SampPtNo;
;;;597    	
;;;598    	return E_SUCCESS;
;;;599    
;;;600    }
000016  bd70              POP      {r4-r6,pc}
                  |L16.24|
000018  4818              LDR      r0,|L16.124|
00001a  6940              LDR      r0,[r0,#0x14]         ;593
00001c  2530              MOVS     r5,#0x30              ;593
00001e  43a8              BICS     r0,r0,r5              ;593
000020  0125              LSLS     r5,r4,#4              ;593
000022  2630              MOVS     r6,#0x30              ;593
000024  4035              ANDS     r5,r5,r6              ;593
000026  4328              ORRS     r0,r0,r5              ;593
000028  4d14              LDR      r5,|L16.124|
00002a  6168              STR      r0,[r5,#0x14]         ;593
00002c  4628              MOV      r0,r5                 ;594
00002e  6940              LDR      r0,[r0,#0x14]         ;594
000030  251f              MOVS     r5,#0x1f              ;594
000032  01ad              LSLS     r5,r5,#6              ;594
000034  43a8              BICS     r0,r0,r5              ;594
000036  018d              LSLS     r5,r1,#6              ;594
000038  261f              MOVS     r6,#0x1f              ;594
00003a  01b6              LSLS     r6,r6,#6              ;594
00003c  4035              ANDS     r5,r5,r6              ;594
00003e  4328              ORRS     r0,r0,r5              ;594
000040  4d0e              LDR      r5,|L16.124|
000042  6168              STR      r0,[r5,#0x14]         ;594
000044  4628              MOV      r0,r5                 ;595
000046  6940              LDR      r0,[r0,#0x14]         ;595
000048  250f              MOVS     r5,#0xf               ;595
00004a  02ed              LSLS     r5,r5,#11             ;595
00004c  43a8              BICS     r0,r0,r5              ;595
00004e  02d5              LSLS     r5,r2,#11             ;595
000050  260f              MOVS     r6,#0xf               ;595
000052  02f6              LSLS     r6,r6,#11             ;595
000054  4035              ANDS     r5,r5,r6              ;595
000056  4328              ORRS     r0,r0,r5              ;595
000058  4d08              LDR      r5,|L16.124|
00005a  6168              STR      r0,[r5,#0x14]         ;595
00005c  4628              MOV      r0,r5                 ;596
00005e  6940              LDR      r0,[r0,#0x14]         ;596
000060  2501              MOVS     r5,#1                 ;596
000062  03ed              LSLS     r5,r5,#15             ;596
000064  43a8              BICS     r0,r0,r5              ;596
000066  03dd              LSLS     r5,r3,#15             ;596
000068  2601              MOVS     r6,#1                 ;596
00006a  03f6              LSLS     r6,r6,#15             ;596
00006c  4035              ANDS     r5,r5,r6              ;596
00006e  4328              ORRS     r0,r0,r5              ;596
000070  4d02              LDR      r5,|L16.124|
000072  6168              STR      r0,[r5,#0x14]         ;596
000074  2000              MOVS     r0,#0                 ;598
000076  e7ce              B        |L16.22|
;;;601    
                          ENDP

                  |L16.120|
                          DCD      0xffff8583
                  |L16.124|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_SetMaskFilter||, CODE, READONLY, ALIGN=2

                  DrvCAN_SetMaskFilter PROC
;;;557    /*---------------------------------------------------------------------------------------------------------*/
;;;558    int32_t DrvCAN_SetMaskFilter(int32_t id_Filter )
000000  4601              MOV      r1,r0
;;;559    {
;;;560    	CAN0->AMR.AMRID =id_Filter;	
000002  4806              LDR      r0,|L17.28|
000004  6940              LDR      r0,[r0,#0x14]
000006  0740              LSLS     r0,r0,#29
000008  0f40              LSRS     r0,r0,#29
00000a  00ca              LSLS     r2,r1,#3
00000c  08d2              LSRS     r2,r2,#3
00000e  00d2              LSLS     r2,r2,#3
000010  4310              ORRS     r0,r0,r2
000012  4a02              LDR      r2,|L17.28|
000014  6150              STR      r0,[r2,#0x14]
;;;561    
;;;562    	return E_SUCCESS;
000016  2000              MOVS     r0,#0
;;;563    }
000018  4770              BX       lr
;;;564    
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      0x40180040

                          AREA ||i.DrvCAN_UninstallCallback||, CODE, READONLY, ALIGN=2

                  DrvCAN_UninstallCallback PROC
;;;394    /*---------------------------------------------------------------------------------------------------------*/
;;;395    void DrvCAN_UninstallCallback(E_DRVCAN_CALLBACK_TYPE Type)
000000  b500              PUSH     {lr}
;;;396    {
;;;397    	switch(Type)
000002  4603              MOV      r3,r0
000004  f7fffffe          BL       __ARM_common_switch8
000008  0514100c          DCB      0x05,0x14,0x10,0x0c
00000c  08041800          DCB      0x08,0x04,0x18,0x00
;;;398       	{
;;;399           	case TYPE_BEI:
;;;400           	{
;;;401    			CANHandler.BusErrorCallBackFn = NULL;
000010  2100              MOVS     r1,#0
000012  4a0a              LDR      r2,|L18.60|
000014  6011              STR      r1,[r2,#0]  ; CANHandler
;;;402           		break;
000016  e00f              B        |L18.56|
;;;403    		}
;;;404           	case TYPE_ALI:
;;;405           	{
;;;406    			CANHandler.ArbitLostCallBackFn = NULL;
000018  2100              MOVS     r1,#0
00001a  4a08              LDR      r2,|L18.60|
00001c  6051              STR      r1,[r2,#4]  ; CANHandler
;;;407           		break;
00001e  e00b              B        |L18.56|
;;;408    		}
;;;409           	case TYPE_WUI:
;;;410           	{
;;;411    			CANHandler.WakeUpCallBackFn = NULL;
000020  2100              MOVS     r1,#0
000022  4a06              LDR      r2,|L18.60|
000024  6091              STR      r1,[r2,#8]  ; CANHandler
;;;412           		break;
000026  e007              B        |L18.56|
;;;413    		}
;;;414           	case TYPE_TI:
;;;415           	{
;;;416    			CANHandler.TransmitCallBackFn = NULL;
000028  2100              MOVS     r1,#0
00002a  4a04              LDR      r2,|L18.60|
00002c  60d1              STR      r1,[r2,#0xc]  ; CANHandler
;;;417           		break;
00002e  e003              B        |L18.56|
;;;418    		}
;;;419           	case TYPE_RI:
;;;420           	{
;;;421    			CANHandler.ReceiveCallBackFn = NULL;
000030  2100              MOVS     r1,#0
000032  4a02              LDR      r2,|L18.60|
000034  6111              STR      r1,[r2,#0x10]  ; CANHandler
;;;422           		break;
000036  bf00              NOP      
                  |L18.56|
000038  bf00              NOP                            ;402
;;;423    		}
;;;424    	}
;;;425    	return ;
;;;426    
;;;427    }
00003a  bd00              POP      {pc}
;;;428     
                          ENDP

                  |L18.60|
                          DCD      CANHandler

                          AREA ||i.DrvCAN_Write||, CODE, READONLY, ALIGN=2

                  DrvCAN_Write PROC
;;;223    
;;;224    int32_t DrvCAN_Write(STR_CAN_T *Msg)
000000  4601              MOV      r1,r0
;;;225    {
;;;226    	
;;;227    	/* Configure Setting */		
;;;228    	CAN0->TXFINFO.TXFF 		= Msg->u8cFormat;
000002  4823              LDR      r0,|L19.144|
000004  6b00              LDR      r0,[r0,#0x30]
000006  2280              MOVS     r2,#0x80
000008  4390              BICS     r0,r0,r2
00000a  7c0a              LDRB     r2,[r1,#0x10]
00000c  01d2              LSLS     r2,r2,#7
00000e  2380              MOVS     r3,#0x80
000010  401a              ANDS     r2,r2,r3
000012  4310              ORRS     r0,r0,r2
000014  4a1e              LDR      r2,|L19.144|
000016  6310              STR      r0,[r2,#0x30]
;;;229    
;;;230    	/* Standard and extended format */
;;;231    	if(Msg->u8cFormat ==1 )  
000018  7c08              LDRB     r0,[r1,#0x10]
00001a  2801              CMP      r0,#1
00001c  d10b              BNE      |L19.54|
;;;232    		CAN0->TXIDR.TXID 	= Msg->id;							
00001e  4610              MOV      r0,r2
000020  6b40              LDR      r0,[r0,#0x34]
000022  0740              LSLS     r0,r0,#29
000024  0f40              LSRS     r0,r0,#29
000026  680a              LDR      r2,[r1,#0]
000028  00d2              LSLS     r2,r2,#3
00002a  08d2              LSRS     r2,r2,#3
00002c  00d2              LSLS     r2,r2,#3
00002e  4310              ORRS     r0,r0,r2
000030  4a17              LDR      r2,|L19.144|
000032  6350              STR      r0,[r2,#0x34]
000034  e00a              B        |L19.76|
                  |L19.54|
;;;233    	else
;;;234    		CAN0->TXIDR.TXID 	= (Msg->id)<<18;							
000036  4816              LDR      r0,|L19.144|
000038  6b40              LDR      r0,[r0,#0x34]
00003a  0740              LSLS     r0,r0,#29
00003c  0f40              LSRS     r0,r0,#29
00003e  680a              LDR      r2,[r1,#0]
000040  0552              LSLS     r2,r2,#21
000042  08d2              LSRS     r2,r2,#3
000044  00d2              LSLS     r2,r2,#3
000046  4310              ORRS     r0,r0,r2
000048  4a11              LDR      r2,|L19.144|
00004a  6350              STR      r0,[r2,#0x34]
                  |L19.76|
;;;235    		
;;;236    	CAN0->TXFINFO.TXDLC		= Msg->u8cLen;
00004c  4810              LDR      r0,|L19.144|
00004e  6b00              LDR      r0,[r0,#0x30]
000050  0980              LSRS     r0,r0,#6
000052  0180              LSLS     r0,r0,#6
000054  68ca              LDR      r2,[r1,#0xc]
000056  0692              LSLS     r2,r2,#26
000058  0e92              LSRS     r2,r2,#26
00005a  4310              ORRS     r0,r0,r2
00005c  4a0c              LDR      r2,|L19.144|
00005e  6310              STR      r0,[r2,#0x30]
;;;237    	
;;;238    	CAN0->TXDATA[0] 		= Msg->u32cData[0];
000060  6848              LDR      r0,[r1,#4]
000062  6390              STR      r0,[r2,#0x38]
;;;239    		
;;;240    	CAN0->TXDATA[1] 		= Msg->u32cData[1];
000064  480a              LDR      r0,|L19.144|
000066  688a              LDR      r2,[r1,#8]
000068  63c2              STR      r2,[r0,#0x3c]
;;;241    		
;;;242    	CAN0->TXFINFO.TXRTR 	= Msg->u8cType;
00006a  6b00              LDR      r0,[r0,#0x30]
00006c  2240              MOVS     r2,#0x40
00006e  4390              BICS     r0,r0,r2
000070  7c4a              LDRB     r2,[r1,#0x11]
000072  0192              LSLS     r2,r2,#6
000074  2340              MOVS     r3,#0x40
000076  401a              ANDS     r2,r2,r3
000078  4310              ORRS     r0,r0,r2
00007a  4a05              LDR      r2,|L19.144|
00007c  6310              STR      r0,[r2,#0x30]
;;;243    
;;;244    	/* Trigger and Send */
;;;245    	CAN0->CMD.TXREQ = 1; 
00007e  4610              MOV      r0,r2
000080  6840              LDR      r0,[r0,#4]
000082  0840              LSRS     r0,r0,#1
000084  0040              LSLS     r0,r0,#1
000086  1c40              ADDS     r0,r0,#1
000088  6050              STR      r0,[r2,#4]
;;;246    	
;;;247    	return E_SUCCESS;
00008a  2000              MOVS     r0,#0
;;;248    }		  
00008c  4770              BX       lr
;;;249    
                          ENDP

00008e  0000              DCW      0x0000
                  |L19.144|
                          DCD      0x40180000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CANHandler
                          %        20

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L123.16|
00000e  461d              MOV      r5,r3
                  |L123.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

