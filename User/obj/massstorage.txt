; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\massstorage.o --depend=.\obj\massstorage.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\massstorage.crf ..\BSP_Lib\Src\USB\MassStorage.c]
                          THUMB

                          AREA ||i.Flash_Identify||, CODE, READONLY, ALIGN=2

                  Flash_Identify PROC
;;;1550   
;;;1551   uint8_t Flash_Identify(uint8_t tLUN)
000000  4601              MOV      r1,r0
;;;1552   {
;;;1553       if (tLUN==F_DATA_FLASH_LUN)
000002  480b              LDR      r0,|L1.48|
000004  7800              LDRB     r0,[r0,#0]  ; F_DATA_FLASH_LUN
000006  4281              CMP      r1,r0
000008  d10f              BNE      |L1.42|
;;;1554       {
;;;1555           g_dataFlashTotalSectors = DATA_FLASH_STORAGE_SIZE / UDC_SECTOR_SIZE;
00000a  2080              MOVS     r0,#0x80
00000c  4a09              LDR      r2,|L1.52|
00000e  6010              STR      r0,[r2,#0]  ; g_dataFlashTotalSectors
;;;1556           
;;;1557   		if(g_dataFlashTotalSectors < 0)
000010  4610              MOV      r0,r2
000012  6800              LDR      r0,[r0,#0]  ; g_dataFlashTotalSectors
000014  2800              CMP      r0,#0
000016  da08              BGE      |L1.42|
;;;1558           {
;;;1559               /* cannot read format */
;;;1560   			g_au8SenseKey[0] = 0x03;
000018  2003              MOVS     r0,#3
00001a  4a07              LDR      r2,|L1.56|
00001c  7010              STRB     r0,[r2,#0]
;;;1561   			g_au8SenseKey[1] = 0x30;
00001e  2030              MOVS     r0,#0x30
000020  7050              STRB     r0,[r2,#1]
;;;1562   			g_au8SenseKey[2] = 0x01;
000022  2001              MOVS     r0,#1
000024  7090              STRB     r0,[r2,#2]
;;;1563               return FALSE;  
000026  2000              MOVS     r0,#0
                  |L1.40|
;;;1564           }
;;;1565       }
;;;1566   
;;;1567       return TRUE;
;;;1568   }
000028  4770              BX       lr
                  |L1.42|
00002a  2001              MOVS     r0,#1                 ;1567
00002c  e7fc              B        |L1.40|
;;;1569   
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      F_DATA_FLASH_LUN
                  |L1.52|
                          DCD      g_dataFlashTotalSectors
                  |L1.56|
                          DCD      g_au8SenseKey

                          AREA ||i.ModeSenseCommand||, CODE, READONLY, ALIGN=2

                  ModeSenseCommand PROC
;;;197    
;;;198    void ModeSenseCommand(void)
000000  b570              PUSH     {r4-r6,lr}
;;;199    {
;;;200    	uint8_t i,j;
;;;201    	uint8_t NumHead,NumSector;
;;;202    	uint16_t NumCyl;
;;;203    
;;;204        /* Clear the command buffer */
;;;205        *((uint32_t *)MassCMD_BUF  ) = 0;
000002  2500              MOVS     r5,#0
000004  4e60              LDR      r6,|L2.392|
000006  6035              STR      r5,[r6,#0]  ; MassBlock
;;;206        *((uint32_t *)MassCMD_BUF+1) = 0;
000008  6075              STR      r5,[r6,#4]  ; MassBlock
;;;207    
;;;208    	switch (g_sCBW.au8Data[0])
00000a  4d60              LDR      r5,|L2.396|
00000c  7c6d              LDRB     r5,[r5,#0x11]  ; g_sCBW
00000e  2d1b              CMP      r5,#0x1b
000010  d042              BEQ      |L2.152|
000012  dc04              BGT      |L2.30|
000014  2d01              CMP      r5,#1
000016  d007              BEQ      |L2.40|
000018  2d05              CMP      r5,#5
00001a  d171              BNE      |L2.256|
00001c  e015              B        |L2.74|
                  |L2.30|
00001e  2d1c              CMP      r5,#0x1c
000020  d04b              BEQ      |L2.186|
000022  2d3f              CMP      r5,#0x3f
000024  d16c              BNE      |L2.256|
000026  e059              B        |L2.220|
                  |L2.40|
;;;209    	{
;;;210    		case 0x01:
;;;211    		{
;;;212    			outpb(MassCMD_BUF, 19);
000028  2513              MOVS     r5,#0x13
00002a  4e57              LDR      r6,|L2.392|
00002c  7035              STRB     r5,[r6,#0]
;;;213    			i = 8;
00002e  2108              MOVS     r1,#8
;;;214    			for (j = 0; j<12; j++, i++)
000030  2000              MOVS     r0,#0
000032  e007              B        |L2.68|
                  |L2.52|
;;;215    				outpb(MassCMD_BUF+i, ModePage_01[j]);
000034  4d56              LDR      r5,|L2.400|
000036  5c2d              LDRB     r5,[r5,r0]
000038  4e53              LDR      r6,|L2.392|
00003a  5475              STRB     r5,[r6,r1]
00003c  1c45              ADDS     r5,r0,#1              ;214
00003e  b2e8              UXTB     r0,r5                 ;214
000040  1c4d              ADDS     r5,r1,#1              ;214
000042  b2e9              UXTB     r1,r5                 ;214
                  |L2.68|
000044  280c              CMP      r0,#0xc               ;214
000046  dbf5              BLT      |L2.52|
;;;216    			break;
000048  e09c              B        |L2.388|
                  |L2.74|
;;;217    		}
;;;218    		case 0x05:
;;;219    		{
;;;220    			outpb(MassCMD_BUF, 39);
00004a  2527              MOVS     r5,#0x27
00004c  4e4e              LDR      r6,|L2.392|
00004e  7035              STRB     r5,[r6,#0]
;;;221    			i = 8;
000050  2108              MOVS     r1,#8
;;;222    			for (j = 0; j<32; j++, i++)
000052  2000              MOVS     r0,#0
000054  e007              B        |L2.102|
                  |L2.86|
;;;223    				outpb(MassCMD_BUF+i, ModePage_05[j]);
000056  4d4f              LDR      r5,|L2.404|
000058  5c2d              LDRB     r5,[r5,r0]
00005a  4e4b              LDR      r6,|L2.392|
00005c  5475              STRB     r5,[r6,r1]
00005e  1c45              ADDS     r5,r0,#1              ;222
000060  b2e8              UXTB     r0,r5                 ;222
000062  1c4d              ADDS     r5,r1,#1              ;222
000064  b2e9              UXTB     r1,r5                 ;222
                  |L2.102|
000066  2820              CMP      r0,#0x20              ;222
000068  dbf5              BLT      |L2.86|
;;;224    			
;;;225    			NumHead = 2;
00006a  2302              MOVS     r3,#2
;;;226    			NumSector = 64;
00006c  2440              MOVS     r4,#0x40
;;;227    
;;;228    			if (g_sCBW.bCBWLUN==F_DATA_FLASH_LUN)
00006e  4d47              LDR      r5,|L2.396|
000070  7b6d              LDRB     r5,[r5,#0xd]  ; g_sCBW
000072  4e49              LDR      r6,|L2.408|
000074  7836              LDRB     r6,[r6,#0]  ; F_DATA_FLASH_LUN
000076  42b5              CMP      r5,r6
000078  d106              BNE      |L2.136|
;;;229    				NumCyl = g_dataFlashTotalSectors/128;
00007a  4e48              LDR      r6,|L2.412|
00007c  6835              LDR      r5,[r6,#0]  ; g_dataFlashTotalSectors
00007e  17ee              ASRS     r6,r5,#31
000080  0e76              LSRS     r6,r6,#25
000082  1976              ADDS     r6,r6,r5
000084  0276              LSLS     r6,r6,#9
000086  0c32              LSRS     r2,r6,#16
                  |L2.136|
;;;230    
;;;231    			outpb(MassCMD_BUF+12, NumHead);
000088  4d3f              LDR      r5,|L2.392|
00008a  732b              STRB     r3,[r5,#0xc]
;;;232    			outpb(MassCMD_BUF+13, NumSector);
00008c  736c              STRB     r4,[r5,#0xd]
;;;233    			outpb(MassCMD_BUF+16, (uint8_t)(NumCyl >> 8));
00008e  1215              ASRS     r5,r2,#8
000090  4e3d              LDR      r6,|L2.392|
000092  7435              STRB     r5,[r6,#0x10]
;;;234    			outpb(MassCMD_BUF+17, (uint8_t)(NumCyl & 0x00ff));
000094  7472              STRB     r2,[r6,#0x11]
;;;235    			break;
000096  e075              B        |L2.388|
                  |L2.152|
;;;236    		}
;;;237    		case 0x1B:
;;;238    		{
;;;239    			outpb(MassCMD_BUF, 19);
000098  2513              MOVS     r5,#0x13
00009a  4e3b              LDR      r6,|L2.392|
00009c  7035              STRB     r5,[r6,#0]
;;;240    			i = 8;
00009e  2108              MOVS     r1,#8
;;;241    			for (j = 0; j<12; j++, i++)
0000a0  2000              MOVS     r0,#0
0000a2  e007              B        |L2.180|
                  |L2.164|
;;;242    				outpb(MassCMD_BUF+i, ModePage_1B[j]);
0000a4  4d3e              LDR      r5,|L2.416|
0000a6  5c2d              LDRB     r5,[r5,r0]
0000a8  4e37              LDR      r6,|L2.392|
0000aa  5475              STRB     r5,[r6,r1]
0000ac  1c45              ADDS     r5,r0,#1              ;241
0000ae  b2e8              UXTB     r0,r5                 ;241
0000b0  1c4d              ADDS     r5,r1,#1              ;241
0000b2  b2e9              UXTB     r1,r5                 ;241
                  |L2.180|
0000b4  280c              CMP      r0,#0xc               ;241
0000b6  dbf5              BLT      |L2.164|
;;;243    			break;
0000b8  e064              B        |L2.388|
                  |L2.186|
;;;244    		}
;;;245    		case 0x1C:
;;;246    		{
;;;247    			outpb(MassCMD_BUF, 15);
0000ba  250f              MOVS     r5,#0xf
0000bc  4e32              LDR      r6,|L2.392|
0000be  7035              STRB     r5,[r6,#0]
;;;248    			i = 8;
0000c0  2108              MOVS     r1,#8
;;;249    			for (j = 0; j<8; j++, i++)
0000c2  2000              MOVS     r0,#0
0000c4  e007              B        |L2.214|
                  |L2.198|
;;;250    				outpb(MassCMD_BUF+i, ModePage_1C[j]);
0000c6  4d37              LDR      r5,|L2.420|
0000c8  5c2d              LDRB     r5,[r5,r0]
0000ca  4e2f              LDR      r6,|L2.392|
0000cc  5475              STRB     r5,[r6,r1]
0000ce  1c45              ADDS     r5,r0,#1              ;249
0000d0  b2e8              UXTB     r0,r5                 ;249
0000d2  1c4d              ADDS     r5,r1,#1              ;249
0000d4  b2e9              UXTB     r1,r5                 ;249
                  |L2.214|
0000d6  2808              CMP      r0,#8                 ;249
0000d8  dbf5              BLT      |L2.198|
;;;251    			break;
0000da  e053              B        |L2.388|
                  |L2.220|
;;;252    		}
;;;253    		case 0x3F:
;;;254    		{
;;;255    			outpb(MassCMD_BUF, 0x47);
0000dc  2547              MOVS     r5,#0x47
0000de  4e2a              LDR      r6,|L2.392|
0000e0  7035              STRB     r5,[r6,#0]
;;;256    			i = 8;
0000e2  2108              MOVS     r1,#8
;;;257    			for (j = 0; j<12; j++, i++)
0000e4  2000              MOVS     r0,#0
0000e6  e007              B        |L2.248|
                  |L2.232|
;;;258    				outpb(MassCMD_BUF+i, ModePage_01[j]);
0000e8  4d29              LDR      r5,|L2.400|
0000ea  5c2d              LDRB     r5,[r5,r0]
0000ec  4e26              LDR      r6,|L2.392|
0000ee  5475              STRB     r5,[r6,r1]
0000f0  1c45              ADDS     r5,r0,#1              ;257
0000f2  b2e8              UXTB     r0,r5                 ;257
0000f4  1c4d              ADDS     r5,r1,#1              ;257
0000f6  b2e9              UXTB     r1,r5                 ;257
                  |L2.248|
0000f8  280c              CMP      r0,#0xc               ;257
0000fa  dbf5              BLT      |L2.232|
;;;259    			for (j = 0; j<32; j++, i++)
0000fc  2000              MOVS     r0,#0
0000fe  e008              B        |L2.274|
                  |L2.256|
000100  e038              B        |L2.372|
                  |L2.258|
;;;260    				outpb(MassCMD_BUF+i, ModePage_05[j]);
000102  4d24              LDR      r5,|L2.404|
000104  5c2d              LDRB     r5,[r5,r0]
000106  4e20              LDR      r6,|L2.392|
000108  5475              STRB     r5,[r6,r1]
00010a  1c45              ADDS     r5,r0,#1              ;259
00010c  b2e8              UXTB     r0,r5                 ;259
00010e  1c4d              ADDS     r5,r1,#1              ;259
000110  b2e9              UXTB     r1,r5                 ;259
                  |L2.274|
000112  2820              CMP      r0,#0x20              ;259
000114  dbf5              BLT      |L2.258|
;;;261    			for (j = 0; j<12; j++, i++)
000116  2000              MOVS     r0,#0
000118  e007              B        |L2.298|
                  |L2.282|
;;;262    				outpb(MassCMD_BUF+i, ModePage_1B[j]);
00011a  4d21              LDR      r5,|L2.416|
00011c  5c2d              LDRB     r5,[r5,r0]
00011e  4e1a              LDR      r6,|L2.392|
000120  5475              STRB     r5,[r6,r1]
000122  1c45              ADDS     r5,r0,#1              ;261
000124  b2e8              UXTB     r0,r5                 ;261
000126  1c4d              ADDS     r5,r1,#1              ;261
000128  b2e9              UXTB     r1,r5                 ;261
                  |L2.298|
00012a  280c              CMP      r0,#0xc               ;261
00012c  dbf5              BLT      |L2.282|
;;;263    			for (j = 0; j<8; j++, i++)
00012e  2000              MOVS     r0,#0
000130  e007              B        |L2.322|
                  |L2.306|
;;;264    				outpb(MassCMD_BUF+i, ModePage_1C[j]);
000132  4d1c              LDR      r5,|L2.420|
000134  5c2d              LDRB     r5,[r5,r0]
000136  4e14              LDR      r6,|L2.392|
000138  5475              STRB     r5,[r6,r1]
00013a  1c45              ADDS     r5,r0,#1              ;263
00013c  b2e8              UXTB     r0,r5                 ;263
00013e  1c4d              ADDS     r5,r1,#1              ;263
000140  b2e9              UXTB     r1,r5                 ;263
                  |L2.322|
000142  2808              CMP      r0,#8                 ;263
000144  dbf5              BLT      |L2.306|
;;;265    			
;;;266    			NumHead = 2;
000146  2302              MOVS     r3,#2
;;;267    			NumSector = 64;
000148  2440              MOVS     r4,#0x40
;;;268    
;;;269    			if (g_sCBW.bCBWLUN==F_DATA_FLASH_LUN)
00014a  4d10              LDR      r5,|L2.396|
00014c  7b6d              LDRB     r5,[r5,#0xd]  ; g_sCBW
00014e  4e12              LDR      r6,|L2.408|
000150  7836              LDRB     r6,[r6,#0]  ; F_DATA_FLASH_LUN
000152  42b5              CMP      r5,r6
000154  d106              BNE      |L2.356|
;;;270    				NumCyl = g_dataFlashTotalSectors/128;
000156  4e11              LDR      r6,|L2.412|
000158  6835              LDR      r5,[r6,#0]  ; g_dataFlashTotalSectors
00015a  17ee              ASRS     r6,r5,#31
00015c  0e76              LSRS     r6,r6,#25
00015e  1976              ADDS     r6,r6,r5
000160  0276              LSLS     r6,r6,#9
000162  0c32              LSRS     r2,r6,#16
                  |L2.356|
;;;271    
;;;272    			outpb(MassCMD_BUF+24, NumHead);
000164  4d08              LDR      r5,|L2.392|
000166  762b              STRB     r3,[r5,#0x18]
;;;273    			outpb(MassCMD_BUF+25, NumSector);
000168  766c              STRB     r4,[r5,#0x19]
;;;274    			outpb(MassCMD_BUF+28, (uint8_t)(NumCyl >> 8));
00016a  1215              ASRS     r5,r2,#8
00016c  4e06              LDR      r6,|L2.392|
00016e  7735              STRB     r5,[r6,#0x1c]
;;;275    			outpb(MassCMD_BUF+29, (uint8_t)(NumCyl & 0x00ff));
000170  7772              STRB     r2,[r6,#0x1d]
;;;276    			break;
000172  e007              B        |L2.388|
                  |L2.372|
;;;277    		}
;;;278    		default:
;;;279    			g_au8SenseKey[0] = 0x05;
000174  2505              MOVS     r5,#5
000176  4e0c              LDR      r6,|L2.424|
000178  7035              STRB     r5,[r6,#0]
;;;280    			g_au8SenseKey[1] = 0x24;
00017a  2524              MOVS     r5,#0x24
00017c  7075              STRB     r5,[r6,#1]
;;;281    			g_au8SenseKey[2] = 0x00;
00017e  2500              MOVS     r5,#0
000180  70b5              STRB     r5,[r6,#2]
000182  bf00              NOP                            ;208
                  |L2.388|
000184  bf00              NOP                            ;216
;;;282    	}
;;;283    }
000186  bd70              POP      {r4-r6,pc}
;;;284    
                          ENDP

                  |L2.392|
                          DCD      MassBlock
                  |L2.396|
                          DCD      g_sCBW
                  |L2.400|
                          DCD      ModePage_01
                  |L2.404|
                          DCD      ModePage_05
                  |L2.408|
                          DCD      F_DATA_FLASH_LUN
                  |L2.412|
                          DCD      g_dataFlashTotalSectors
                  |L2.416|
                          DCD      ModePage_1B
                  |L2.420|
                          DCD      ModePage_1C
                  |L2.424|
                          DCD      g_au8SenseKey

                          AREA ||i.RdCurCapCommand||, CODE, READONLY, ALIGN=2

                  RdCurCapCommand PROC
;;;352    
;;;353    void RdCurCapCommand(void)
000000  b508              PUSH     {r3,lr}
;;;354    {
;;;355        int i;
;;;356        uint32_t temp;
;;;357    
;;;358    	for (i = 0; i < 36; i++)
000002  2000              MOVS     r0,#0
000004  e003              B        |L3.14|
                  |L3.6|
;;;359    		outpb(MassCMD_BUF+i, 0);
000006  2100              MOVS     r1,#0
000008  4a0f              LDR      r2,|L3.72|
00000a  5411              STRB     r1,[r2,r0]
00000c  1c40              ADDS     r0,r0,#1              ;358
                  |L3.14|
00000e  2824              CMP      r0,#0x24              ;358
000010  dbf9              BLT      |L3.6|
;;;360    
;;;361        if (g_sCBW.bCBWLUN==F_DATA_FLASH_LUN)
000012  490e              LDR      r1,|L3.76|
000014  7b49              LDRB     r1,[r1,#0xd]  ; g_sCBW
000016  4a0e              LDR      r2,|L3.80|
000018  7812              LDRB     r2,[r2,#0]  ; F_DATA_FLASH_LUN
00001a  4291              CMP      r1,r2
00001c  d103              BNE      |L3.38|
;;;362            temp = g_dataFlashTotalSectors - 1;
00001e  490d              LDR      r1,|L3.84|
000020  6809              LDR      r1,[r1,#0]  ; g_dataFlashTotalSectors
000022  1e49              SUBS     r1,r1,#1
000024  9100              STR      r1,[sp,#0]
                  |L3.38|
;;;363    
;;;364    	outpb(MassCMD_BUF+0, *((uint8_t *)&temp+3));
000026  4669              MOV      r1,sp
000028  78c9              LDRB     r1,[r1,#3]
00002a  4a07              LDR      r2,|L3.72|
00002c  7011              STRB     r1,[r2,#0]
;;;365    	outpb(MassCMD_BUF+1, *((uint8_t *)&temp+2));
00002e  4669              MOV      r1,sp
000030  7889              LDRB     r1,[r1,#2]
000032  7051              STRB     r1,[r2,#1]
;;;366    	outpb(MassCMD_BUF+2, *((uint8_t *)&temp+1));
000034  4669              MOV      r1,sp
000036  7849              LDRB     r1,[r1,#1]
000038  7091              STRB     r1,[r2,#2]
;;;367    	outpb(MassCMD_BUF+3, *((uint8_t *)&temp+0));
00003a  4669              MOV      r1,sp
00003c  7809              LDRB     r1,[r1,#0]
00003e  70d1              STRB     r1,[r2,#3]
;;;368    	outpb(MassCMD_BUF+6, 0x02);
000040  2102              MOVS     r1,#2
000042  7191              STRB     r1,[r2,#6]
;;;369    }
000044  bd08              POP      {r3,pc}
;;;370    
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      MassBlock
                  |L3.76|
                          DCD      g_sCBW
                  |L3.80|
                          DCD      F_DATA_FLASH_LUN
                  |L3.84|
                          DCD      g_dataFlashTotalSectors

                          AREA ||i.RdFmtCapCommand||, CODE, READONLY, ALIGN=2

                  RdFmtCapCommand PROC
;;;325    
;;;326    void RdFmtCapCommand(void)
000000  b508              PUSH     {r3,lr}
;;;327    {
;;;328        uint32_t i;
;;;329        uint32_t TotalSectors = 0;
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
;;;330    
;;;331    	for (i = 0; i < 36; i++)
000006  2000              MOVS     r0,#0
000008  e003              B        |L4.18|
                  |L4.10|
;;;332    		outpb(MassCMD_BUF+i, 0);
00000a  2100              MOVS     r1,#0
00000c  4a17              LDR      r2,|L4.108|
00000e  5411              STRB     r1,[r2,r0]
000010  1c40              ADDS     r0,r0,#1              ;331
                  |L4.18|
000012  2824              CMP      r0,#0x24              ;331
000014  d3f9              BCC      |L4.10|
;;;333    
;;;334    	outpb(MassCMD_BUF+3, 0x10);
000016  2110              MOVS     r1,#0x10
000018  4a14              LDR      r2,|L4.108|
00001a  70d1              STRB     r1,[r2,#3]
;;;335    
;;;336        if (g_sCBW.bCBWLUN==F_DATA_FLASH_LUN)
00001c  4914              LDR      r1,|L4.112|
00001e  7b49              LDRB     r1,[r1,#0xd]  ; g_sCBW
000020  4a14              LDR      r2,|L4.116|
000022  7812              LDRB     r2,[r2,#0]  ; F_DATA_FLASH_LUN
000024  4291              CMP      r1,r2
000026  d102              BNE      |L4.46|
;;;337    		TotalSectors = g_dataFlashTotalSectors;
000028  4913              LDR      r1,|L4.120|
00002a  6809              LDR      r1,[r1,#0]  ; g_dataFlashTotalSectors
00002c  9100              STR      r1,[sp,#0]
                  |L4.46|
;;;338    
;;;339    	outpb(MassCMD_BUF+4, *((uint8_t *)&TotalSectors+3));
00002e  4669              MOV      r1,sp
000030  78c9              LDRB     r1,[r1,#3]
000032  4a0e              LDR      r2,|L4.108|
000034  7111              STRB     r1,[r2,#4]
;;;340    	outpb(MassCMD_BUF+5, *((uint8_t *)&TotalSectors+2));
000036  4669              MOV      r1,sp
000038  7889              LDRB     r1,[r1,#2]
00003a  7151              STRB     r1,[r2,#5]
;;;341    	outpb(MassCMD_BUF+6, *((uint8_t *)&TotalSectors+1));
00003c  4669              MOV      r1,sp
00003e  7849              LDRB     r1,[r1,#1]
000040  7191              STRB     r1,[r2,#6]
;;;342    	outpb(MassCMD_BUF+7, *((uint8_t *)&TotalSectors+0));
000042  4669              MOV      r1,sp
000044  7809              LDRB     r1,[r1,#0]
000046  71d1              STRB     r1,[r2,#7]
;;;343    	outpb(MassCMD_BUF+8, 0x02);
000048  2102              MOVS     r1,#2
00004a  7211              STRB     r1,[r2,#8]
;;;344    	outpb(MassCMD_BUF+10, 0x02);
00004c  7291              STRB     r1,[r2,#0xa]
;;;345    	outpb(MassCMD_BUF+12, *((uint8_t *)&TotalSectors+3));
00004e  4669              MOV      r1,sp
000050  78c9              LDRB     r1,[r1,#3]
000052  7311              STRB     r1,[r2,#0xc]
;;;346    	outpb(MassCMD_BUF+13, *((uint8_t *)&TotalSectors+2));
000054  4669              MOV      r1,sp
000056  7889              LDRB     r1,[r1,#2]
000058  7351              STRB     r1,[r2,#0xd]
;;;347    	outpb(MassCMD_BUF+14, *((uint8_t *)&TotalSectors+3));
00005a  4669              MOV      r1,sp
00005c  78c9              LDRB     r1,[r1,#3]
00005e  7391              STRB     r1,[r2,#0xe]
;;;348    	outpb(MassCMD_BUF+15, *((uint8_t *)&TotalSectors+0));
000060  4669              MOV      r1,sp
000062  7809              LDRB     r1,[r1,#0]
000064  73d1              STRB     r1,[r2,#0xf]
;;;349    	outpb(MassCMD_BUF+18, 0x02);
000066  2102              MOVS     r1,#2
000068  7491              STRB     r1,[r2,#0x12]
;;;350    }
00006a  bd08              POP      {r3,pc}
;;;351    
                          ENDP

                  |L4.108|
                          DCD      MassBlock
                  |L4.112|
                          DCD      g_sCBW
                  |L4.116|
                          DCD      F_DATA_FLASH_LUN
                  |L4.120|
                          DCD      g_dataFlashTotalSectors

                          AREA ||i.ReqSenCommand||, CODE, READONLY, ALIGN=2

                  ReqSenCommand PROC
;;;285    
;;;286    void ReqSenCommand(void)
000000  b500              PUSH     {lr}
;;;287    {
000002  b085              SUB      sp,sp,#0x14
;;;288        uint8_t tmp[20];
;;;289        
;;;290        if (preventflag==1)
000004  481b              LDR      r0,|L5.116|
000006  7800              LDRB     r0,[r0,#0]  ; preventflag
000008  2801              CMP      r0,#1
00000a  d106              BNE      |L5.26|
;;;291        {
;;;292            preventflag=0;
00000c  2000              MOVS     r0,#0
00000e  4919              LDR      r1,|L5.116|
000010  7008              STRB     r0,[r1,#0]
;;;293    		tmp[0] = 0x70;
000012  2070              MOVS     r0,#0x70
000014  4669              MOV      r1,sp
000016  7008              STRB     r0,[r1,#0]
000018  e002              B        |L5.32|
                  |L5.26|
;;;294        }
;;;295        else
;;;296    		tmp[0] = 0xf0;
00001a  20f0              MOVS     r0,#0xf0
00001c  4669              MOV      r1,sp
00001e  7008              STRB     r0,[r1,#0]
                  |L5.32|
;;;297    
;;;298    	tmp[1] = 0;
000020  2100              MOVS     r1,#0
000022  4668              MOV      r0,sp
000024  7041              STRB     r1,[r0,#1]
;;;299    	tmp[3] = 0;
000026  70c1              STRB     r1,[r0,#3]
;;;300    	tmp[4] = 0;
000028  7101              STRB     r1,[r0,#4]
;;;301    	tmp[5] = 0;
00002a  7141              STRB     r1,[r0,#5]
;;;302    	tmp[6] = 0;
00002c  7181              STRB     r1,[r0,#6]
;;;303    	tmp[7] = 0x0A;
00002e  210a              MOVS     r1,#0xa
000030  71c1              STRB     r1,[r0,#7]
;;;304    	tmp[8] = 0;
000032  2100              MOVS     r1,#0
000034  7201              STRB     r1,[r0,#8]
;;;305    	tmp[9] = 0;
000036  7241              STRB     r1,[r0,#9]
;;;306    	tmp[10] = 0;
000038  7281              STRB     r1,[r0,#0xa]
;;;307    	tmp[11] = 0;
00003a  72c1              STRB     r1,[r0,#0xb]
;;;308    	tmp[14] = 0;
00003c  7381              STRB     r1,[r0,#0xe]
;;;309    	tmp[15] = 0;
00003e  73c1              STRB     r1,[r0,#0xf]
;;;310    	tmp[16] = 0;
000040  7401              STRB     r1,[r0,#0x10]
;;;311    	tmp[17] = 0;
000042  7441              STRB     r1,[r0,#0x11]
;;;312    
;;;313    	tmp[2] = g_au8SenseKey[0];
000044  480c              LDR      r0,|L5.120|
000046  7801              LDRB     r1,[r0,#0]  ; g_au8SenseKey
000048  4668              MOV      r0,sp
00004a  7081              STRB     r1,[r0,#2]
;;;314    	tmp[12] = g_au8SenseKey[1];
00004c  480a              LDR      r0,|L5.120|
00004e  7841              LDRB     r1,[r0,#1]  ; g_au8SenseKey
000050  4668              MOV      r0,sp
000052  7301              STRB     r1,[r0,#0xc]
;;;315    	tmp[13] = g_au8SenseKey[2];
000054  4808              LDR      r0,|L5.120|
000056  7881              LDRB     r1,[r0,#2]  ; g_au8SenseKey
000058  4668              MOV      r0,sp
00005a  7341              STRB     r1,[r0,#0xd]
;;;316    
;;;317        my_memcpy(g_au8UsbBulk1, tmp, 20);
00005c  2214              MOVS     r2,#0x14
00005e  4669              MOV      r1,sp
000060  4806              LDR      r0,|L5.124|
000062  f7fffffe          BL       my_memcpy
;;;318    	
;;;319    	// Sense Key
;;;320    	g_au8SenseKey[0] = 0x00;
000066  2000              MOVS     r0,#0
000068  4903              LDR      r1,|L5.120|
00006a  7008              STRB     r0,[r1,#0]
;;;321    	g_au8SenseKey[1] = 0x00;
00006c  7048              STRB     r0,[r1,#1]
;;;322    	g_au8SenseKey[2] = 0x00;
00006e  7088              STRB     r0,[r1,#2]
;;;323    }
000070  b005              ADD      sp,sp,#0x14
000072  bd00              POP      {pc}
;;;324    
                          ENDP

                  |L5.116|
                          DCD      preventflag
                  |L5.120|
                          DCD      g_au8SenseKey
                  |L5.124|
                          DCD      0x40060180

                          AREA ||i.RoughDelay||, CODE, READONLY, ALIGN=1

                  RoughDelay PROC
;;;179    
;;;180    void RoughDelay(uint32_t t)
000000  4601              MOV      r1,r0
;;;181    {
;;;182        volatile int32_t delay;
;;;183    
;;;184        delay = t;
;;;185    
;;;186        while(delay-- >= 0);
000002  bf00              NOP      
                  |L6.4|
000004  460a              MOV      r2,r1
000006  1e49              SUBS     r1,r1,#1
000008  2a00              CMP      r2,#0
00000a  dafb              BGE      |L6.4|
;;;187    }
00000c  4770              BX       lr
;;;188    
                          ENDP


                          AREA ||i.UsbBulkInAck||, CODE, READONLY, ALIGN=2

                  UsbBulkInAck PROC
;;;964    //======================================================
;;;965    void UsbBulkInAck(void)
000000  b510              PUSH     {r4,lr}
;;;966    {
;;;967    	int32_t volatile idx;
;;;968    
;;;969    	if (g_u8BulkState == BULK_CSW)
000002  483c              LDR      r0,|L7.244|
000004  7800              LDRB     r0,[r0,#0]  ; g_u8BulkState
000006  2804              CMP      r0,#4
000008  d108              BNE      |L7.28|
;;;970    	{
;;;971    	    /* Prepare to receive the CBW */
;;;972    		g_u8BulkState = BULK_CBW;
00000a  2000              MOVS     r0,#0
00000c  4939              LDR      r1,|L7.244|
00000e  7008              STRB     r0,[r1,#0]
;;;973    
;;;974    		_DRVUSB_SET_EP_BUF(3, USB_SRAM_BASE + BUF_BULK0);
000010  2040              MOVS     r0,#0x40
000012  4939              LDR      r1,|L7.248|
000014  6108              STR      r0,[r1,#0x10]
;;;975    		_DRVUSB_TRIG_EP(3, 31);
000016  201f              MOVS     r0,#0x1f
000018  6148              STR      r0,[r1,#0x14]
00001a  e069              B        |L7.240|
                  |L7.28|
;;;976    	}
;;;977    	else if (g_u8BulkState == BULK_IN)
00001c  4835              LDR      r0,|L7.244|
00001e  7800              LDRB     r0,[r0,#0]  ; g_u8BulkState
000020  2801              CMP      r0,#1
000022  d165              BNE      |L7.240|
;;;978    	{
;;;979    		switch (g_sCBW.u8OPCode)
000024  4835              LDR      r0,|L7.252|
000026  7bc0              LDRB     r0,[r0,#0xf]  ; g_sCBW
000028  2825              CMP      r0,#0x25
00002a  d01d              BEQ      |L7.104|
00002c  dc0e              BGT      |L7.76|
00002e  281b              CMP      r0,#0x1b
000030  d033              BEQ      |L7.154|
000032  dc06              BGT      |L7.66|
000034  2800              CMP      r0,#0
000036  d040              BEQ      |L7.186|
000038  2803              CMP      r0,#3
00003a  d026              BEQ      |L7.138|
00003c  2812              CMP      r0,#0x12
00003e  d141              BNE      |L7.196|
000040  e024              B        |L7.140|
                  |L7.66|
000042  281e              CMP      r0,#0x1e
000044  d027              BEQ      |L7.150|
000046  2823              CMP      r0,#0x23
000048  d13c              BNE      |L7.196|
00004a  e00c              B        |L7.102|
                  |L7.76|
00004c  282f              CMP      r0,#0x2f
00004e  d023              BEQ      |L7.152|
000050  dc04              BGT      |L7.92|
000052  2828              CMP      r0,#0x28
000054  d011              BEQ      |L7.122|
000056  282a              CMP      r0,#0x2a
000058  d134              BNE      |L7.196|
00005a  e01f              B        |L7.156|
                  |L7.92|
00005c  285a              CMP      r0,#0x5a
00005e  d004              BEQ      |L7.106|
000060  2861              CMP      r0,#0x61
000062  d12f              BNE      |L7.196|
000064  e01b              B        |L7.158|
                  |L7.102|
;;;980    		{
;;;981    			case UFI_READ_FORMAT_CAPACITY:
;;;982    			case UFI_READ_CAPACITY:
000066  bf00              NOP      
                  |L7.104|
;;;983    			case UFI_MODE_SENSE_10:
000068  bf00              NOP      
                  |L7.106|
;;;984    			//case UFI_READ_10:
;;;985    			{
;;;986    				if (g_u32Length > 0)
00006a  4825              LDR      r0,|L7.256|
00006c  6800              LDR      r0,[r0,#0]  ; g_u32Length
00006e  2800              CMP      r0,#0
000070  d002              BEQ      |L7.120|
;;;987    				{
;;;988    					UsbRead();
000072  f7fffffe          BL       UsbRead
                  |L7.118|
;;;989    					return;
;;;990    				}
;;;991    			}
;;;992    			case UFI_READ_10:
;;;993    			{
;;;994    				if (g_u32Length > 0)
;;;995    				{
;;;996    					//UsbRead();
;;;997    					UsbReadTrig();
;;;998    					return;
;;;999    				}			
;;;1000   			}
;;;1001   			
;;;1002   			case UFI_REQUEST_SENSE:
;;;1003   			case UFI_INQUIRY:
;;;1004   			{
;;;1005   				g_sCSW.dCSWDataResidue = 0;
;;;1006   				g_sCSW.bCSWStatus = 0;
;;;1007   				break;
;;;1008   			}
;;;1009   
;;;1010   			case UFI_PREVENT_ALLOW_MEDIUM_REMOVAL:
;;;1011   			case UFI_VERIFY_10:
;;;1012   			case UFI_START_STOP:
;;;1013   			case UFI_WRITE_10:
;;;1014   			case VENDER_CMD:
;;;1015   			{
;;;1016   				int32_t tmp;
;;;1017   				
;;;1018   				tmp = g_sCBW.dCBWDataTransferLength - STORAGE_BUFFER_SIZE;
;;;1019   				if (tmp < 0) 
;;;1020   					tmp = 0;
;;;1021   				
;;;1022   				g_sCSW.dCSWDataResidue = tmp;
;;;1023   				g_sCSW.bCSWStatus = 0;
;;;1024   				break;
;;;1025   			}
;;;1026   			case UFI_TEST_UNIT_READY:
;;;1027   			{
;;;1028   				g_sCSW.dCSWDataResidue = 0;
;;;1029   				g_sCSW.bCSWStatus = 0;
;;;1030   				break;
;;;1031   			}
;;;1032   			default:
;;;1033   			{
;;;1034   			    /* Unsupported commmand. Return command fail status */
;;;1035   				g_sCSW.dCSWDataResidue = g_sCBW.dCBWDataTransferLength;
;;;1036   				g_sCSW.bCSWStatus = 0x01;
;;;1037   				break;
;;;1038   			}
;;;1039   		}
;;;1040   		
;;;1041   		/* Return the CSW */
;;;1042   		_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK1);
;;;1043   
;;;1044           my_memcpy(g_au8UsbBulk1, &g_sCSW.dCSWSignature, 16);
;;;1045   
;;;1046   		g_u8BulkState = BULK_CSW;
;;;1047   		_DRVUSB_TRIG_EP(2, 13);
;;;1048   	}
;;;1049   }
000076  bd10              POP      {r4,pc}
                  |L7.120|
000078  bf00              NOP                            ;992
                  |L7.122|
00007a  4821              LDR      r0,|L7.256|
00007c  6800              LDR      r0,[r0,#0]            ;994  ; g_u32Length
00007e  2800              CMP      r0,#0                 ;994
000080  d002              BEQ      |L7.136|
000082  f7fffffe          BL       UsbReadTrig
000086  e7f6              B        |L7.118|
                  |L7.136|
000088  bf00              NOP                            ;1002
                  |L7.138|
00008a  bf00              NOP                            ;1003
                  |L7.140|
00008c  2000              MOVS     r0,#0                 ;1005
00008e  491d              LDR      r1,|L7.260|
000090  6088              STR      r0,[r1,#8]            ;1005  ; g_sCSW
000092  7308              STRB     r0,[r1,#0xc]          ;1006
000094  e01d              B        |L7.210|
                  |L7.150|
000096  bf00              NOP                            ;1011
                  |L7.152|
000098  bf00              NOP                            ;1012
                  |L7.154|
00009a  bf00              NOP                            ;1013
                  |L7.156|
00009c  bf00              NOP                            ;1014
                  |L7.158|
00009e  4917              LDR      r1,|L7.252|
0000a0  6889              LDR      r1,[r1,#8]            ;1018  ; g_sCBW
0000a2  1fc8              SUBS     r0,r1,#7              ;1018
0000a4  38ff              SUBS     r0,r0,#0xff           ;1018
0000a6  38fa              SUBS     r0,r0,#0xfa           ;1018
0000a8  2800              CMP      r0,#0                 ;1019
0000aa  da00              BGE      |L7.174|
0000ac  2000              MOVS     r0,#0                 ;1020
                  |L7.174|
0000ae  4915              LDR      r1,|L7.260|
0000b0  6088              STR      r0,[r1,#8]            ;1022  ; g_sCSW
0000b2  2100              MOVS     r1,#0                 ;1023
0000b4  4a13              LDR      r2,|L7.260|
0000b6  7311              STRB     r1,[r2,#0xc]          ;1023
0000b8  e00b              B        |L7.210|
                  |L7.186|
0000ba  2000              MOVS     r0,#0                 ;1028
0000bc  4911              LDR      r1,|L7.260|
0000be  6088              STR      r0,[r1,#8]            ;1028  ; g_sCSW
0000c0  7308              STRB     r0,[r1,#0xc]          ;1029
0000c2  e006              B        |L7.210|
                  |L7.196|
0000c4  480d              LDR      r0,|L7.252|
0000c6  6880              LDR      r0,[r0,#8]            ;1035  ; g_sCBW
0000c8  490e              LDR      r1,|L7.260|
0000ca  6088              STR      r0,[r1,#8]            ;1035  ; g_sCSW
0000cc  2001              MOVS     r0,#1                 ;1036
0000ce  7308              STRB     r0,[r1,#0xc]          ;1036
0000d0  bf00              NOP                            ;1037
                  |L7.210|
0000d2  bf00              NOP                            ;1007
0000d4  2080              MOVS     r0,#0x80              ;1042
0000d6  4908              LDR      r1,|L7.248|
0000d8  6008              STR      r0,[r1,#0]            ;1042
0000da  2210              MOVS     r2,#0x10              ;1044
0000dc  4909              LDR      r1,|L7.260|
0000de  480a              LDR      r0,|L7.264|
0000e0  f7fffffe          BL       my_memcpy
0000e4  2004              MOVS     r0,#4                 ;1046
0000e6  4903              LDR      r1,|L7.244|
0000e8  7008              STRB     r0,[r1,#0]            ;1046
0000ea  200d              MOVS     r0,#0xd               ;1047
0000ec  4902              LDR      r1,|L7.248|
0000ee  6048              STR      r0,[r1,#4]            ;1047
                  |L7.240|
0000f0  bf00              NOP      
0000f2  e7c0              B        |L7.118|
;;;1050   
                          ENDP

                  |L7.244|
                          DCD      g_u8BulkState
                  |L7.248|
                          DCD      0x40060040
                  |L7.252|
                          DCD      g_sCBW
                  |L7.256|
                          DCD      g_u32Length
                  |L7.260|
                          DCD      g_sCSW
                  |L7.264|
                          DCD      0x40060180

                          AREA ||i.UsbBulkOutAck||, CODE, READONLY, ALIGN=2

                  UsbBulkOutAck PROC
;;;1119   //======================================================
;;;1120   int32_t UsbBulkOutAck(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1121   {
;;;1122   	uint8_t u8Len;
;;;1123   	int32_t i;
;;;1124   
;;;1125   	if (g_u8BulkState == BULK_CBW)
000002  48fd              LDR      r0,|L8.1016|
000004  7800              LDRB     r0,[r0,#0]  ; g_u8BulkState
000006  2800              CMP      r0,#0
000008  d17e              BNE      |L8.264|
;;;1126   	{
;;;1127   		u8Len = *((__IO uint32_t *)(&USBD->EP[3].MXPLD));
00000a  48fc              LDR      r0,|L8.1020|
00000c  6d40              LDR      r0,[r0,#0x54]
00000e  b2c5              UXTB     r5,r0
;;;1128   		
;;;1129   		/* Check Signature & length of CBW */
;;;1130   		if ((*(uint32_t *) g_au8UsbBulk0 != CBW_SIGNATURE) || (u8Len != 31))
000010  48fb              LDR      r0,|L8.1024|
000012  6800              LDR      r0,[r0,#0]
000014  49fb              LDR      r1,|L8.1028|
000016  4288              CMP      r0,r1
000018  d101              BNE      |L8.30|
00001a  2d1f              CMP      r5,#0x1f
00001c  d001              BEQ      |L8.34|
                  |L8.30|
;;;1131   		{
;;;1132   			return FALSE;
00001e  2000              MOVS     r0,#0
                  |L8.32|
;;;1133   		}
;;;1134   		
;;;1135   		/* Get the CBW */
;;;1136   		for (i = 0; i < u8Len; i++)
;;;1137   			*((uint8_t *) (&g_sCBW.dCBWSignature) + i) = g_au8UsbBulk0[i];
;;;1138   			
;;;1139   		/* Prepare to echo the tag from CBW to CSW */
;;;1140   		g_sCSW.dCSWTag = g_sCBW.dCBWTag;
;;;1141   		
;;;1142   		/* Parse Op-Code of CBW */
;;;1143   		switch (g_sCBW.u8OPCode)
;;;1144   		{
;;;1145   			case UFI_PREVENT_ALLOW_MEDIUM_REMOVAL:
;;;1146   			{
;;;1147   				if (g_sCBW.au8Data[2] & 0x01)
;;;1148   				{
;;;1149   					g_au8SenseKey[0] = 0x05;  //INVALID COMMAND
;;;1150   					g_au8SenseKey[1] = 0x24;
;;;1151   					g_au8SenseKey[2] = 0;
;;;1152   					preventflag = 1;
;;;1153   				}
;;;1154   				else
;;;1155   					preventflag = 0;
;;;1156   				g_u8BulkState = BULK_IN;
;;;1157   				UsbBulkInAck ();
;;;1158   				return TRUE;
;;;1159   			}
;;;1160   			case UFI_VERIFY_10:
;;;1161   			case UFI_START_STOP:
;;;1162   			case UFI_TEST_UNIT_READY:
;;;1163   			{
;;;1164   				g_u8BulkState = BULK_IN;
;;;1165   				UsbBulkInAck ();
;;;1166   				return TRUE;
;;;1167   			}
;;;1168   			case UFI_REQUEST_SENSE:
;;;1169   			{
;;;1170   				ReqSenCommand();
;;;1171   				g_u8BulkState = BULK_IN;
;;;1172   				_DRVUSB_TRIG_EP(2, 18);
;;;1173   				return TRUE;
;;;1174   			}
;;;1175   			case UFI_READ_FORMAT_CAPACITY:
;;;1176   			{
;;;1177   				if (g_u32Length == 0)
;;;1178   				{
;;;1179   					g_u32Length = g_sCBW.dCBWDataTransferLength;
;;;1180   					g_u32Address = MassCMD_BUF;
;;;1181   				}
;;;1182   				RdFmtCapCommand();
;;;1183   				g_u8BulkState = BULK_IN;
;;;1184   				if (g_u32Length > 0)
;;;1185   				{
;;;1186   					if (g_u32Length > MAX_PACKET_SIZE)
;;;1187   						g_u8Size = MAX_PACKET_SIZE;
;;;1188   					else
;;;1189   						g_u8Size = g_u32Length;
;;;1190   
;;;1191   					my_memcpy(g_au8UsbBulk1, (char *)g_u32Address, g_u8Size);
;;;1192   
;;;1193   					g_u32Address += g_u8Size;
;;;1194   					_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK0);
;;;1195   					UsbRead ();
;;;1196   				}
;;;1197   				else
;;;1198   					UsbBulkInAck ();
;;;1199   				return TRUE;
;;;1200   			}
;;;1201   			case UFI_READ_CAPACITY:
;;;1202   			{
;;;1203   				if (g_u32Length == 0)
;;;1204   				{
;;;1205       				g_u32Length = g_sCBW.dCBWDataTransferLength;
;;;1206   					g_u32Address = MassCMD_BUF;
;;;1207   				}
;;;1208   				
;;;1209   				RdCurCapCommand();
;;;1210   				g_u8BulkState = BULK_IN;
;;;1211   				if (g_u32Length > 0)
;;;1212   				{
;;;1213   					if (g_u32Length > MAX_PACKET_SIZE)
;;;1214   						g_u8Size = MAX_PACKET_SIZE;
;;;1215   					else
;;;1216   						g_u8Size = g_u32Length;
;;;1217   
;;;1218   					my_memcpy(g_au8UsbBulk1, (char *)g_u32Address, g_u8Size);
;;;1219   
;;;1220   					g_u32Address += g_u8Size;
;;;1221   					_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK0);
;;;1222   					UsbRead ();
;;;1223   				}
;;;1224   				else
;;;1225   					UsbBulkInAck ();
;;;1226   				return TRUE;
;;;1227   			}
;;;1228   			case UFI_MODE_SELECT_10:
;;;1229   			{
;;;1230   				g_u32Length = g_sCBW.dCBWDataTransferLength;
;;;1231   				g_u32Address = MassCMD_BUF;
;;;1232   
;;;1233   				if (g_u32Length > 0)
;;;1234   				{
;;;1235   					_DRVUSB_TRIG_EP(3, MAX_PACKET_SIZE);
;;;1236   					g_u8BulkState = BULK_OUT;
;;;1237   				}
;;;1238   				return TRUE;
;;;1239   			}
;;;1240   			case UFI_MODE_SENSE_10:
;;;1241   			{
;;;1242   				if (g_u32Length == 0)
;;;1243   				{
;;;1244   					g_u32Length = g_sCBW.dCBWDataTransferLength;
;;;1245   					g_u32Address = MassCMD_BUF;
;;;1246   				}
;;;1247   				
;;;1248   				ModeSenseCommand();
;;;1249   				g_u8BulkState = BULK_IN;
;;;1250   				if (g_u32Length > 0)
;;;1251   				{
;;;1252   					if (g_u32Length > MAX_PACKET_SIZE)
;;;1253   						g_u8Size = MAX_PACKET_SIZE;
;;;1254   					else
;;;1255   						g_u8Size = g_u32Length;
;;;1256   					my_memcpy(g_au8UsbBulk1, (char *)g_u32Address, g_u8Size);
;;;1257   
;;;1258   					g_u32Address += g_u8Size;
;;;1259   
;;;1260   					_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK0);
;;;1261   					UsbRead ();
;;;1262   				}
;;;1263   				else
;;;1264   					UsbBulkInAck ();
;;;1265   				return TRUE;
;;;1266   			}
;;;1267   			case UFI_INQUIRY:
;;;1268   			{
;;;1269                   my_memcpy(g_au8UsbBulk1, (void *)InquiryID, 36);
;;;1270   
;;;1271   				g_u8BulkState = BULK_IN;
;;;1272   
;;;1273   				_DRVUSB_TRIG_EP(2, 36);
;;;1274   				return TRUE;
;;;1275   			}
;;;1276   			case UFI_READ_10:
;;;1277   			{
;;;1278   			    /* Check if it is a new transfer */
;;;1279   				if(g_u32Length == 0)
;;;1280   				{
;;;1281   				    /* Prepare the data for Bulk IN transfer */
;;;1282   				
;;;1283   					/* Get LBA address */
;;;1284   					g_u32Address = get_be32(&g_sCBW.au8Data[0]);
;;;1285   					g_u32LbaAddress = g_u32Address * UDC_SECTOR_SIZE;
;;;1286   					g_u32Length = g_sCBW.dCBWDataTransferLength;
;;;1287   					g_u32BytesInStorageBuf = g_u32Length;
;;;1288   
;;;1289   					if(g_sCBW.bCBWLUN==F_DATA_FLASH_LUN)
;;;1290   					{
;;;1291   					    i = g_u32Length;
;;;1292   					    if(i > STORAGE_BUFFER_SIZE)
;;;1293   					        i = STORAGE_BUFFER_SIZE;
;;;1294   					    
;;;1295   						DataFlashRead(g_u32Address * UDC_SECTOR_SIZE, i, (unsigned int)STORAGE_DATA_BUF);
;;;1296   					    g_u32BytesInStorageBuf = i;
;;;1297   					    g_u32LbaAddress += i;
;;;1298   					}
;;;1299   				}
;;;1300   				g_u32Address = STORAGE_DATA_BUF;
;;;1301   
;;;1302                   /* Indicate the next packet should be Bulk IN Data packet */
;;;1303   				g_u8BulkState = BULK_IN;
;;;1304   				
;;;1305   				if(g_u32BytesInStorageBuf > 0)
;;;1306   				{
;;;1307   				    /* Set the packet size */
;;;1308   					if (g_u32BytesInStorageBuf > MAX_PACKET_SIZE)
;;;1309   						g_u8Size = MAX_PACKET_SIZE;
;;;1310   					else
;;;1311   						g_u8Size = g_u32BytesInStorageBuf;
;;;1312   					
;;;1313   					/* Prepare the first data packet (DATA1) */
;;;1314   					my_memcpy(g_au8UsbBulk1, (char *)g_u32Address, g_u8Size);
;;;1315   					g_u32Address += g_u8Size;
;;;1316   					
;;;1317   					/* kick - start */
;;;1318   #if 1	 // For USB read issue
;;;1319   					_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK1);
;;;1320   					/* Trigger to send out the data packet */	
;;;1321   					_DRVUSB_TRIG_EP(2, g_u8Size);
;;;1322   					g_u32Length -= g_u8Size;
;;;1323   					g_u32BytesInStorageBuf -= g_u8Size;
;;;1324   #else
;;;1325   					
;;;1326   					_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK0);
;;;1327   					UsbRead();
;;;1328   #endif
;;;1329   				}
;;;1330   				else
;;;1331   				{
;;;1332   					UsbBulkInAck();
;;;1333   				}
;;;1334   					
;;;1335   				return TRUE;
;;;1336   			}
;;;1337   			case UFI_WRITE_10:
;;;1338   			{
;;;1339   				if (g_u32Length == 0)
;;;1340   				{
;;;1341   					g_u32Length = g_sCBW.dCBWDataTransferLength;
;;;1342   					g_u32Address = STORAGE_DATA_BUF;
;;;1343   					g_u32DataFlashStartAddr = get_be32(&g_sCBW.au8Data[0]) * UDC_SECTOR_SIZE;
;;;1344   				}
;;;1345   
;;;1346   				if ((g_u32Length > 0))
;;;1347   				{
;;;1348   					_DRVUSB_TRIG_EP(3, MAX_PACKET_SIZE);
;;;1349   					g_u8BulkState = BULK_OUT;
;;;1350   				}
;;;1351   				    
;;;1352   				return TRUE;
;;;1353   			}
;;;1354   			case VENDER_CMD: /* Vender Command */
;;;1355   			{
;;;1356   			    extern __weak int32_t ProcessVenderCmd(uint8_t u8Cmd);
;;;1357   
;;;1358   			    if((uint32_t)&ProcessVenderCmd != NULL)
;;;1359   			        return ProcessVenderCmd(g_sCBW.u8LUN);
;;;1360   			}
;;;1361   			default:
;;;1362   			{
;;;1363           		/* Unsupported command */
;;;1364           		g_au8SenseKey[0] = 0x05;
;;;1365           		g_au8SenseKey[1] = 0x20;
;;;1366           		g_au8SenseKey[2] = 0x00;
;;;1367           		
;;;1368           		/* If CBW request for data phase, just return zero packet to end data phase */
;;;1369           		if (g_sCBW.dCBWDataTransferLength > 0)
;;;1370           		{
;;;1371           			/* Data Phase, zero/short packet */
;;;1372           			if ((g_sCBW.bmCBWFlags & 0x80) != 0)
;;;1373           			{	
;;;1374           			    /* Data-In */
;;;1375           				g_u8BulkState = BULK_IN;
;;;1376           				_DRVUSB_TRIG_EP(2, 0);
;;;1377           			}
;;;1378           		}
;;;1379           		else
;;;1380           		{	/* Status Phase */
;;;1381           			g_u8BulkState = BULK_IN;
;;;1382           			UsbBulkInAck ();
;;;1383           		}
;;;1384   			    return TRUE;
;;;1385   			}
;;;1386   		}
;;;1387   	}
;;;1388   	else if (g_u8BulkState == BULK_OUT)
;;;1389   	{	
;;;1390   		switch (g_sCBW.u8OPCode)
;;;1391   		{
;;;1392   			case UFI_WRITE_10:
;;;1393   			case UFI_MODE_SELECT_10:
;;;1394   			{
;;;1395   				UsbWrite();
;;;1396   				return TRUE;
;;;1397   			}
;;;1398   			case VENDER_CMD:
;;;1399   			{
;;;1400   			    extern __weak void ComWrite(void);
;;;1401   
;;;1402   			    if((uint32_t)ComWrite != NULL)
;;;1403   			        ComWrite();
;;;1404   			    return TRUE;
;;;1405   			}
;;;1406   		}
;;;1407   	}
;;;1408   	return TRUE;
;;;1409   }
000020  bd70              POP      {r4-r6,pc}
                  |L8.34|
000022  2400              MOVS     r4,#0                 ;1136
000024  e005              B        |L8.50|
                  |L8.38|
000026  48f6              LDR      r0,|L8.1024|
000028  1820              ADDS     r0,r4,r0              ;1137
00002a  7800              LDRB     r0,[r0,#0]            ;1137
00002c  49f6              LDR      r1,|L8.1032|
00002e  5508              STRB     r0,[r1,r4]            ;1137
000030  1c64              ADDS     r4,r4,#1              ;1136
                  |L8.50|
000032  42ac              CMP      r4,r5                 ;1136
000034  dbf7              BLT      |L8.38|
000036  48f4              LDR      r0,|L8.1032|
000038  6840              LDR      r0,[r0,#4]            ;1140  ; g_sCBW
00003a  49f4              LDR      r1,|L8.1036|
00003c  6048              STR      r0,[r1,#4]            ;1140  ; g_sCSW
00003e  48f2              LDR      r0,|L8.1032|
000040  7bc0              LDRB     r0,[r0,#0xf]          ;1143  ; g_sCBW
000042  2825              CMP      r0,#0x25              ;1143
000044  d07e              BEQ      |L8.324|
000046  dc0e              BGT      |L8.102|
000048  281b              CMP      r0,#0x1b              ;1143
00004a  d036              BEQ      |L8.186|
00004c  dc06              BGT      |L8.92|
00004e  2800              CMP      r0,#0                 ;1143
000050  d034              BEQ      |L8.188|
000052  2803              CMP      r0,#3                 ;1143
000054  d039              BEQ      |L8.202|
000056  2812              CMP      r0,#0x12              ;1143
000058  d175              BNE      |L8.326|
00005a  e10c              B        |L8.630|
                  |L8.92|
00005c  281e              CMP      r0,#0x1e              ;1143
00005e  d011              BEQ      |L8.132|
000060  2823              CMP      r0,#0x23              ;1143
000062  d170              BNE      |L8.326|
000064  e03c              B        |L8.224|
                  |L8.102|
000066  2855              CMP      r0,#0x55              ;1143
000068  d06e              BEQ      |L8.328|
00006a  dc06              BGT      |L8.122|
00006c  2828              CMP      r0,#0x28              ;1143
00006e  d06c              BEQ      |L8.330|
000070  282a              CMP      r0,#0x2a              ;1143
000072  d06b              BEQ      |L8.332|
000074  282f              CMP      r0,#0x2f              ;1143
000076  d166              BNE      |L8.326|
000078  e01e              B        |L8.184|
                  |L8.122|
00007a  285a              CMP      r0,#0x5a              ;1143
00007c  d067              BEQ      |L8.334|
00007e  2861              CMP      r0,#0x61              ;1143
000080  d161              BNE      |L8.326|
000082  e197              B        |L8.948|
                  |L8.132|
000084  48e0              LDR      r0,|L8.1032|
000086  7cc0              LDRB     r0,[r0,#0x13]         ;1147
000088  07c0              LSLS     r0,r0,#31             ;1147
00008a  0fc0              LSRS     r0,r0,#31             ;1147
00008c  d00a              BEQ      |L8.164|
00008e  2005              MOVS     r0,#5                 ;1149
000090  49df              LDR      r1,|L8.1040|
000092  7008              STRB     r0,[r1,#0]            ;1149
000094  2024              MOVS     r0,#0x24              ;1150
000096  7048              STRB     r0,[r1,#1]            ;1150
000098  2000              MOVS     r0,#0                 ;1151
00009a  7088              STRB     r0,[r1,#2]            ;1151
00009c  2001              MOVS     r0,#1                 ;1152
00009e  49dd              LDR      r1,|L8.1044|
0000a0  7008              STRB     r0,[r1,#0]            ;1152
0000a2  e002              B        |L8.170|
                  |L8.164|
0000a4  2000              MOVS     r0,#0                 ;1155
0000a6  49db              LDR      r1,|L8.1044|
0000a8  7008              STRB     r0,[r1,#0]            ;1155
                  |L8.170|
0000aa  2001              MOVS     r0,#1                 ;1156
0000ac  49d2              LDR      r1,|L8.1016|
0000ae  7008              STRB     r0,[r1,#0]            ;1156
0000b0  f7fffffe          BL       UsbBulkInAck
0000b4  2001              MOVS     r0,#1                 ;1158
0000b6  e7b3              B        |L8.32|
                  |L8.184|
0000b8  bf00              NOP                            ;1161
                  |L8.186|
0000ba  bf00              NOP                            ;1162
                  |L8.188|
0000bc  2001              MOVS     r0,#1                 ;1164
0000be  49ce              LDR      r1,|L8.1016|
0000c0  7008              STRB     r0,[r1,#0]            ;1164
0000c2  f7fffffe          BL       UsbBulkInAck
0000c6  2001              MOVS     r0,#1                 ;1166
0000c8  e7aa              B        |L8.32|
                  |L8.202|
0000ca  f7fffffe          BL       ReqSenCommand
0000ce  2001              MOVS     r0,#1                 ;1171
0000d0  49c9              LDR      r1,|L8.1016|
0000d2  7008              STRB     r0,[r1,#0]            ;1171
0000d4  2012              MOVS     r0,#0x12              ;1172
0000d6  49c9              LDR      r1,|L8.1020|
0000d8  3140              ADDS     r1,r1,#0x40           ;1172
0000da  6048              STR      r0,[r1,#4]            ;1172
0000dc  2001              MOVS     r0,#1                 ;1173
0000de  e79f              B        |L8.32|
                  |L8.224|
0000e0  48cd              LDR      r0,|L8.1048|
0000e2  6800              LDR      r0,[r0,#0]            ;1177  ; g_u32Length
0000e4  2800              CMP      r0,#0                 ;1177
0000e6  d106              BNE      |L8.246|
0000e8  48c7              LDR      r0,|L8.1032|
0000ea  6880              LDR      r0,[r0,#8]            ;1179  ; g_sCBW
0000ec  49ca              LDR      r1,|L8.1048|
0000ee  6008              STR      r0,[r1,#0]            ;1179  ; g_u32Length
0000f0  48ca              LDR      r0,|L8.1052|
0000f2  49cb              LDR      r1,|L8.1056|
0000f4  6008              STR      r0,[r1,#0]            ;1180  ; g_u32Address
                  |L8.246|
0000f6  f7fffffe          BL       RdFmtCapCommand
0000fa  2001              MOVS     r0,#1                 ;1183
0000fc  49be              LDR      r1,|L8.1016|
0000fe  7008              STRB     r0,[r1,#0]            ;1183
000100  48c5              LDR      r0,|L8.1048|
000102  6800              LDR      r0,[r0,#0]            ;1184  ; g_u32Length
000104  2800              CMP      r0,#0                 ;1184
000106  e000              B        |L8.266|
                  |L8.264|
000108  e1a3              B        |L8.1106|
                  |L8.266|
00010a  d028              BEQ      |L8.350|
00010c  48c2              LDR      r0,|L8.1048|
00010e  6800              LDR      r0,[r0,#0]            ;1186  ; g_u32Length
000110  2840              CMP      r0,#0x40              ;1186
000112  d903              BLS      |L8.284|
000114  2040              MOVS     r0,#0x40              ;1187
000116  49c3              LDR      r1,|L8.1060|
000118  7008              STRB     r0,[r1,#0]            ;1187
00011a  e003              B        |L8.292|
                  |L8.284|
00011c  48be              LDR      r0,|L8.1048|
00011e  6800              LDR      r0,[r0,#0]            ;1189  ; g_u32Length
000120  49c0              LDR      r1,|L8.1060|
000122  7008              STRB     r0,[r1,#0]            ;1189
                  |L8.292|
000124  48bf              LDR      r0,|L8.1060|
000126  7802              LDRB     r2,[r0,#0]            ;1191  ; g_u8Size
000128  48bd              LDR      r0,|L8.1056|
00012a  6801              LDR      r1,[r0,#0]            ;1191  ; g_u32Address
00012c  48b4              LDR      r0,|L8.1024|
00012e  3040              ADDS     r0,r0,#0x40           ;1191
000130  f7fffffe          BL       my_memcpy
000134  48ba              LDR      r0,|L8.1056|
000136  6800              LDR      r0,[r0,#0]            ;1193  ; g_u32Address
000138  49ba              LDR      r1,|L8.1060|
00013a  7809              LDRB     r1,[r1,#0]            ;1193  ; g_u8Size
00013c  1840              ADDS     r0,r0,r1              ;1193
00013e  49b8              LDR      r1,|L8.1056|
000140  6008              STR      r0,[r1,#0]            ;1193  ; g_u32Address
000142  e005              B        |L8.336|
                  |L8.324|
000144  e00f              B        |L8.358|
                  |L8.326|
000146  e13e              B        |L8.966|
                  |L8.328|
000148  e047              B        |L8.474|
                  |L8.330|
00014a  e0a3              B        |L8.660|
                  |L8.332|
00014c  e113              B        |L8.886|
                  |L8.334|
00014e  e058              B        |L8.514|
                  |L8.336|
000150  2040              MOVS     r0,#0x40              ;1194
000152  49aa              LDR      r1,|L8.1020|
000154  3140              ADDS     r1,r1,#0x40           ;1194
000156  6008              STR      r0,[r1,#0]            ;1194
000158  f7fffffe          BL       UsbRead
00015c  e001              B        |L8.354|
                  |L8.350|
00015e  f7fffffe          BL       UsbBulkInAck
                  |L8.354|
000162  2001              MOVS     r0,#1                 ;1199
000164  e75c              B        |L8.32|
                  |L8.358|
000166  48ac              LDR      r0,|L8.1048|
000168  6800              LDR      r0,[r0,#0]            ;1203  ; g_u32Length
00016a  2800              CMP      r0,#0                 ;1203
00016c  d106              BNE      |L8.380|
00016e  48a6              LDR      r0,|L8.1032|
000170  6880              LDR      r0,[r0,#8]            ;1205  ; g_sCBW
000172  49a9              LDR      r1,|L8.1048|
000174  6008              STR      r0,[r1,#0]            ;1205  ; g_u32Length
000176  48a9              LDR      r0,|L8.1052|
000178  49a9              LDR      r1,|L8.1056|
00017a  6008              STR      r0,[r1,#0]            ;1206  ; g_u32Address
                  |L8.380|
00017c  f7fffffe          BL       RdCurCapCommand
000180  2001              MOVS     r0,#1                 ;1210
000182  499d              LDR      r1,|L8.1016|
000184  7008              STRB     r0,[r1,#0]            ;1210
000186  48a4              LDR      r0,|L8.1048|
000188  6800              LDR      r0,[r0,#0]            ;1211  ; g_u32Length
00018a  2800              CMP      r0,#0                 ;1211
00018c  d021              BEQ      |L8.466|
00018e  48a2              LDR      r0,|L8.1048|
000190  6800              LDR      r0,[r0,#0]            ;1213  ; g_u32Length
000192  2840              CMP      r0,#0x40              ;1213
000194  d903              BLS      |L8.414|
000196  2040              MOVS     r0,#0x40              ;1214
000198  49a2              LDR      r1,|L8.1060|
00019a  7008              STRB     r0,[r1,#0]            ;1214
00019c  e003              B        |L8.422|
                  |L8.414|
00019e  489e              LDR      r0,|L8.1048|
0001a0  6800              LDR      r0,[r0,#0]            ;1216  ; g_u32Length
0001a2  49a0              LDR      r1,|L8.1060|
0001a4  7008              STRB     r0,[r1,#0]            ;1216
                  |L8.422|
0001a6  489f              LDR      r0,|L8.1060|
0001a8  7802              LDRB     r2,[r0,#0]            ;1218  ; g_u8Size
0001aa  489d              LDR      r0,|L8.1056|
0001ac  6801              LDR      r1,[r0,#0]            ;1218  ; g_u32Address
0001ae  4894              LDR      r0,|L8.1024|
0001b0  3040              ADDS     r0,r0,#0x40           ;1218
0001b2  f7fffffe          BL       my_memcpy
0001b6  489a              LDR      r0,|L8.1056|
0001b8  6800              LDR      r0,[r0,#0]            ;1220  ; g_u32Address
0001ba  499a              LDR      r1,|L8.1060|
0001bc  7809              LDRB     r1,[r1,#0]            ;1220  ; g_u8Size
0001be  1840              ADDS     r0,r0,r1              ;1220
0001c0  4997              LDR      r1,|L8.1056|
0001c2  6008              STR      r0,[r1,#0]            ;1220  ; g_u32Address
0001c4  2040              MOVS     r0,#0x40              ;1221
0001c6  498d              LDR      r1,|L8.1020|
0001c8  3140              ADDS     r1,r1,#0x40           ;1221
0001ca  6008              STR      r0,[r1,#0]            ;1221
0001cc  f7fffffe          BL       UsbRead
0001d0  e001              B        |L8.470|
                  |L8.466|
0001d2  f7fffffe          BL       UsbBulkInAck
                  |L8.470|
0001d6  2001              MOVS     r0,#1                 ;1226
0001d8  e722              B        |L8.32|
                  |L8.474|
0001da  488b              LDR      r0,|L8.1032|
0001dc  6880              LDR      r0,[r0,#8]            ;1230  ; g_sCBW
0001de  498e              LDR      r1,|L8.1048|
0001e0  6008              STR      r0,[r1,#0]            ;1230  ; g_u32Length
0001e2  488e              LDR      r0,|L8.1052|
0001e4  498e              LDR      r1,|L8.1056|
0001e6  6008              STR      r0,[r1,#0]            ;1231  ; g_u32Address
0001e8  488b              LDR      r0,|L8.1048|
0001ea  6800              LDR      r0,[r0,#0]            ;1233  ; g_u32Length
0001ec  2800              CMP      r0,#0                 ;1233
0001ee  d006              BEQ      |L8.510|
0001f0  2040              MOVS     r0,#0x40              ;1235
0001f2  4982              LDR      r1,|L8.1020|
0001f4  3140              ADDS     r1,r1,#0x40           ;1235
0001f6  6148              STR      r0,[r1,#0x14]         ;1235
0001f8  2002              MOVS     r0,#2                 ;1236
0001fa  497f              LDR      r1,|L8.1016|
0001fc  7008              STRB     r0,[r1,#0]            ;1236
                  |L8.510|
0001fe  2001              MOVS     r0,#1                 ;1238
000200  e70e              B        |L8.32|
                  |L8.514|
000202  4885              LDR      r0,|L8.1048|
000204  6800              LDR      r0,[r0,#0]            ;1242  ; g_u32Length
000206  2800              CMP      r0,#0                 ;1242
000208  d106              BNE      |L8.536|
00020a  487f              LDR      r0,|L8.1032|
00020c  6880              LDR      r0,[r0,#8]            ;1244  ; g_sCBW
00020e  4982              LDR      r1,|L8.1048|
000210  6008              STR      r0,[r1,#0]            ;1244  ; g_u32Length
000212  4882              LDR      r0,|L8.1052|
000214  4982              LDR      r1,|L8.1056|
000216  6008              STR      r0,[r1,#0]            ;1245  ; g_u32Address
                  |L8.536|
000218  f7fffffe          BL       ModeSenseCommand
00021c  2001              MOVS     r0,#1                 ;1249
00021e  4976              LDR      r1,|L8.1016|
000220  7008              STRB     r0,[r1,#0]            ;1249
000222  487d              LDR      r0,|L8.1048|
000224  6800              LDR      r0,[r0,#0]            ;1250  ; g_u32Length
000226  2800              CMP      r0,#0                 ;1250
000228  d021              BEQ      |L8.622|
00022a  487b              LDR      r0,|L8.1048|
00022c  6800              LDR      r0,[r0,#0]            ;1252  ; g_u32Length
00022e  2840              CMP      r0,#0x40              ;1252
000230  d903              BLS      |L8.570|
000232  2040              MOVS     r0,#0x40              ;1253
000234  497b              LDR      r1,|L8.1060|
000236  7008              STRB     r0,[r1,#0]            ;1253
000238  e003              B        |L8.578|
                  |L8.570|
00023a  4877              LDR      r0,|L8.1048|
00023c  6800              LDR      r0,[r0,#0]            ;1255  ; g_u32Length
00023e  4979              LDR      r1,|L8.1060|
000240  7008              STRB     r0,[r1,#0]            ;1255
                  |L8.578|
000242  4878              LDR      r0,|L8.1060|
000244  7802              LDRB     r2,[r0,#0]            ;1256  ; g_u8Size
000246  4876              LDR      r0,|L8.1056|
000248  6801              LDR      r1,[r0,#0]            ;1256  ; g_u32Address
00024a  486d              LDR      r0,|L8.1024|
00024c  3040              ADDS     r0,r0,#0x40           ;1256
00024e  f7fffffe          BL       my_memcpy
000252  4873              LDR      r0,|L8.1056|
000254  6800              LDR      r0,[r0,#0]            ;1258  ; g_u32Address
000256  4973              LDR      r1,|L8.1060|
000258  7809              LDRB     r1,[r1,#0]            ;1258  ; g_u8Size
00025a  1840              ADDS     r0,r0,r1              ;1258
00025c  4970              LDR      r1,|L8.1056|
00025e  6008              STR      r0,[r1,#0]            ;1258  ; g_u32Address
000260  2040              MOVS     r0,#0x40              ;1260
000262  4966              LDR      r1,|L8.1020|
000264  3140              ADDS     r1,r1,#0x40           ;1260
000266  6008              STR      r0,[r1,#0]            ;1260
000268  f7fffffe          BL       UsbRead
00026c  e001              B        |L8.626|
                  |L8.622|
00026e  f7fffffe          BL       UsbBulkInAck
                  |L8.626|
000272  2001              MOVS     r0,#1                 ;1265
000274  e6d4              B        |L8.32|
                  |L8.630|
000276  2224              MOVS     r2,#0x24              ;1269
000278  496b              LDR      r1,|L8.1064|
00027a  4861              LDR      r0,|L8.1024|
00027c  3040              ADDS     r0,r0,#0x40           ;1269
00027e  f7fffffe          BL       my_memcpy
000282  2001              MOVS     r0,#1                 ;1271
000284  495c              LDR      r1,|L8.1016|
000286  7008              STRB     r0,[r1,#0]            ;1271
000288  2024              MOVS     r0,#0x24              ;1273
00028a  495c              LDR      r1,|L8.1020|
00028c  3140              ADDS     r1,r1,#0x40           ;1273
00028e  6048              STR      r0,[r1,#4]            ;1273
000290  2001              MOVS     r0,#1                 ;1274
000292  e6c5              B        |L8.32|
                  |L8.660|
000294  4860              LDR      r0,|L8.1048|
000296  6800              LDR      r0,[r0,#0]            ;1279  ; g_u32Length
000298  2800              CMP      r0,#0                 ;1279
00029a  d12d              BNE      |L8.760|
00029c  485a              LDR      r0,|L8.1032|
00029e  3011              ADDS     r0,r0,#0x11           ;1284
0002a0  f7fffffe          BL       get_be32
0002a4  495e              LDR      r1,|L8.1056|
0002a6  6008              STR      r0,[r1,#0]            ;1284  ; g_u32Address
0002a8  4608              MOV      r0,r1                 ;1285
0002aa  6800              LDR      r0,[r0,#0]            ;1285  ; g_u32Address
0002ac  0240              LSLS     r0,r0,#9              ;1285
0002ae  495f              LDR      r1,|L8.1068|
0002b0  6008              STR      r0,[r1,#0]            ;1285  ; g_u32LbaAddress
0002b2  4855              LDR      r0,|L8.1032|
0002b4  6880              LDR      r0,[r0,#8]            ;1286  ; g_sCBW
0002b6  4958              LDR      r1,|L8.1048|
0002b8  6008              STR      r0,[r1,#0]            ;1286  ; g_u32Length
0002ba  4608              MOV      r0,r1                 ;1287
0002bc  6800              LDR      r0,[r0,#0]            ;1287  ; g_u32Length
0002be  495c              LDR      r1,|L8.1072|
0002c0  6008              STR      r0,[r1,#0]            ;1287  ; g_u32BytesInStorageBuf
0002c2  4851              LDR      r0,|L8.1032|
0002c4  7b40              LDRB     r0,[r0,#0xd]          ;1289  ; g_sCBW
0002c6  495b              LDR      r1,|L8.1076|
0002c8  7809              LDRB     r1,[r1,#0]            ;1289  ; F_DATA_FLASH_LUN
0002ca  4288              CMP      r0,r1                 ;1289
0002cc  d114              BNE      |L8.760|
0002ce  4852              LDR      r0,|L8.1048|
0002d0  6804              LDR      r4,[r0,#0]            ;1291  ; g_u32Length
0002d2  2001              MOVS     r0,#1                 ;1292
0002d4  0240              LSLS     r0,r0,#9              ;1292
0002d6  4284              CMP      r4,r0                 ;1292
0002d8  dd00              BLE      |L8.732|
0002da  4604              MOV      r4,r0                 ;1293
                  |L8.732|
0002dc  4950              LDR      r1,|L8.1056|
0002de  6809              LDR      r1,[r1,#0]            ;1295  ; g_u32Address
0002e0  0248              LSLS     r0,r1,#9              ;1295
0002e2  4a55              LDR      r2,|L8.1080|
0002e4  4621              MOV      r1,r4                 ;1295
0002e6  f7fffffe          BL       DataFlashRead
0002ea  4851              LDR      r0,|L8.1072|
0002ec  6004              STR      r4,[r0,#0]            ;1296  ; g_u32BytesInStorageBuf
0002ee  484f              LDR      r0,|L8.1068|
0002f0  6800              LDR      r0,[r0,#0]            ;1297  ; g_u32LbaAddress
0002f2  1900              ADDS     r0,r0,r4              ;1297
0002f4  494d              LDR      r1,|L8.1068|
0002f6  6008              STR      r0,[r1,#0]            ;1297  ; g_u32LbaAddress
                  |L8.760|
0002f8  484f              LDR      r0,|L8.1080|
0002fa  4949              LDR      r1,|L8.1056|
0002fc  6008              STR      r0,[r1,#0]            ;1300  ; g_u32Address
0002fe  2001              MOVS     r0,#1                 ;1303
000300  493d              LDR      r1,|L8.1016|
000302  7008              STRB     r0,[r1,#0]            ;1303
000304  484a              LDR      r0,|L8.1072|
000306  6800              LDR      r0,[r0,#0]            ;1305  ; g_u32BytesInStorageBuf
000308  2800              CMP      r0,#0                 ;1305
00030a  d030              BEQ      |L8.878|
00030c  4848              LDR      r0,|L8.1072|
00030e  6800              LDR      r0,[r0,#0]            ;1308  ; g_u32BytesInStorageBuf
000310  2840              CMP      r0,#0x40              ;1308
000312  d903              BLS      |L8.796|
000314  2040              MOVS     r0,#0x40              ;1309
000316  4943              LDR      r1,|L8.1060|
000318  7008              STRB     r0,[r1,#0]            ;1309
00031a  e003              B        |L8.804|
                  |L8.796|
00031c  4844              LDR      r0,|L8.1072|
00031e  6800              LDR      r0,[r0,#0]            ;1311  ; g_u32BytesInStorageBuf
000320  4940              LDR      r1,|L8.1060|
000322  7008              STRB     r0,[r1,#0]            ;1311
                  |L8.804|
000324  483f              LDR      r0,|L8.1060|
000326  7802              LDRB     r2,[r0,#0]            ;1314  ; g_u8Size
000328  483d              LDR      r0,|L8.1056|
00032a  6801              LDR      r1,[r0,#0]            ;1314  ; g_u32Address
00032c  4834              LDR      r0,|L8.1024|
00032e  3040              ADDS     r0,r0,#0x40           ;1314
000330  f7fffffe          BL       my_memcpy
000334  483a              LDR      r0,|L8.1056|
000336  6800              LDR      r0,[r0,#0]            ;1315  ; g_u32Address
000338  493a              LDR      r1,|L8.1060|
00033a  7809              LDRB     r1,[r1,#0]            ;1315  ; g_u8Size
00033c  1840              ADDS     r0,r0,r1              ;1315
00033e  4938              LDR      r1,|L8.1056|
000340  6008              STR      r0,[r1,#0]            ;1315  ; g_u32Address
000342  2080              MOVS     r0,#0x80              ;1319
000344  492d              LDR      r1,|L8.1020|
000346  3140              ADDS     r1,r1,#0x40           ;1319
000348  6008              STR      r0,[r1,#0]            ;1319
00034a  4836              LDR      r0,|L8.1060|
00034c  7800              LDRB     r0,[r0,#0]            ;1321  ; g_u8Size
00034e  6048              STR      r0,[r1,#4]            ;1321
000350  4831              LDR      r0,|L8.1048|
000352  6800              LDR      r0,[r0,#0]            ;1322  ; g_u32Length
000354  4933              LDR      r1,|L8.1060|
000356  7809              LDRB     r1,[r1,#0]            ;1322  ; g_u8Size
000358  1a40              SUBS     r0,r0,r1              ;1322
00035a  492f              LDR      r1,|L8.1048|
00035c  6008              STR      r0,[r1,#0]            ;1322  ; g_u32Length
00035e  4834              LDR      r0,|L8.1072|
000360  6800              LDR      r0,[r0,#0]            ;1323  ; g_u32BytesInStorageBuf
000362  4930              LDR      r1,|L8.1060|
000364  7809              LDRB     r1,[r1,#0]            ;1323  ; g_u8Size
000366  1a40              SUBS     r0,r0,r1              ;1323
000368  4931              LDR      r1,|L8.1072|
00036a  6008              STR      r0,[r1,#0]            ;1323  ; g_u32BytesInStorageBuf
00036c  e001              B        |L8.882|
                  |L8.878|
00036e  f7fffffe          BL       UsbBulkInAck
                  |L8.882|
000372  2001              MOVS     r0,#1                 ;1335
000374  e654              B        |L8.32|
                  |L8.886|
000376  4828              LDR      r0,|L8.1048|
000378  6800              LDR      r0,[r0,#0]            ;1339  ; g_u32Length
00037a  2800              CMP      r0,#0                 ;1339
00037c  d10d              BNE      |L8.922|
00037e  4822              LDR      r0,|L8.1032|
000380  6880              LDR      r0,[r0,#8]            ;1341  ; g_sCBW
000382  4925              LDR      r1,|L8.1048|
000384  6008              STR      r0,[r1,#0]            ;1341  ; g_u32Length
000386  482c              LDR      r0,|L8.1080|
000388  4925              LDR      r1,|L8.1056|
00038a  6008              STR      r0,[r1,#0]            ;1342  ; g_u32Address
00038c  481e              LDR      r0,|L8.1032|
00038e  3011              ADDS     r0,r0,#0x11           ;1343
000390  f7fffffe          BL       get_be32
000394  0240              LSLS     r0,r0,#9              ;1343
000396  4929              LDR      r1,|L8.1084|
000398  6008              STR      r0,[r1,#0]            ;1343  ; g_u32DataFlashStartAddr
                  |L8.922|
00039a  481f              LDR      r0,|L8.1048|
00039c  6800              LDR      r0,[r0,#0]            ;1346  ; g_u32Length
00039e  2800              CMP      r0,#0                 ;1346
0003a0  d006              BEQ      |L8.944|
0003a2  2040              MOVS     r0,#0x40              ;1348
0003a4  4915              LDR      r1,|L8.1020|
0003a6  3140              ADDS     r1,r1,#0x40           ;1348
0003a8  6148              STR      r0,[r1,#0x14]         ;1348
0003aa  2002              MOVS     r0,#2                 ;1349
0003ac  4912              LDR      r1,|L8.1016|
0003ae  7008              STRB     r0,[r1,#0]            ;1349
                  |L8.944|
0003b0  2001              MOVS     r0,#1                 ;1352
0003b2  e635              B        |L8.32|
                  |L8.948|
0003b4  4822              LDR      r0,|L8.1088|
0003b6  2800              CMP      r0,#0                 ;1358
0003b8  d004              BEQ      |L8.964|
0003ba  4913              LDR      r1,|L8.1032|
0003bc  7c08              LDRB     r0,[r1,#0x10]         ;1359  ; g_sCBW
0003be  f7fffffe          BL       ProcessVenderCmd
0003c2  e62d              B        |L8.32|
                  |L8.964|
0003c4  bf00              NOP                            ;1361
                  |L8.966|
0003c6  2005              MOVS     r0,#5                 ;1364
0003c8  4911              LDR      r1,|L8.1040|
0003ca  7008              STRB     r0,[r1,#0]            ;1364
0003cc  2020              MOVS     r0,#0x20              ;1365
0003ce  7048              STRB     r0,[r1,#1]            ;1365
0003d0  2000              MOVS     r0,#0                 ;1366
0003d2  7088              STRB     r0,[r1,#2]            ;1366
0003d4  480c              LDR      r0,|L8.1032|
0003d6  6880              LDR      r0,[r0,#8]            ;1369  ; g_sCBW
0003d8  2800              CMP      r0,#0                 ;1369
0003da  d033              BEQ      |L8.1092|
0003dc  480a              LDR      r0,|L8.1032|
0003de  7b00              LDRB     r0,[r0,#0xc]          ;1372  ; g_sCBW
0003e0  2180              MOVS     r1,#0x80              ;1372
0003e2  4208              TST      r0,r1                 ;1372
0003e4  d033              BEQ      |L8.1102|
0003e6  2001              MOVS     r0,#1                 ;1375
0003e8  4903              LDR      r1,|L8.1016|
0003ea  7008              STRB     r0,[r1,#0]            ;1375
0003ec  2000              MOVS     r0,#0                 ;1376
0003ee  4903              LDR      r1,|L8.1020|
0003f0  3140              ADDS     r1,r1,#0x40           ;1376
0003f2  6048              STR      r0,[r1,#4]            ;1376
0003f4  e02b              B        |L8.1102|
0003f6  0000              DCW      0x0000
                  |L8.1016|
                          DCD      g_u8BulkState
                  |L8.1020|
                          DCD      0x40060000
                  |L8.1024|
                          DCD      0x40060140
                  |L8.1028|
                          DCD      0x43425355
                  |L8.1032|
                          DCD      g_sCBW
                  |L8.1036|
                          DCD      g_sCSW
                  |L8.1040|
                          DCD      g_au8SenseKey
                  |L8.1044|
                          DCD      preventflag
                  |L8.1048|
                          DCD      g_u32Length
                  |L8.1052|
                          DCD      MassBlock
                  |L8.1056|
                          DCD      g_u32Address
                  |L8.1060|
                          DCD      g_u8Size
                  |L8.1064|
                          DCD      InquiryID
                  |L8.1068|
                          DCD      g_u32LbaAddress
                  |L8.1072|
                          DCD      g_u32BytesInStorageBuf
                  |L8.1076|
                          DCD      F_DATA_FLASH_LUN
                  |L8.1080|
                          DCD      Storage_Block
                  |L8.1084|
                          DCD      g_u32DataFlashStartAddr
                  |L8.1088|
                          DCD      ProcessVenderCmd
                  |L8.1092|
000444  2001              MOVS     r0,#1                 ;1381
000446  4910              LDR      r1,|L8.1160|
000448  7008              STRB     r0,[r1,#0]            ;1381
00044a  f7fffffe          BL       UsbBulkInAck
                  |L8.1102|
00044e  2001              MOVS     r0,#1                 ;1384
000450  e5e6              B        |L8.32|
                  |L8.1106|
000452  480d              LDR      r0,|L8.1160|
000454  7800              LDRB     r0,[r0,#0]            ;1388  ; g_u8BulkState
000456  2802              CMP      r0,#2                 ;1388
000458  d114              BNE      |L8.1156|
00045a  480c              LDR      r0,|L8.1164|
00045c  7bc0              LDRB     r0,[r0,#0xf]          ;1390  ; g_sCBW
00045e  282a              CMP      r0,#0x2a              ;1390
000460  d004              BEQ      |L8.1132|
000462  2855              CMP      r0,#0x55              ;1390
000464  d003              BEQ      |L8.1134|
000466  2861              CMP      r0,#0x61              ;1390
000468  d10c              BNE      |L8.1156|
00046a  e004              B        |L8.1142|
                  |L8.1132|
00046c  bf00              NOP                            ;1393
                  |L8.1134|
00046e  f7fffffe          BL       UsbWrite
000472  2001              MOVS     r0,#1                 ;1396
000474  e5d4              B        |L8.32|
                  |L8.1142|
000476  4806              LDR      r0,|L8.1168|
000478  2800              CMP      r0,#0                 ;1402
00047a  d001              BEQ      |L8.1152|
00047c  f7fffffe          BL       ComWrite
                  |L8.1152|
000480  2001              MOVS     r0,#1                 ;1404
000482  e5cd              B        |L8.32|
                  |L8.1156|
000484  2001              MOVS     r0,#1                 ;1408
000486  e5cb              B        |L8.32|
;;;1410   
                          ENDP

                  |L8.1160|
                          DCD      g_u8BulkState
                  |L8.1164|
                          DCD      g_sCBW
                  |L8.1168|
                          DCD      ComWrite

                          AREA ||i.UsbBus||, CODE, READONLY, ALIGN=2

                  UsbBus PROC
;;;464    //======================================================
;;;465    void UsbBus(void)
000000  b500              PUSH     {lr}
;;;466    {
;;;467    	uint8_t u8ATTR = *((__IO uint32_t *)(&USBD->ATTR)) & 0xFF;
000002  481a              LDR      r0,|L9.108|
000004  6900              LDR      r0,[r0,#0x10]
000006  b2c2              UXTB     r2,r0
;;;468    	
;;;469        /* Clear event flag */
;;;470    	_DRVUSB_SET_EVENT_FLAG(INTSTS_BUS);
000008  2001              MOVS     r0,#1
00000a  4918              LDR      r1,|L9.108|
00000c  6048              STR      r0,[r1,#4]
;;;471    	
;;;472    	/* Just return if USB detached. */
;;;473    	if (g_u8UsbState == USB_STATE_DETACHED)
00000e  4818              LDR      r0,|L9.112|
000010  7800              LDRB     r0,[r0,#0]  ; g_u8UsbState
000012  2800              CMP      r0,#0
000014  d100              BNE      |L9.24|
                  |L9.22|
;;;474    		return;
;;;475    
;;;476        /* Process USB bus command if USB is attached. */
;;;477    	if (u8ATTR & ATTR_USBRST)
;;;478    	{	
;;;479    	    /* Enable USB and enable PHY */
;;;480            _DRVUSB_ENABLE_USB();		
;;;481    		
;;;482    		/* Enter default state */
;;;483    		g_u8UsbState = USB_STATE_DEFAULT;
;;;484    		
;;;485    		/* Configure the end-points */
;;;486    		UsbCfg();
;;;487    	}
;;;488    	else if (u8ATTR & ATTR_SUSPEND)
;;;489    	{	
;;;490    	    /* Enable USB but disable PHY */
;;;491            _DRVUSB_DISABLE_PHY();
;;;492    		
;;;493    		/* Update the USB state */
;;;494    		g_u8UsbState |= USB_STATE_FLAG_SUSPENDED;
;;;495    	}
;;;496    	else if (u8ATTR & ATTR_RESUME)
;;;497    	{
;;;498    	    /* Enable USB and enable PHY */
;;;499    		_DRVUSB_ENABLE_USB();
;;;500    		
;;;501    		/* Clear the suspend state */
;;;502    		g_u8UsbState &= ~USB_STATE_FLAG_SUSPENDED;
;;;503    	}
;;;504    }
000016  bd00              POP      {pc}
                  |L9.24|
000018  07d0              LSLS     r0,r2,#31             ;477
00001a  0fc0              LSRS     r0,r0,#31             ;477
00001c  d009              BEQ      |L9.50|
00001e  207d              MOVS     r0,#0x7d              ;480
000020  0100              LSLS     r0,r0,#4              ;480
000022  4912              LDR      r1,|L9.108|
000024  6108              STR      r0,[r1,#0x10]         ;480
000026  2011              MOVS     r0,#0x11              ;483
000028  4911              LDR      r1,|L9.112|
00002a  7008              STRB     r0,[r1,#0]            ;483
00002c  f7fffffe          BL       UsbCfg
000030  e01a              B        |L9.104|
                  |L9.50|
000032  2002              MOVS     r0,#2                 ;488
000034  4202              TST      r2,r0                 ;488
000036  d00a              BEQ      |L9.78|
000038  201f              MOVS     r0,#0x1f              ;491
00003a  0180              LSLS     r0,r0,#6              ;491
00003c  490b              LDR      r1,|L9.108|
00003e  6108              STR      r0,[r1,#0x10]         ;491
000040  480b              LDR      r0,|L9.112|
000042  7800              LDRB     r0,[r0,#0]            ;494  ; g_u8UsbState
000044  2180              MOVS     r1,#0x80              ;494
000046  4308              ORRS     r0,r0,r1              ;494
000048  4909              LDR      r1,|L9.112|
00004a  7008              STRB     r0,[r1,#0]            ;494
00004c  e00c              B        |L9.104|
                  |L9.78|
00004e  2004              MOVS     r0,#4                 ;496
000050  4202              TST      r2,r0                 ;496
000052  d009              BEQ      |L9.104|
000054  207d              MOVS     r0,#0x7d              ;499
000056  0100              LSLS     r0,r0,#4              ;499
000058  4904              LDR      r1,|L9.108|
00005a  6108              STR      r0,[r1,#0x10]         ;499
00005c  4804              LDR      r0,|L9.112|
00005e  7800              LDRB     r0,[r0,#0]            ;502  ; g_u8UsbState
000060  2180              MOVS     r1,#0x80              ;502
000062  4388              BICS     r0,r0,r1              ;502
000064  4902              LDR      r1,|L9.112|
000066  7008              STRB     r0,[r1,#0]            ;502
                  |L9.104|
000068  bf00              NOP      
00006a  e7d4              B        |L9.22|
;;;505    
                          ENDP

                  |L9.108|
                          DCD      0x40060000
                  |L9.112|
                          DCD      g_u8UsbState

                          AREA ||i.UsbCfg||, CODE, READONLY, ALIGN=2

                  UsbCfg PROC
;;;374    //======================================================
;;;375    void UsbCfg(void)
000000  4823              LDR      r0,|L10.144|
;;;376    {
;;;377        /* Init the USB device address to 0x0 */
;;;378    	_DRVUSB_SET_FADDR(0x00);
000002  6880              LDR      r0,[r0,#8]
000004  09c0              LSRS     r0,r0,#7
000006  01c0              LSLS     r0,r0,#7
000008  4921              LDR      r1,|L10.144|
00000a  6088              STR      r0,[r1,#8]
;;;379    
;;;380        /* Init control end point */
;;;381    	USBD->BUFSEG.BUFSEG = 0x1F;						 		/* Buffer for setup packet */
00000c  4608              MOV      r0,r1
00000e  6980              LDR      r0,[r0,#0x18]
000010  21ff              MOVS     r1,#0xff
000012  31f9              ADDS     r1,r1,#0xf9
000014  4388              BICS     r0,r0,r1
000016  30f8              ADDS     r0,r0,#0xf8
000018  491d              LDR      r1,|L10.144|
00001a  6188              STR      r0,[r1,#0x18]
;;;382        _DRVUSB_SET_CFG_EP0(EPT_CFGP);					  		/* Clear EP0 CTRL IN Ready Flag */
00001c  2001              MOVS     r0,#1
00001e  62c8              STR      r0,[r1,#0x2c]
;;;383        _DRVUSB_SET_CFG(0, CFG0_SETTING);				   		/* EP0 ==> control IN end point, address 0 */
000020  2009              MOVS     r0,#9
000022  0180              LSLS     r0,r0,#6
000024  6288              STR      r0,[r1,#0x28]
;;;384        _DRVUSB_SET_EP_BUF(0, USB_SRAM_BASE + BUF0_SETTING);	/* Buffer for EP0 */
000026  2000              MOVS     r0,#0
000028  6208              STR      r0,[r1,#0x20]
;;;385        _DRVUSB_SET_CFG_EP1(EPT_CFGP);						   	/* Clear EP1 CTRL OUT Ready Flag */
00002a  2001              MOVS     r0,#1
00002c  63c8              STR      r0,[r1,#0x3c]
;;;386        _DRVUSB_SET_CFG(1, CFG1_SETTING);					  	/* EP1 ==> control OUT end point, address 0 */
00002e  2011              MOVS     r0,#0x11
000030  0140              LSLS     r0,r0,#5
000032  6388              STR      r0,[r1,#0x38]
;;;387        _DRVUSB_SET_EP_BUF(1, USB_SRAM_BASE + BUF1_SETTING);  	/* Buffer for EP1 */
000034  2000              MOVS     r0,#0
000036  6308              STR      r0,[r1,#0x30]
;;;388        
;;;389        /* Init Bulk IN end point */
;;;390    	_DRVUSB_SET_CFG_EP2(EPT_CFGP);				 			/* Clear EP2 BULK IN Ready Flag */
000038  2001              MOVS     r0,#1
00003a  4915              LDR      r1,|L10.144|
00003c  3140              ADDS     r1,r1,#0x40
00003e  60c8              STR      r0,[r1,#0xc]
;;;391    	_DRVUSB_SET_CFG(2, CFG2_SETTING);			  			/* EP2 ==> Bulk IN end point, address 2 */
000040  2042              MOVS     r0,#0x42
000042  6088              STR      r0,[r1,#8]
;;;392    	_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK1); 		/* Buffer for EP2 (Bulk IN) */	
000044  2080              MOVS     r0,#0x80
000046  6008              STR      r0,[r1,#0]
;;;393    	
;;;394    	/* Init Bulk OUT end point */
;;;395    	_DRVUSB_SET_CFG_EP3(EPT_CFGP);			  				/* Clear EP3 BULK OUT Ready Flag */
000048  2001              MOVS     r0,#1
00004a  61c8              STR      r0,[r1,#0x1c]
;;;396    	_DRVUSB_SET_CFG(3, CFG3_SETTING);		  				/* EP3 ==> Bulk OUT end point, address 3 */
00004c  2023              MOVS     r0,#0x23
00004e  6188              STR      r0,[r1,#0x18]
;;;397    	_DRVUSB_SET_EP_BUF(3, USB_SRAM_BASE + BUF_BULK0);		/* Buffer for EP3 (Bulk OUT) */
000050  2040              MOVS     r0,#0x40
000052  6108              STR      r0,[r1,#0x10]
;;;398    	
;;;399    	g_u8Address = 0;    /* Device address */
000054  2000              MOVS     r0,#0
000056  490f              LDR      r1,|L10.148|
000058  7008              STRB     r0,[r1,#0]
;;;400    	g_u8Config = 0;
00005a  490f              LDR      r1,|L10.152|
00005c  7008              STRB     r0,[r1,#0]
;;;401    	g_u8Flag = 0;       /* Flag to record the USB request */
00005e  490f              LDR      r1,|L10.156|
000060  7008              STRB     r0,[r1,#0]
;;;402    	
;;;403    	g_u8BulkState = BULK_CBW;
000062  490f              LDR      r1,|L10.160|
000064  7008              STRB     r0,[r1,#0]
;;;404    	g_au8SenseKey[0] = 0;
000066  490f              LDR      r1,|L10.164|
000068  7008              STRB     r0,[r1,#0]
;;;405    	g_au8SenseKey[1] = 0;
00006a  7048              STRB     r0,[r1,#1]
;;;406    	g_au8SenseKey[2] = 0;
00006c  7088              STRB     r0,[r1,#2]
;;;407    	g_bCBWInvalid = FALSE;
00006e  490e              LDR      r1,|L10.168|
000070  6008              STR      r0,[r1,#0]  ; g_bCBWInvalid
;;;408    
;;;409    	g_u32Address = 0;
000072  490e              LDR      r1,|L10.172|
000074  6008              STR      r0,[r1,#0]  ; g_u32Address
;;;410    	g_u32Length = 0;
000076  490e              LDR      r1,|L10.176|
000078  6008              STR      r0,[r1,#0]  ; g_u32Length
;;;411    	g_u8Size = 0;
00007a  490e              LDR      r1,|L10.180|
00007c  7008              STRB     r0,[r1,#0]
;;;412    
;;;413    	g_sCSW.dCSWSignature = CSW_SIGNATURE;
00007e  480e              LDR      r0,|L10.184|
000080  490e              LDR      r1,|L10.188|
000082  6008              STR      r0,[r1,#0]  ; g_sCSW
;;;414    
;;;415    	udcOnLine = 0;
000084  2000              MOVS     r0,#0
000086  490e              LDR      r1,|L10.192|
000088  6008              STR      r0,[r1,#0]  ; udcOnLine
;;;416    	g_u32OutToggle = 0;	// for Error Detection
00008a  490e              LDR      r1,|L10.196|
00008c  6008              STR      r0,[r1,#0]  ; g_u32OutToggle
;;;417    }
00008e  4770              BX       lr
;;;418    
                          ENDP

                  |L10.144|
                          DCD      0x40060000
                  |L10.148|
                          DCD      g_u8Address
                  |L10.152|
                          DCD      g_u8Config
                  |L10.156|
                          DCD      g_u8Flag
                  |L10.160|
                          DCD      g_u8BulkState
                  |L10.164|
                          DCD      g_au8SenseKey
                  |L10.168|
                          DCD      g_bCBWInvalid
                  |L10.172|
                          DCD      g_u32Address
                  |L10.176|
                          DCD      g_u32Length
                  |L10.180|
                          DCD      g_u8Size
                  |L10.184|
                          DCD      0x53425355
                  |L10.188|
                          DCD      g_sCSW
                  |L10.192|
                          DCD      udcOnLine
                  |L10.196|
                          DCD      g_u32OutToggle

                          AREA ||i.UsbClassReq||, CODE, READONLY, ALIGN=2

                  UsbClassReq PROC
;;;694    //======================================================
;;;695    int32_t UsbClassReq(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;696    {
;;;697        uint8_t tmp[8];
;;;698    
;;;699        my_memcpy(tmp, g_au8UsbSetup, 8);
000002  2208              MOVS     r2,#8
000004  4930              LDR      r1,|L11.200|
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       my_memcpy
;;;700        
;;;701    	if ((tmp[2] != 0) || (tmp[3] != 0) || (tmp[4] != 0) || (tmp[5] != 0))
00000c  4668              MOV      r0,sp
00000e  7880              LDRB     r0,[r0,#2]
000010  2800              CMP      r0,#0
000012  d10b              BNE      |L11.44|
000014  4668              MOV      r0,sp
000016  78c0              LDRB     r0,[r0,#3]
000018  2800              CMP      r0,#0
00001a  d107              BNE      |L11.44|
00001c  4668              MOV      r0,sp
00001e  7900              LDRB     r0,[r0,#4]
000020  2800              CMP      r0,#0
000022  d103              BNE      |L11.44|
000024  4668              MOV      r0,sp
000026  7940              LDRB     r0,[r0,#5]
000028  2800              CMP      r0,#0
00002a  d001              BEQ      |L11.48|
                  |L11.44|
;;;702        	return FALSE;
00002c  2000              MOVS     r0,#0
                  |L11.46|
;;;703    
;;;704    	switch(tmp[1])
;;;705        {
;;;706    		// Bulk-Only Mass Storage Reset
;;;707    		case BULK_ONLY_MASS_STORAGE_RESET:
;;;708    		{
;;;709    			if ((tmp[6] != 0) || (tmp[7] != 0))
;;;710                	return FALSE;
;;;711    			g_bCBWInvalid = FALSE;
;;;712    
;;;713    			_DRVUSB_SET_CFG(0, DATA1 (CFG0_SETTING));
;;;714    			_DRVUSB_TRIG_EP(0, 0);
;;;715    			_DRVUSB_SET_CFG(2, DATA0 (CFG2_SETTING));
;;;716    			
;;;717    			g_u8BulkState = BULK_CBW;
;;;718    			_DRVUSB_TRIG_EP(3, 31);
;;;719    			return TRUE;
;;;720    		}
;;;721    		// Get Max LUN
;;;722    		case GET_MAX_LUN:
;;;723    		{
;;;724                if ((tmp[6] != 1) || (tmp[7] != 0))
;;;725    				return FALSE;
;;;726    			g_au8UsbCtrl[0] = MassLUN - 1;
;;;727                if (MassLUN != 1)
;;;728                    while(1);
;;;729                
;;;730    			_DRVUSB_SET_CFG(0, DATA1(CFG0_SETTING));
;;;731    			_DRVUSB_SET_CFG(3, DATA0(CFG3_SETTING));
;;;732    			_DRVUSB_TRIG_EP(0, 1);
;;;733    			
;;;734    			g_u8Flag = FLAG_OUT_ACK;
;;;735    			return TRUE;
;;;736    		}
;;;737    	}
;;;738    	return FALSE;
;;;739    }
00002e  bd0c              POP      {r2,r3,pc}
                  |L11.48|
000030  4668              MOV      r0,sp                 ;704
000032  7840              LDRB     r0,[r0,#1]            ;704
000034  28fe              CMP      r0,#0xfe              ;704
000036  d021              BEQ      |L11.124|
000038  28ff              CMP      r0,#0xff              ;704
00003a  d143              BNE      |L11.196|
00003c  4668              MOV      r0,sp                 ;709
00003e  7980              LDRB     r0,[r0,#6]            ;709
000040  2800              CMP      r0,#0                 ;709
000042  d103              BNE      |L11.76|
000044  4668              MOV      r0,sp                 ;709
000046  79c0              LDRB     r0,[r0,#7]            ;709
000048  2800              CMP      r0,#0                 ;709
00004a  d001              BEQ      |L11.80|
                  |L11.76|
00004c  2000              MOVS     r0,#0                 ;710
00004e  e7ee              B        |L11.46|
                  |L11.80|
000050  2000              MOVS     r0,#0                 ;711
000052  491e              LDR      r1,|L11.204|
000054  6008              STR      r0,[r1,#0]            ;711  ; g_bCBWInvalid
000056  200b              MOVS     r0,#0xb               ;713
000058  0180              LSLS     r0,r0,#6              ;713
00005a  491d              LDR      r1,|L11.208|
00005c  6288              STR      r0,[r1,#0x28]         ;713
00005e  2000              MOVS     r0,#0                 ;714
000060  6248              STR      r0,[r1,#0x24]         ;714
000062  2042              MOVS     r0,#0x42              ;715
000064  491a              LDR      r1,|L11.208|
000066  3140              ADDS     r1,r1,#0x40           ;715
000068  6088              STR      r0,[r1,#8]            ;715
00006a  2000              MOVS     r0,#0                 ;717
00006c  4919              LDR      r1,|L11.212|
00006e  7008              STRB     r0,[r1,#0]            ;717
000070  201f              MOVS     r0,#0x1f              ;718
000072  4917              LDR      r1,|L11.208|
000074  3140              ADDS     r1,r1,#0x40           ;718
000076  6148              STR      r0,[r1,#0x14]         ;718
000078  2001              MOVS     r0,#1                 ;719
00007a  e7d8              B        |L11.46|
                  |L11.124|
00007c  4668              MOV      r0,sp                 ;724
00007e  7980              LDRB     r0,[r0,#6]            ;724
000080  2801              CMP      r0,#1                 ;724
000082  d103              BNE      |L11.140|
000084  4668              MOV      r0,sp                 ;724
000086  79c0              LDRB     r0,[r0,#7]            ;724
000088  2800              CMP      r0,#0                 ;724
00008a  d001              BEQ      |L11.144|
                  |L11.140|
00008c  2000              MOVS     r0,#0                 ;725
00008e  e7ce              B        |L11.46|
                  |L11.144|
000090  4811              LDR      r0,|L11.216|
000092  7800              LDRB     r0,[r0,#0]            ;726  ; MassLUN
000094  1e40              SUBS     r0,r0,#1              ;726
000096  490c              LDR      r1,|L11.200|
000098  39f8              SUBS     r1,r1,#0xf8           ;726
00009a  7008              STRB     r0,[r1,#0]            ;726
00009c  480e              LDR      r0,|L11.216|
00009e  7800              LDRB     r0,[r0,#0]            ;727  ; MassLUN
0000a0  2801              CMP      r0,#1                 ;727
0000a2  d001              BEQ      |L11.168|
0000a4  bf00              NOP                            ;728
                  |L11.166|
0000a6  e7fe              B        |L11.166|
                  |L11.168|
0000a8  200b              MOVS     r0,#0xb               ;730
0000aa  0180              LSLS     r0,r0,#6              ;730
0000ac  4908              LDR      r1,|L11.208|
0000ae  6288              STR      r0,[r1,#0x28]         ;730
0000b0  2023              MOVS     r0,#0x23              ;731
0000b2  4907              LDR      r1,|L11.208|
0000b4  3140              ADDS     r1,r1,#0x40           ;731
0000b6  6188              STR      r0,[r1,#0x18]         ;731
0000b8  2001              MOVS     r0,#1                 ;732
0000ba  4905              LDR      r1,|L11.208|
0000bc  6248              STR      r0,[r1,#0x24]         ;732
0000be  4907              LDR      r1,|L11.220|
0000c0  7008              STRB     r0,[r1,#0]            ;734
0000c2  e7b4              B        |L11.46|
                  |L11.196|
0000c4  2000              MOVS     r0,#0                 ;738
0000c6  e7b2              B        |L11.46|
;;;740    
                          ENDP

                  |L11.200|
                          DCD      0x400601f8
                  |L11.204|
                          DCD      g_bCBWInvalid
                  |L11.208|
                          DCD      0x40060000
                  |L11.212|
                          DCD      g_u8BulkState
                  |L11.216|
                          DCD      MassLUN
                  |L11.220|
                          DCD      g_u8Flag

                          AREA ||i.UsbFdt||, CODE, READONLY, ALIGN=2

                  UsbFdt PROC
;;;421    //======================================================
;;;422    void UsbFdt(void)
000000  b500              PUSH     {lr}
;;;423    {
;;;424    	uint8_t u8FLDET = USBD->FLDET.FLDET;
000002  4812              LDR      r0,|L12.76|
000004  6940              LDR      r0,[r0,#0x14]
000006  07c2              LSLS     r2,r0,#31
000008  0fd2              LSRS     r2,r2,#31
;;;425    
;;;426    	_DRVUSB_SET_EVENT_FLAG(INTSTS_FLDET);
00000a  2004              MOVS     r0,#4
00000c  490f              LDR      r1,|L12.76|
00000e  6048              STR      r0,[r1,#4]
;;;427    	
;;;428    	if (u8FLDET)
000010  2a00              CMP      r2,#0
000012  d00f              BEQ      |L12.52|
;;;429    	{
;;;430    	    /* USB Plug In */
;;;431    	
;;;432    		if(g_u8UsbState & USB_STATE_ATTACHED)
000014  480e              LDR      r0,|L12.80|
000016  7800              LDRB     r0,[r0,#0]  ; g_u8UsbState
000018  07c0              LSLS     r0,r0,#31
00001a  0fc0              LSRS     r0,r0,#31
00001c  d000              BEQ      |L12.32|
                  |L12.30|
;;;433    		{
;;;434    		    /* Do nothing if it is already attached */
;;;435    			return;
;;;436    		}
;;;437    		
;;;438    		/* Update USB state */
;;;439    		g_u8UsbState = USB_STATE_ATTACHED;
;;;440    		
;;;441    		/* Init the end points */
;;;442    		UsbCfg();
;;;443    		
;;;444    	    /* Enable USB and enable PHY */
;;;445            _DRVUSB_ENABLE_USB();
;;;446    	}
;;;447    	else
;;;448    	{
;;;449    	    /* USB Un-plug */
;;;450    	
;;;451    	    /* Update USB state */
;;;452    		g_u8UsbState = USB_STATE_DETACHED;
;;;453    		
;;;454    		udcOnLine = 0;
;;;455    		
;;;456    	    /* Disable USB, Disable remote weak up, and disable PHY */
;;;457            _DRVUSB_DISABLE_USB();
;;;458    	}
;;;459    }
00001e  bd00              POP      {pc}
                  |L12.32|
000020  2001              MOVS     r0,#1                 ;439
000022  490b              LDR      r1,|L12.80|
000024  7008              STRB     r0,[r1,#0]            ;439
000026  f7fffffe          BL       UsbCfg
00002a  207d              MOVS     r0,#0x7d              ;445
00002c  0100              LSLS     r0,r0,#4              ;445
00002e  4907              LDR      r1,|L12.76|
000030  6108              STR      r0,[r1,#0x10]         ;445
000032  e008              B        |L12.70|
                  |L12.52|
000034  2000              MOVS     r0,#0                 ;452
000036  4906              LDR      r1,|L12.80|
000038  7008              STRB     r0,[r1,#0]            ;452
00003a  4906              LDR      r1,|L12.84|
00003c  6008              STR      r0,[r1,#0]            ;454  ; udcOnLine
00003e  203b              MOVS     r0,#0x3b              ;457
000040  0140              LSLS     r0,r0,#5              ;457
000042  4902              LDR      r1,|L12.76|
000044  6108              STR      r0,[r1,#0x10]         ;457
                  |L12.70|
000046  bf00              NOP      
000048  e7e9              B        |L12.30|
;;;460    
                          ENDP

00004a  0000              DCW      0x0000
                  |L12.76|
                          DCD      0x40060000
                  |L12.80|
                          DCD      g_u8UsbState
                  |L12.84|
                          DCD      udcOnLine

                          AREA ||i.UsbInAck||, CODE, READONLY, ALIGN=2

                  UsbInAck PROC
;;;762    //======================================================
;;;763    void UsbInAck(void)
000000  4823              LDR      r0,|L13.144|
;;;764    {
;;;765    	switch (g_u8Flag)
000002  7800              LDRB     r0,[r0,#0]  ; g_u8Flag
000004  2804              CMP      r0,#4
000006  d026              BEQ      |L13.86|
000008  dc04              BGT      |L13.20|
00000a  2801              CMP      r0,#1
00000c  d007              BEQ      |L13.30|
00000e  2802              CMP      r0,#2
000010  d137              BNE      |L13.130|
000012  e008              B        |L13.38|
                  |L13.20|
000014  2808              CMP      r0,#8
000016  d01d              BEQ      |L13.84|
000018  2810              CMP      r0,#0x10
00001a  d132              BNE      |L13.130|
00001c  e02d              B        |L13.122|
                  |L13.30|
;;;766    	{
;;;767    		// Out ACK
;;;768    		case FLAG_OUT_ACK:
;;;769    			_DRVUSB_TRIG_EP(1, 0);
00001e  2000              MOVS     r0,#0
000020  491c              LDR      r1,|L13.148|
000022  6348              STR      r0,[r1,#0x34]
;;;770    			break;
000024  e02e              B        |L13.132|
                  |L13.38|
;;;771    		// Set Address
;;;772    		case FLAG_SET_ADDRESS:
;;;773    		{
;;;774    			if (g_u8Address == 0)
000026  481c              LDR      r0,|L13.152|
000028  7800              LDRB     r0,[r0,#0]  ; g_u8Address
00002a  2800              CMP      r0,#0
00002c  d103              BNE      |L13.54|
;;;775    				g_u8UsbState = USB_STATE_DEFAULT;
00002e  2011              MOVS     r0,#0x11
000030  491a              LDR      r1,|L13.156|
000032  7008              STRB     r0,[r1,#0]
000034  e002              B        |L13.60|
                  |L13.54|
;;;776    			else
;;;777    				g_u8UsbState = USB_STATE_ADDRESS;
000036  2031              MOVS     r0,#0x31
000038  4918              LDR      r1,|L13.156|
00003a  7008              STRB     r0,[r1,#0]
                  |L13.60|
;;;778    			
;;;779    			_DRVUSB_SET_FADDR(g_u8Address);
00003c  4815              LDR      r0,|L13.148|
00003e  6880              LDR      r0,[r0,#8]
000040  09c0              LSRS     r0,r0,#7
000042  01c0              LSLS     r0,r0,#7
000044  4914              LDR      r1,|L13.152|
000046  7809              LDRB     r1,[r1,#0]  ; g_u8Address
000048  0649              LSLS     r1,r1,#25
00004a  0e49              LSRS     r1,r1,#25
00004c  4308              ORRS     r0,r0,r1
00004e  4911              LDR      r1,|L13.148|
000050  6088              STR      r0,[r1,#8]
;;;780    			break;
000052  e017              B        |L13.132|
                  |L13.84|
;;;781    		}
;;;782    		// Set Interface
;;;783    		case FLAG_SET_INTERFACE:
;;;784    		// Set Configuration
;;;785    		case FLAG_SET_CONFIG:
000054  bf00              NOP      
                  |L13.86|
;;;786    		{
;;;787    			if (g_u8Config == 0)
000056  4812              LDR      r0,|L13.160|
000058  7800              LDRB     r0,[r0,#0]  ; g_u8Config
00005a  2800              CMP      r0,#0
00005c  d103              BNE      |L13.102|
;;;788    				g_u8UsbState = USB_STATE_ADDRESS;
00005e  2031              MOVS     r0,#0x31
000060  490e              LDR      r1,|L13.156|
000062  7008              STRB     r0,[r1,#0]
000064  e008              B        |L13.120|
                  |L13.102|
;;;789    			else
;;;790    			{
;;;791    				g_u8UsbState = USB_STATE_CONFIGURED;
000066  2071              MOVS     r0,#0x71
000068  490c              LDR      r1,|L13.156|
00006a  7008              STRB     r0,[r1,#0]
;;;792    				// ---------------------------------
;;;793    				_DRVUSB_SET_CFG(2, DATA0 (CFG2_SETTING));
00006c  2042              MOVS     r0,#0x42
00006e  4909              LDR      r1,|L13.148|
000070  3140              ADDS     r1,r1,#0x40
000072  6088              STR      r0,[r1,#8]
;;;794    				_DRVUSB_TRIG_EP(3, 31);
000074  201f              MOVS     r0,#0x1f
000076  6148              STR      r0,[r1,#0x14]
                  |L13.120|
;;;795    				// ---------------------------------
;;;796    			}
;;;797    			break;
000078  e004              B        |L13.132|
                  |L13.122|
;;;798    		}
;;;799    		// Get Max. LUN
;;;800    		case FLAG_GET_MAX_LUN:
;;;801    			_DRVUSB_TRIG_EP(1, 0);
00007a  2000              MOVS     r0,#0
00007c  4905              LDR      r1,|L13.148|
00007e  6348              STR      r0,[r1,#0x34]
                  |L13.128|
;;;802    			return;
;;;803    		default:
;;;804    			return;
;;;805    	}
;;;806    	g_u8Flag = 0;
;;;807    }
000080  4770              BX       lr
                  |L13.130|
000082  e7fd              B        |L13.128|
                  |L13.132|
000084  bf00              NOP                            ;770
000086  2000              MOVS     r0,#0                 ;806
000088  4901              LDR      r1,|L13.144|
00008a  7008              STRB     r0,[r1,#0]            ;806
00008c  bf00              NOP      
00008e  e7f7              B        |L13.128|
;;;808    
                          ENDP

                  |L13.144|
                          DCD      g_u8Flag
                  |L13.148|
                          DCD      0x40060000
                  |L13.152|
                          DCD      g_u8Address
                  |L13.156|
                          DCD      g_u8UsbState
                  |L13.160|
                          DCD      g_u8Config

                          AREA ||i.UsbIsr||, CODE, READONLY, ALIGN=2

                  UsbIsr PROC
;;;1478   //======================================================
;;;1479   void UsbIsr(void)
000000  b510              PUSH     {r4,lr}
;;;1480   {
;;;1481   	uint32_t u32INTSTS = _DRVUSB_GET_EVENT_FLAG();
000002  480a              LDR      r0,|L14.44|
000004  6844              LDR      r4,[r0,#4]
;;;1482   	if (u32INTSTS & INTSTS_FLDET)
000006  2004              MOVS     r0,#4
000008  4204              TST      r4,r0
00000a  d002              BEQ      |L14.18|
;;;1483   	{
;;;1484   	    /* Handle the USB attached/detached event */
;;;1485   		UsbFdt();
00000c  f7fffffe          BL       UsbFdt
000010  e00b              B        |L14.42|
                  |L14.18|
;;;1486   	}
;;;1487   	else if(u32INTSTS & INTSTS_BUS)
000012  07e0              LSLS     r0,r4,#31
000014  0fc0              LSRS     r0,r0,#31
000016  d002              BEQ      |L14.30|
;;;1488   	{
;;;1489   	    /* Handle the USB bus event: Reset, Suspend, and Resume */
;;;1490   		UsbBus();
000018  f7fffffe          BL       UsbBus
00001c  e005              B        |L14.42|
                  |L14.30|
;;;1491   	}
;;;1492   	else if(u32INTSTS & INTSTS_USB)
00001e  2002              MOVS     r0,#2
000020  4204              TST      r4,r0
000022  d002              BEQ      |L14.42|
;;;1493   	{
;;;1494   	    /* Handle the USB Protocol/Clase event */
;;;1495   		UsbUsb(u32INTSTS);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       UsbUsb
                  |L14.42|
;;;1496       }
;;;1497   }
00002a  bd10              POP      {r4,pc}
;;;1498   
                          ENDP

                  |L14.44|
                          DCD      0x40060000

                          AREA ||i.UsbOutAck||, CODE, READONLY, ALIGN=2

                  UsbOutAck PROC
;;;809    //======================================================
;;;810    void UsbOutAck(void)
000000  4808              LDR      r0,|L15.36|
;;;811    {
;;;812    	switch (g_u8Flag)
000002  7800              LDRB     r0,[r0,#0]  ; g_u8Flag
000004  2810              CMP      r0,#0x10
000006  d105              BNE      |L15.20|
;;;813    	{
;;;814    		// Get Max. LUN
;;;815    		case FLAG_GET_MAX_LUN:
;;;816    		{
;;;817    			// ---------------------------------
;;;818    			_DRVUSB_SET_CFG(2, DATA0 (CFG2_SETTING));
000008  2042              MOVS     r0,#0x42
00000a  4907              LDR      r1,|L15.40|
00000c  6088              STR      r0,[r1,#8]
;;;819    			_DRVUSB_TRIG_EP(3, 31);
00000e  201f              MOVS     r0,#0x1f
000010  6148              STR      r0,[r1,#0x14]
;;;820    			// ---------------------------------
;;;821    			break;
000012  e000              B        |L15.22|
                  |L15.20|
;;;822    		}
;;;823    		default:
;;;824    			return;
;;;825    	}
;;;826    	g_u8Flag = 0;
;;;827    }
000014  4770              BX       lr
                  |L15.22|
000016  bf00              NOP                            ;821
000018  2000              MOVS     r0,#0                 ;826
00001a  4902              LDR      r1,|L15.36|
00001c  7008              STRB     r0,[r1,#0]            ;826
00001e  bf00              NOP      
000020  e7f8              B        |L15.20|
;;;828    
                          ENDP

000022  0000              DCW      0x0000
                  |L15.36|
                          DCD      g_u8Flag
                  |L15.40|
                          DCD      0x40060040

                          AREA ||i.UsbRead||, CODE, READONLY, ALIGN=2

                  UsbRead PROC
;;;830    //======================================================
;;;831    void UsbRead(void)
000000  b510              PUSH     {r4,lr}
;;;832    {
;;;833        uint32_t u32Len;
;;;834        
;;;835    	/* DATA0/DATA1 Toggle */
;;;836    	if (*((__IO uint32_t *)(&USBD->EP[2].BUFSEG)) == BUF_BULK1)
000002  4848              LDR      r0,|L16.292|
000004  6c00              LDR      r0,[r0,#0x40]
000006  2880              CMP      r0,#0x80
000008  d104              BNE      |L16.20|
;;;837    		_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK0);
00000a  2040              MOVS     r0,#0x40
00000c  4945              LDR      r1,|L16.292|
00000e  3140              ADDS     r1,r1,#0x40
000010  6008              STR      r0,[r1,#0]
000012  e003              B        |L16.28|
                  |L16.20|
;;;838    	else
;;;839    		_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK1);
000014  2080              MOVS     r0,#0x80
000016  4943              LDR      r1,|L16.292|
000018  3140              ADDS     r1,r1,#0x40
00001a  6008              STR      r0,[r1,#0]
                  |L16.28|
;;;840    		
;;;841    	/* Trigger to send out the data packet */	
;;;842    	_DRVUSB_TRIG_EP(2, g_u8Size);
00001c  4842              LDR      r0,|L16.296|
00001e  7800              LDRB     r0,[r0,#0]  ; g_u8Size
000020  4940              LDR      r1,|L16.292|
000022  3140              ADDS     r1,r1,#0x40
000024  6048              STR      r0,[r1,#4]
;;;843    	
;;;844    	g_u32Length -= g_u8Size;
000026  4841              LDR      r0,|L16.300|
000028  6800              LDR      r0,[r0,#0]  ; g_u32Length
00002a  493f              LDR      r1,|L16.296|
00002c  7809              LDRB     r1,[r1,#0]  ; g_u8Size
00002e  1a40              SUBS     r0,r0,r1
000030  493e              LDR      r1,|L16.300|
000032  6008              STR      r0,[r1,#0]  ; g_u32Length
;;;845    	g_u32BytesInStorageBuf -= g_u8Size;
000034  483e              LDR      r0,|L16.304|
000036  6800              LDR      r0,[r0,#0]  ; g_u32BytesInStorageBuf
000038  493b              LDR      r1,|L16.296|
00003a  7809              LDRB     r1,[r1,#0]  ; g_u8Size
00003c  1a40              SUBS     r0,r0,r1
00003e  493c              LDR      r1,|L16.304|
000040  6008              STR      r0,[r1,#0]  ; g_u32BytesInStorageBuf
;;;846    
;;;847        if (g_u32Length)
000042  483a              LDR      r0,|L16.300|
000044  6800              LDR      r0,[r0,#0]  ; g_u32Length
000046  2800              CMP      r0,#0
000048  d06b              BEQ      |L16.290|
;;;848        {
;;;849            if (g_u32BytesInStorageBuf)
00004a  4608              MOV      r0,r1
00004c  6800              LDR      r0,[r0,#0]  ; g_u32BytesInStorageBuf
00004e  2800              CMP      r0,#0
000050  d028              BEQ      |L16.164|
;;;850            {
;;;851            	/* Prepare next data packet */
;;;852            	g_u8Size = MAX_PACKET_SIZE;
000052  2040              MOVS     r0,#0x40
000054  4934              LDR      r1,|L16.296|
000056  7008              STRB     r0,[r1,#0]
;;;853            	if (g_u8Size > g_u32Length)
000058  4608              MOV      r0,r1
00005a  7800              LDRB     r0,[r0,#0]  ; g_u8Size
00005c  4933              LDR      r1,|L16.300|
00005e  6809              LDR      r1,[r1,#0]  ; g_u32Length
000060  4288              CMP      r0,r1
000062  d903              BLS      |L16.108|
;;;854            	    g_u8Size = g_u32Length;
000064  4831              LDR      r0,|L16.300|
000066  6800              LDR      r0,[r0,#0]  ; g_u32Length
000068  492f              LDR      r1,|L16.296|
00006a  7008              STRB     r0,[r1,#0]
                  |L16.108|
;;;855    
;;;856            	if (*((__IO uint32_t *)(&USBD->EP[2].BUFSEG)) == BUF_BULK1)
00006c  482d              LDR      r0,|L16.292|
00006e  6c00              LDR      r0,[r0,#0x40]
000070  2880              CMP      r0,#0x80
000072  d107              BNE      |L16.132|
;;;857            	{
;;;858            		my_memcpy(g_au8UsbBulk0, (int8_t *)g_u32Address, g_u8Size);
000074  482c              LDR      r0,|L16.296|
000076  7802              LDRB     r2,[r0,#0]  ; g_u8Size
000078  482e              LDR      r0,|L16.308|
00007a  6801              LDR      r1,[r0,#0]  ; g_u32Address
00007c  482e              LDR      r0,|L16.312|
00007e  f7fffffe          BL       my_memcpy
000082  e007              B        |L16.148|
                  |L16.132|
;;;859            	}
;;;860            	else
;;;861            	{
;;;862            		my_memcpy(g_au8UsbBulk1, (int8_t *)g_u32Address, g_u8Size);
000084  4828              LDR      r0,|L16.296|
000086  7802              LDRB     r2,[r0,#0]  ; g_u8Size
000088  482a              LDR      r0,|L16.308|
00008a  6801              LDR      r1,[r0,#0]  ; g_u32Address
00008c  482a              LDR      r0,|L16.312|
00008e  3040              ADDS     r0,r0,#0x40
000090  f7fffffe          BL       my_memcpy
                  |L16.148|
;;;863            	}
;;;864            	g_u32Address += g_u8Size;
000094  4827              LDR      r0,|L16.308|
000096  6800              LDR      r0,[r0,#0]  ; g_u32Address
000098  4923              LDR      r1,|L16.296|
00009a  7809              LDRB     r1,[r1,#0]  ; g_u8Size
00009c  1840              ADDS     r0,r0,r1
00009e  4925              LDR      r1,|L16.308|
0000a0  6008              STR      r0,[r1,#0]  ; g_u32Address
0000a2  e03e              B        |L16.290|
                  |L16.164|
;;;865        	}
;;;866        	else
;;;867        	{
;;;868    		    u32Len = g_u32Length;
0000a4  4821              LDR      r0,|L16.300|
0000a6  6804              LDR      r4,[r0,#0]  ; g_u32Length
;;;869    		    if (u32Len > STORAGE_BUFFER_SIZE)
0000a8  2001              MOVS     r0,#1
0000aa  0240              LSLS     r0,r0,#9
0000ac  4284              CMP      r4,r0
0000ae  d900              BLS      |L16.178|
;;;870    		        u32Len = STORAGE_BUFFER_SIZE;
0000b0  4604              MOV      r4,r0
                  |L16.178|
;;;871    		    
;;;872    			DataFlashRead(g_u32LbaAddress, u32Len, (uint32_t)STORAGE_DATA_BUF);
0000b2  4a22              LDR      r2,|L16.316|
0000b4  4621              MOV      r1,r4
0000b6  4822              LDR      r0,|L16.320|
0000b8  6800              LDR      r0,[r0,#0]  ; g_u32LbaAddress
0000ba  f7fffffe          BL       DataFlashRead
;;;873    		    g_u32BytesInStorageBuf = u32Len;
0000be  481c              LDR      r0,|L16.304|
0000c0  6004              STR      r4,[r0,#0]  ; g_u32BytesInStorageBuf
;;;874    		    g_u32LbaAddress += u32Len;
0000c2  481f              LDR      r0,|L16.320|
0000c4  6800              LDR      r0,[r0,#0]  ; g_u32LbaAddress
0000c6  1900              ADDS     r0,r0,r4
0000c8  491d              LDR      r1,|L16.320|
0000ca  6008              STR      r0,[r1,#0]  ; g_u32LbaAddress
;;;875                g_u32Address = STORAGE_DATA_BUF;		    
0000cc  481b              LDR      r0,|L16.316|
0000ce  4919              LDR      r1,|L16.308|
0000d0  6008              STR      r0,[r1,#0]  ; g_u32Address
;;;876    		    
;;;877            	/* Prepare next data packet */
;;;878            	g_u8Size = MAX_PACKET_SIZE;
0000d2  2040              MOVS     r0,#0x40
0000d4  4914              LDR      r1,|L16.296|
0000d6  7008              STRB     r0,[r1,#0]
;;;879            	if (g_u8Size > g_u32Length)
0000d8  4608              MOV      r0,r1
0000da  7800              LDRB     r0,[r0,#0]  ; g_u8Size
0000dc  4913              LDR      r1,|L16.300|
0000de  6809              LDR      r1,[r1,#0]  ; g_u32Length
0000e0  4288              CMP      r0,r1
0000e2  d903              BLS      |L16.236|
;;;880            	    g_u8Size = g_u32Length;
0000e4  4811              LDR      r0,|L16.300|
0000e6  6800              LDR      r0,[r0,#0]  ; g_u32Length
0000e8  490f              LDR      r1,|L16.296|
0000ea  7008              STRB     r0,[r1,#0]
                  |L16.236|
;;;881    
;;;882            	if (*((__IO uint32_t *)(&USBD->EP[2].BUFSEG)) == BUF_BULK1)
0000ec  480d              LDR      r0,|L16.292|
0000ee  6c00              LDR      r0,[r0,#0x40]
0000f0  2880              CMP      r0,#0x80
0000f2  d107              BNE      |L16.260|
;;;883            	{
;;;884            		my_memcpy(g_au8UsbBulk0, (int8_t *)g_u32Address, g_u8Size);
0000f4  480c              LDR      r0,|L16.296|
0000f6  7802              LDRB     r2,[r0,#0]  ; g_u8Size
0000f8  480e              LDR      r0,|L16.308|
0000fa  6801              LDR      r1,[r0,#0]  ; g_u32Address
0000fc  480e              LDR      r0,|L16.312|
0000fe  f7fffffe          BL       my_memcpy
000102  e007              B        |L16.276|
                  |L16.260|
;;;885            	}
;;;886            	else
;;;887            	{
;;;888            		my_memcpy(g_au8UsbBulk1, (int8_t *)g_u32Address, g_u8Size);
000104  4808              LDR      r0,|L16.296|
000106  7802              LDRB     r2,[r0,#0]  ; g_u8Size
000108  480a              LDR      r0,|L16.308|
00010a  6801              LDR      r1,[r0,#0]  ; g_u32Address
00010c  480a              LDR      r0,|L16.312|
00010e  3040              ADDS     r0,r0,#0x40
000110  f7fffffe          BL       my_memcpy
                  |L16.276|
;;;889            	}
;;;890            	g_u32Address += g_u8Size;		    
000114  4807              LDR      r0,|L16.308|
000116  6800              LDR      r0,[r0,#0]  ; g_u32Address
000118  4903              LDR      r1,|L16.296|
00011a  7809              LDRB     r1,[r1,#0]  ; g_u8Size
00011c  1840              ADDS     r0,r0,r1
00011e  4905              LDR      r1,|L16.308|
000120  6008              STR      r0,[r1,#0]  ; g_u32Address
                  |L16.290|
;;;891        	}
;;;892    	}
;;;893    }
000122  bd10              POP      {r4,pc}
;;;894    
                          ENDP

                  |L16.292|
                          DCD      0x40060000
                  |L16.296|
                          DCD      g_u8Size
                  |L16.300|
                          DCD      g_u32Length
                  |L16.304|
                          DCD      g_u32BytesInStorageBuf
                  |L16.308|
                          DCD      g_u32Address
                  |L16.312|
                          DCD      0x40060140
                  |L16.316|
                          DCD      Storage_Block
                  |L16.320|
                          DCD      g_u32LbaAddress

                          AREA ||i.UsbReadTrig||, CODE, READONLY, ALIGN=2

                  UsbReadTrig PROC
;;;895    
;;;896    void UsbReadTrig(void)
000000  b510              PUSH     {r4,lr}
;;;897    {
;;;898        uint32_t u32Len;
;;;899        
;;;900        if (g_u32Length)
000002  484b              LDR      r0,|L17.304|
000004  6800              LDR      r0,[r0,#0]  ; g_u32Length
000006  2800              CMP      r0,#0
000008  d074              BEQ      |L17.244|
;;;901        {
;;;902            if (g_u32BytesInStorageBuf)
00000a  484a              LDR      r0,|L17.308|
00000c  6800              LDR      r0,[r0,#0]  ; g_u32BytesInStorageBuf
00000e  2800              CMP      r0,#0
000010  d028              BEQ      |L17.100|
;;;903            {
;;;904            	/* Prepare next data packet */
;;;905            	g_u8Size = MAX_PACKET_SIZE;
000012  2040              MOVS     r0,#0x40
000014  4948              LDR      r1,|L17.312|
000016  7008              STRB     r0,[r1,#0]
;;;906            	if (g_u8Size > g_u32Length)
000018  4608              MOV      r0,r1
00001a  7800              LDRB     r0,[r0,#0]  ; g_u8Size
00001c  4944              LDR      r1,|L17.304|
00001e  6809              LDR      r1,[r1,#0]  ; g_u32Length
000020  4288              CMP      r0,r1
000022  d903              BLS      |L17.44|
;;;907            	    g_u8Size = g_u32Length;
000024  4842              LDR      r0,|L17.304|
000026  6800              LDR      r0,[r0,#0]  ; g_u32Length
000028  4943              LDR      r1,|L17.312|
00002a  7008              STRB     r0,[r1,#0]
                  |L17.44|
;;;908    
;;;909            	if (*((__IO uint32_t *)(&USBD->EP[2].BUFSEG)) == BUF_BULK1)
00002c  4843              LDR      r0,|L17.316|
00002e  6c00              LDR      r0,[r0,#0x40]
000030  2880              CMP      r0,#0x80
000032  d107              BNE      |L17.68|
;;;910            	{
;;;911            		my_memcpy(g_au8UsbBulk0, (int8_t *)g_u32Address, g_u8Size);
000034  4840              LDR      r0,|L17.312|
000036  7802              LDRB     r2,[r0,#0]  ; g_u8Size
000038  4841              LDR      r0,|L17.320|
00003a  6801              LDR      r1,[r0,#0]  ; g_u32Address
00003c  4841              LDR      r0,|L17.324|
00003e  f7fffffe          BL       my_memcpy
000042  e007              B        |L17.84|
                  |L17.68|
;;;912            	}
;;;913            	else
;;;914            	{
;;;915            		my_memcpy(g_au8UsbBulk1, (int8_t *)g_u32Address, g_u8Size);
000044  483c              LDR      r0,|L17.312|
000046  7802              LDRB     r2,[r0,#0]  ; g_u8Size
000048  483d              LDR      r0,|L17.320|
00004a  6801              LDR      r1,[r0,#0]  ; g_u32Address
00004c  483d              LDR      r0,|L17.324|
00004e  3040              ADDS     r0,r0,#0x40
000050  f7fffffe          BL       my_memcpy
                  |L17.84|
;;;916            	}
;;;917            	g_u32Address += g_u8Size;
000054  483a              LDR      r0,|L17.320|
000056  6800              LDR      r0,[r0,#0]  ; g_u32Address
000058  4937              LDR      r1,|L17.312|
00005a  7809              LDRB     r1,[r1,#0]  ; g_u8Size
00005c  1840              ADDS     r0,r0,r1
00005e  4938              LDR      r1,|L17.320|
000060  6008              STR      r0,[r1,#0]  ; g_u32Address
000062  e03e              B        |L17.226|
                  |L17.100|
;;;918        	}
;;;919        	else
;;;920        	{
;;;921    		    u32Len = g_u32Length;
000064  4832              LDR      r0,|L17.304|
000066  6804              LDR      r4,[r0,#0]  ; g_u32Length
;;;922    		    if (u32Len > STORAGE_BUFFER_SIZE)
000068  2001              MOVS     r0,#1
00006a  0240              LSLS     r0,r0,#9
00006c  4284              CMP      r4,r0
00006e  d900              BLS      |L17.114|
;;;923    		        u32Len = STORAGE_BUFFER_SIZE;
000070  4604              MOV      r4,r0
                  |L17.114|
;;;924    		    
;;;925    			DataFlashRead(g_u32LbaAddress, u32Len, (uint32_t)STORAGE_DATA_BUF);
000072  4a35              LDR      r2,|L17.328|
000074  4621              MOV      r1,r4
000076  4835              LDR      r0,|L17.332|
000078  6800              LDR      r0,[r0,#0]  ; g_u32LbaAddress
00007a  f7fffffe          BL       DataFlashRead
;;;926    		    g_u32BytesInStorageBuf = u32Len;
00007e  482d              LDR      r0,|L17.308|
000080  6004              STR      r4,[r0,#0]  ; g_u32BytesInStorageBuf
;;;927    		    g_u32LbaAddress += u32Len;
000082  4832              LDR      r0,|L17.332|
000084  6800              LDR      r0,[r0,#0]  ; g_u32LbaAddress
000086  1900              ADDS     r0,r0,r4
000088  4930              LDR      r1,|L17.332|
00008a  6008              STR      r0,[r1,#0]  ; g_u32LbaAddress
;;;928                g_u32Address = STORAGE_DATA_BUF;		    
00008c  482e              LDR      r0,|L17.328|
00008e  492c              LDR      r1,|L17.320|
000090  6008              STR      r0,[r1,#0]  ; g_u32Address
;;;929    		    
;;;930            	/* Prepare next data packet */
;;;931            	g_u8Size = MAX_PACKET_SIZE;
000092  2040              MOVS     r0,#0x40
000094  4928              LDR      r1,|L17.312|
000096  7008              STRB     r0,[r1,#0]
;;;932            	if (g_u8Size > g_u32Length)
000098  4608              MOV      r0,r1
00009a  7800              LDRB     r0,[r0,#0]  ; g_u8Size
00009c  4924              LDR      r1,|L17.304|
00009e  6809              LDR      r1,[r1,#0]  ; g_u32Length
0000a0  4288              CMP      r0,r1
0000a2  d903              BLS      |L17.172|
;;;933            	    g_u8Size = g_u32Length;
0000a4  4822              LDR      r0,|L17.304|
0000a6  6800              LDR      r0,[r0,#0]  ; g_u32Length
0000a8  4923              LDR      r1,|L17.312|
0000aa  7008              STRB     r0,[r1,#0]
                  |L17.172|
;;;934    
;;;935            	if (*((__IO uint32_t *)(&USBD->EP[2].BUFSEG)) == BUF_BULK1)
0000ac  4823              LDR      r0,|L17.316|
0000ae  6c00              LDR      r0,[r0,#0x40]
0000b0  2880              CMP      r0,#0x80
0000b2  d107              BNE      |L17.196|
;;;936            	{
;;;937            		my_memcpy(g_au8UsbBulk0, (int8_t *)g_u32Address, g_u8Size);
0000b4  4820              LDR      r0,|L17.312|
0000b6  7802              LDRB     r2,[r0,#0]  ; g_u8Size
0000b8  4821              LDR      r0,|L17.320|
0000ba  6801              LDR      r1,[r0,#0]  ; g_u32Address
0000bc  4821              LDR      r0,|L17.324|
0000be  f7fffffe          BL       my_memcpy
0000c2  e007              B        |L17.212|
                  |L17.196|
;;;938            	}
;;;939            	else
;;;940            	{
;;;941            		my_memcpy(g_au8UsbBulk1, (int8_t *)g_u32Address, g_u8Size);
0000c4  481c              LDR      r0,|L17.312|
0000c6  7802              LDRB     r2,[r0,#0]  ; g_u8Size
0000c8  481d              LDR      r0,|L17.320|
0000ca  6801              LDR      r1,[r0,#0]  ; g_u32Address
0000cc  481d              LDR      r0,|L17.324|
0000ce  3040              ADDS     r0,r0,#0x40
0000d0  f7fffffe          BL       my_memcpy
                  |L17.212|
;;;942            	}
;;;943            	g_u32Address += g_u8Size;		    
0000d4  481a              LDR      r0,|L17.320|
0000d6  6800              LDR      r0,[r0,#0]  ; g_u32Address
0000d8  4917              LDR      r1,|L17.312|
0000da  7809              LDRB     r1,[r1,#0]  ; g_u8Size
0000dc  1840              ADDS     r0,r0,r1
0000de  4918              LDR      r1,|L17.320|
0000e0  6008              STR      r0,[r1,#0]  ; g_u32Address
                  |L17.226|
;;;944        	}
;;;945    	
;;;946    		/* DATA0/DATA1 Toggle */
;;;947    		if (*((__IO uint32_t *)(&USBD->EP[2].BUFSEG)) == BUF_BULK1)
0000e2  4816              LDR      r0,|L17.316|
0000e4  6c00              LDR      r0,[r0,#0x40]
0000e6  2880              CMP      r0,#0x80
0000e8  d105              BNE      |L17.246|
;;;948    			_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK0);
0000ea  2040              MOVS     r0,#0x40
0000ec  4913              LDR      r1,|L17.316|
0000ee  3140              ADDS     r1,r1,#0x40
0000f0  6008              STR      r0,[r1,#0]
0000f2  e004              B        |L17.254|
                  |L17.244|
0000f4  e017              B        |L17.294|
                  |L17.246|
;;;949    		else
;;;950    			_DRVUSB_SET_EP_BUF(2, USB_SRAM_BASE + BUF_BULK1);
0000f6  2080              MOVS     r0,#0x80
0000f8  4910              LDR      r1,|L17.316|
0000fa  3140              ADDS     r1,r1,#0x40
0000fc  6008              STR      r0,[r1,#0]
                  |L17.254|
;;;951    		
;;;952    		/* Trigger to send out the data packet */	
;;;953    		_DRVUSB_TRIG_EP(2, g_u8Size);
0000fe  480e              LDR      r0,|L17.312|
000100  7800              LDRB     r0,[r0,#0]  ; g_u8Size
000102  490e              LDR      r1,|L17.316|
000104  3140              ADDS     r1,r1,#0x40
000106  6048              STR      r0,[r1,#4]
;;;954    	
;;;955    		g_u32Length -= g_u8Size;
000108  4809              LDR      r0,|L17.304|
00010a  6800              LDR      r0,[r0,#0]  ; g_u32Length
00010c  490a              LDR      r1,|L17.312|
00010e  7809              LDRB     r1,[r1,#0]  ; g_u8Size
000110  1a40              SUBS     r0,r0,r1
000112  4907              LDR      r1,|L17.304|
000114  6008              STR      r0,[r1,#0]  ; g_u32Length
;;;956    		g_u32BytesInStorageBuf -= g_u8Size;
000116  4807              LDR      r0,|L17.308|
000118  6800              LDR      r0,[r0,#0]  ; g_u32BytesInStorageBuf
00011a  4907              LDR      r1,|L17.312|
00011c  7809              LDRB     r1,[r1,#0]  ; g_u8Size
00011e  1a40              SUBS     r0,r0,r1
000120  4904              LDR      r1,|L17.308|
000122  6008              STR      r0,[r1,#0]  ; g_u32BytesInStorageBuf
000124  e003              B        |L17.302|
                  |L17.294|
;;;957    
;;;958    	}
;;;959    	else
;;;960    		_DRVUSB_TRIG_EP(2, 0);	
000126  2000              MOVS     r0,#0
000128  4904              LDR      r1,|L17.316|
00012a  3140              ADDS     r1,r1,#0x40
00012c  6048              STR      r0,[r1,#4]
                  |L17.302|
;;;961    }
00012e  bd10              POP      {r4,pc}
;;;962    
                          ENDP

                  |L17.304|
                          DCD      g_u32Length
                  |L17.308|
                          DCD      g_u32BytesInStorageBuf
                  |L17.312|
                          DCD      g_u8Size
                  |L17.316|
                          DCD      0x40060000
                  |L17.320|
                          DCD      g_u32Address
                  |L17.324|
                          DCD      0x40060140
                  |L17.328|
                          DCD      Storage_Block
                  |L17.332|
                          DCD      g_u32LbaAddress

                          AREA ||i.UsbSetup||, CODE, READONLY, ALIGN=2

                  UsbSetup PROC
;;;742    //======================================================
;;;743    int32_t UsbSetup(void)
000000  b500              PUSH     {lr}
;;;744    {
;;;745        /* Clear the data IN/OUT ready flag of control end-points */
;;;746    	_DRVUSB_SET_CFG_EP0(CFGP_CLRRDY);	
000002  2001              MOVS     r0,#1
000004  4909              LDR      r1,|L18.44|
000006  62c8              STR      r0,[r1,#0x2c]
;;;747    	_DRVUSB_SET_CFG_EP1(CFGP_CLRRDY);
000008  63c8              STR      r0,[r1,#0x3c]
;;;748    	
;;;749    	/* USB device request in setup packet: offset 0, D[6..5]: 0=Stardard, 1=Class, 2=Vendor, 3=Reserved */
;;;750    	switch (g_au8UsbSetup[0] & 0x60)
00000a  4809              LDR      r0,|L18.48|
00000c  7e00              LDRB     r0,[r0,#0x18]
00000e  2160              MOVS     r1,#0x60
000010  4008              ANDS     r0,r0,r1
000012  d002              BEQ      |L18.26|
000014  2820              CMP      r0,#0x20
000016  d106              BNE      |L18.38|
000018  e002              B        |L18.32|
                  |L18.26|
;;;751    	{
;;;752    		case REQ_STANDARD:
;;;753    			return UsbStdReq();
00001a  f7fffffe          BL       UsbStdReq
                  |L18.30|
;;;754    		case REQ_CLASS:
;;;755    			return UsbClassReq();
;;;756    		default:
;;;757    			return FALSE;
;;;758    	}
;;;759    }
00001e  bd00              POP      {pc}
                  |L18.32|
000020  f7fffffe          BL       UsbClassReq
000024  e7fb              B        |L18.30|
                  |L18.38|
000026  2000              MOVS     r0,#0                 ;757
000028  e7f9              B        |L18.30|
;;;760    
                          ENDP

00002a  0000              DCW      0x0000
                  |L18.44|
                          DCD      0x40060000
                  |L18.48|
                          DCD      0x400601e0

                          AREA ||i.UsbStdReq||, CODE, READONLY, ALIGN=2

                  UsbStdReq PROC
;;;507    //======================================================
;;;508    int32_t UsbStdReq(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;509    {
;;;510    	int volatile len, idx;
;;;511        uint8_t tmp[8];
;;;512        
;;;513        my_memcpy(tmp, g_au8UsbSetup, 8);
000002  2208              MOVS     r2,#8
000004  4989              LDR      r1,|L19.556|
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       my_memcpy
;;;514        
;;;515    	/* check if after DEFAULT state (RESET) */
;;;516    	if ((g_u8UsbState & USB_STATE_FLAG_DEFAULT) == 0x00)
00000c  4888              LDR      r0,|L19.560|
00000e  7800              LDRB     r0,[r0,#0]  ; g_u8UsbState
000010  2110              MOVS     r1,#0x10
000012  4208              TST      r0,r1
000014  d101              BNE      |L19.26|
;;;517    		return FALSE;
000016  2000              MOVS     r0,#0
                  |L19.24|
;;;518    
;;;519    	/* parse the request in setup packet */	
;;;520        switch (tmp[1])
;;;521    	{
;;;522    		case GET_DESCRIPTOR:
;;;523    		{
;;;524    			len = tmp[6] + ((uint32_t)tmp[7] << 8);
;;;525                
;;;526    			switch (tmp[3])
;;;527                {
;;;528    				// Get Device Descriptor
;;;529    				case DESC_DEVICE:
;;;530    				{
;;;531    					udcOnLine = 1;
;;;532    
;;;533    					if (len > LEN_DEVICE)
;;;534    					    len = LEN_DEVICE;
;;;535    
;;;536                        my_memcpy(g_au8UsbCtrl, (void *)MassDeviceDescriptor, len);
;;;537    					break;
;;;538    				}
;;;539    				// Get Configuration Descriptor
;;;540    				case DESC_CONFIG:
;;;541    				{
;;;542    					if (len > MassConfigurationBlock[2])
;;;543    					    len = MassConfigurationBlock[2];
;;;544    					
;;;545    					my_memcpy(g_au8UsbCtrl, (void *)MassConfigurationBlock, len);                   
;;;546                        break;
;;;547    				}
;;;548    				// Get String Descriptor
;;;549    				case DESC_STRING:
;;;550    				{
;;;551    					// Get Language
;;;552    					if(tmp[4] == 0)
;;;553                        {
;;;554    						if(len > MassStringDescriptor0[0])
;;;555    						    len = MassStringDescriptor0[0];
;;;556    						
;;;557    						my_memcpy(g_au8UsbCtrl, (void *)MassStringDescriptor0, len);
;;;558                            
;;;559                            break;
;;;560    					}
;;;561    					// Get String Descriptor
;;;562    					if(len > MassStringDescriptor1[0])
;;;563    					    len = MassStringDescriptor1[0];
;;;564    										
;;;565    					my_memcpy(g_au8UsbCtrl, (void *)MassStringDescriptor1, len);
;;;566                        
;;;567                        break;
;;;568    				}
;;;569    				default:
;;;570    					return FALSE;
;;;571    			}
;;;572    			_DRVUSB_SET_CFG(0, DATA1 (CFG0_SETTING));
;;;573    			_DRVUSB_TRIG_EP(0, len);
;;;574    			g_u8Flag = FLAG_OUT_ACK;
;;;575    			return TRUE;
;;;576    		}
;;;577    		case SET_ADDRESS:
;;;578    		{
;;;579    		    /* Accept set address command only before USB configured */
;;;580    			if((g_u8UsbState & USB_STATE_FLAG_CONFIGURED) == 0)
;;;581    			{
;;;582    				/* Get the device address */
;;;583    				g_u8Address = tmp[2];
;;;584                    
;;;585    				_DRVUSB_SET_CFG(0, DATA1 (CFG0_SETTING));
;;;586    				_DRVUSB_TRIG_EP(0, 0);
;;;587    				g_u8Flag = FLAG_SET_ADDRESS;
;;;588    				return TRUE;
;;;589    			}
;;;590    			return FALSE;
;;;591    		}
;;;592    		case SET_CONFIGURATION:
;;;593    		{
;;;594    			g_u8Config = tmp[2];
;;;595                
;;;596    			_DRVUSB_SET_CFG(0, DATA1 (CFG0_SETTING));
;;;597    			_DRVUSB_TRIG_EP(0, 0);
;;;598    			g_u8Flag = FLAG_SET_CONFIG;
;;;599    			return TRUE;
;;;600    		}
;;;601    		case CLEAR_FEATURE:
;;;602    		case SET_FEATURE:
;;;603    		{
;;;604    			if (g_bCBWInvalid)
;;;605    			{
;;;606    		        /* Invalid CBW */
;;;607    			}
;;;608    			else if((tmp[0] == 2) && (tmp[2] == FEATURE_ENDPOINT_HALT))
;;;609                {
;;;610    				uint32_t u32CfgAddr;
;;;611                    uint8_t  u8Cfg;
;;;612    
;;;613                    u32CfgAddr = ((tmp[4] & 0xF) << 4) + USBD_CFGP0;
;;;614                    
;;;615    				u8Cfg = *((__IO uint32_t *) (u32CfgAddr)) & 0xFF;
;;;616    				
;;;617    				if(tmp[1] == CLEAR_FEATURE)
;;;618                    	u8Cfg &= ~EPT_stall;
;;;619    				else
;;;620    					u8Cfg |= EPT_stall;
;;;621    				*((__IO uint32_t *) (u32CfgAddr)) = u8Cfg;
;;;622    			}
;;;623    			else
;;;624    				return FALSE;
;;;625    				
;;;626    			_DRVUSB_SET_CFG(0, DATA1 (CFG0_SETTING));
;;;627    			_DRVUSB_TRIG_EP(0, 0);
;;;628    			return TRUE;
;;;629    		}
;;;630    		case GET_CONFIGURATION:
;;;631    		{
;;;632    			g_au8UsbCtrl[0] = g_u8Config;
;;;633                
;;;634    			_DRVUSB_SET_CFG(0, DATA1(CFG0_SETTING));
;;;635    			_DRVUSB_TRIG_EP(0, 1);
;;;636    			g_u8Flag = FLAG_OUT_ACK;
;;;637    			return TRUE;
;;;638    		}
;;;639    		case GET_STATUS:
;;;640    		{
;;;641                uint8_t u8Data;
;;;642    
;;;643                u8Data = tmp[0];
;;;644    			// Device
;;;645    			if (u8Data == 0x80)
;;;646                	g_au8UsbCtrl[0] = 1;	// Self-Powered
;;;647    			
;;;648    			// Interface
;;;649    			else if (u8Data == 0x81)
;;;650                	g_au8UsbCtrl[0] = 0;
;;;651    			
;;;652    			// Endpoint
;;;653    			else if (u8Data == 0x82)
;;;654                {
;;;655                    uint32_t u32CfgAddr;
;;;656                    u8Data = tmp[4];
;;;657                    u32CfgAddr = ((u8Data & 0xF) << 4) + USBD_CFGP0;
;;;658    
;;;659    				g_au8UsbCtrl[0] = (inp32(u32CfgAddr) >> 1) & 1;
;;;660    			}
;;;661    			else
;;;662    				return FALSE;
;;;663       			
;;;664                g_au8UsbCtrl[1] = 0;
;;;665    
;;;666    			_DRVUSB_SET_CFG(0, DATA1 (CFG0_SETTING));
;;;667    			_DRVUSB_TRIG_EP(0, 1);
;;;668    			g_u8Flag = FLAG_OUT_ACK;
;;;669    			return TRUE;
;;;670    		}
;;;671    		case GET_INTERFACE:
;;;672    		{
;;;673    			g_au8UsbCtrl[0] = 0;
;;;674    
;;;675    			_DRVUSB_SET_CFG(0, DATA1(CFG0_SETTING));
;;;676    			_DRVUSB_TRIG_EP(0, 1);
;;;677    			g_u8Flag = FLAG_OUT_ACK;
;;;678    			return TRUE;
;;;679    		}
;;;680    		case SET_INTERFACE:
;;;681    		{
;;;682    			g_u8Flag = FLAG_SET_INTERFACE;
;;;683    
;;;684    			_DRVUSB_SET_CFG(0, DATA1(CFG0_SETTING));
;;;685    			_DRVUSB_TRIG_EP(0, 0);
;;;686    			return TRUE;
;;;687    		}
;;;688    		default:
;;;689    			return FALSE;
;;;690    	}
;;;691    }
000018  bd1c              POP      {r2-r4,pc}
                  |L19.26|
00001a  4668              MOV      r0,sp                 ;520
00001c  7843              LDRB     r3,[r0,#1]            ;520
00001e  f7fffffe          BL       __ARM_common_switch8
000022  0cba              DCB      0x0c,0xba
000024  7ff780f7          DCB      0x7f,0xf7,0x80,0xf7
000028  5a07f7ac          DCB      0x5a,0x07,0xf7,0xac
00002c  70e9f8f7          DCB      0x70,0xe9,0xf8,0xf7
000030  4668              MOV      r0,sp                 ;524
000032  7981              LDRB     r1,[r0,#6]            ;524
000034  79c0              LDRB     r0,[r0,#7]            ;524
000036  0200              LSLS     r0,r0,#8              ;524
000038  180c              ADDS     r4,r1,r0              ;524
00003a  4668              MOV      r0,sp                 ;526
00003c  78c0              LDRB     r0,[r0,#3]            ;526
00003e  2801              CMP      r0,#1                 ;526
000040  d004              BEQ      |L19.76|
000042  2802              CMP      r0,#2                 ;526
000044  d00f              BEQ      |L19.102|
000046  2803              CMP      r0,#3                 ;526
000048  d138              BNE      |L19.188|
00004a  e019              B        |L19.128|
                  |L19.76|
00004c  2001              MOVS     r0,#1                 ;531
00004e  4979              LDR      r1,|L19.564|
000050  6008              STR      r0,[r1,#0]            ;531  ; udcOnLine
000052  2c12              CMP      r4,#0x12              ;533
000054  dd00              BLE      |L19.88|
000056  2412              MOVS     r4,#0x12              ;534
                  |L19.88|
000058  4622              MOV      r2,r4                 ;536
00005a  4977              LDR      r1,|L19.568|
00005c  4873              LDR      r0,|L19.556|
00005e  38f8              SUBS     r0,r0,#0xf8           ;536
000060  f7fffffe          BL       my_memcpy
000064  e02c              B        |L19.192|
                  |L19.102|
000066  4875              LDR      r0,|L19.572|
000068  7880              LDRB     r0,[r0,#2]            ;542  ; MassConfigurationBlock
00006a  42a0              CMP      r0,r4                 ;542
00006c  da01              BGE      |L19.114|
00006e  4873              LDR      r0,|L19.572|
000070  7884              LDRB     r4,[r0,#2]            ;543  ; MassConfigurationBlock
                  |L19.114|
000072  4622              MOV      r2,r4                 ;545
000074  4971              LDR      r1,|L19.572|
000076  486d              LDR      r0,|L19.556|
000078  38f8              SUBS     r0,r0,#0xf8           ;545
00007a  f7fffffe          BL       my_memcpy
00007e  e01f              B        |L19.192|
                  |L19.128|
000080  4668              MOV      r0,sp                 ;552
000082  7900              LDRB     r0,[r0,#4]            ;552
000084  2800              CMP      r0,#0                 ;552
000086  d10c              BNE      |L19.162|
000088  486d              LDR      r0,|L19.576|
00008a  7800              LDRB     r0,[r0,#0]            ;554  ; MassStringDescriptor0
00008c  42a0              CMP      r0,r4                 ;554
00008e  da01              BGE      |L19.148|
000090  486b              LDR      r0,|L19.576|
000092  7804              LDRB     r4,[r0,#0]            ;555  ; MassStringDescriptor0
                  |L19.148|
000094  4622              MOV      r2,r4                 ;557
000096  496a              LDR      r1,|L19.576|
000098  4864              LDR      r0,|L19.556|
00009a  38f8              SUBS     r0,r0,#0xf8           ;557
00009c  f7fffffe          BL       my_memcpy
0000a0  e00e              B        |L19.192|
                  |L19.162|
0000a2  4868              LDR      r0,|L19.580|
0000a4  7800              LDRB     r0,[r0,#0]            ;562  ; MassStringDescriptor1
0000a6  42a0              CMP      r0,r4                 ;562
0000a8  da01              BGE      |L19.174|
0000aa  4866              LDR      r0,|L19.580|
0000ac  7804              LDRB     r4,[r0,#0]            ;563  ; MassStringDescriptor1
                  |L19.174|
0000ae  4622              MOV      r2,r4                 ;565
0000b0  4964              LDR      r1,|L19.580|
0000b2  485e              LDR      r0,|L19.556|
0000b4  38f8              SUBS     r0,r0,#0xf8           ;565
0000b6  f7fffffe          BL       my_memcpy
0000ba  e001              B        |L19.192|
                  |L19.188|
0000bc  2000              MOVS     r0,#0                 ;570
0000be  e7ab              B        |L19.24|
                  |L19.192|
0000c0  bf00              NOP                            ;537
0000c2  200b              MOVS     r0,#0xb               ;572
0000c4  0180              LSLS     r0,r0,#6              ;572
0000c6  4960              LDR      r1,|L19.584|
0000c8  6288              STR      r0,[r1,#0x28]         ;572
0000ca  4608              MOV      r0,r1                 ;573
0000cc  6244              STR      r4,[r0,#0x24]         ;573
0000ce  2001              MOVS     r0,#1                 ;574
0000d0  495e              LDR      r1,|L19.588|
0000d2  7008              STRB     r0,[r1,#0]            ;574
0000d4  e7a0              B        |L19.24|
0000d6  4856              LDR      r0,|L19.560|
0000d8  7800              LDRB     r0,[r0,#0]            ;580  ; g_u8UsbState
0000da  2140              MOVS     r1,#0x40              ;580
0000dc  4208              TST      r0,r1                 ;580
0000de  d10e              BNE      |L19.254|
0000e0  4668              MOV      r0,sp                 ;583
0000e2  7880              LDRB     r0,[r0,#2]            ;583
0000e4  495a              LDR      r1,|L19.592|
0000e6  7008              STRB     r0,[r1,#0]            ;583
0000e8  200b              MOVS     r0,#0xb               ;585
0000ea  0180              LSLS     r0,r0,#6              ;585
0000ec  4956              LDR      r1,|L19.584|
0000ee  6288              STR      r0,[r1,#0x28]         ;585
0000f0  2000              MOVS     r0,#0                 ;586
0000f2  6248              STR      r0,[r1,#0x24]         ;586
0000f4  2002              MOVS     r0,#2                 ;587
0000f6  4955              LDR      r1,|L19.588|
0000f8  7008              STRB     r0,[r1,#0]            ;587
0000fa  2001              MOVS     r0,#1                 ;588
0000fc  e78c              B        |L19.24|
                  |L19.254|
0000fe  2000              MOVS     r0,#0                 ;590
000100  e78a              B        |L19.24|
000102  4668              MOV      r0,sp                 ;594
000104  7880              LDRB     r0,[r0,#2]            ;594
000106  4953              LDR      r1,|L19.596|
000108  7008              STRB     r0,[r1,#0]            ;594
00010a  200b              MOVS     r0,#0xb               ;596
00010c  0180              LSLS     r0,r0,#6              ;596
00010e  494e              LDR      r1,|L19.584|
000110  6288              STR      r0,[r1,#0x28]         ;596
000112  2000              MOVS     r0,#0                 ;597
000114  6248              STR      r0,[r1,#0x24]         ;597
000116  2004              MOVS     r0,#4                 ;598
000118  494c              LDR      r1,|L19.588|
00011a  7008              STRB     r0,[r1,#0]            ;598
00011c  2001              MOVS     r0,#1                 ;599
00011e  e77b              B        |L19.24|
000120  bf00              NOP                            ;602
000122  484d              LDR      r0,|L19.600|
000124  6800              LDR      r0,[r0,#0]            ;604  ; g_bCBWInvalid
000126  2800              CMP      r0,#0                 ;604
000128  d11f              BNE      |L19.362|
00012a  4668              MOV      r0,sp                 ;608
00012c  7800              LDRB     r0,[r0,#0]            ;608
00012e  2802              CMP      r0,#2                 ;608
000130  d119              BNE      |L19.358|
000132  4668              MOV      r0,sp                 ;608
000134  7880              LDRB     r0,[r0,#2]            ;608
000136  2800              CMP      r0,#0                 ;608
000138  d115              BNE      |L19.358|
00013a  466a              MOV      r2,sp                 ;613
00013c  7912              LDRB     r2,[r2,#4]            ;613
00013e  0712              LSLS     r2,r2,#28             ;613
000140  0e12              LSRS     r2,r2,#24             ;613
000142  4b41              LDR      r3,|L19.584|
000144  332c              ADDS     r3,r3,#0x2c           ;613
000146  18d1              ADDS     r1,r2,r3              ;613
000148  680a              LDR      r2,[r1,#0]            ;615
00014a  b2d0              UXTB     r0,r2                 ;615
00014c  466a              MOV      r2,sp                 ;617
00014e  7852              LDRB     r2,[r2,#1]            ;617
000150  2a01              CMP      r2,#1                 ;617
000152  d104              BNE      |L19.350|
000154  2302              MOVS     r3,#2                 ;618
000156  4602              MOV      r2,r0                 ;618
000158  439a              BICS     r2,r2,r3              ;618
00015a  4610              MOV      r0,r2                 ;618
00015c  e001              B        |L19.354|
                  |L19.350|
00015e  2202              MOVS     r2,#2                 ;620
000160  4310              ORRS     r0,r0,r2              ;620
                  |L19.354|
000162  6008              STR      r0,[r1,#0]            ;621
000164  e001              B        |L19.362|
                  |L19.358|
000166  2000              MOVS     r0,#0                 ;624
000168  e756              B        |L19.24|
                  |L19.362|
00016a  200b              MOVS     r0,#0xb               ;626
00016c  0180              LSLS     r0,r0,#6              ;626
00016e  4936              LDR      r1,|L19.584|
000170  6288              STR      r0,[r1,#0x28]         ;626
000172  2000              MOVS     r0,#0                 ;627
000174  6248              STR      r0,[r1,#0x24]         ;627
000176  2001              MOVS     r0,#1                 ;628
000178  e74e              B        |L19.24|
00017a  4836              LDR      r0,|L19.596|
00017c  7800              LDRB     r0,[r0,#0]            ;632  ; g_u8Config
00017e  492b              LDR      r1,|L19.556|
000180  39f8              SUBS     r1,r1,#0xf8           ;632
000182  7008              STRB     r0,[r1,#0]            ;632
000184  200b              MOVS     r0,#0xb               ;634
000186  0180              LSLS     r0,r0,#6              ;634
000188  492f              LDR      r1,|L19.584|
00018a  6288              STR      r0,[r1,#0x28]         ;634
00018c  2001              MOVS     r0,#1                 ;635
00018e  6248              STR      r0,[r1,#0x24]         ;635
000190  492e              LDR      r1,|L19.588|
000192  7008              STRB     r0,[r1,#0]            ;636
000194  e740              B        |L19.24|
000196  4668              MOV      r0,sp                 ;643
000198  7801              LDRB     r1,[r0,#0]            ;643
00019a  2980              CMP      r1,#0x80              ;645
00019c  d104              BNE      |L19.424|
00019e  2001              MOVS     r0,#1                 ;646
0001a0  4a22              LDR      r2,|L19.556|
0001a2  3af8              SUBS     r2,r2,#0xf8           ;646
0001a4  7010              STRB     r0,[r2,#0]            ;646
0001a6  e018              B        |L19.474|
                  |L19.424|
0001a8  2981              CMP      r1,#0x81              ;649
0001aa  d104              BNE      |L19.438|
0001ac  2000              MOVS     r0,#0                 ;650
0001ae  4a1f              LDR      r2,|L19.556|
0001b0  3af8              SUBS     r2,r2,#0xf8           ;650
0001b2  7010              STRB     r0,[r2,#0]            ;650
0001b4  e011              B        |L19.474|
                  |L19.438|
0001b6  2982              CMP      r1,#0x82              ;653
0001b8  d10d              BNE      |L19.470|
0001ba  466a              MOV      r2,sp                 ;656
0001bc  7911              LDRB     r1,[r2,#4]            ;656
0001be  070a              LSLS     r2,r1,#28             ;657
0001c0  0e12              LSRS     r2,r2,#24             ;657
0001c2  4b21              LDR      r3,|L19.584|
0001c4  332c              ADDS     r3,r3,#0x2c           ;657
0001c6  18d0              ADDS     r0,r2,r3              ;657
0001c8  6802              LDR      r2,[r0,#0]            ;659
0001ca  0792              LSLS     r2,r2,#30             ;659
0001cc  0fd2              LSRS     r2,r2,#31             ;659
0001ce  4b17              LDR      r3,|L19.556|
0001d0  3bf8              SUBS     r3,r3,#0xf8           ;659
0001d2  701a              STRB     r2,[r3,#0]            ;659
0001d4  e001              B        |L19.474|
                  |L19.470|
0001d6  2000              MOVS     r0,#0                 ;662
0001d8  e71e              B        |L19.24|
                  |L19.474|
0001da  2000              MOVS     r0,#0                 ;664
0001dc  4a13              LDR      r2,|L19.556|
0001de  3af8              SUBS     r2,r2,#0xf8           ;664
0001e0  7050              STRB     r0,[r2,#1]            ;664
0001e2  200b              MOVS     r0,#0xb               ;666
0001e4  0180              LSLS     r0,r0,#6              ;666
0001e6  4a18              LDR      r2,|L19.584|
0001e8  6290              STR      r0,[r2,#0x28]         ;666
0001ea  2001              MOVS     r0,#1                 ;667
0001ec  6250              STR      r0,[r2,#0x24]         ;667
0001ee  4a17              LDR      r2,|L19.588|
0001f0  7010              STRB     r0,[r2,#0]            ;668
0001f2  e711              B        |L19.24|
0001f4  2000              MOVS     r0,#0                 ;673
0001f6  490d              LDR      r1,|L19.556|
0001f8  39f8              SUBS     r1,r1,#0xf8           ;673
0001fa  7008              STRB     r0,[r1,#0]            ;673
0001fc  200b              MOVS     r0,#0xb               ;675
0001fe  0180              LSLS     r0,r0,#6              ;675
000200  4911              LDR      r1,|L19.584|
000202  6288              STR      r0,[r1,#0x28]         ;675
000204  2001              MOVS     r0,#1                 ;676
000206  6248              STR      r0,[r1,#0x24]         ;676
000208  4910              LDR      r1,|L19.588|
00020a  7008              STRB     r0,[r1,#0]            ;677
00020c  e704              B        |L19.24|
00020e  e000              B        |L19.530|
000210  e00a              B        |L19.552|
                  |L19.530|
000212  2008              MOVS     r0,#8                 ;682
000214  490d              LDR      r1,|L19.588|
000216  7008              STRB     r0,[r1,#0]            ;682
000218  200b              MOVS     r0,#0xb               ;684
00021a  0180              LSLS     r0,r0,#6              ;684
00021c  490a              LDR      r1,|L19.584|
00021e  6288              STR      r0,[r1,#0x28]         ;684
000220  2000              MOVS     r0,#0                 ;685
000222  6248              STR      r0,[r1,#0x24]         ;685
000224  2001              MOVS     r0,#1                 ;686
000226  e6f7              B        |L19.24|
                  |L19.552|
000228  2000              MOVS     r0,#0                 ;689
00022a  e6f5              B        |L19.24|
;;;692    
                          ENDP

                  |L19.556|
                          DCD      0x400601f8
                  |L19.560|
                          DCD      g_u8UsbState
                  |L19.564|
                          DCD      udcOnLine
                  |L19.568|
                          DCD      MassDeviceDescriptor
                  |L19.572|
                          DCD      MassConfigurationBlock
                  |L19.576|
                          DCD      MassStringDescriptor0
                  |L19.580|
                          DCD      MassStringDescriptor1
                  |L19.584|
                          DCD      0x40060000
                  |L19.588|
                          DCD      g_u8Flag
                  |L19.592|
                          DCD      g_u8Address
                  |L19.596|
                          DCD      g_u8Config
                  |L19.600|
                          DCD      g_bCBWInvalid

                          AREA ||i.UsbUsb||, CODE, READONLY, ALIGN=2

                  UsbUsb PROC
;;;1414   //======================================================
;;;1415   void UsbUsb(uint32_t u32INTSTS)
000000  b570              PUSH     {r4-r6,lr}
;;;1416   {
000002  4604              MOV      r4,r0
;;;1417   	uint32_t u32STS = _DRVUSB_GET_EPSTS();
000004  482b              LDR      r0,|L20.180|
000006  68c5              LDR      r5,[r0,#0xc]
;;;1418   
;;;1419   	if (u32INTSTS & INTSTS_SETUP)
000008  0fe0              LSRS     r0,r4,#31
00000a  07c0              LSLS     r0,r0,#31
00000c  d00c              BEQ      |L20.40|
;;;1420   	{	
;;;1421   	    /* Clear setup event */
;;;1422   		_DRVUSB_SET_EVENT_FLAG(INTSTS_SETUP);	
00000e  2001              MOVS     r0,#1
000010  07c0              LSLS     r0,r0,#31
000012  4928              LDR      r1,|L20.180|
000014  6048              STR      r0,[r1,#4]
;;;1423   		if (!UsbSetup())
000016  f7fffffe          BL       UsbSetup
00001a  2800              CMP      r0,#0
00001c  d149              BNE      |L20.178|
;;;1424   		{	
;;;1425   		    /* Setup error, stall the device */
;;;1426   			_DRVUSB_SET_CFGP(0, (CFGP_SSTALL | CFGP_CLRRDY));
00001e  2003              MOVS     r0,#3
000020  4924              LDR      r1,|L20.180|
000022  62c8              STR      r0,[r1,#0x2c]
;;;1427   			_DRVUSB_SET_CFGP(1, (CFGP_SSTALL | CFGP_CLRRDY));
000024  63c8              STR      r0,[r1,#0x3c]
000026  e044              B        |L20.178|
                  |L20.40|
;;;1428   		}
;;;1429   	}
;;;1430   	else if(u32INTSTS & INTSTS_EPTF0)
000028  2001              MOVS     r0,#1
00002a  0400              LSLS     r0,r0,#16
00002c  4204              TST      r4,r0
00002e  d004              BEQ      |L20.58|
;;;1431   	{	
;;;1432   	    /* Ctrl In */
;;;1433   		_DRVUSB_SET_EVENT_FLAG(INTSTS_EPTF0);
000030  4920              LDR      r1,|L20.180|
000032  6048              STR      r0,[r1,#4]
;;;1434   		UsbInAck();
000034  f7fffffe          BL       UsbInAck
000038  e03b              B        |L20.178|
                  |L20.58|
;;;1435   	}
;;;1436   	else if(u32INTSTS & INTSTS_EPTF1)
00003a  2001              MOVS     r0,#1
00003c  0440              LSLS     r0,r0,#17
00003e  4204              TST      r4,r0
000040  d004              BEQ      |L20.76|
;;;1437   	{	
;;;1438   	    /* Ctrl Out */
;;;1439   		_DRVUSB_SET_EVENT_FLAG(INTSTS_EPTF1);
000042  491c              LDR      r1,|L20.180|
000044  6048              STR      r0,[r1,#4]
;;;1440   		UsbOutAck();
000046  f7fffffe          BL       UsbOutAck
00004a  e032              B        |L20.178|
                  |L20.76|
;;;1441   	}
;;;1442   	else if(u32INTSTS & INTSTS_EPTF2)
00004c  2001              MOVS     r0,#1
00004e  0480              LSLS     r0,r0,#18
000050  4204              TST      r4,r0
000052  d006              BEQ      |L20.98|
;;;1443   	{	
;;;1444   	    /* Bulk In */
;;;1445   		_DRVUSB_SET_EVENT_FLAG(INTSTS_EPTF2);
000054  4917              LDR      r1,|L20.180|
000056  6048              STR      r0,[r1,#4]
;;;1446   		g_u32OutToggle = u32STS;
000058  4817              LDR      r0,|L20.184|
00005a  6005              STR      r5,[r0,#0]  ; g_u32OutToggle
;;;1447   		UsbBulkInAck();
00005c  f7fffffe          BL       UsbBulkInAck
000060  e027              B        |L20.178|
                  |L20.98|
;;;1448   	}
;;;1449   	else if(u32INTSTS & INTSTS_EPTF3)
000062  2001              MOVS     r0,#1
000064  04c0              LSLS     r0,r0,#19
000066  4204              TST      r4,r0
000068  d020              BEQ      |L20.172|
;;;1450   	{	
;;;1451   	    /* Bulk Out */
;;;1452   		_DRVUSB_SET_EVENT_FLAG(INTSTS_EPTF3);
00006a  4912              LDR      r1,|L20.180|
00006c  6048              STR      r0,[r1,#4]
;;;1453   		if (g_u32OutToggle == (u32STS & STS3))
00006e  2007              MOVS     r0,#7
000070  0440              LSLS     r0,r0,#17
000072  4028              ANDS     r0,r0,r5
000074  4910              LDR      r1,|L20.184|
000076  6809              LDR      r1,[r1,#0]  ; g_u32OutToggle
000078  4288              CMP      r0,r1
00007a  d104              BNE      |L20.134|
;;;1454   		{
;;;1455   			_DRVUSB_TRIG_EP(3, MAX_PACKET_SIZE);
00007c  2040              MOVS     r0,#0x40
00007e  490d              LDR      r1,|L20.180|
000080  3140              ADDS     r1,r1,#0x40
000082  6148              STR      r0,[r1,#0x14]
000084  e015              B        |L20.178|
                  |L20.134|
;;;1456   		}
;;;1457   		else
;;;1458   		{
;;;1459   			if (UsbBulkOutAck())
000086  f7fffffe          BL       UsbBulkOutAck
00008a  2800              CMP      r0,#0
00008c  d005              BEQ      |L20.154|
;;;1460   				g_u32OutToggle = u32STS & STS3;
00008e  2007              MOVS     r0,#7
000090  0440              LSLS     r0,r0,#17
000092  4028              ANDS     r0,r0,r5
000094  4908              LDR      r1,|L20.184|
000096  6008              STR      r0,[r1,#0]  ; g_u32OutToggle
000098  e00b              B        |L20.178|
                  |L20.154|
;;;1461   			else
;;;1462   			{	
;;;1463   			    /* stall */
;;;1464   				g_bCBWInvalid = TRUE;
00009a  2001              MOVS     r0,#1
00009c  4907              LDR      r1,|L20.188|
00009e  6008              STR      r0,[r1,#0]  ; g_bCBWInvalid
;;;1465   				_DRVUSB_SET_CFGP(2, (CFGP_SSTALL | CFGP_CLRRDY));
0000a0  2003              MOVS     r0,#3
0000a2  4904              LDR      r1,|L20.180|
0000a4  3140              ADDS     r1,r1,#0x40
0000a6  60c8              STR      r0,[r1,#0xc]
;;;1466   				_DRVUSB_SET_CFGP(3, (CFGP_SSTALL | CFGP_CLRRDY));
0000a8  61c8              STR      r0,[r1,#0x1c]
0000aa  e002              B        |L20.178|
                  |L20.172|
;;;1467   			}
;;;1468   		}
;;;1469   	}
;;;1470   	else
;;;1471   	{	/* Unknow event */
;;;1472   		_DRVUSB_SET_EVENT_FLAG(INTSTS_USB); 
0000ac  2002              MOVS     r0,#2
0000ae  4901              LDR      r1,|L20.180|
0000b0  6048              STR      r0,[r1,#4]
                  |L20.178|
;;;1473   	}
;;;1474   }
0000b2  bd70              POP      {r4-r6,pc}
;;;1475   
                          ENDP

                  |L20.180|
                          DCD      0x40060000
                  |L20.184|
                          DCD      g_u32OutToggle
                  |L20.188|
                          DCD      g_bCBWInvalid

                          AREA ||i.UsbWrite||, CODE, READONLY, ALIGN=2

                  UsbWrite PROC
;;;1051   //======================================================
;;;1052   void UsbWrite(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1053   {
;;;1054   	uint32_t lba, len;
;;;1055   
;;;1056   	if (g_u32Length > MAX_PACKET_SIZE)
000002  4845              LDR      r0,|L21.280|
000004  6800              LDR      r0,[r0,#0]  ; g_u32Length
000006  2840              CMP      r0,#0x40
000008  d943              BLS      |L21.146|
;;;1057   	{
;;;1058   		if (*((__IO uint32_t *)(&USBD->EP[3].BUFSEG)) == BUF_BULK0)
00000a  4844              LDR      r0,|L21.284|
00000c  6d00              LDR      r0,[r0,#0x50]
00000e  2840              CMP      r0,#0x40
000010  d10c              BNE      |L21.44|
;;;1059   		{
;;;1060   			_DRVUSB_SET_EP_BUF(3, USB_SRAM_BASE + BUF_BULK1);
000012  2080              MOVS     r0,#0x80
000014  4941              LDR      r1,|L21.284|
000016  3140              ADDS     r1,r1,#0x40
000018  6108              STR      r0,[r1,#0x10]
;;;1061   			_DRVUSB_TRIG_EP(3, MAX_PACKET_SIZE);
00001a  2040              MOVS     r0,#0x40
00001c  6148              STR      r0,[r1,#0x14]
;;;1062   			my_memcpy((char *)g_u32Address, g_au8UsbBulk0, MAX_PACKET_SIZE);
00001e  2240              MOVS     r2,#0x40
000020  493f              LDR      r1,|L21.288|
000022  4840              LDR      r0,|L21.292|
000024  6800              LDR      r0,[r0,#0]  ; g_u32Address
000026  f7fffffe          BL       my_memcpy
00002a  e00b              B        |L21.68|
                  |L21.44|
;;;1063   		}
;;;1064   		else
;;;1065   		{
;;;1066   			_DRVUSB_SET_EP_BUF(3, USB_SRAM_BASE + BUF_BULK0);
00002c  2040              MOVS     r0,#0x40
00002e  493b              LDR      r1,|L21.284|
000030  3140              ADDS     r1,r1,#0x40
000032  6108              STR      r0,[r1,#0x10]
;;;1067   			_DRVUSB_TRIG_EP(3, MAX_PACKET_SIZE);
000034  6148              STR      r0,[r1,#0x14]
;;;1068   			my_memcpy((char *)g_u32Address, g_au8UsbBulk1, MAX_PACKET_SIZE);
000036  2240              MOVS     r2,#0x40
000038  4939              LDR      r1,|L21.288|
00003a  3140              ADDS     r1,r1,#0x40
00003c  4839              LDR      r0,|L21.292|
00003e  6800              LDR      r0,[r0,#0]  ; g_u32Address
000040  f7fffffe          BL       my_memcpy
                  |L21.68|
;;;1069   		}
;;;1070   				
;;;1071   		g_u32Address += MAX_PACKET_SIZE;
000044  4837              LDR      r0,|L21.292|
000046  6800              LDR      r0,[r0,#0]  ; g_u32Address
000048  3040              ADDS     r0,r0,#0x40
00004a  4936              LDR      r1,|L21.292|
00004c  6008              STR      r0,[r1,#0]  ; g_u32Address
;;;1072   		g_u32Length -= MAX_PACKET_SIZE;
00004e  4832              LDR      r0,|L21.280|
000050  6800              LDR      r0,[r0,#0]  ; g_u32Length
000052  3840              SUBS     r0,r0,#0x40
000054  4930              LDR      r1,|L21.280|
000056  6008              STR      r0,[r1,#0]  ; g_u32Length
;;;1073   		
;;;1074   		/* Buffer full. Writer it to storage first. */
;;;1075   		if (g_u32Address >= (STORAGE_DATA_BUF + STORAGE_BUFFER_SIZE))
000058  4832              LDR      r0,|L21.292|
00005a  6801              LDR      r1,[r0,#0]  ; g_u32Address
00005c  4832              LDR      r0,|L21.296|
00005e  4281              CMP      r1,r0
000060  d359              BCC      |L21.278|
;;;1076   		{
;;;1077   			if (g_sCBW.bCBWLUN==F_DATA_FLASH_LUN)
000062  4832              LDR      r0,|L21.300|
000064  7b40              LDRB     r0,[r0,#0xd]  ; g_sCBW
000066  4932              LDR      r1,|L21.304|
000068  7809              LDRB     r1,[r1,#0]  ; F_DATA_FLASH_LUN
00006a  4288              CMP      r0,r1
00006c  d106              BNE      |L21.124|
;;;1078   				DataFlashWrite(g_u32DataFlashStartAddr, STORAGE_BUFFER_SIZE, (uint32_t)STORAGE_DATA_BUF);
00006e  4a31              LDR      r2,|L21.308|
000070  2101              MOVS     r1,#1
000072  0249              LSLS     r1,r1,#9
000074  4830              LDR      r0,|L21.312|
000076  6800              LDR      r0,[r0,#0]  ; g_u32DataFlashStartAddr
000078  f7fffffe          BL       DataFlashWrite
                  |L21.124|
;;;1079   		    
;;;1080   		    g_u32Address = STORAGE_DATA_BUF;
00007c  482d              LDR      r0,|L21.308|
00007e  4929              LDR      r1,|L21.292|
000080  6008              STR      r0,[r1,#0]  ; g_u32Address
;;;1081   		    g_u32DataFlashStartAddr += STORAGE_BUFFER_SIZE;
000082  482d              LDR      r0,|L21.312|
000084  6800              LDR      r0,[r0,#0]  ; g_u32DataFlashStartAddr
000086  30ff              ADDS     r0,r0,#0xff
000088  30ff              ADDS     r0,r0,#0xff
00008a  3002              ADDS     r0,#2
00008c  492a              LDR      r1,|L21.312|
00008e  6008              STR      r0,[r1,#0]  ; g_u32DataFlashStartAddr
000090  e041              B        |L21.278|
                  |L21.146|
;;;1082   		}
;;;1083   	}
;;;1084   	else
;;;1085   	{
;;;1086   		if (*((__IO uint32_t *)(&USBD->EP[3].BUFSEG)) == BUF_BULK0)
000092  4822              LDR      r0,|L21.284|
000094  6d00              LDR      r0,[r0,#0x50]
000096  2840              CMP      r0,#0x40
000098  d107              BNE      |L21.170|
;;;1087   		{
;;;1088   			my_memcpy((char *)g_u32Address, g_au8UsbBulk0, g_u32Length);
00009a  481f              LDR      r0,|L21.280|
00009c  4920              LDR      r1,|L21.288|
00009e  6802              LDR      r2,[r0,#0]  ; g_u32Length
0000a0  4820              LDR      r0,|L21.292|
0000a2  6800              LDR      r0,[r0,#0]  ; g_u32Address
0000a4  f7fffffe          BL       my_memcpy
0000a8  e007              B        |L21.186|
                  |L21.170|
;;;1089   		}
;;;1090   		else
;;;1091   		{
;;;1092   			my_memcpy((char *)g_u32Address, g_au8UsbBulk1, g_u32Length);
0000aa  481b              LDR      r0,|L21.280|
0000ac  491c              LDR      r1,|L21.288|
0000ae  3140              ADDS     r1,r1,#0x40
0000b0  6802              LDR      r2,[r0,#0]  ; g_u32Length
0000b2  481c              LDR      r0,|L21.292|
0000b4  6800              LDR      r0,[r0,#0]  ; g_u32Address
0000b6  f7fffffe          BL       my_memcpy
                  |L21.186|
;;;1093   		}
;;;1094   		g_u32Address += g_u32Length;
0000ba  481a              LDR      r0,|L21.292|
0000bc  6800              LDR      r0,[r0,#0]  ; g_u32Address
0000be  4916              LDR      r1,|L21.280|
0000c0  6809              LDR      r1,[r1,#0]  ; g_u32Length
0000c2  1840              ADDS     r0,r0,r1
0000c4  4917              LDR      r1,|L21.292|
0000c6  6008              STR      r0,[r1,#0]  ; g_u32Address
;;;1095   		g_u32Length = 0;
0000c8  2000              MOVS     r0,#0
0000ca  4913              LDR      r1,|L21.280|
0000cc  6008              STR      r0,[r1,#0]  ; g_u32Length
;;;1096   
;;;1097   
;;;1098   		if (g_sCBW.u8OPCode == UFI_WRITE_10)
0000ce  4817              LDR      r0,|L21.300|
0000d0  7bc0              LDRB     r0,[r0,#0xf]  ; g_sCBW
0000d2  282a              CMP      r0,#0x2a
0000d4  d11a              BNE      |L21.268|
;;;1099   		{
;;;1100   			lba = get_be32(&g_sCBW.au8Data[0]);
0000d6  4815              LDR      r0,|L21.300|
0000d8  3011              ADDS     r0,r0,#0x11
0000da  f7fffffe          BL       get_be32
0000de  4604              MOV      r4,r0
;;;1101   			len = g_sCBW.dCBWDataTransferLength;
0000e0  4812              LDR      r0,|L21.300|
0000e2  6885              LDR      r5,[r0,#8]  ; g_sCBW
;;;1102   
;;;1103   			if (g_sCBW.bCBWLUN==F_DATA_FLASH_LUN)
0000e4  7b40              LDRB     r0,[r0,#0xd]  ; g_sCBW
0000e6  4912              LDR      r1,|L21.304|
0000e8  7809              LDRB     r1,[r1,#0]  ; F_DATA_FLASH_LUN
0000ea  4288              CMP      r0,r1
0000ec  d10e              BNE      |L21.268|
;;;1104   			{
;;;1105   			    len = lba * UDC_SECTOR_SIZE + g_sCBW.dCBWDataTransferLength - g_u32DataFlashStartAddr;
0000ee  0260              LSLS     r0,r4,#9
0000f0  490e              LDR      r1,|L21.300|
0000f2  6889              LDR      r1,[r1,#8]  ; g_sCBW
0000f4  1840              ADDS     r0,r0,r1
0000f6  4910              LDR      r1,|L21.312|
0000f8  6809              LDR      r1,[r1,#0]  ; g_u32DataFlashStartAddr
0000fa  1a45              SUBS     r5,r0,r1
;;;1106   			    if (len)
0000fc  2d00              CMP      r5,#0
0000fe  d005              BEQ      |L21.268|
;;;1107   			    {
;;;1108   				    DataFlashWrite(g_u32DataFlashStartAddr, len, (uint32_t)STORAGE_DATA_BUF);
000100  4a0c              LDR      r2,|L21.308|
000102  4629              MOV      r1,r5
000104  480c              LDR      r0,|L21.312|
000106  6800              LDR      r0,[r0,#0]  ; g_u32DataFlashStartAddr
000108  f7fffffe          BL       DataFlashWrite
                  |L21.268|
;;;1109   				}
;;;1110   		    }
;;;1111   		}
;;;1112   
;;;1113   		g_u8BulkState = BULK_IN;
00010c  2001              MOVS     r0,#1
00010e  490b              LDR      r1,|L21.316|
000110  7008              STRB     r0,[r1,#0]
;;;1114   		UsbBulkInAck ();
000112  f7fffffe          BL       UsbBulkInAck
                  |L21.278|
;;;1115   	}
;;;1116   }
000116  bd70              POP      {r4-r6,pc}
;;;1117   
                          ENDP

                  |L21.280|
                          DCD      g_u32Length
                  |L21.284|
                          DCD      0x40060000
                  |L21.288|
                          DCD      0x40060140
                  |L21.292|
                          DCD      g_u32Address
                  |L21.296|
                          DCD      Storage_Block+0x200
                  |L21.300|
                          DCD      g_sCBW
                  |L21.304|
                          DCD      F_DATA_FLASH_LUN
                  |L21.308|
                          DCD      Storage_Block
                  |L21.312|
                          DCD      g_u32DataFlashStartAddr
                  |L21.316|
                          DCD      g_u8BulkState

                          AREA ||i.get_be32||, CODE, READONLY, ALIGN=1

                  get_be32 PROC
;;;173    
;;;174    static __INLINE uint32_t get_be32(uint8_t *buf)
000000  4601              MOV      r1,r0
;;;175    {
;;;176    	return ((uint32_t) buf[0] << 24) | ((uint32_t) buf[1] << 16) |
000002  7808              LDRB     r0,[r1,#0]
000004  0600              LSLS     r0,r0,#24
000006  784a              LDRB     r2,[r1,#1]
000008  0412              LSLS     r2,r2,#16
00000a  4310              ORRS     r0,r0,r2
00000c  788a              LDRB     r2,[r1,#2]
00000e  0212              LSLS     r2,r2,#8
000010  4310              ORRS     r0,r0,r2
000012  78ca              LDRB     r2,[r1,#3]
000014  4310              ORRS     r0,r0,r2
;;;177    			((uint32_t) buf[2] << 8) | ((uint32_t) buf[3]);
;;;178    }
000016  4770              BX       lr
;;;179    
                          ENDP


                          AREA ||i.my_memcpy||, CODE, READONLY, ALIGN=1

                  my_memcpy PROC
;;;188    
;;;189    void my_memcpy(void *dest, void *src, int32_t size)
000000  b510              PUSH     {r4,lr}
;;;190    {
000002  4603              MOV      r3,r0
;;;191        int32_t i;
;;;192    
;;;193        for (i = 0; i < size; i++)
000004  2000              MOVS     r0,#0
000006  e002              B        |L23.14|
                  |L23.8|
;;;194           *((uint8_t *)dest + i) = *((uint8_t *)src + i);
000008  5c0c              LDRB     r4,[r1,r0]
00000a  541c              STRB     r4,[r3,r0]
00000c  1c40              ADDS     r0,r0,#1              ;193
                  |L23.14|
00000e  4290              CMP      r0,r2                 ;193
000010  dbfa              BLT      |L23.8|
;;;195    }
000012  bd10              POP      {r4,pc}
;;;196    
                          ENDP


                          AREA ||i.udcFlashInit||, CODE, READONLY, ALIGN=2

                  udcFlashInit PROC
;;;1570   
;;;1571   uint8_t udcFlashInit(void)
000000  b500              PUSH     {lr}
;;;1572   {
;;;1573       F_DATA_FLASH_LUN = MassLUN;
000002  4809              LDR      r0,|L24.40|
000004  7800              LDRB     r0,[r0,#0]  ; MassLUN
000006  4909              LDR      r1,|L24.44|
000008  7008              STRB     r0,[r1,#0]
;;;1574       MassLUN++;
00000a  4807              LDR      r0,|L24.40|
00000c  7800              LDRB     r0,[r0,#0]  ; MassLUN
00000e  1c40              ADDS     r0,r0,#1
000010  4905              LDR      r1,|L24.40|
000012  7008              STRB     r0,[r1,#0]
;;;1575       
;;;1576   	if (!Flash_Identify(F_DATA_FLASH_LUN))
000014  4805              LDR      r0,|L24.44|
000016  7800              LDRB     r0,[r0,#0]  ; F_DATA_FLASH_LUN
000018  f7fffffe          BL       Flash_Identify
00001c  2800              CMP      r0,#0
00001e  d100              BNE      |L24.34|
                  |L24.32|
;;;1577           return 0;
;;;1578       return 1;
;;;1579   }
000020  bd00              POP      {pc}
                  |L24.34|
000022  2001              MOVS     r0,#1                 ;1578
000024  e7fc              B        |L24.32|
;;;1580   
                          ENDP

000026  0000              DCW      0x0000
                  |L24.40|
                          DCD      MassLUN
                  |L24.44|
                          DCD      F_DATA_FLASH_LUN

                          AREA ||i.udcInit||, CODE, READONLY, ALIGN=2

                  udcInit PROC
;;;1501   //======================================================
;;;1502   void udcInit(void)
000000  b510              PUSH     {r4,lr}
;;;1503   {
;;;1504       int32_t temp;
;;;1505   
;;;1506       /* Enable PHY to send bus reset event */
;;;1507       _DRVUSB_ENABLE_USB();
000002  207d              MOVS     r0,#0x7d
000004  0100              LSLS     r0,r0,#4
000006  4931              LDR      r1,|L25.204|
000008  6108              STR      r0,[r1,#0x10]
;;;1508   
;;;1509   
;;;1510       _DRVUSB_ENABLE_SE0();
00000a  4830              LDR      r0,|L25.204|
00000c  3080              ADDS     r0,r0,#0x80
00000e  6900              LDR      r0,[r0,#0x10]
000010  0840              LSRS     r0,r0,#1
000012  0040              LSLS     r0,r0,#1
000014  1c40              ADDS     r0,r0,#1
000016  492d              LDR      r1,|L25.204|
000018  3180              ADDS     r1,r1,#0x80
00001a  6108              STR      r0,[r1,#0x10]
;;;1511       RoughDelay(1000);
00001c  207d              MOVS     r0,#0x7d
00001e  00c0              LSLS     r0,r0,#3
000020  f7fffffe          BL       RoughDelay
;;;1512       _DRVUSB_DISABLE_SE0();
000024  4829              LDR      r0,|L25.204|
000026  3080              ADDS     r0,r0,#0x80
000028  6900              LDR      r0,[r0,#0x10]
00002a  0840              LSRS     r0,r0,#1
00002c  0040              LSLS     r0,r0,#1
00002e  4927              LDR      r1,|L25.204|
000030  3180              ADDS     r1,r1,#0x80
000032  6108              STR      r0,[r1,#0x10]
;;;1513       RoughDelay(1000);
000034  207d              MOVS     r0,#0x7d
000036  00c0              LSLS     r0,r0,#3
000038  f7fffffe          BL       RoughDelay
;;;1514   
;;;1515       /* Disable PHY */
;;;1516       _DRVUSB_DISABLE_USB();
00003c  203b              MOVS     r0,#0x3b
00003e  0140              LSLS     r0,r0,#5
000040  4922              LDR      r1,|L25.204|
000042  6108              STR      r0,[r1,#0x10]
;;;1517   
;;;1518   
;;;1519       /* Enable USB device clock */
;;;1520       SYSCLK->APBCLK.USBD_EN = 1;
000044  4822              LDR      r0,|L25.208|
000046  6880              LDR      r0,[r0,#8]
000048  2101              MOVS     r1,#1
00004a  06c9              LSLS     r1,r1,#27
00004c  4388              BICS     r0,r0,r1
00004e  1840              ADDS     r0,r0,r1
000050  491f              LDR      r1,|L25.208|
000052  6088              STR      r0,[r1,#8]
;;;1521   
;;;1522       /* Reset IP */	
;;;1523       SYS->IPRSTC2.USBD_RST = 1;
000054  2005              MOVS     r0,#5
000056  0700              LSLS     r0,r0,#28
000058  68c0              LDR      r0,[r0,#0xc]
00005a  0489              LSLS     r1,r1,#18
00005c  4388              BICS     r0,r0,r1
00005e  1840              ADDS     r0,r0,r1
000060  2105              MOVS     r1,#5
000062  0709              LSLS     r1,r1,#28
000064  60c8              STR      r0,[r1,#0xc]
;;;1524       SYS->IPRSTC2.USBD_RST = 0;	
000066  4608              MOV      r0,r1
000068  68c0              LDR      r0,[r0,#0xc]
00006a  2101              MOVS     r1,#1
00006c  06c9              LSLS     r1,r1,#27
00006e  4388              BICS     r0,r0,r1
000070  2105              MOVS     r1,#5
000072  0709              LSLS     r1,r1,#28
000074  60c8              STR      r0,[r1,#0xc]
;;;1525   
;;;1526       /* Select USB divider source */
;;;1527       SYSCLK->CLKDIV.USB_N = 0;
000076  4816              LDR      r0,|L25.208|
000078  6980              LDR      r0,[r0,#0x18]
00007a  21f0              MOVS     r1,#0xf0
00007c  4388              BICS     r0,r0,r1
00007e  4914              LDR      r1,|L25.208|
000080  6188              STR      r0,[r1,#0x18]
;;;1528   
;;;1529        _DRVUSB_ENABLE_USB();
000082  207d              MOVS     r0,#0x7d
000084  0100              LSLS     r0,r0,#4
000086  4911              LDR      r1,|L25.204|
000088  6108              STR      r0,[r1,#0x10]
;;;1530      _DRVUSB_ENABLE_SE0();
00008a  4810              LDR      r0,|L25.204|
00008c  3080              ADDS     r0,r0,#0x80
00008e  6900              LDR      r0,[r0,#0x10]
000090  0840              LSRS     r0,r0,#1
000092  0040              LSLS     r0,r0,#1
000094  1c40              ADDS     r0,r0,#1
000096  490d              LDR      r1,|L25.204|
000098  3180              ADDS     r1,r1,#0x80
00009a  6108              STR      r0,[r1,#0x10]
;;;1531       temp = 0x100;
00009c  158c              ASRS     r4,r1,#22
;;;1532       while(temp--);   
00009e  bf00              NOP      
                  |L25.160|
0000a0  4620              MOV      r0,r4
0000a2  1e64              SUBS     r4,r4,#1
0000a4  2800              CMP      r0,#0
0000a6  d1fb              BNE      |L25.160|
;;;1533   	_DRVUSB_DISABLE_SE0();
0000a8  4808              LDR      r0,|L25.204|
0000aa  3080              ADDS     r0,r0,#0x80
0000ac  6900              LDR      r0,[r0,#0x10]
0000ae  0840              LSRS     r0,r0,#1
0000b0  0040              LSLS     r0,r0,#1
0000b2  4906              LDR      r1,|L25.204|
0000b4  3180              ADDS     r1,r1,#0x80
0000b6  6108              STR      r0,[r1,#0x10]
;;;1534   
;;;1535   	g_u8UsbState = USB_STATE_DETACHED;
0000b8  2000              MOVS     r0,#0
0000ba  4906              LDR      r1,|L25.212|
0000bc  7008              STRB     r0,[r1,#0]
;;;1536   	_DRVUSB_TRIG_EP(1, 0x08);
0000be  2008              MOVS     r0,#8
0000c0  4902              LDR      r1,|L25.204|
0000c2  6348              STR      r0,[r1,#0x34]
;;;1537   	UsbFdt();
0000c4  f7fffffe          BL       UsbFdt
;;;1538   }
0000c8  bd10              POP      {r4,pc}
;;;1539   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L25.204|
                          DCD      0x40060000
                  |L25.208|
                          DCD      0x50000200
                  |L25.212|
                          DCD      g_u8UsbState

                          AREA ||i.udcMassBulk||, CODE, READONLY, ALIGN=1

                  udcMassBulk PROC
;;;1540   
;;;1541   void udcMassBulk(void)
000000  e001              B        |L26.6|
                  |L26.2|
;;;1542   {
;;;1543       /* Handler the USB ISR by polling */
;;;1544   	while(1)
;;;1545   	{
;;;1546   		UsbIsr();
000002  f7fffffe          BL       UsbIsr
                  |L26.6|
000006  e7fc              B        |L26.2|
;;;1547   	}
;;;1548   }
;;;1549   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_sCBW
                          %        32
                  g_sCSW
                          %        16
                  MassBlock
                          %        48
                  Storage_Block
                          %        512

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  MassDeviceDescriptor
000000  12011001          DCB      0x12,0x01,0x10,0x01
000004  00000040          DCB      0x00,0x00,0x00,0x40
000008  16041e50          DCB      0x16,0x04,0x1e,0x50
00000c  00000102          DCB      0x00,0x00,0x01,0x02
000010  0101              DCB      0x01,0x01
                  MassConfigurationBlock
000012  0902              DCB      0x09,0x02
000014  20000101          DCB      0x20,0x00,0x01,0x01
000018  00c03209          DCB      0x00,0xc0,0x32,0x09
00001c  04000002          DCB      0x04,0x00,0x00,0x02
000020  08055000          DCB      0x08,0x05,0x50,0x00
000024  07058202          DCB      0x07,0x05,0x82,0x02
000028  40000007          DCB      0x40,0x00,0x00,0x07
00002c  05030240          DCB      0x05,0x03,0x02,0x40
000030  0000              DCB      0x00,0x00
                  MassStringDescriptor0
000032  0403              DCB      0x04,0x03
000034  0904              DCB      0x09,0x04
                  MassStringDescriptor1
000036  1003              DCB      0x10,0x03
000038  4e007500          DCB      0x4e,0x00,0x75,0x00
00003c  76006f00          DCB      0x76,0x00,0x6f,0x00
000040  74006f00          DCB      0x74,0x00,0x6f,0x00
000044  6e00              DCB      0x6e,0x00
                  InquiryID
000046  0080              DCB      0x00,0x80
000048  00001f00          DCB      0x00,0x00,0x1f,0x00
00004c  00004e75          DCB      0x00,0x00,0x4e,0x75
000050  766f746f          DCB      0x76,0x6f,0x74,0x6f
000054  6e203130          DCB      0x6e,0x20,0x31,0x30
000058  30204d61          DCB      0x30,0x20,0x4d,0x61
00005c  73732053          DCB      0x73,0x73,0x20,0x53
000060  746f7261          DCB      0x74,0x6f,0x72,0x61
000064  6765312e          DCB      0x67,0x65,0x31,0x2e
000068  3030              DCB      0x30,0x30

                          AREA ||.data||, DATA, ALIGN=2

                  gTotalSectors
                          DCD      0x00000000
                  g_dataFlashTotalSectors
                          DCD      0x00000000
                  MassLUN
000008  00                DCB      0x00
                  F_DATA_FLASH_LUN
000009  ff                DCB      0xff
                  preventflag
00000a  0000              DCB      0x00,0x00
                  udcOnLine
                          DCD      0x00000000
                  ModePage_01
000010  010a0003          DCB      0x01,0x0a,0x00,0x03
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  03000000          DCB      0x03,0x00,0x00,0x00
                  ModePage_05
00001c  051e1388          DCB      0x05,0x1e,0x13,0x88
000020  08200200          DCB      0x08,0x20,0x02,0x00
000024  01f40000          DCB      0x01,0xf4,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000005          DCB      0x00,0x00,0x00,0x05
000030  1e000000          DCB      0x1e,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  01680000          DCB      0x01,0x68,0x00,0x00
                  ModePage_1B
00003c  1b0a0001          DCB      0x1b,0x0a,0x00,0x01
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  00000000          DCB      0x00,0x00,0x00,0x00
                  ModePage_1C
000048  1c060005          DCB      0x1c,0x06,0x00,0x05
00004c  00000000          DCB      0x00,0x00,0x00,0x00
                  g_u8UsbState
000050  00                DCB      0x00
                  g_u8Address
000051  00                DCB      0x00
                  g_u8Config
000052  00                DCB      0x00
                  g_u8Flag
000053  00                DCB      0x00
                  g_u8BulkState
000054  00                DCB      0x00
                  g_au8SenseKey
000055  000000            DCB      0x00,0x00,0x00
000058  00000000          DCB      0x00,0x00,0x00,0x00
                  g_u32DataFlashStartAddr
                          DCD      0x00000000
                  g_u32Address
                          DCD      0x00000000
                  g_u32Length
                          DCD      0x00000000
                  g_u32LbaAddress
                          DCD      0x00000000
                  g_u32BytesInStorageBuf
                          DCD      0x00000000
                  g_u32OutToggle
                          DCD      0x00000000
                  g_u8Size
000074  00000000          DCB      0x00,0x00,0x00,0x00
                  g_bCBWInvalid
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L167.16|
00000e  461d              MOV      r5,r3
                  |L167.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

