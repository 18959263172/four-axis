; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvadc.o --depend=.\obj\drvadc.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvadc.crf ..\BSP_Lib\Src\Driver\DrvADC.c]
                          THUMB

                          AREA ||i.ADC_IRQHandler||, CODE, READONLY, ALIGN=2

                  ADC_IRQHandler PROC
;;;489    /*---------------------------------------------------------------------------------------------------------*/
;;;490    void ADC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;491    {
;;;492    	if(ADC->ADSR.ADF==1)
000002  4821              LDR      r0,|L1.136|
000004  6b00              LDR      r0,[r0,#0x30]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
00000a  2801              CMP      r0,#1
00000c  d10f              BNE      |L1.46|
;;;493    	{
;;;494    		if(g_ptADCCallBack)
00000e  481f              LDR      r0,|L1.140|
000010  6800              LDR      r0,[r0,#0]  ; g_ptADCCallBack
000012  2800              CMP      r0,#0
000014  d004              BEQ      |L1.32|
;;;495    			g_ptADCCallBack(g_pu32UserData[0]);
000016  491e              LDR      r1,|L1.144|
000018  6808              LDR      r0,[r1,#0]  ; g_pu32UserData
00001a  491c              LDR      r1,|L1.140|
00001c  6809              LDR      r1,[r1,#0]  ; g_ptADCCallBack
00001e  4788              BLX      r1
                  |L1.32|
;;;496    		
;;;497    		/* clear the A/D conversion flag */
;;;498    		/* "ADC->ADSR.ADF = 1;" is not recommended. It may clear CMPF0 and CMPF1. */
;;;499    		outpw(ADC_ADSR, (inpw(ADC_ADSR)&(~0x7))|0x1);
000020  4819              LDR      r0,|L1.136|
000022  6b00              LDR      r0,[r0,#0x30]
000024  08c0              LSRS     r0,r0,#3
000026  00c0              LSLS     r0,r0,#3
000028  1c40              ADDS     r0,r0,#1
00002a  4917              LDR      r1,|L1.136|
00002c  6308              STR      r0,[r1,#0x30]
                  |L1.46|
;;;500    	}
;;;501    	
;;;502    	if(ADC->ADSR.CMPF0==1)
00002e  4816              LDR      r0,|L1.136|
000030  6b00              LDR      r0,[r0,#0x30]
000032  0780              LSLS     r0,r0,#30
000034  0fc0              LSRS     r0,r0,#31
000036  2801              CMP      r0,#1
000038  d10f              BNE      |L1.90|
;;;503    	{
;;;504    		if(g_ptADCMP0CallBack)
00003a  4816              LDR      r0,|L1.148|
00003c  6800              LDR      r0,[r0,#0]  ; g_ptADCMP0CallBack
00003e  2800              CMP      r0,#0
000040  d004              BEQ      |L1.76|
;;;505    			g_ptADCMP0CallBack(g_pu32UserData[1]);
000042  4913              LDR      r1,|L1.144|
000044  6848              LDR      r0,[r1,#4]  ; g_pu32UserData
000046  4913              LDR      r1,|L1.148|
000048  6809              LDR      r1,[r1,#0]  ; g_ptADCMP0CallBack
00004a  4788              BLX      r1
                  |L1.76|
;;;506    		
;;;507    		/* clear the A/D compare flag 0 */
;;;508    		/* "ADC->ADSR.CMPF0 = 1;" is not recommended. It may clear ADF and CMPF1. */
;;;509    		outpw(ADC_ADSR, (inpw(ADC_ADSR)&(~0x7))|0x2);
00004c  480e              LDR      r0,|L1.136|
00004e  6b00              LDR      r0,[r0,#0x30]
000050  08c0              LSRS     r0,r0,#3
000052  00c0              LSLS     r0,r0,#3
000054  1c80              ADDS     r0,r0,#2
000056  490c              LDR      r1,|L1.136|
000058  6308              STR      r0,[r1,#0x30]
                  |L1.90|
;;;510    	}
;;;511    	
;;;512    	if(ADC->ADSR.CMPF1==1)
00005a  480b              LDR      r0,|L1.136|
00005c  6b00              LDR      r0,[r0,#0x30]
00005e  0740              LSLS     r0,r0,#29
000060  0fc0              LSRS     r0,r0,#31
000062  2801              CMP      r0,#1
000064  d10f              BNE      |L1.134|
;;;513    	{
;;;514    		if(g_ptADCMP1CallBack)
000066  480c              LDR      r0,|L1.152|
000068  6800              LDR      r0,[r0,#0]  ; g_ptADCMP1CallBack
00006a  2800              CMP      r0,#0
00006c  d004              BEQ      |L1.120|
;;;515    			g_ptADCMP1CallBack(g_pu32UserData[2]);
00006e  4908              LDR      r1,|L1.144|
000070  6888              LDR      r0,[r1,#8]  ; g_pu32UserData
000072  4909              LDR      r1,|L1.152|
000074  6809              LDR      r1,[r1,#0]  ; g_ptADCMP1CallBack
000076  4788              BLX      r1
                  |L1.120|
;;;516    		
;;;517    		/* clear the A/D compare flag 1 */
;;;518    		/* "ADC->ADSR.CMPF1 = 1;" is not recommended. It may clear ADF and CMPF0. */
;;;519    		outpw(ADC_ADSR, (inpw(ADC_ADSR)&(~0x7))|0x4);
000078  4803              LDR      r0,|L1.136|
00007a  6b00              LDR      r0,[r0,#0x30]
00007c  08c0              LSRS     r0,r0,#3
00007e  00c0              LSLS     r0,r0,#3
000080  1d00              ADDS     r0,r0,#4
000082  4901              LDR      r1,|L1.136|
000084  6308              STR      r0,[r1,#0x30]
                  |L1.134|
;;;520    	}
;;;521    }
000086  bd10              POP      {r4,pc}
;;;522    
                          ENDP

                  |L1.136|
                          DCD      0x400e0000
                  |L1.140|
                          DCD      g_ptADCCallBack
                  |L1.144|
                          DCD      g_pu32UserData
                  |L1.148|
                          DCD      g_ptADCMP0CallBack
                  |L1.152|
                          DCD      g_ptADCMP1CallBack

                          AREA ||i.DrvADC_Close||, CODE, READONLY, ALIGN=2

                  DrvADC_Close PROC
;;;159    /*---------------------------------------------------------------------------------------------------------*/
;;;160    void DrvADC_Close(void)
000000  480d              LDR      r0,|L2.56|
;;;161    {     
;;;162    	ADC->ADCR.ADEN = 0;                /* ADC disable */
000002  6a00              LDR      r0,[r0,#0x20]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  490b              LDR      r1,|L2.56|
00000a  6208              STR      r0,[r1,#0x20]
;;;163    	SYSCLK->APBCLK.ADC_EN = 0;         /* ADC engine clock disable */
00000c  480b              LDR      r0,|L2.60|
00000e  6880              LDR      r0,[r0,#8]
000010  2101              MOVS     r1,#1
000012  0709              LSLS     r1,r1,#28
000014  4388              BICS     r0,r0,r1
000016  4909              LDR      r1,|L2.60|
000018  6088              STR      r0,[r1,#8]
;;;164    	ADC->ADCR.ADIE = 0;
00001a  4807              LDR      r0,|L2.56|
00001c  6a00              LDR      r0,[r0,#0x20]
00001e  2102              MOVS     r1,#2
000020  4388              BICS     r0,r0,r1
000022  4905              LDR      r1,|L2.56|
000024  6208              STR      r0,[r1,#0x20]
;;;165    	NVIC_DisableIRQ(ADC_IRQn);
000026  bf00              NOP      
000028  201d              MOVS     r0,#0x1d
00002a  2101              MOVS     r1,#1
00002c  4081              LSLS     r1,r1,r0
00002e  4804              LDR      r0,|L2.64|
000030  6001              STR      r1,[r0,#0]
000032  bf00              NOP      
;;;166    }
000034  4770              BX       lr
;;;167    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      0x400e0000
                  |L2.60|
                          DCD      0x50000200
                  |L2.64|
                          DCD      0xe000e180

                          AREA ||i.DrvADC_ConfigADCChannel7||, CODE, READONLY, ALIGN=2

                  DrvADC_ConfigADCChannel7 PROC
;;;273    /*--------------------------------------------------------------------------------------------------------------------*/
;;;274    void DrvADC_ConfigADCChannel7(E_ADC_CH7_SRC Ch7Src)
000000  490b              LDR      r1,|L3.48|
;;;275    {
;;;276    	ADC->ADCHER.PRESEL = Ch7Src;
000002  6a49              LDR      r1,[r1,#0x24]
000004  2203              MOVS     r2,#3
000006  0212              LSLS     r2,r2,#8
000008  4391              BICS     r1,r1,r2
00000a  0202              LSLS     r2,r0,#8
00000c  2303              MOVS     r3,#3
00000e  021b              LSLS     r3,r3,#8
000010  401a              ANDS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4a06              LDR      r2,|L3.48|
000016  6251              STR      r1,[r2,#0x24]
;;;277    	if(Ch7Src==INTERNAL_TEMPERATURE_SENSOR)
000018  2802              CMP      r0,#2
00001a  d104              BNE      |L3.38|
;;;278    		SYS->TEMPCR = 1;   /* Temperature sensor enable */
00001c  2101              MOVS     r1,#1
00001e  2205              MOVS     r2,#5
000020  0712              LSLS     r2,r2,#28
000022  61d1              STR      r1,[r2,#0x1c]
000024  e003              B        |L3.46|
                  |L3.38|
;;;279    	else
;;;280    		SYS->TEMPCR = 0;   /* Temperature sensor disable */
000026  2100              MOVS     r1,#0
000028  2205              MOVS     r2,#5
00002a  0712              LSLS     r2,r2,#28
00002c  61d1              STR      r1,[r2,#0x1c]
                  |L3.46|
;;;281    }
00002e  4770              BX       lr
;;;282    
                          ENDP

                  |L3.48|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DiffModeOutputFormat||, CODE, READONLY, ALIGN=2

                  DrvADC_DiffModeOutputFormat PROC
;;;949    /*-----------------------------------------------------------------------------------------------------------*/
;;;950    void DrvADC_DiffModeOutputFormat (E_ADC_DIFF_MODE_OUTPUT_FORMAT OutputFormat)
000000  4905              LDR      r1,|L4.24|
;;;951    {
;;;952    	ADC->ADCR.DMOF = OutputFormat;
000002  6a09              LDR      r1,[r1,#0x20]
000004  0049              LSLS     r1,r1,#1
000006  0849              LSRS     r1,r1,#1
000008  07c2              LSLS     r2,r0,#31
00000a  0fd2              LSRS     r2,r2,#31
00000c  07d2              LSLS     r2,r2,#31
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L4.24|
000012  6211              STR      r1,[r2,#0x20]
;;;953    }
000014  4770              BX       lr
;;;954    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableADCCmp0||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableADCCmp0 PROC
;;;820    /*-----------------------------------------------------------------------------------------------------------*/
;;;821    void DrvADC_DisableADCCmp0(void)
000000  4803              LDR      r0,|L5.16|
;;;822    {
;;;823    	ADC->ADCMPR[0].CMPEN = 0;
000002  6a80              LDR      r0,[r0,#0x28]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  4901              LDR      r1,|L5.16|
00000a  6288              STR      r0,[r1,#0x28]
;;;824    }
00000c  4770              BX       lr
;;;825    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableADCCmp0Int||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableADCCmp0Int PROC
;;;432    /*---------------------------------------------------------------------------------------------------------*/
;;;433    void DrvADC_DisableADCCmp0Int(void)
000000  4803              LDR      r0,|L6.16|
;;;434    {
;;;435    	ADC->ADCMPR[0].CMPIE = 0;
000002  6a80              LDR      r0,[r0,#0x28]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L6.16|
00000a  6288              STR      r0,[r1,#0x28]
;;;436    }
00000c  4770              BX       lr
;;;437    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableADCCmp1||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableADCCmp1 PROC
;;;875    /*-----------------------------------------------------------------------------------------------------------*/
;;;876    void DrvADC_DisableADCCmp1(void)
000000  4803              LDR      r0,|L7.16|
;;;877    {
;;;878    	ADC->ADCMPR[1].CMPEN = 0;
000002  6ac0              LDR      r0,[r0,#0x2c]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  4901              LDR      r1,|L7.16|
00000a  62c8              STR      r0,[r1,#0x2c]
;;;879    }
00000c  4770              BX       lr
;;;880    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableADCCmp1Int||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableADCCmp1Int PROC
;;;471    /*---------------------------------------------------------------------------------------------------------*/
;;;472    void DrvADC_DisableADCCmp1Int(void)
000000  4803              LDR      r0,|L8.16|
;;;473    {
;;;474    	ADC->ADCMPR[1].CMPIE = 0;
000002  6ac0              LDR      r0,[r0,#0x2c]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L8.16|
00000a  62c8              STR      r0,[r1,#0x2c]
;;;475    }
00000c  4770              BX       lr
;;;476    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableADCInt||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableADCInt PROC
;;;393    /*---------------------------------------------------------------------------------------------------------*/
;;;394    void DrvADC_DisableADCInt(void)
000000  4803              LDR      r0,|L9.16|
;;;395    {
;;;396    	ADC->ADCR.ADIE = 0;
000002  6a00              LDR      r0,[r0,#0x20]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L9.16|
00000a  6208              STR      r0,[r1,#0x20]
;;;397    }
00000c  4770              BX       lr
;;;398    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableExtTrigger||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableExtTrigger PROC
;;;588    /*---------------------------------------------------------------------------------------------------------*/
;;;589    void DrvADC_DisableExtTrigger(void)
000000  4803              LDR      r0,|L10.16|
;;;590    {
;;;591    	ADC->ADCR.TRGEN = 0;
000002  6a00              LDR      r0,[r0,#0x20]
000004  21ff              MOVS     r1,#0xff
000006  3101              ADDS     r1,#1
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L10.16|
00000c  6208              STR      r0,[r1,#0x20]
;;;592    }
00000e  4770              BX       lr
;;;593    
                          ENDP

                  |L10.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisablePDMA||, CODE, READONLY, ALIGN=2

                  DrvADC_DisablePDMA PROC
;;;715    /*-----------------------------------------------------------------------------------------------------------*/
;;;716    void DrvADC_DisablePDMA(void)
000000  4803              LDR      r0,|L11.16|
;;;717    {
;;;718    	ADC->ADCR.PTEN = 0;
000002  6a00              LDR      r0,[r0,#0x20]
000004  2101              MOVS     r1,#1
000006  0249              LSLS     r1,r1,#9
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L11.16|
00000c  6208              STR      r0,[r1,#0x20]
;;;719    }
00000e  4770              BX       lr
;;;720    
                          ENDP

                  |L11.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableSelfCalibration||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableSelfCalibration PROC
;;;930    /*-----------------------------------------------------------------------------------------------------------*/
;;;931    void DrvADC_DisableSelfCalibration(void)
000000  4803              LDR      r0,|L12.16|
;;;932    {
;;;933    	ADC->ADCALR.CALEN = 0;
000002  6b40              LDR      r0,[r0,#0x34]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  4901              LDR      r1,|L12.16|
00000a  6348              STR      r0,[r1,#0x34]
;;;934    }
00000c  4770              BX       lr
;;;935    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnableADCCmp0||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableADCCmp0 PROC
;;;788    /*-----------------------------------------------------------------------------------------------------------*/
;;;789    int32_t DrvADC_EnableADCCmp0(uint8_t u8CmpChannelNum, E_ADC_CMP_CONDITION CmpCondition, uint16_t u16CmpData, uint8_t u8CmpMatchCount)
000000  b570              PUSH     {r4-r6,lr}
;;;790    {
000002  4604              MOV      r4,r0
;;;791    	if(u8CmpChannelNum>7)
000004  2c07              CMP      r4,#7
000006  dd01              BLE      |L13.12|
;;;792    		return E_DRVADC_ARGUMENT;
000008  481e              LDR      r0,|L13.132|
                  |L13.10|
;;;793    	
;;;794    	if(u16CmpData>0x0FFF)
;;;795    		return E_DRVADC_ARGUMENT;
;;;796    	
;;;797    	if(u8CmpMatchCount>0x0F)
;;;798    		return E_DRVADC_ARGUMENT;
;;;799    	
;;;800    	ADC->ADCMPR[0].CMPCH = u8CmpChannelNum;
;;;801    	ADC->ADCMPR[0].CMPCOND = CmpCondition;
;;;802    	ADC->ADCMPR[0].CMPD = u16CmpData;
;;;803    	ADC->ADCMPR[0].CMPMATCNT = u8CmpMatchCount;
;;;804    	ADC->ADCMPR[0].CMPEN = 1;
;;;805    	
;;;806    	return E_SUCCESS;
;;;807    }
00000a  bd70              POP      {r4-r6,pc}
                  |L13.12|
00000c  481e              LDR      r0,|L13.136|
00000e  4282              CMP      r2,r0                 ;794
000010  dd01              BLE      |L13.22|
000012  481c              LDR      r0,|L13.132|
000014  e7f9              B        |L13.10|
                  |L13.22|
000016  2b0f              CMP      r3,#0xf               ;797
000018  dd01              BLE      |L13.30|
00001a  481a              LDR      r0,|L13.132|
00001c  e7f5              B        |L13.10|
                  |L13.30|
00001e  481b              LDR      r0,|L13.140|
000020  6a80              LDR      r0,[r0,#0x28]         ;800
000022  2538              MOVS     r5,#0x38              ;800
000024  43a8              BICS     r0,r0,r5              ;800
000026  00e5              LSLS     r5,r4,#3              ;800
000028  2638              MOVS     r6,#0x38              ;800
00002a  4035              ANDS     r5,r5,r6              ;800
00002c  4328              ORRS     r0,r0,r5              ;800
00002e  4d17              LDR      r5,|L13.140|
000030  62a8              STR      r0,[r5,#0x28]         ;800
000032  4628              MOV      r0,r5                 ;801
000034  6a80              LDR      r0,[r0,#0x28]         ;801
000036  2504              MOVS     r5,#4                 ;801
000038  43a8              BICS     r0,r0,r5              ;801
00003a  008d              LSLS     r5,r1,#2              ;801
00003c  2604              MOVS     r6,#4                 ;801
00003e  4035              ANDS     r5,r5,r6              ;801
000040  4328              ORRS     r0,r0,r5              ;801
000042  4d12              LDR      r5,|L13.140|
000044  62a8              STR      r0,[r5,#0x28]         ;801
000046  4628              MOV      r0,r5                 ;802
000048  6a80              LDR      r0,[r0,#0x28]         ;802
00004a  4d11              LDR      r5,|L13.144|
00004c  4028              ANDS     r0,r0,r5              ;802
00004e  0415              LSLS     r5,r2,#16             ;802
000050  4e0f              LDR      r6,|L13.144|
000052  43f6              MVNS     r6,r6                 ;802
000054  4035              ANDS     r5,r5,r6              ;802
000056  4328              ORRS     r0,r0,r5              ;802
000058  4d0c              LDR      r5,|L13.140|
00005a  62a8              STR      r0,[r5,#0x28]         ;802
00005c  4628              MOV      r0,r5                 ;803
00005e  6a80              LDR      r0,[r0,#0x28]         ;803
000060  250f              MOVS     r5,#0xf               ;803
000062  022d              LSLS     r5,r5,#8              ;803
000064  43a8              BICS     r0,r0,r5              ;803
000066  021d              LSLS     r5,r3,#8              ;803
000068  260f              MOVS     r6,#0xf               ;803
00006a  0236              LSLS     r6,r6,#8              ;803
00006c  4035              ANDS     r5,r5,r6              ;803
00006e  4328              ORRS     r0,r0,r5              ;803
000070  4d06              LDR      r5,|L13.140|
000072  62a8              STR      r0,[r5,#0x28]         ;803
000074  4628              MOV      r0,r5                 ;804
000076  6a80              LDR      r0,[r0,#0x28]         ;804
000078  0840              LSRS     r0,r0,#1              ;804
00007a  0040              LSLS     r0,r0,#1              ;804
00007c  1c40              ADDS     r0,r0,#1              ;804
00007e  62a8              STR      r0,[r5,#0x28]         ;804
000080  2000              MOVS     r0,#0                 ;806
000082  e7c2              B        |L13.10|
;;;808    
                          ENDP

                  |L13.132|
                          DCD      0xffff8101
                  |L13.136|
                          DCD      0x00000fff
                  |L13.140|
                          DCD      0x400e0000
                  |L13.144|
                          DCD      0xf000ffff

                          AREA ||i.DrvADC_EnableADCCmp0Int||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableADCCmp0Int PROC
;;;411    /*---------------------------------------------------------------------------------------------------------*/
;;;412    void DrvADC_EnableADCCmp0Int(DRVADC_ADCMP0_CALLBACK Callback, uint32_t u32UserData)
000000  b570              PUSH     {r4-r6,lr}
;;;413    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;414    	g_ptADCMP0CallBack = Callback;
000006  480b              LDR      r0,|L14.52|
000008  6004              STR      r4,[r0,#0]  ; g_ptADCMP0CallBack
;;;415    	g_pu32UserData[1] = u32UserData;
00000a  480b              LDR      r0,|L14.56|
00000c  6045              STR      r5,[r0,#4]  ; g_pu32UserData
;;;416    	_DRVADC_CLEAR_CMP0_INT_FLAG();        /* clear the ADC comparator 0 interrupt flag for safe */
00000e  480b              LDR      r0,|L14.60|
000010  6b00              LDR      r0,[r0,#0x30]
000012  08c0              LSRS     r0,r0,#3
000014  00c0              LSLS     r0,r0,#3
000016  1c80              ADDS     r0,r0,#2
000018  4908              LDR      r1,|L14.60|
00001a  6308              STR      r0,[r1,#0x30]
;;;417    	ADC->ADCMPR[0].CMPIE = 1;
00001c  4608              MOV      r0,r1
00001e  6a80              LDR      r0,[r0,#0x28]
000020  2102              MOVS     r1,#2
000022  4388              BICS     r0,r0,r1
000024  1c80              ADDS     r0,r0,#2
000026  4905              LDR      r1,|L14.60|
000028  6288              STR      r0,[r1,#0x28]
;;;418    	NVIC_EnableIRQ(ADC_IRQn);
00002a  201d              MOVS     r0,#0x1d
00002c  f7fffffe          BL       NVIC_EnableIRQ
;;;419    }
000030  bd70              POP      {r4-r6,pc}
;;;420    
                          ENDP

000032  0000              DCW      0x0000
                  |L14.52|
                          DCD      g_ptADCMP0CallBack
                  |L14.56|
                          DCD      g_pu32UserData
                  |L14.60|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnableADCCmp1||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableADCCmp1 PROC
;;;843    /*-----------------------------------------------------------------------------------------------------------*/
;;;844    int32_t DrvADC_EnableADCCmp1(uint8_t u8CmpChannelNum, E_ADC_CMP_CONDITION CmpCondition, uint16_t u16CmpData, uint8_t u8CmpMatchCount)
000000  b570              PUSH     {r4-r6,lr}
;;;845    {
000002  4604              MOV      r4,r0
;;;846    	if(u8CmpChannelNum>7)
000004  2c07              CMP      r4,#7
000006  dd01              BLE      |L15.12|
;;;847    		return E_DRVADC_ARGUMENT;
000008  481e              LDR      r0,|L15.132|
                  |L15.10|
;;;848    	
;;;849    	if(u16CmpData>0x0FFF)
;;;850    		return E_DRVADC_ARGUMENT;
;;;851    	
;;;852    	if(u8CmpMatchCount>0x0F)
;;;853    		return E_DRVADC_ARGUMENT;
;;;854    	
;;;855    	ADC->ADCMPR[1].CMPCH = u8CmpChannelNum;
;;;856    	ADC->ADCMPR[1].CMPCOND = CmpCondition;
;;;857    	ADC->ADCMPR[1].CMPD = u16CmpData;
;;;858    	ADC->ADCMPR[1].CMPMATCNT = u8CmpMatchCount;
;;;859    	ADC->ADCMPR[1].CMPEN = 1;
;;;860    	
;;;861    	return E_SUCCESS;
;;;862    }
00000a  bd70              POP      {r4-r6,pc}
                  |L15.12|
00000c  481e              LDR      r0,|L15.136|
00000e  4282              CMP      r2,r0                 ;849
000010  dd01              BLE      |L15.22|
000012  481c              LDR      r0,|L15.132|
000014  e7f9              B        |L15.10|
                  |L15.22|
000016  2b0f              CMP      r3,#0xf               ;852
000018  dd01              BLE      |L15.30|
00001a  481a              LDR      r0,|L15.132|
00001c  e7f5              B        |L15.10|
                  |L15.30|
00001e  481b              LDR      r0,|L15.140|
000020  6ac0              LDR      r0,[r0,#0x2c]         ;855
000022  2538              MOVS     r5,#0x38              ;855
000024  43a8              BICS     r0,r0,r5              ;855
000026  00e5              LSLS     r5,r4,#3              ;855
000028  2638              MOVS     r6,#0x38              ;855
00002a  4035              ANDS     r5,r5,r6              ;855
00002c  4328              ORRS     r0,r0,r5              ;855
00002e  4d17              LDR      r5,|L15.140|
000030  62e8              STR      r0,[r5,#0x2c]         ;855
000032  4628              MOV      r0,r5                 ;856
000034  6ac0              LDR      r0,[r0,#0x2c]         ;856
000036  2504              MOVS     r5,#4                 ;856
000038  43a8              BICS     r0,r0,r5              ;856
00003a  008d              LSLS     r5,r1,#2              ;856
00003c  2604              MOVS     r6,#4                 ;856
00003e  4035              ANDS     r5,r5,r6              ;856
000040  4328              ORRS     r0,r0,r5              ;856
000042  4d12              LDR      r5,|L15.140|
000044  62e8              STR      r0,[r5,#0x2c]         ;856
000046  4628              MOV      r0,r5                 ;857
000048  6ac0              LDR      r0,[r0,#0x2c]         ;857
00004a  4d11              LDR      r5,|L15.144|
00004c  4028              ANDS     r0,r0,r5              ;857
00004e  0415              LSLS     r5,r2,#16             ;857
000050  4e0f              LDR      r6,|L15.144|
000052  43f6              MVNS     r6,r6                 ;857
000054  4035              ANDS     r5,r5,r6              ;857
000056  4328              ORRS     r0,r0,r5              ;857
000058  4d0c              LDR      r5,|L15.140|
00005a  62e8              STR      r0,[r5,#0x2c]         ;857
00005c  4628              MOV      r0,r5                 ;858
00005e  6ac0              LDR      r0,[r0,#0x2c]         ;858
000060  250f              MOVS     r5,#0xf               ;858
000062  022d              LSLS     r5,r5,#8              ;858
000064  43a8              BICS     r0,r0,r5              ;858
000066  021d              LSLS     r5,r3,#8              ;858
000068  260f              MOVS     r6,#0xf               ;858
00006a  0236              LSLS     r6,r6,#8              ;858
00006c  4035              ANDS     r5,r5,r6              ;858
00006e  4328              ORRS     r0,r0,r5              ;858
000070  4d06              LDR      r5,|L15.140|
000072  62e8              STR      r0,[r5,#0x2c]         ;858
000074  4628              MOV      r0,r5                 ;859
000076  6ac0              LDR      r0,[r0,#0x2c]         ;859
000078  0840              LSRS     r0,r0,#1              ;859
00007a  0040              LSLS     r0,r0,#1              ;859
00007c  1c40              ADDS     r0,r0,#1              ;859
00007e  62e8              STR      r0,[r5,#0x2c]         ;859
000080  2000              MOVS     r0,#0                 ;861
000082  e7c2              B        |L15.10|
;;;863    
                          ENDP

                  |L15.132|
                          DCD      0xffff8101
                  |L15.136|
                          DCD      0x00000fff
                  |L15.140|
                          DCD      0x400e0000
                  |L15.144|
                          DCD      0xf000ffff

                          AREA ||i.DrvADC_EnableADCCmp1Int||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableADCCmp1Int PROC
;;;450    /*---------------------------------------------------------------------------------------------------------*/
;;;451    void DrvADC_EnableADCCmp1Int(DRVADC_ADCMP1_CALLBACK Callback, uint32_t u32UserData)
000000  b570              PUSH     {r4-r6,lr}
;;;452    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;453    	g_ptADCMP1CallBack = Callback;
000006  480b              LDR      r0,|L16.52|
000008  6004              STR      r4,[r0,#0]  ; g_ptADCMP1CallBack
;;;454    	g_pu32UserData[2] = u32UserData;
00000a  480b              LDR      r0,|L16.56|
00000c  6085              STR      r5,[r0,#8]  ; g_pu32UserData
;;;455    	_DRVADC_CLEAR_CMP1_INT_FLAG();        /* clear the ADC comparator 1 interrupt flag for safe */
00000e  480b              LDR      r0,|L16.60|
000010  6b00              LDR      r0,[r0,#0x30]
000012  08c0              LSRS     r0,r0,#3
000014  00c0              LSLS     r0,r0,#3
000016  1d00              ADDS     r0,r0,#4
000018  4908              LDR      r1,|L16.60|
00001a  6308              STR      r0,[r1,#0x30]
;;;456    	ADC->ADCMPR[1].CMPIE = 1;
00001c  4608              MOV      r0,r1
00001e  6ac0              LDR      r0,[r0,#0x2c]
000020  2102              MOVS     r1,#2
000022  4388              BICS     r0,r0,r1
000024  1c80              ADDS     r0,r0,#2
000026  4905              LDR      r1,|L16.60|
000028  62c8              STR      r0,[r1,#0x2c]
;;;457    	NVIC_EnableIRQ(ADC_IRQn);
00002a  201d              MOVS     r0,#0x1d
00002c  f7fffffe          BL       NVIC_EnableIRQ
;;;458    }
000030  bd70              POP      {r4-r6,pc}
;;;459    
                          ENDP

000032  0000              DCW      0x0000
                  |L16.52|
                          DCD      g_ptADCMP1CallBack
                  |L16.56|
                          DCD      g_pu32UserData
                  |L16.60|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnableADCInt||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableADCInt PROC
;;;372    /*---------------------------------------------------------------------------------------------------------*/
;;;373    void DrvADC_EnableADCInt(DRVADC_ADC_CALLBACK Callback, uint32_t u32UserData)
000000  b570              PUSH     {r4-r6,lr}
;;;374    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;375    	g_ptADCCallBack = Callback;
000006  480b              LDR      r0,|L17.52|
000008  6004              STR      r4,[r0,#0]  ; g_ptADCCallBack
;;;376    	g_pu32UserData[0] = u32UserData;
00000a  480b              LDR      r0,|L17.56|
00000c  6005              STR      r5,[r0,#0]  ; g_pu32UserData
;;;377    	_DRVADC_CLEAR_ADC_INT_FLAG();     /* clear the A/D interrupt flag for safe */
00000e  480b              LDR      r0,|L17.60|
000010  6b00              LDR      r0,[r0,#0x30]
000012  08c0              LSRS     r0,r0,#3
000014  00c0              LSLS     r0,r0,#3
000016  1c40              ADDS     r0,r0,#1
000018  4908              LDR      r1,|L17.60|
00001a  6308              STR      r0,[r1,#0x30]
;;;378    	ADC->ADCR.ADIE = 1;
00001c  4608              MOV      r0,r1
00001e  6a00              LDR      r0,[r0,#0x20]
000020  2102              MOVS     r1,#2
000022  4388              BICS     r0,r0,r1
000024  1c80              ADDS     r0,r0,#2
000026  4905              LDR      r1,|L17.60|
000028  6208              STR      r0,[r1,#0x20]
;;;379    	NVIC_EnableIRQ(ADC_IRQn);
00002a  201d              MOVS     r0,#0x1d
00002c  f7fffffe          BL       NVIC_EnableIRQ
;;;380    }
000030  bd70              POP      {r4-r6,pc}
;;;381    
                          ENDP

000032  0000              DCW      0x0000
                  |L17.52|
                          DCD      g_ptADCCallBack
                  |L17.56|
                          DCD      g_pu32UserData
                  |L17.60|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnableExtTrigger||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableExtTrigger PROC
;;;566    /*---------------------------------------------------------------------------------------------------------*/
;;;567    void DrvADC_EnableExtTrigger(E_ADC_EXT_TRI_COND TriggerCondition)
000000  4915              LDR      r1,|L18.88|
;;;568    {
;;;569    	GPIOB->PMD.PMD8 = 0;                  /* Configure GPB8 as an input pin */
000002  6809              LDR      r1,[r1,#0]
000004  2203              MOVS     r2,#3
000006  0412              LSLS     r2,r2,#16
000008  4391              BICS     r1,r1,r2
00000a  4a13              LDR      r2,|L18.88|
00000c  6011              STR      r1,[r2,#0]
;;;570    	ADC->ADCR.ADST = 0;                   /* Stop A/D conversion */
00000e  4913              LDR      r1,|L18.92|
000010  6a09              LDR      r1,[r1,#0x20]
000012  2201              MOVS     r2,#1
000014  02d2              LSLS     r2,r2,#11
000016  4391              BICS     r1,r1,r2
000018  4a10              LDR      r2,|L18.92|
00001a  6211              STR      r1,[r2,#0x20]
;;;571    	ADC->ADCR.TRGEN = 0;                  /* Disable the trigger source of STADC pin */
00001c  4611              MOV      r1,r2
00001e  6a09              LDR      r1,[r1,#0x20]
000020  1592              ASRS     r2,r2,#22
000022  4391              BICS     r1,r1,r2
000024  4a0d              LDR      r2,|L18.92|
000026  6211              STR      r1,[r2,#0x20]
;;;572    	ADC->ADCR.TRGS = 0;                   /* Select the STADC pin as the hardware trigger source */
000028  4611              MOV      r1,r2
00002a  6a09              LDR      r1,[r1,#0x20]
00002c  2230              MOVS     r2,#0x30
00002e  4391              BICS     r1,r1,r2
000030  4a0a              LDR      r2,|L18.92|
000032  6211              STR      r1,[r2,#0x20]
;;;573    	ADC->ADCR.TRGCOND = TriggerCondition; /* Set the trigger condition */
000034  4611              MOV      r1,r2
000036  6a09              LDR      r1,[r1,#0x20]
000038  22c0              MOVS     r2,#0xc0
00003a  4391              BICS     r1,r1,r2
00003c  0182              LSLS     r2,r0,#6
00003e  23c0              MOVS     r3,#0xc0
000040  401a              ANDS     r2,r2,r3
000042  4311              ORRS     r1,r1,r2
000044  4a05              LDR      r2,|L18.92|
000046  6211              STR      r1,[r2,#0x20]
;;;574    	ADC->ADCR.TRGEN = 1;                  /* Enable the trigger source of STADC pin */
000048  4611              MOV      r1,r2
00004a  6a09              LDR      r1,[r1,#0x20]
00004c  1592              ASRS     r2,r2,#22
00004e  4391              BICS     r1,r1,r2
000050  1889              ADDS     r1,r1,r2
000052  4a02              LDR      r2,|L18.92|
000054  6211              STR      r1,[r2,#0x20]
;;;575    }
000056  4770              BX       lr
;;;576    
                          ENDP

                  |L18.88|
                          DCD      0x50004040
                  |L18.92|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnablePDMA||, CODE, READONLY, ALIGN=2

                  DrvADC_EnablePDMA PROC
;;;697    /*------------------------------------------------------------------------------------------------------------*/
;;;698    void DrvADC_EnablePDMA(void)
000000  4806              LDR      r0,|L19.28|
;;;699    {
;;;700    	ADC->ADCR.ADIE = 0;
000002  6a00              LDR      r0,[r0,#0x20]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4904              LDR      r1,|L19.28|
00000a  6208              STR      r0,[r1,#0x20]
;;;701    	ADC->ADCR.PTEN = 1;
00000c  4608              MOV      r0,r1
00000e  6a00              LDR      r0,[r0,#0x20]
000010  1549              ASRS     r1,r1,#21
000012  4388              BICS     r0,r0,r1
000014  1840              ADDS     r0,r0,r1
000016  4901              LDR      r1,|L19.28|
000018  6208              STR      r0,[r1,#0x20]
;;;702    }
00001a  4770              BX       lr
;;;703    
                          ENDP

                  |L19.28|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnableSelfCalibration||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableSelfCalibration PROC
;;;892    /*-----------------------------------------------------------------------------------------------------------*/
;;;893    void DrvADC_EnableSelfCalibration(void)
000000  4803              LDR      r0,|L20.16|
;;;894    {
;;;895    	ADC->ADCALR.CALEN = 1;
000002  6b40              LDR      r0,[r0,#0x34]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  1c40              ADDS     r0,r0,#1
00000a  4901              LDR      r1,|L20.16|
00000c  6348              STR      r0,[r1,#0x34]
;;;896    }
00000e  4770              BX       lr
;;;897    
                          ENDP

                  |L20.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_GetConversionData||, CODE, READONLY, ALIGN=2

                  DrvADC_GetConversionData PROC
;;;664    /*--------------------------------------------------------------------------------------------------------------------*/
;;;665    int32_t DrvADC_GetConversionData(uint8_t u8ChannelNum)
000000  4601              MOV      r1,r0
;;;666    {
;;;667    	if(ADC->ADCR.DIFFEN==0)         /* Single-end input mode */
000002  4812              LDR      r0,|L21.76|
000004  6a00              LDR      r0,[r0,#0x20]
000006  0540              LSLS     r0,r0,#21
000008  0fc0              LSRS     r0,r0,#31
00000a  d106              BNE      |L21.26|
;;;668    	{
;;;669    		return ((int32_t)(ADC->ADDR[u8ChannelNum].RSLT & 0xFFF));
00000c  0088              LSLS     r0,r1,#2
00000e  4a0f              LDR      r2,|L21.76|
000010  1880              ADDS     r0,r0,r2
000012  6800              LDR      r0,[r0,#0]
000014  0500              LSLS     r0,r0,#20
000016  0d00              LSRS     r0,r0,#20
                  |L21.24|
;;;670    	}
;;;671    	else                          /* Differential input mode */
;;;672    	{
;;;673    		if(ADC->ADCR.DMOF==0)     /* unsigned format */
;;;674    			return (ADC->ADDR[u8ChannelNum].RSLT);
;;;675    		else                      /* 2's complement */
;;;676    		{
;;;677    			uint16_t u16AdcData = ADC->ADDR[u8ChannelNum].RSLT;
;;;678    			if( u16AdcData&0x8000 )
;;;679    				return (0xFFFF0000|u16AdcData);
;;;680    			else
;;;681    				return (int32_t)u16AdcData;
;;;682    		}
;;;683    	}
;;;684    }
000018  4770              BX       lr
                  |L21.26|
00001a  480c              LDR      r0,|L21.76|
00001c  6a00              LDR      r0,[r0,#0x20]         ;673
00001e  0fc0              LSRS     r0,r0,#31             ;673
000020  d105              BNE      |L21.46|
000022  0088              LSLS     r0,r1,#2              ;674
000024  4a09              LDR      r2,|L21.76|
000026  1880              ADDS     r0,r0,r2              ;674
000028  6800              LDR      r0,[r0,#0]            ;674
00002a  b280              UXTH     r0,r0                 ;674
00002c  e7f4              B        |L21.24|
                  |L21.46|
00002e  0088              LSLS     r0,r1,#2              ;677
000030  4b06              LDR      r3,|L21.76|
000032  18c0              ADDS     r0,r0,r3              ;677
000034  6800              LDR      r0,[r0,#0]            ;677
000036  b282              UXTH     r2,r0                 ;677
000038  2001              MOVS     r0,#1                 ;678
00003a  03c0              LSLS     r0,r0,#15             ;678
00003c  4202              TST      r2,r0                 ;678
00003e  d003              BEQ      |L21.72|
000040  4610              MOV      r0,r2                 ;679
000042  4b03              LDR      r3,|L21.80|
000044  4318              ORRS     r0,r0,r3              ;679
000046  e7e7              B        |L21.24|
                  |L21.72|
000048  4610              MOV      r0,r2                 ;681
00004a  e7e5              B        |L21.24|
;;;685    
                          ENDP

                  |L21.76|
                          DCD      0x400e0000
                  |L21.80|
                          DCD      0xffff0000

                          AREA ||i.DrvADC_GetConversionRate||, CODE, READONLY, ALIGN=2

                  DrvADC_GetConversionRate PROC
;;;536    /*---------------------------------------------------------------------------------------------------------*/
;;;537    uint32_t DrvADC_GetConversionRate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;538    {
;;;539    	if( SYSCLK->CLKSEL1.ADC_S == 0 )           /* external 12MHz crystal clock */
000002  481a              LDR      r0,|L22.108|
000004  6940              LDR      r0,[r0,#0x14]
000006  0700              LSLS     r0,r0,#28
000008  0f80              LSRS     r0,r0,#30
00000a  d10c              BNE      |L22.38|
;;;540    	{
;;;541    		return (12000000/(SYSCLK->CLKDIV.ADC_N + 1)/27);
00000c  4817              LDR      r0,|L22.108|
00000e  6980              LDR      r0,[r0,#0x18]
000010  0200              LSLS     r0,r0,#8
000012  0e00              LSRS     r0,r0,#24
000014  1c41              ADDS     r1,r0,#1
000016  4816              LDR      r0,|L22.112|
000018  f7fffffe          BL       __aeabi_idivmod
00001c  4604              MOV      r4,r0
00001e  211b              MOVS     r1,#0x1b
000020  f7fffffe          BL       __aeabi_idivmod
                  |L22.36|
;;;542    	}
;;;543    	else if( SYSCLK->CLKSEL1.ADC_S == 1 )      /* PLL clock */
;;;544    	{
;;;545    		return ( DrvSYS_GetPLLClockFreq()/(SYSCLK->CLKDIV.ADC_N + 1)/27);
;;;546    	}
;;;547    	else                                       /* internal 22MHz RC oscillator clock */
;;;548    	{
;;;549    		return (22000000/(SYSCLK->CLKDIV.ADC_N + 1)/27);
;;;550    	}
;;;551    }
000024  bd70              POP      {r4-r6,pc}
                  |L22.38|
000026  4811              LDR      r0,|L22.108|
000028  6940              LDR      r0,[r0,#0x14]         ;543
00002a  0700              LSLS     r0,r0,#28             ;543
00002c  0f80              LSRS     r0,r0,#30             ;543
00002e  2801              CMP      r0,#1                 ;543
000030  d10f              BNE      |L22.82|
000032  f7fffffe          BL       DrvSYS_GetPLLClockFreq
000036  4605              MOV      r5,r0                 ;545
000038  480c              LDR      r0,|L22.108|
00003a  6980              LDR      r0,[r0,#0x18]         ;545
00003c  0200              LSLS     r0,r0,#8              ;545
00003e  0e00              LSRS     r0,r0,#24             ;545
000040  1c41              ADDS     r1,r0,#1              ;545
000042  4628              MOV      r0,r5                 ;545
000044  f7fffffe          BL       __aeabi_uidivmod
000048  4604              MOV      r4,r0                 ;545
00004a  211b              MOVS     r1,#0x1b              ;545
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  e7e8              B        |L22.36|
                  |L22.82|
000052  4806              LDR      r0,|L22.108|
000054  6980              LDR      r0,[r0,#0x18]         ;549
000056  0200              LSLS     r0,r0,#8              ;549
000058  0e00              LSRS     r0,r0,#24             ;549
00005a  1c41              ADDS     r1,r0,#1              ;549
00005c  4805              LDR      r0,|L22.116|
00005e  f7fffffe          BL       __aeabi_idivmod
000062  4604              MOV      r4,r0                 ;549
000064  211b              MOVS     r1,#0x1b              ;549
000066  f7fffffe          BL       __aeabi_idivmod
00006a  e7db              B        |L22.36|
;;;552    
                          ENDP

                  |L22.108|
                          DCD      0x50000200
                  |L22.112|
                          DCD      0x00b71b00
                  |L22.116|
                          DCD      0x014fb180

                          AREA ||i.DrvADC_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvADC_GetVersion PROC
;;;966    /*-----------------------------------------------------------------------------------------------------------*/
;;;967    uint32_t DrvADC_GetVersion (void)
000000  4800              LDR      r0,|L23.4|
;;;968    {
;;;969    	return DRVADC_VERSION_NUM;
;;;970    }
000002  4770              BX       lr
;;;971    
                          ENDP

                  |L23.4|
                          DCD      0x00010202

                          AREA ||i.DrvADC_IsCalibrationDone||, CODE, READONLY, ALIGN=2

                  DrvADC_IsCalibrationDone PROC
;;;910    /*---------------------------------------------------------------------------------------------------------*/
;;;911    uint32_t DrvADC_IsCalibrationDone(void)
000000  4804              LDR      r0,|L24.20|
;;;912    {
;;;913    	if(ADC->ADCALR.CALDONE == 1)
000002  6b40              LDR      r0,[r0,#0x34]
000004  0780              LSLS     r0,r0,#30
000006  0fc0              LSRS     r0,r0,#31
000008  2801              CMP      r0,#1
00000a  d100              BNE      |L24.14|
                  |L24.12|
;;;914    		return TRUE;
;;;915    	else
;;;916    		return FALSE;
;;;917    }
00000c  4770              BX       lr
                  |L24.14|
00000e  2000              MOVS     r0,#0                 ;916
000010  e7fc              B        |L24.12|
;;;918    
                          ENDP

000012  0000              DCW      0x0000
                  |L24.20|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_IsConversionDone||, CODE, READONLY, ALIGN=2

                  DrvADC_IsConversionDone PROC
;;;643    /*---------------------------------------------------------------------------------------------------------*/
;;;644    uint32_t DrvADC_IsConversionDone(void)
000000  4803              LDR      r0,|L25.16|
;;;645    {
;;;646    	if(ADC->ADSR.ADF==0)
000002  6b00              LDR      r0,[r0,#0x30]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
000008  d100              BNE      |L25.12|
                  |L25.10|
;;;647    		return FALSE;
;;;648    	else
;;;649    		return TRUE;
;;;650    }
00000a  4770              BX       lr
                  |L25.12|
00000c  2001              MOVS     r0,#1                 ;649
00000e  e7fc              B        |L25.10|
;;;651    
                          ENDP

                  |L25.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_IsDataOverrun||, CODE, READONLY, ALIGN=2

                  DrvADC_IsDataOverrun PROC
;;;758    /*---------------------------------------------------------------------------------------------------------*/
;;;759    uint32_t DrvADC_IsDataOverrun(uint8_t u8ChannelNum)
000000  b50c              PUSH     {r2,r3,lr}
;;;760    {
000002  4601              MOV      r1,r0
;;;761    	volatile uint8_t u8ChannelSelBitwise[8]={ 1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80 };
000004  a209              ADR      r2,|L26.44|
000006  ca05              LDM      r2,{r0,r2}
000008  9000              STR      r0,[sp,#0]
00000a  9201              STR      r2,[sp,#4]
;;;762    	
;;;763    	if(u8ChannelNum>7)
00000c  2907              CMP      r1,#7
00000e  dd01              BLE      |L26.20|
;;;764    		return FALSE;
000010  2000              MOVS     r0,#0
                  |L26.18|
;;;765    	if( ADC->ADSR.OVERRUN & u8ChannelSelBitwise[u8ChannelNum] )
;;;766    		return TRUE;
;;;767    	else
;;;768    		return FALSE;
;;;769    }
000012  bd0c              POP      {r2,r3,pc}
                  |L26.20|
000014  4807              LDR      r0,|L26.52|
000016  6b00              LDR      r0,[r0,#0x30]         ;765
000018  0200              LSLS     r0,r0,#8              ;765
00001a  0e00              LSRS     r0,r0,#24             ;765
00001c  466a              MOV      r2,sp                 ;765
00001e  5c52              LDRB     r2,[r2,r1]            ;765
000020  4210              TST      r0,r2                 ;765
000022  d001              BEQ      |L26.40|
000024  2001              MOVS     r0,#1                 ;766
000026  e7f4              B        |L26.18|
                  |L26.40|
000028  2000              MOVS     r0,#0                 ;768
00002a  e7f2              B        |L26.18|
;;;770    
                          ENDP

                  |L26.44|
00002c  01020408          DCB      1,2,4,"\b",16," @",128
000030  10204080
                  |L26.52|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_IsDataValid||, CODE, READONLY, ALIGN=2

                  DrvADC_IsDataValid PROC
;;;733    /*---------------------------------------------------------------------------------------------------------*/
;;;734    uint32_t DrvADC_IsDataValid(uint8_t u8ChannelNum)
000000  b50c              PUSH     {r2,r3,lr}
;;;735    {
000002  4601              MOV      r1,r0
;;;736    	volatile uint8_t u8ChannelSelBitwise[8]={ 1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80 };
000004  a209              ADR      r2,|L27.44|
000006  ca05              LDM      r2,{r0,r2}
000008  9000              STR      r0,[sp,#0]
00000a  9201              STR      r2,[sp,#4]
;;;737    	
;;;738    	if(u8ChannelNum>7)
00000c  2907              CMP      r1,#7
00000e  dd01              BLE      |L27.20|
;;;739    		return FALSE;
000010  2000              MOVS     r0,#0
                  |L27.18|
;;;740    	if( ADC->ADSR.VALID & u8ChannelSelBitwise[u8ChannelNum] )
;;;741    		return TRUE;
;;;742    	else
;;;743    		return FALSE;
;;;744    }
000012  bd0c              POP      {r2,r3,pc}
                  |L27.20|
000014  4807              LDR      r0,|L27.52|
000016  6b00              LDR      r0,[r0,#0x30]         ;740
000018  0400              LSLS     r0,r0,#16             ;740
00001a  0e00              LSRS     r0,r0,#24             ;740
00001c  466a              MOV      r2,sp                 ;740
00001e  5c52              LDRB     r2,[r2,r1]            ;740
000020  4210              TST      r0,r2                 ;740
000022  d001              BEQ      |L27.40|
000024  2001              MOVS     r0,#1                 ;741
000026  e7f4              B        |L27.18|
                  |L27.40|
000028  2000              MOVS     r0,#0                 ;743
00002a  e7f2              B        |L27.18|
;;;745    
                          ENDP

                  |L27.44|
00002c  01020408          DCB      1,2,4,"\b",16," @",128
000030  10204080
                  |L27.52|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_Open||, CODE, READONLY, ALIGN=2

                  DrvADC_Open PROC
;;;44     /*--------------------------------------------------------------------------------------------------------------------*/
;;;45     void DrvADC_Open(E_ADC_INPUT_MODE InputMode, E_ADC_OPERATION_MODE OpMode, uint8_t u8ChannelSelBitwise, E_ADC_CLK_SRC ClockSrc, uint8_t u8AdcDivisor)
000000  b5f0              PUSH     {r4-r7,lr}
;;;46     {
000002  9c05              LDR      r4,[sp,#0x14]
;;;47     	/* reset ADC */
;;;48     	SYS->IPRSTC2.ADC_RST = 1;
000004  2505              MOVS     r5,#5
000006  072d              LSLS     r5,r5,#28
000008  68ed              LDR      r5,[r5,#0xc]
00000a  2601              MOVS     r6,#1
00000c  0736              LSLS     r6,r6,#28
00000e  43b5              BICS     r5,r5,r6
000010  19ad              ADDS     r5,r5,r6
000012  2605              MOVS     r6,#5
000014  0736              LSLS     r6,r6,#28
000016  60f5              STR      r5,[r6,#0xc]
;;;49     	SYS->IPRSTC2.ADC_RST = 0;
000018  4635              MOV      r5,r6
00001a  68ed              LDR      r5,[r5,#0xc]
00001c  2601              MOVS     r6,#1
00001e  0736              LSLS     r6,r6,#28
000020  43b5              BICS     r5,r5,r6
000022  2605              MOVS     r6,#5
000024  0736              LSLS     r6,r6,#28
000026  60f5              STR      r5,[r6,#0xc]
;;;50     	
;;;51     	/* ADC clock source */
;;;52     	SYSCLK->CLKSEL1.ADC_S = ClockSrc;
000028  4d96              LDR      r5,|L28.644|
00002a  696d              LDR      r5,[r5,#0x14]
00002c  260c              MOVS     r6,#0xc
00002e  43b5              BICS     r5,r5,r6
000030  009e              LSLS     r6,r3,#2
000032  270c              MOVS     r7,#0xc
000034  403e              ANDS     r6,r6,r7
000036  4335              ORRS     r5,r5,r6
000038  4e92              LDR      r6,|L28.644|
00003a  6175              STR      r5,[r6,#0x14]
;;;53     	
;;;54     	/* Set ADC divisor */
;;;55     	SYSCLK->CLKDIV.ADC_N = u8AdcDivisor;
00003c  4635              MOV      r5,r6
00003e  69ad              LDR      r5,[r5,#0x18]
000040  26ff              MOVS     r6,#0xff
000042  0436              LSLS     r6,r6,#16
000044  43b5              BICS     r5,r5,r6
000046  0426              LSLS     r6,r4,#16
000048  27ff              MOVS     r7,#0xff
00004a  043f              LSLS     r7,r7,#16
00004c  403e              ANDS     r6,r6,r7
00004e  4335              ORRS     r5,r5,r6
000050  4e8c              LDR      r6,|L28.644|
000052  61b5              STR      r5,[r6,#0x18]
;;;56     	/* ADC engine clock enable */
;;;57     	SYSCLK->APBCLK.ADC_EN = 1;
000054  4635              MOV      r5,r6
000056  68ad              LDR      r5,[r5,#8]
000058  04f6              LSLS     r6,r6,#19
00005a  43b5              BICS     r5,r5,r6
00005c  19ad              ADDS     r5,r5,r6
00005e  4e89              LDR      r6,|L28.644|
000060  60b5              STR      r5,[r6,#8]
;;;58     	/* ADC enable */
;;;59     	ADC->ADCR.ADEN = 1;
000062  4d89              LDR      r5,|L28.648|
000064  6a2d              LDR      r5,[r5,#0x20]
000066  086d              LSRS     r5,r5,#1
000068  006d              LSLS     r5,r5,#1
00006a  1c6d              ADDS     r5,r5,#1
00006c  4e86              LDR      r6,|L28.648|
00006e  6235              STR      r5,[r6,#0x20]
;;;60     	
;;;61     	if( InputMode == ADC_SINGLE_END )
000070  2800              CMP      r0,#0
000072  d106              BNE      |L28.130|
;;;62     		ADC->ADCR.DIFFEN = 0;     /* single end input */
000074  4635              MOV      r5,r6
000076  6a2d              LDR      r5,[r5,#0x20]
000078  1536              ASRS     r6,r6,#20
00007a  43b5              BICS     r5,r5,r6
00007c  4e82              LDR      r6,|L28.648|
00007e  6235              STR      r5,[r6,#0x20]
000080  e007              B        |L28.146|
                  |L28.130|
;;;63     	else
;;;64     		ADC->ADCR.DIFFEN = 1;     /* differential input */
000082  4d81              LDR      r5,|L28.648|
000084  6a2d              LDR      r5,[r5,#0x20]
000086  2601              MOVS     r6,#1
000088  02b6              LSLS     r6,r6,#10
00008a  43b5              BICS     r5,r5,r6
00008c  19ad              ADDS     r5,r5,r6
00008e  4e7e              LDR      r6,|L28.648|
000090  6235              STR      r5,[r6,#0x20]
                  |L28.146|
;;;65     	
;;;66     	if( OpMode == ADC_SINGLE_OP )
000092  2900              CMP      r1,#0
000094  d106              BNE      |L28.164|
;;;67     		ADC->ADCR.ADMD = 0;     /* single mode */
000096  4d7c              LDR      r5,|L28.648|
000098  6a2d              LDR      r5,[r5,#0x20]
00009a  260c              MOVS     r6,#0xc
00009c  43b5              BICS     r5,r5,r6
00009e  4e7a              LDR      r6,|L28.648|
0000a0  6235              STR      r5,[r6,#0x20]
0000a2  e010              B        |L28.198|
                  |L28.164|
;;;68     	else if( OpMode == ADC_SINGLE_CYCLE_OP )
0000a4  2901              CMP      r1,#1
0000a6  d107              BNE      |L28.184|
;;;69     		ADC->ADCR.ADMD = 2;     /* single-cycle scan mode */
0000a8  4d77              LDR      r5,|L28.648|
0000aa  6a2d              LDR      r5,[r5,#0x20]
0000ac  260c              MOVS     r6,#0xc
0000ae  43b5              BICS     r5,r5,r6
0000b0  3508              ADDS     r5,r5,#8
0000b2  4e75              LDR      r6,|L28.648|
0000b4  6235              STR      r5,[r6,#0x20]
0000b6  e006              B        |L28.198|
                  |L28.184|
;;;70     	else
;;;71     		ADC->ADCR.ADMD = 3;     /* continuous scan mode */
0000b8  4d73              LDR      r5,|L28.648|
0000ba  6a2d              LDR      r5,[r5,#0x20]
0000bc  260c              MOVS     r6,#0xc
0000be  43b5              BICS     r5,r5,r6
0000c0  350c              ADDS     r5,r5,#0xc
0000c2  4e71              LDR      r6,|L28.648|
0000c4  6235              STR      r5,[r6,#0x20]
                  |L28.198|
;;;72     	
;;;73     	ADC->ADCHER.CHEN = u8ChannelSelBitwise;
0000c6  4d70              LDR      r5,|L28.648|
0000c8  6a6d              LDR      r5,[r5,#0x24]
0000ca  0a2d              LSRS     r5,r5,#8
0000cc  022d              LSLS     r5,r5,#8
0000ce  4315              ORRS     r5,r5,r2
0000d0  4e6d              LDR      r6,|L28.648|
0000d2  6275              STR      r5,[r6,#0x24]
;;;74     	if( (u8ChannelSelBitwise&1) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&2)) )
0000d4  07d5              LSLS     r5,r2,#31
0000d6  0fed              LSRS     r5,r5,#31
0000d8  d104              BNE      |L28.228|
0000da  2801              CMP      r0,#1
0000dc  d10c              BNE      |L28.248|
0000de  2502              MOVS     r5,#2
0000e0  422a              TST      r2,r5
0000e2  d009              BEQ      |L28.248|
                  |L28.228|
;;;75     	{
;;;76     		SYS->GPAMFP.ADC0 = 1;   /* configure GPA0 as analog input pin */
0000e4  2505              MOVS     r5,#5
0000e6  072d              LSLS     r5,r5,#28
0000e8  6b2d              LDR      r5,[r5,#0x30]
0000ea  086d              LSRS     r5,r5,#1
0000ec  006d              LSLS     r5,r5,#1
0000ee  1c6d              ADDS     r5,r5,#1
0000f0  2605              MOVS     r6,#5
0000f2  0736              LSLS     r6,r6,#28
0000f4  6335              STR      r5,[r6,#0x30]
0000f6  e007              B        |L28.264|
                  |L28.248|
;;;77     	}
;;;78     	else
;;;79     	{
;;;80     		SYS->GPAMFP.ADC0 = 0;   /* configure GPA0 as GPIO */
0000f8  2505              MOVS     r5,#5
0000fa  072d              LSLS     r5,r5,#28
0000fc  6b2d              LDR      r5,[r5,#0x30]
0000fe  086d              LSRS     r5,r5,#1
000100  006d              LSLS     r5,r5,#1
000102  2605              MOVS     r6,#5
000104  0736              LSLS     r6,r6,#28
000106  6335              STR      r5,[r6,#0x30]
                  |L28.264|
;;;81     	}
;;;82     	
;;;83     	if( (u8ChannelSelBitwise&2) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&1)) )
000108  2502              MOVS     r5,#2
00010a  422a              TST      r2,r5
00010c  d104              BNE      |L28.280|
00010e  2801              CMP      r0,#1
000110  d10c              BNE      |L28.300|
000112  07d5              LSLS     r5,r2,#31
000114  0fed              LSRS     r5,r5,#31
000116  d009              BEQ      |L28.300|
                  |L28.280|
;;;84     	{
;;;85     		SYS->GPAMFP.ADC1_AD12 = 1;   /* configure GPA1 as analog input pin */
000118  2505              MOVS     r5,#5
00011a  072d              LSLS     r5,r5,#28
00011c  6b2d              LDR      r5,[r5,#0x30]
00011e  2602              MOVS     r6,#2
000120  43b5              BICS     r5,r5,r6
000122  1cad              ADDS     r5,r5,#2
000124  2605              MOVS     r6,#5
000126  0736              LSLS     r6,r6,#28
000128  6335              STR      r5,[r6,#0x30]
00012a  e007              B        |L28.316|
                  |L28.300|
;;;86     	}
;;;87     	else
;;;88     	{
;;;89     		SYS->GPAMFP.ADC1_AD12 = 0;   /* configure GPA1 as GPIO */
00012c  2505              MOVS     r5,#5
00012e  072d              LSLS     r5,r5,#28
000130  6b2d              LDR      r5,[r5,#0x30]
000132  2602              MOVS     r6,#2
000134  43b5              BICS     r5,r5,r6
000136  2605              MOVS     r6,#5
000138  0736              LSLS     r6,r6,#28
00013a  6335              STR      r5,[r6,#0x30]
                  |L28.316|
;;;90     	}
;;;91     	
;;;92     	if( (u8ChannelSelBitwise&4) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&8)) )
00013c  2504              MOVS     r5,#4
00013e  422a              TST      r2,r5
000140  d104              BNE      |L28.332|
000142  2801              CMP      r0,#1
000144  d10c              BNE      |L28.352|
000146  2508              MOVS     r5,#8
000148  422a              TST      r2,r5
00014a  d009              BEQ      |L28.352|
                  |L28.332|
;;;93     	{
;;;94     		SYS->GPAMFP.ADC2_AD11 = 1;   /* configure GPA2 as analog input pin */
00014c  2505              MOVS     r5,#5
00014e  072d              LSLS     r5,r5,#28
000150  6b2d              LDR      r5,[r5,#0x30]
000152  2604              MOVS     r6,#4
000154  43b5              BICS     r5,r5,r6
000156  1d2d              ADDS     r5,r5,#4
000158  2605              MOVS     r6,#5
00015a  0736              LSLS     r6,r6,#28
00015c  6335              STR      r5,[r6,#0x30]
00015e  e007              B        |L28.368|
                  |L28.352|
;;;95     	}
;;;96     	else
;;;97     	{
;;;98     		SYS->GPAMFP.ADC2_AD11 = 0;   /* configure GPA2 as GPIO */
000160  2505              MOVS     r5,#5
000162  072d              LSLS     r5,r5,#28
000164  6b2d              LDR      r5,[r5,#0x30]
000166  2604              MOVS     r6,#4
000168  43b5              BICS     r5,r5,r6
00016a  2605              MOVS     r6,#5
00016c  0736              LSLS     r6,r6,#28
00016e  6335              STR      r5,[r6,#0x30]
                  |L28.368|
;;;99     	}
;;;100    	
;;;101    	if( (u8ChannelSelBitwise&8) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&4)) )
000170  2508              MOVS     r5,#8
000172  422a              TST      r2,r5
000174  d104              BNE      |L28.384|
000176  2801              CMP      r0,#1
000178  d10c              BNE      |L28.404|
00017a  2504              MOVS     r5,#4
00017c  422a              TST      r2,r5
00017e  d009              BEQ      |L28.404|
                  |L28.384|
;;;102    	{
;;;103    		SYS->GPAMFP.ADC3_AD10 = 1;   /* configure GPA3 as analog input pin */
000180  2505              MOVS     r5,#5
000182  072d              LSLS     r5,r5,#28
000184  6b2d              LDR      r5,[r5,#0x30]
000186  2608              MOVS     r6,#8
000188  43b5              BICS     r5,r5,r6
00018a  3508              ADDS     r5,r5,#8
00018c  2605              MOVS     r6,#5
00018e  0736              LSLS     r6,r6,#28
000190  6335              STR      r5,[r6,#0x30]
000192  e007              B        |L28.420|
                  |L28.404|
;;;104    	}
;;;105    	else
;;;106    	{
;;;107    		SYS->GPAMFP.ADC3_AD10 = 0;   /* configure GPA3 as GPIO */
000194  2505              MOVS     r5,#5
000196  072d              LSLS     r5,r5,#28
000198  6b2d              LDR      r5,[r5,#0x30]
00019a  2608              MOVS     r6,#8
00019c  43b5              BICS     r5,r5,r6
00019e  2605              MOVS     r6,#5
0001a0  0736              LSLS     r6,r6,#28
0001a2  6335              STR      r5,[r6,#0x30]
                  |L28.420|
;;;108    	}
;;;109    	
;;;110    	if( (u8ChannelSelBitwise&0x10) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&0x20)) )
0001a4  2510              MOVS     r5,#0x10
0001a6  422a              TST      r2,r5
0001a8  d104              BNE      |L28.436|
0001aa  2801              CMP      r0,#1
0001ac  d10c              BNE      |L28.456|
0001ae  2520              MOVS     r5,#0x20
0001b0  422a              TST      r2,r5
0001b2  d009              BEQ      |L28.456|
                  |L28.436|
;;;111    	{
;;;112    		SYS->GPAMFP.ADC4_AD9 = 1;   /* configure GPA4 as analog input pin */
0001b4  2505              MOVS     r5,#5
0001b6  072d              LSLS     r5,r5,#28
0001b8  6b2d              LDR      r5,[r5,#0x30]
0001ba  2610              MOVS     r6,#0x10
0001bc  43b5              BICS     r5,r5,r6
0001be  3510              ADDS     r5,r5,#0x10
0001c0  2605              MOVS     r6,#5
0001c2  0736              LSLS     r6,r6,#28
0001c4  6335              STR      r5,[r6,#0x30]
0001c6  e007              B        |L28.472|
                  |L28.456|
;;;113    	}
;;;114    	else
;;;115    	{
;;;116    		SYS->GPAMFP.ADC4_AD9 = 0;   /* configure GPA4 as GPIO */
0001c8  2505              MOVS     r5,#5
0001ca  072d              LSLS     r5,r5,#28
0001cc  6b2d              LDR      r5,[r5,#0x30]
0001ce  2610              MOVS     r6,#0x10
0001d0  43b5              BICS     r5,r5,r6
0001d2  2605              MOVS     r6,#5
0001d4  0736              LSLS     r6,r6,#28
0001d6  6335              STR      r5,[r6,#0x30]
                  |L28.472|
;;;117    	}
;;;118    	
;;;119    	if( (u8ChannelSelBitwise&0x20) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&0x10)) )
0001d8  2520              MOVS     r5,#0x20
0001da  422a              TST      r2,r5
0001dc  d104              BNE      |L28.488|
0001de  2801              CMP      r0,#1
0001e0  d10c              BNE      |L28.508|
0001e2  2510              MOVS     r5,#0x10
0001e4  422a              TST      r2,r5
0001e6  d009              BEQ      |L28.508|
                  |L28.488|
;;;120    	{
;;;121    		SYS->GPAMFP.ADC5_AD8 = 1;   /* configure GPA5 as analog input pin */
0001e8  2505              MOVS     r5,#5
0001ea  072d              LSLS     r5,r5,#28
0001ec  6b2d              LDR      r5,[r5,#0x30]
0001ee  2620              MOVS     r6,#0x20
0001f0  43b5              BICS     r5,r5,r6
0001f2  3520              ADDS     r5,r5,#0x20
0001f4  2605              MOVS     r6,#5
0001f6  0736              LSLS     r6,r6,#28
0001f8  6335              STR      r5,[r6,#0x30]
0001fa  e007              B        |L28.524|
                  |L28.508|
;;;122    	}
;;;123    	else
;;;124    	{
;;;125    		SYS->GPAMFP.ADC5_AD8 = 0;   /* configure GPA5 as GPIO */
0001fc  2505              MOVS     r5,#5
0001fe  072d              LSLS     r5,r5,#28
000200  6b2d              LDR      r5,[r5,#0x30]
000202  2620              MOVS     r6,#0x20
000204  43b5              BICS     r5,r5,r6
000206  2605              MOVS     r6,#5
000208  0736              LSLS     r6,r6,#28
00020a  6335              STR      r5,[r6,#0x30]
                  |L28.524|
;;;126    	}
;;;127    	
;;;128    	if( (u8ChannelSelBitwise&0x40) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&0x80)) )
00020c  2540              MOVS     r5,#0x40
00020e  422a              TST      r2,r5
000210  d104              BNE      |L28.540|
000212  2801              CMP      r0,#1
000214  d10c              BNE      |L28.560|
000216  2580              MOVS     r5,#0x80
000218  422a              TST      r2,r5
00021a  d009              BEQ      |L28.560|
                  |L28.540|
;;;129    	{
;;;130    		SYS->GPAMFP.ADC6_AD7 = 1;   /* configure GPA6 as analog input pin */
00021c  2505              MOVS     r5,#5
00021e  072d              LSLS     r5,r5,#28
000220  6b2d              LDR      r5,[r5,#0x30]
000222  2640              MOVS     r6,#0x40
000224  43b5              BICS     r5,r5,r6
000226  3540              ADDS     r5,r5,#0x40
000228  2605              MOVS     r6,#5
00022a  0736              LSLS     r6,r6,#28
00022c  6335              STR      r5,[r6,#0x30]
00022e  e007              B        |L28.576|
                  |L28.560|
;;;131    	}
;;;132    	else
;;;133    	{
;;;134    		SYS->GPAMFP.ADC6_AD7 = 0;   /* configure GPA6 as GPIO */
000230  2505              MOVS     r5,#5
000232  072d              LSLS     r5,r5,#28
000234  6b2d              LDR      r5,[r5,#0x30]
000236  2640              MOVS     r6,#0x40
000238  43b5              BICS     r5,r5,r6
00023a  2605              MOVS     r6,#5
00023c  0736              LSLS     r6,r6,#28
00023e  6335              STR      r5,[r6,#0x30]
                  |L28.576|
;;;135    	}
;;;136    	
;;;137    	if( (u8ChannelSelBitwise&0x80) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&0x40)) )
000240  2580              MOVS     r5,#0x80
000242  422a              TST      r2,r5
000244  d104              BNE      |L28.592|
000246  2801              CMP      r0,#1
000248  d112              BNE      |L28.624|
00024a  2540              MOVS     r5,#0x40
00024c  422a              TST      r2,r5
00024e  d00f              BEQ      |L28.624|
                  |L28.592|
;;;138    	{
;;;139    		SYS->ALTMFP.PA7_S21 = 0;
000250  4d0e              LDR      r5,|L28.652|
000252  692d              LDR      r5,[r5,#0x10]
000254  2604              MOVS     r6,#4
000256  43b5              BICS     r5,r5,r6
000258  4e0c              LDR      r6,|L28.652|
00025a  6135              STR      r5,[r6,#0x10]
;;;140    		SYS->GPAMFP.ADC7_SS21_AD6 = 1;   /* configure GPA7 as analog input pin */
00025c  2505              MOVS     r5,#5
00025e  072d              LSLS     r5,r5,#28
000260  6b2d              LDR      r5,[r5,#0x30]
000262  2680              MOVS     r6,#0x80
000264  43b5              BICS     r5,r5,r6
000266  3580              ADDS     r5,r5,#0x80
000268  2605              MOVS     r6,#5
00026a  0736              LSLS     r6,r6,#28
00026c  6335              STR      r5,[r6,#0x30]
00026e  e007              B        |L28.640|
                  |L28.624|
;;;141    	}
;;;142    	else
;;;143    	{
;;;144    		SYS->GPAMFP.ADC7_SS21_AD6 = 0;   /* configure GPA7 as GPIO */
000270  2505              MOVS     r5,#5
000272  072d              LSLS     r5,r5,#28
000274  6b2d              LDR      r5,[r5,#0x30]
000276  2680              MOVS     r6,#0x80
000278  43b5              BICS     r5,r5,r6
00027a  2605              MOVS     r6,#5
00027c  0736              LSLS     r6,r6,#28
00027e  6335              STR      r5,[r6,#0x30]
                  |L28.640|
;;;145    	}
;;;146    }
000280  bdf0              POP      {r4-r7,pc}
;;;147    
                          ENDP

000282  0000              DCW      0x0000
                  |L28.644|
                          DCD      0x50000200
                  |L28.648|
                          DCD      0x400e0000
                  |L28.652|
                          DCD      0x50000040

                          AREA ||i.DrvADC_SetADCChannel||, CODE, READONLY, ALIGN=2

                  DrvADC_SetADCChannel PROC
;;;182    /*---------------------------------------------------------------------------------------------------------*/
;;;183    void DrvADC_SetADCChannel(uint8_t u8ChannelSelBitwise, E_ADC_INPUT_MODE InputMode)
000000  4a6e              LDR      r2,|L29.444|
;;;184    {     
;;;185    	ADC->ADCHER.CHEN = u8ChannelSelBitwise;
000002  6a52              LDR      r2,[r2,#0x24]
000004  0a12              LSRS     r2,r2,#8
000006  0212              LSLS     r2,r2,#8
000008  4302              ORRS     r2,r2,r0
00000a  4b6c              LDR      r3,|L29.444|
00000c  625a              STR      r2,[r3,#0x24]
;;;186    	if( (u8ChannelSelBitwise&1) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&2)) )
00000e  07c2              LSLS     r2,r0,#31
000010  0fd2              LSRS     r2,r2,#31
000012  d104              BNE      |L29.30|
000014  2901              CMP      r1,#1
000016  d10c              BNE      |L29.50|
000018  2202              MOVS     r2,#2
00001a  4210              TST      r0,r2
00001c  d009              BEQ      |L29.50|
                  |L29.30|
;;;187    	{
;;;188    		SYS->GPAMFP.ADC0 = 1;   /* configure GPA0 as analog input pin */
00001e  2205              MOVS     r2,#5
000020  0712              LSLS     r2,r2,#28
000022  6b12              LDR      r2,[r2,#0x30]
000024  0852              LSRS     r2,r2,#1
000026  0052              LSLS     r2,r2,#1
000028  1c52              ADDS     r2,r2,#1
00002a  2305              MOVS     r3,#5
00002c  071b              LSLS     r3,r3,#28
00002e  631a              STR      r2,[r3,#0x30]
000030  e007              B        |L29.66|
                  |L29.50|
;;;189    	}
;;;190    	else
;;;191    	{
;;;192    		SYS->GPAMFP.ADC0 = 0;   /* configure GPA0 as GPIO */
000032  2205              MOVS     r2,#5
000034  0712              LSLS     r2,r2,#28
000036  6b12              LDR      r2,[r2,#0x30]
000038  0852              LSRS     r2,r2,#1
00003a  0052              LSLS     r2,r2,#1
00003c  2305              MOVS     r3,#5
00003e  071b              LSLS     r3,r3,#28
000040  631a              STR      r2,[r3,#0x30]
                  |L29.66|
;;;193    	}
;;;194    	
;;;195    	if( (u8ChannelSelBitwise&2) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&1)) )
000042  2202              MOVS     r2,#2
000044  4210              TST      r0,r2
000046  d104              BNE      |L29.82|
000048  2901              CMP      r1,#1
00004a  d10c              BNE      |L29.102|
00004c  07c2              LSLS     r2,r0,#31
00004e  0fd2              LSRS     r2,r2,#31
000050  d009              BEQ      |L29.102|
                  |L29.82|
;;;196    	{
;;;197    		SYS->GPAMFP.ADC1_AD12 = 1;   /* configure GPA1 as analog input pin */
000052  2205              MOVS     r2,#5
000054  0712              LSLS     r2,r2,#28
000056  6b12              LDR      r2,[r2,#0x30]
000058  2302              MOVS     r3,#2
00005a  439a              BICS     r2,r2,r3
00005c  1c92              ADDS     r2,r2,#2
00005e  2305              MOVS     r3,#5
000060  071b              LSLS     r3,r3,#28
000062  631a              STR      r2,[r3,#0x30]
000064  e007              B        |L29.118|
                  |L29.102|
;;;198    	}
;;;199    	else
;;;200    	{
;;;201    		SYS->GPAMFP.ADC1_AD12 = 0;   /* configure GPA1 as GPIO */
000066  2205              MOVS     r2,#5
000068  0712              LSLS     r2,r2,#28
00006a  6b12              LDR      r2,[r2,#0x30]
00006c  2302              MOVS     r3,#2
00006e  439a              BICS     r2,r2,r3
000070  2305              MOVS     r3,#5
000072  071b              LSLS     r3,r3,#28
000074  631a              STR      r2,[r3,#0x30]
                  |L29.118|
;;;202    	}
;;;203    	
;;;204    	if( (u8ChannelSelBitwise&4) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&8)) )
000076  2204              MOVS     r2,#4
000078  4210              TST      r0,r2
00007a  d104              BNE      |L29.134|
00007c  2901              CMP      r1,#1
00007e  d10c              BNE      |L29.154|
000080  2208              MOVS     r2,#8
000082  4210              TST      r0,r2
000084  d009              BEQ      |L29.154|
                  |L29.134|
;;;205    	{
;;;206    		SYS->GPAMFP.ADC2_AD11 = 1;   /* configure GPA2 as analog input pin */
000086  2205              MOVS     r2,#5
000088  0712              LSLS     r2,r2,#28
00008a  6b12              LDR      r2,[r2,#0x30]
00008c  2304              MOVS     r3,#4
00008e  439a              BICS     r2,r2,r3
000090  1d12              ADDS     r2,r2,#4
000092  2305              MOVS     r3,#5
000094  071b              LSLS     r3,r3,#28
000096  631a              STR      r2,[r3,#0x30]
000098  e007              B        |L29.170|
                  |L29.154|
;;;207    	}
;;;208    	else
;;;209    	{
;;;210    		SYS->GPAMFP.ADC2_AD11 = 0;   /* configure GPA2 as GPIO */
00009a  2205              MOVS     r2,#5
00009c  0712              LSLS     r2,r2,#28
00009e  6b12              LDR      r2,[r2,#0x30]
0000a0  2304              MOVS     r3,#4
0000a2  439a              BICS     r2,r2,r3
0000a4  2305              MOVS     r3,#5
0000a6  071b              LSLS     r3,r3,#28
0000a8  631a              STR      r2,[r3,#0x30]
                  |L29.170|
;;;211    	}
;;;212    	
;;;213    	if( (u8ChannelSelBitwise&8) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&4)) )
0000aa  2208              MOVS     r2,#8
0000ac  4210              TST      r0,r2
0000ae  d104              BNE      |L29.186|
0000b0  2901              CMP      r1,#1
0000b2  d10c              BNE      |L29.206|
0000b4  2204              MOVS     r2,#4
0000b6  4210              TST      r0,r2
0000b8  d009              BEQ      |L29.206|
                  |L29.186|
;;;214    	{
;;;215    		SYS->GPAMFP.ADC3_AD10 = 1;   /* configure GPA3 as analog input pin */
0000ba  2205              MOVS     r2,#5
0000bc  0712              LSLS     r2,r2,#28
0000be  6b12              LDR      r2,[r2,#0x30]
0000c0  2308              MOVS     r3,#8
0000c2  439a              BICS     r2,r2,r3
0000c4  3208              ADDS     r2,r2,#8
0000c6  2305              MOVS     r3,#5
0000c8  071b              LSLS     r3,r3,#28
0000ca  631a              STR      r2,[r3,#0x30]
0000cc  e007              B        |L29.222|
                  |L29.206|
;;;216    	}
;;;217    	else
;;;218    	{
;;;219    		SYS->GPAMFP.ADC3_AD10 = 0;   /* configure GPA3 as GPIO */
0000ce  2205              MOVS     r2,#5
0000d0  0712              LSLS     r2,r2,#28
0000d2  6b12              LDR      r2,[r2,#0x30]
0000d4  2308              MOVS     r3,#8
0000d6  439a              BICS     r2,r2,r3
0000d8  2305              MOVS     r3,#5
0000da  071b              LSLS     r3,r3,#28
0000dc  631a              STR      r2,[r3,#0x30]
                  |L29.222|
;;;220    	}
;;;221    	
;;;222    	if( (u8ChannelSelBitwise&0x10) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&0x20)) )
0000de  2210              MOVS     r2,#0x10
0000e0  4210              TST      r0,r2
0000e2  d104              BNE      |L29.238|
0000e4  2901              CMP      r1,#1
0000e6  d10c              BNE      |L29.258|
0000e8  2220              MOVS     r2,#0x20
0000ea  4210              TST      r0,r2
0000ec  d009              BEQ      |L29.258|
                  |L29.238|
;;;223    	{
;;;224    		SYS->GPAMFP.ADC4_AD9 = 1;   /* configure GPA4 as analog input pin */
0000ee  2205              MOVS     r2,#5
0000f0  0712              LSLS     r2,r2,#28
0000f2  6b12              LDR      r2,[r2,#0x30]
0000f4  2310              MOVS     r3,#0x10
0000f6  439a              BICS     r2,r2,r3
0000f8  3210              ADDS     r2,r2,#0x10
0000fa  2305              MOVS     r3,#5
0000fc  071b              LSLS     r3,r3,#28
0000fe  631a              STR      r2,[r3,#0x30]
000100  e007              B        |L29.274|
                  |L29.258|
;;;225    	}
;;;226    	else
;;;227    	{
;;;228    		SYS->GPAMFP.ADC4_AD9 = 0;   /* configure GPA4 as GPIO */
000102  2205              MOVS     r2,#5
000104  0712              LSLS     r2,r2,#28
000106  6b12              LDR      r2,[r2,#0x30]
000108  2310              MOVS     r3,#0x10
00010a  439a              BICS     r2,r2,r3
00010c  2305              MOVS     r3,#5
00010e  071b              LSLS     r3,r3,#28
000110  631a              STR      r2,[r3,#0x30]
                  |L29.274|
;;;229    	}
;;;230    	
;;;231    	if( (u8ChannelSelBitwise&0x20) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&0x10)) )
000112  2220              MOVS     r2,#0x20
000114  4210              TST      r0,r2
000116  d104              BNE      |L29.290|
000118  2901              CMP      r1,#1
00011a  d10c              BNE      |L29.310|
00011c  2210              MOVS     r2,#0x10
00011e  4210              TST      r0,r2
000120  d009              BEQ      |L29.310|
                  |L29.290|
;;;232    	{
;;;233    		SYS->GPAMFP.ADC5_AD8 = 1;   /* configure GPA5 as analog input pin */
000122  2205              MOVS     r2,#5
000124  0712              LSLS     r2,r2,#28
000126  6b12              LDR      r2,[r2,#0x30]
000128  2320              MOVS     r3,#0x20
00012a  439a              BICS     r2,r2,r3
00012c  3220              ADDS     r2,r2,#0x20
00012e  2305              MOVS     r3,#5
000130  071b              LSLS     r3,r3,#28
000132  631a              STR      r2,[r3,#0x30]
000134  e007              B        |L29.326|
                  |L29.310|
;;;234    	}
;;;235    	else
;;;236    	{
;;;237    		SYS->GPAMFP.ADC5_AD8 = 0;   /* configure GPA5 as GPIO */
000136  2205              MOVS     r2,#5
000138  0712              LSLS     r2,r2,#28
00013a  6b12              LDR      r2,[r2,#0x30]
00013c  2320              MOVS     r3,#0x20
00013e  439a              BICS     r2,r2,r3
000140  2305              MOVS     r3,#5
000142  071b              LSLS     r3,r3,#28
000144  631a              STR      r2,[r3,#0x30]
                  |L29.326|
;;;238    	}
;;;239    	
;;;240    	if( (u8ChannelSelBitwise&0x40) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&0x80)) )
000146  2240              MOVS     r2,#0x40
000148  4210              TST      r0,r2
00014a  d104              BNE      |L29.342|
00014c  2901              CMP      r1,#1
00014e  d10c              BNE      |L29.362|
000150  2280              MOVS     r2,#0x80
000152  4210              TST      r0,r2
000154  d009              BEQ      |L29.362|
                  |L29.342|
;;;241    	{
;;;242    		SYS->GPAMFP.ADC6_AD7 = 1;   /* configure GPA6 as analog input pin */
000156  2205              MOVS     r2,#5
000158  0712              LSLS     r2,r2,#28
00015a  6b12              LDR      r2,[r2,#0x30]
00015c  2340              MOVS     r3,#0x40
00015e  439a              BICS     r2,r2,r3
000160  3240              ADDS     r2,r2,#0x40
000162  2305              MOVS     r3,#5
000164  071b              LSLS     r3,r3,#28
000166  631a              STR      r2,[r3,#0x30]
000168  e007              B        |L29.378|
                  |L29.362|
;;;243    	}
;;;244    	else
;;;245    	{
;;;246    		SYS->GPAMFP.ADC6_AD7 = 0;   /* configure GPA6 as GPIO */
00016a  2205              MOVS     r2,#5
00016c  0712              LSLS     r2,r2,#28
00016e  6b12              LDR      r2,[r2,#0x30]
000170  2340              MOVS     r3,#0x40
000172  439a              BICS     r2,r2,r3
000174  2305              MOVS     r3,#5
000176  071b              LSLS     r3,r3,#28
000178  631a              STR      r2,[r3,#0x30]
                  |L29.378|
;;;247    	}
;;;248    	
;;;249    	if( (u8ChannelSelBitwise&0x80) || ((InputMode==ADC_DIFFERENTIAL)&&(u8ChannelSelBitwise&0x40)) )
00017a  2280              MOVS     r2,#0x80
00017c  4210              TST      r0,r2
00017e  d104              BNE      |L29.394|
000180  2901              CMP      r1,#1
000182  d112              BNE      |L29.426|
000184  2240              MOVS     r2,#0x40
000186  4210              TST      r0,r2
000188  d00f              BEQ      |L29.426|
                  |L29.394|
;;;250    	{
;;;251    		SYS->ALTMFP.PA7_S21 = 0;
00018a  4a0d              LDR      r2,|L29.448|
00018c  6912              LDR      r2,[r2,#0x10]
00018e  2304              MOVS     r3,#4
000190  439a              BICS     r2,r2,r3
000192  4b0b              LDR      r3,|L29.448|
000194  611a              STR      r2,[r3,#0x10]
;;;252    		SYS->GPAMFP.ADC7_SS21_AD6 = 1;   /* configure GPA7 as analog input pin */
000196  2205              MOVS     r2,#5
000198  0712              LSLS     r2,r2,#28
00019a  6b12              LDR      r2,[r2,#0x30]
00019c  2380              MOVS     r3,#0x80
00019e  439a              BICS     r2,r2,r3
0001a0  3280              ADDS     r2,r2,#0x80
0001a2  2305              MOVS     r3,#5
0001a4  071b              LSLS     r3,r3,#28
0001a6  631a              STR      r2,[r3,#0x30]
0001a8  e007              B        |L29.442|
                  |L29.426|
;;;253    	}
;;;254    	else
;;;255    	{
;;;256    		SYS->GPAMFP.ADC7_SS21_AD6 = 0;   /* configure GPA7 as GPIO */
0001aa  2205              MOVS     r2,#5
0001ac  0712              LSLS     r2,r2,#28
0001ae  6b12              LDR      r2,[r2,#0x30]
0001b0  2380              MOVS     r3,#0x80
0001b2  439a              BICS     r2,r2,r3
0001b4  2305              MOVS     r3,#5
0001b6  071b              LSLS     r3,r3,#28
0001b8  631a              STR      r2,[r3,#0x30]
                  |L29.442|
;;;257    	}
;;;258    }
0001ba  4770              BX       lr
;;;259    
                          ENDP

                  |L29.444|
                          DCD      0x400e0000
                  |L29.448|
                          DCD      0x50000040

                          AREA ||i.DrvADC_SetADCClkSrc||, CODE, READONLY, ALIGN=2

                  DrvADC_SetADCClkSrc PROC
;;;336    /*---------------------------------------------------------------------------------------------------------*/
;;;337    void DrvADC_SetADCClkSrc(E_ADC_CLK_SRC ClockSrc)
000000  4905              LDR      r1,|L30.24|
;;;338    {
;;;339     	SYSCLK->CLKSEL1.ADC_S = ClockSrc; /* ADC clock source */
000002  6949              LDR      r1,[r1,#0x14]
000004  220c              MOVS     r2,#0xc
000006  4391              BICS     r1,r1,r2
000008  0082              LSLS     r2,r0,#2
00000a  230c              MOVS     r3,#0xc
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L30.24|
000012  6151              STR      r1,[r2,#0x14]
;;;340    }
000014  4770              BX       lr
;;;341    
                          ENDP

000016  0000              DCW      0x0000
                  |L30.24|
                          DCD      0x50000200

                          AREA ||i.DrvADC_SetADCDivisor||, CODE, READONLY, ALIGN=2

                  DrvADC_SetADCDivisor PROC
;;;354    /*---------------------------------------------------------------------------------------------------------*/
;;;355    void DrvADC_SetADCDivisor(uint8_t u8AdcDivisor)
000000  4906              LDR      r1,|L31.28|
;;;356    {
;;;357     	SYSCLK->CLKDIV.ADC_N = u8AdcDivisor;
000002  6989              LDR      r1,[r1,#0x18]
000004  22ff              MOVS     r2,#0xff
000006  0412              LSLS     r2,r2,#16
000008  4391              BICS     r1,r1,r2
00000a  0402              LSLS     r2,r0,#16
00000c  23ff              MOVS     r3,#0xff
00000e  041b              LSLS     r3,r3,#16
000010  401a              ANDS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4a01              LDR      r2,|L31.28|
000016  6191              STR      r1,[r2,#0x18]
;;;358    }
000018  4770              BX       lr
;;;359    
                          ENDP

00001a  0000              DCW      0x0000
                  |L31.28|
                          DCD      0x50000200

                          AREA ||i.DrvADC_SetADCInputMode||, CODE, READONLY, ALIGN=2

                  DrvADC_SetADCInputMode PROC
;;;294    /*---------------------------------------------------------------------------------------------------------*/
;;;295    void DrvADC_SetADCInputMode(E_ADC_INPUT_MODE InputMode)
000000  2800              CMP      r0,#0
;;;296    {
;;;297     	if( InputMode == ADC_SINGLE_END )
000002  d107              BNE      |L32.20|
;;;298    		ADC->ADCR.DIFFEN = 0;     /* single end input */
000004  4908              LDR      r1,|L32.40|
000006  6a09              LDR      r1,[r1,#0x20]
000008  2201              MOVS     r2,#1
00000a  0292              LSLS     r2,r2,#10
00000c  4391              BICS     r1,r1,r2
00000e  4a06              LDR      r2,|L32.40|
000010  6211              STR      r1,[r2,#0x20]
000012  e007              B        |L32.36|
                  |L32.20|
;;;299    	else
;;;300    		ADC->ADCR.DIFFEN = 1;     /* differential input */
000014  4904              LDR      r1,|L32.40|
000016  6a09              LDR      r1,[r1,#0x20]
000018  2201              MOVS     r2,#1
00001a  0292              LSLS     r2,r2,#10
00001c  4391              BICS     r1,r1,r2
00001e  1889              ADDS     r1,r1,r2
000020  4a01              LDR      r2,|L32.40|
000022  6211              STR      r1,[r2,#0x20]
                  |L32.36|
;;;301    }
000024  4770              BX       lr
;;;302    
                          ENDP

000026  0000              DCW      0x0000
                  |L32.40|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_SetADCOperationMode||, CODE, READONLY, ALIGN=2

                  DrvADC_SetADCOperationMode PROC
;;;314    /*---------------------------------------------------------------------------------------------------------*/
;;;315    void DrvADC_SetADCOperationMode(E_ADC_OPERATION_MODE OpMode)
000000  2800              CMP      r0,#0
;;;316    {
;;;317     	if( OpMode == ADC_SINGLE_OP )
000002  d106              BNE      |L33.18|
;;;318    		ADC->ADCR.ADMD = 0;         /* single mode */
000004  490c              LDR      r1,|L33.56|
000006  6a09              LDR      r1,[r1,#0x20]
000008  220c              MOVS     r2,#0xc
00000a  4391              BICS     r1,r1,r2
00000c  4a0a              LDR      r2,|L33.56|
00000e  6211              STR      r1,[r2,#0x20]
000010  e010              B        |L33.52|
                  |L33.18|
;;;319    	else if( OpMode == ADC_SINGLE_CYCLE_OP )
000012  2801              CMP      r0,#1
000014  d107              BNE      |L33.38|
;;;320    		ADC->ADCR.ADMD = 2;         /* single-cycle scan mode */
000016  4908              LDR      r1,|L33.56|
000018  6a09              LDR      r1,[r1,#0x20]
00001a  220c              MOVS     r2,#0xc
00001c  4391              BICS     r1,r1,r2
00001e  3108              ADDS     r1,r1,#8
000020  4a05              LDR      r2,|L33.56|
000022  6211              STR      r1,[r2,#0x20]
000024  e006              B        |L33.52|
                  |L33.38|
;;;321    	else
;;;322    		ADC->ADCR.ADMD = 3;         /* continuous scan mode */
000026  4904              LDR      r1,|L33.56|
000028  6a09              LDR      r1,[r1,#0x20]
00002a  220c              MOVS     r2,#0xc
00002c  4391              BICS     r1,r1,r2
00002e  310c              ADDS     r1,r1,#0xc
000030  4a01              LDR      r2,|L33.56|
000032  6211              STR      r1,[r2,#0x20]
                  |L33.52|
;;;323    }
000034  4770              BX       lr
;;;324    
                          ENDP

000036  0000              DCW      0x0000
                  |L33.56|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_StartConvert||, CODE, READONLY, ALIGN=2

                  DrvADC_StartConvert PROC
;;;605    /*---------------------------------------------------------------------------------------------------------*/
;;;606    void DrvADC_StartConvert(void)
000000  4807              LDR      r0,|L34.32|
;;;607    {
;;;608    	/* clear the A/D conversion interrupt flag (ADF) */
;;;609    	/* "ADC->ADSR.ADF = 1;" is not recommended. It may clear CMPF0 and CMPF1 */
;;;610    	outpw(ADC_ADSR, (inpw(ADC_ADSR)&(~0x7))|0x1);
000002  6b00              LDR      r0,[r0,#0x30]
000004  08c0              LSRS     r0,r0,#3
000006  00c0              LSLS     r0,r0,#3
000008  1c40              ADDS     r0,r0,#1
00000a  4905              LDR      r1,|L34.32|
00000c  6308              STR      r0,[r1,#0x30]
;;;611    	ADC->ADCR.ADST = 1;
00000e  4608              MOV      r0,r1
000010  6a00              LDR      r0,[r0,#0x20]
000012  2101              MOVS     r1,#1
000014  02c9              LSLS     r1,r1,#11
000016  4388              BICS     r0,r0,r1
000018  1840              ADDS     r0,r0,r1
00001a  4901              LDR      r1,|L34.32|
00001c  6208              STR      r0,[r1,#0x20]
;;;612    }
00001e  4770              BX       lr
;;;613    
                          ENDP

                  |L34.32|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_StopConvert||, CODE, READONLY, ALIGN=2

                  DrvADC_StopConvert PROC
;;;625    /*---------------------------------------------------------------------------------------------------------*/
;;;626    void DrvADC_StopConvert(void)
000000  4803              LDR      r0,|L35.16|
;;;627    {
;;;628    	ADC->ADCR.ADST = 0;
000002  6a00              LDR      r0,[r0,#0x20]
000004  2101              MOVS     r1,#1
000006  02c9              LSLS     r1,r1,#11
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L35.16|
00000c  6208              STR      r0,[r1,#0x20]
;;;629    }
00000e  4770              BX       lr
;;;630    
                          ENDP

                  |L35.16|
                          DCD      0x400e0000

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L36.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L36.16|
                          DCD      0xe000e100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_pu32UserData
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  g_ptADCCallBack
                          DCD      0x00000000
                  g_ptADCMP0CallBack
                          DCD      0x00000000
                  g_ptADCMP1CallBack
                          DCD      0x00000000
