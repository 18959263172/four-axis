; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvspi.o --depend=.\obj\drvspi.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvspi.crf ..\BSP_Lib\Src\Driver\DrvSPI.c]
                          THUMB

                          AREA ||i.DrvSPI_BurstRead||, CODE, READONLY, ALIGN=2

                  DrvSPI_BurstRead PROC
;;;1122   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1123   uint8_t DrvSPI_BurstRead(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Buf)
000000  b510              PUSH     {r4,lr}
;;;1124   {
000002  4602              MOV      r2,r0
;;;1125   	if(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY==1)
000004  0090              LSLS     r0,r2,#2
000006  4b0f              LDR      r3,|L1.68|
000008  5818              LDR      r0,[r3,r0]
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  0fc0              LSRS     r0,r0,#31
000010  2801              CMP      r0,#1
000012  d101              BNE      |L1.24|
;;;1126   		return FALSE;
000014  2000              MOVS     r0,#0
                  |L1.22|
;;;1127   
;;;1128   	pu32Buf[0] = SPI_PORT[eSpiPort]->RX[0];
;;;1129   	pu32Buf[1] = SPI_PORT[eSpiPort]->RX[1];
;;;1130   	SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
;;;1131   
;;;1132   	return TRUE;
;;;1133   }
000016  bd10              POP      {r4,pc}
                  |L1.24|
000018  0090              LSLS     r0,r2,#2              ;1128
00001a  4b0a              LDR      r3,|L1.68|
00001c  5818              LDR      r0,[r3,r0]            ;1128
00001e  6900              LDR      r0,[r0,#0x10]         ;1128
000020  6008              STR      r0,[r1,#0]            ;1128
000022  0090              LSLS     r0,r2,#2              ;1129
000024  5818              LDR      r0,[r3,r0]            ;1129
000026  6940              LDR      r0,[r0,#0x14]         ;1129
000028  6048              STR      r0,[r1,#4]            ;1129
00002a  0090              LSLS     r0,r2,#2              ;1130
00002c  5818              LDR      r0,[r3,r0]            ;1130
00002e  6800              LDR      r0,[r0,#0]            ;1130
000030  0840              LSRS     r0,r0,#1              ;1130
000032  0040              LSLS     r0,r0,#1              ;1130
000034  1c40              ADDS     r0,r0,#1              ;1130
000036  0093              LSLS     r3,r2,#2              ;1130
000038  4c02              LDR      r4,|L1.68|
00003a  58e3              LDR      r3,[r4,r3]            ;1130
00003c  6018              STR      r0,[r3,#0]            ;1130
00003e  2001              MOVS     r0,#1                 ;1132
000040  e7e9              B        |L1.22|
;;;1134   
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_BurstTransfer||, CODE, READONLY, ALIGN=2

                  DrvSPI_BurstTransfer PROC
;;;805    /*-------------------------------------------------------------------------------------------------------------------*/
;;;806    int32_t DrvSPI_BurstTransfer(E_DRVSPI_PORT eSpiPort, int32_t i32BurstCnt, int32_t i32Interval)
000000  b530              PUSH     {r4,r5,lr}
;;;807    {
000002  4603              MOV      r3,r0
;;;808    
;;;809    	if((i32BurstCnt < 1) || (i32BurstCnt > 2))
000004  2901              CMP      r1,#1
000006  db01              BLT      |L2.12|
000008  2902              CMP      r1,#2
00000a  dd01              BLE      |L2.16|
                  |L2.12|
;;;810    	{
;;;811    		return E_DRVSPI_ERR_BURST_CNT;
00000c  4816              LDR      r0,|L2.104|
                  |L2.14|
;;;812    	}
;;;813    	
;;;814    	if((i32Interval < 2) || (i32Interval > 17))
;;;815    	{
;;;816    		return E_DRVSPI_ERR_SUSPEND_INTERVAL;
;;;817    	}
;;;818    
;;;819    	SPI_PORT[eSpiPort]->CNTRL.TX_NUM = i32BurstCnt-1;
;;;820    	SPI_PORT[eSpiPort]->CNTRL.SP_CYCLE = i32Interval-2;
;;;821    
;;;822    	return E_SUCCESS;
;;;823    }
00000e  bd30              POP      {r4,r5,pc}
                  |L2.16|
000010  2a02              CMP      r2,#2                 ;814
000012  db01              BLT      |L2.24|
000014  2a11              CMP      r2,#0x11              ;814
000016  dd02              BLE      |L2.30|
                  |L2.24|
000018  4813              LDR      r0,|L2.104|
00001a  1c40              ADDS     r0,r0,#1              ;816
00001c  e7f7              B        |L2.14|
                  |L2.30|
00001e  0098              LSLS     r0,r3,#2              ;819
000020  4c12              LDR      r4,|L2.108|
000022  5820              LDR      r0,[r4,r0]            ;819
000024  6800              LDR      r0,[r0,#0]            ;819
000026  2403              MOVS     r4,#3                 ;819
000028  0224              LSLS     r4,r4,#8              ;819
00002a  43a0              BICS     r0,r0,r4              ;819
00002c  1e4c              SUBS     r4,r1,#1              ;819
00002e  0224              LSLS     r4,r4,#8              ;819
000030  2503              MOVS     r5,#3                 ;819
000032  022d              LSLS     r5,r5,#8              ;819
000034  402c              ANDS     r4,r4,r5              ;819
000036  4320              ORRS     r0,r0,r4              ;819
000038  009c              LSLS     r4,r3,#2              ;819
00003a  4d0c              LDR      r5,|L2.108|
00003c  592c              LDR      r4,[r5,r4]            ;819
00003e  6020              STR      r0,[r4,#0]            ;819
000040  0098              LSLS     r0,r3,#2              ;820
000042  462c              MOV      r4,r5                 ;820
000044  5820              LDR      r0,[r4,r0]            ;820
000046  6800              LDR      r0,[r0,#0]            ;820
000048  240f              MOVS     r4,#0xf               ;820
00004a  0324              LSLS     r4,r4,#12             ;820
00004c  43a0              BICS     r0,r0,r4              ;820
00004e  1e94              SUBS     r4,r2,#2              ;820
000050  0324              LSLS     r4,r4,#12             ;820
000052  250f              MOVS     r5,#0xf               ;820
000054  032d              LSLS     r5,r5,#12             ;820
000056  402c              ANDS     r4,r4,r5              ;820
000058  4320              ORRS     r0,r0,r4              ;820
00005a  009c              LSLS     r4,r3,#2              ;820
00005c  4d03              LDR      r5,|L2.108|
00005e  592c              LDR      r4,[r5,r4]            ;820
000060  6020              STR      r0,[r4,#0]            ;820
000062  2000              MOVS     r0,#0                 ;822
000064  e7d3              B        |L2.14|
;;;824    
                          ENDP

000066  0000              DCW      0x0000
                  |L2.104|
                          DCD      0xffff9400
                  |L2.108|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_BurstWrite||, CODE, READONLY, ALIGN=2

                  DrvSPI_BurstWrite PROC
;;;1148   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1149   uint8_t DrvSPI_BurstWrite(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Buf)
000000  b510              PUSH     {r4,lr}
;;;1150   {
000002  4602              MOV      r2,r0
;;;1151   	if(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY==1)
000004  0090              LSLS     r0,r2,#2
000006  4b0f              LDR      r3,|L3.68|
000008  5818              LDR      r0,[r3,r0]
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  0fc0              LSRS     r0,r0,#31
000010  2801              CMP      r0,#1
000012  d101              BNE      |L3.24|
;;;1152   		return FALSE;
000014  2000              MOVS     r0,#0
                  |L3.22|
;;;1153   
;;;1154   	SPI_PORT[eSpiPort]->TX[0] = pu32Buf[0];
;;;1155   	SPI_PORT[eSpiPort]->TX[1] = pu32Buf[1];
;;;1156   	SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
;;;1157   
;;;1158   	return TRUE;
;;;1159   }
000016  bd10              POP      {r4,pc}
                  |L3.24|
000018  0093              LSLS     r3,r2,#2              ;1154
00001a  4c0a              LDR      r4,|L3.68|
00001c  58e3              LDR      r3,[r4,r3]            ;1154
00001e  6808              LDR      r0,[r1,#0]            ;1154
000020  6218              STR      r0,[r3,#0x20]         ;1154
000022  0090              LSLS     r0,r2,#2              ;1155
000024  5820              LDR      r0,[r4,r0]            ;1155
000026  684b              LDR      r3,[r1,#4]            ;1155
000028  6243              STR      r3,[r0,#0x24]         ;1155
00002a  0090              LSLS     r0,r2,#2              ;1156
00002c  4623              MOV      r3,r4                 ;1156
00002e  5818              LDR      r0,[r3,r0]            ;1156
000030  6800              LDR      r0,[r0,#0]            ;1156
000032  0840              LSRS     r0,r0,#1              ;1156
000034  0040              LSLS     r0,r0,#1              ;1156
000036  1c40              ADDS     r0,r0,#1              ;1156
000038  0093              LSLS     r3,r2,#2              ;1156
00003a  58e3              LDR      r3,[r4,r3]            ;1156
00003c  6018              STR      r0,[r3,#0]            ;1156
00003e  2001              MOVS     r0,#1                 ;1158
000040  e7e9              B        |L3.22|
;;;1160   
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Close||, CODE, READONLY, ALIGN=2

                  DrvSPI_Close PROC
;;;415    /*---------------------------------------------------------------------------------------------------------*/
;;;416    void DrvSPI_Close(E_DRVSPI_PORT eSpiPort)
000000  b570              PUSH     {r4-r6,lr}
;;;417    {
000002  4604              MOV      r4,r0
;;;418    	int32_t i32TimeOut;
;;;419    	
;;;420    	g_sSpiHandler[eSpiPort].bBusy = FALSE;
000004  2100              MOVS     r1,#0
000006  200c              MOVS     r0,#0xc
000008  4360              MULS     r0,r4,r0
00000a  4a48              LDR      r2,|L4.300|
00000c  1880              ADDS     r0,r0,r2
00000e  7041              STRB     r1,[r0,#1]
;;;421    	g_sSpiHandler[eSpiPort].pfncallback = NULL;
000010  200c              MOVS     r0,#0xc
000012  4360              MULS     r0,r4,r0
000014  1880              ADDS     r0,r0,r2
000016  6041              STR      r1,[r0,#4]
;;;422    	g_sSpiHandler[eSpiPort].u32userData = 0;
000018  200c              MOVS     r0,#0xc
00001a  4360              MULS     r0,r4,r0
00001c  1880              ADDS     r0,r0,r2
00001e  6081              STR      r1,[r0,#8]
;;;423    
;;;424    	/* Check SPI state */
;;;425    	i32TimeOut = 0x10000;
000020  2501              MOVS     r5,#1
000022  042d              LSLS     r5,r5,#16
;;;426    	while(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY == 1)
000024  e004              B        |L4.48|
                  |L4.38|
;;;427    	{
;;;428    		if(i32TimeOut-- <= 0)
000026  4628              MOV      r0,r5
000028  1e6d              SUBS     r5,r5,#1
00002a  2800              CMP      r0,#0
00002c  dc00              BGT      |L4.48|
;;;429    			break;
00002e  e007              B        |L4.64|
                  |L4.48|
000030  00a0              LSLS     r0,r4,#2              ;426
000032  493f              LDR      r1,|L4.304|
000034  5808              LDR      r0,[r1,r0]            ;426
000036  6800              LDR      r0,[r0,#0]            ;426
000038  07c0              LSLS     r0,r0,#31             ;426
00003a  0fc0              LSRS     r0,r0,#31             ;426
00003c  2801              CMP      r0,#1                 ;426
00003e  d0f2              BEQ      |L4.38|
                  |L4.64|
000040  bf00              NOP      
;;;430    	}
;;;431       
;;;432       if(eSpiPort == eDRVSPI_PORT0)
000042  2c00              CMP      r4,#0
000044  d11c              BNE      |L4.128|
;;;433    	{
;;;434    		NVIC_DisableIRQ(SPI0_IRQn);
000046  200e              MOVS     r0,#0xe
000048  f7fffffe          BL       NVIC_DisableIRQ
;;;435    		SYS->IPRSTC2.SPI0_RST=1;
00004c  2005              MOVS     r0,#5
00004e  0700              LSLS     r0,r0,#28
000050  68c0              LDR      r0,[r0,#0xc]
000052  2101              MOVS     r1,#1
000054  0309              LSLS     r1,r1,#12
000056  4388              BICS     r0,r0,r1
000058  1840              ADDS     r0,r0,r1
00005a  2105              MOVS     r1,#5
00005c  0709              LSLS     r1,r1,#28
00005e  60c8              STR      r0,[r1,#0xc]
;;;436    		SYS->IPRSTC2.SPI0_RST=0;
000060  4608              MOV      r0,r1
000062  68c0              LDR      r0,[r0,#0xc]
000064  2101              MOVS     r1,#1
000066  0309              LSLS     r1,r1,#12
000068  4388              BICS     r0,r0,r1
00006a  2105              MOVS     r1,#5
00006c  0709              LSLS     r1,r1,#28
00006e  60c8              STR      r0,[r1,#0xc]
;;;437    		SYSCLK->APBCLK.SPI0_EN=0;
000070  4830              LDR      r0,|L4.308|
000072  6880              LDR      r0,[r0,#8]
000074  2101              MOVS     r1,#1
000076  0309              LSLS     r1,r1,#12
000078  4388              BICS     r0,r0,r1
00007a  492e              LDR      r1,|L4.308|
00007c  6088              STR      r0,[r1,#8]
00007e  e053              B        |L4.296|
                  |L4.128|
;;;438    	}
;;;439    	else if(eSpiPort == eDRVSPI_PORT1)
000080  2c01              CMP      r4,#1
000082  d119              BNE      |L4.184|
;;;440    	{
;;;441    		NVIC_DisableIRQ(SPI1_IRQn);
000084  200f              MOVS     r0,#0xf
000086  f7fffffe          BL       NVIC_DisableIRQ
;;;442    		SYS->IPRSTC2.SPI1_RST=1;
00008a  2005              MOVS     r0,#5
00008c  0700              LSLS     r0,r0,#28
00008e  68c0              LDR      r0,[r0,#0xc]
000090  0361              LSLS     r1,r4,#13
000092  4388              BICS     r0,r0,r1
000094  1840              ADDS     r0,r0,r1
000096  2105              MOVS     r1,#5
000098  0709              LSLS     r1,r1,#28
00009a  60c8              STR      r0,[r1,#0xc]
;;;443    		SYS->IPRSTC2.SPI1_RST=0;
00009c  4608              MOV      r0,r1
00009e  68c0              LDR      r0,[r0,#0xc]
0000a0  0361              LSLS     r1,r4,#13
0000a2  4388              BICS     r0,r0,r1
0000a4  2105              MOVS     r1,#5
0000a6  0709              LSLS     r1,r1,#28
0000a8  60c8              STR      r0,[r1,#0xc]
;;;444    		SYSCLK->APBCLK.SPI1_EN=0;
0000aa  4822              LDR      r0,|L4.308|
0000ac  6880              LDR      r0,[r0,#8]
0000ae  0361              LSLS     r1,r4,#13
0000b0  4388              BICS     r0,r0,r1
0000b2  4920              LDR      r1,|L4.308|
0000b4  6088              STR      r0,[r1,#8]
0000b6  e037              B        |L4.296|
                  |L4.184|
;;;445    	}
;;;446    	else if(eSpiPort == eDRVSPI_PORT2)
0000b8  2c02              CMP      r4,#2
0000ba  d119              BNE      |L4.240|
;;;447    	{
;;;448    		NVIC_DisableIRQ(SPI2_IRQn);
0000bc  2010              MOVS     r0,#0x10
0000be  f7fffffe          BL       NVIC_DisableIRQ
;;;449    		SYS->IPRSTC2.SPI2_RST=1;
0000c2  2005              MOVS     r0,#5
0000c4  0700              LSLS     r0,r0,#28
0000c6  68c0              LDR      r0,[r0,#0xc]
0000c8  0361              LSLS     r1,r4,#13
0000ca  4388              BICS     r0,r0,r1
0000cc  1840              ADDS     r0,r0,r1
0000ce  2105              MOVS     r1,#5
0000d0  0709              LSLS     r1,r1,#28
0000d2  60c8              STR      r0,[r1,#0xc]
;;;450    		SYS->IPRSTC2.SPI2_RST=0;
0000d4  4608              MOV      r0,r1
0000d6  68c0              LDR      r0,[r0,#0xc]
0000d8  0361              LSLS     r1,r4,#13
0000da  4388              BICS     r0,r0,r1
0000dc  2105              MOVS     r1,#5
0000de  0709              LSLS     r1,r1,#28
0000e0  60c8              STR      r0,[r1,#0xc]
;;;451    		SYSCLK->APBCLK.SPI2_EN=0;
0000e2  4814              LDR      r0,|L4.308|
0000e4  6880              LDR      r0,[r0,#8]
0000e6  0361              LSLS     r1,r4,#13
0000e8  4388              BICS     r0,r0,r1
0000ea  4912              LDR      r1,|L4.308|
0000ec  6088              STR      r0,[r1,#8]
0000ee  e01b              B        |L4.296|
                  |L4.240|
;;;452    	}
;;;453    	else
;;;454    	{
;;;455    		NVIC_DisableIRQ(SPI3_IRQn);
0000f0  2011              MOVS     r0,#0x11
0000f2  f7fffffe          BL       NVIC_DisableIRQ
;;;456    		SYS->IPRSTC2.SPI3_RST=1;
0000f6  2005              MOVS     r0,#5
0000f8  0700              LSLS     r0,r0,#28
0000fa  68c0              LDR      r0,[r0,#0xc]
0000fc  2101              MOVS     r1,#1
0000fe  03c9              LSLS     r1,r1,#15
000100  4388              BICS     r0,r0,r1
000102  1840              ADDS     r0,r0,r1
000104  2105              MOVS     r1,#5
000106  0709              LSLS     r1,r1,#28
000108  60c8              STR      r0,[r1,#0xc]
;;;457    		SYS->IPRSTC2.SPI3_RST=0;
00010a  4608              MOV      r0,r1
00010c  68c0              LDR      r0,[r0,#0xc]
00010e  2101              MOVS     r1,#1
000110  03c9              LSLS     r1,r1,#15
000112  4388              BICS     r0,r0,r1
000114  2105              MOVS     r1,#5
000116  0709              LSLS     r1,r1,#28
000118  60c8              STR      r0,[r1,#0xc]
;;;458    		SYSCLK->APBCLK.SPI3_EN=0;
00011a  4806              LDR      r0,|L4.308|
00011c  6880              LDR      r0,[r0,#8]
00011e  2101              MOVS     r1,#1
000120  03c9              LSLS     r1,r1,#15
000122  4388              BICS     r0,r0,r1
000124  4903              LDR      r1,|L4.308|
000126  6088              STR      r0,[r1,#8]
                  |L4.296|
;;;459    	}
;;;460       
;;;461    }
000128  bd70              POP      {r4-r6,pc}
;;;462    
                          ENDP

00012a  0000              DCW      0x0000
                  |L4.300|
                          DCD      g_sSpiHandler
                  |L4.304|
                          DCD      SPI_PORT
                  |L4.308|
                          DCD      0x50000200

                          AREA ||i.DrvSPI_ClrGo||, CODE, READONLY, ALIGN=2

                  DrvSPI_ClrGo PROC
;;;1247   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1248   void DrvSPI_ClrGo(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1249   {
;;;1250   	SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 0;
000002  4a05              LDR      r2,|L5.24|
000004  5851              LDR      r1,[r2,r1]
000006  6809              LDR      r1,[r1,#0]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  0082              LSLS     r2,r0,#2
00000e  4b02              LDR      r3,|L5.24|
000010  589a              LDR      r2,[r3,r2]
000012  6011              STR      r1,[r2,#0]
;;;1251   }
000014  4770              BX       lr
;;;1252   
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_ClrIntFlag||, CODE, READONLY, ALIGN=2

                  DrvSPI_ClrIntFlag PROC
;;;1055   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1056   void DrvSPI_ClrIntFlag(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1057   {
;;;1058   	SPI_PORT[eSpiPort]->CNTRL.IF = 1;
000002  4a06              LDR      r2,|L6.28|
000004  5851              LDR      r1,[r2,r1]
000006  6809              LDR      r1,[r1,#0]
000008  2201              MOVS     r2,#1
00000a  0412              LSLS     r2,r2,#16
00000c  4391              BICS     r1,r1,r2
00000e  1889              ADDS     r1,r1,r2
000010  0082              LSLS     r2,r0,#2
000012  4b02              LDR      r3,|L6.28|
000014  589a              LDR      r2,[r3,r2]
000016  6011              STR      r1,[r2,#0]
;;;1059   }
000018  4770              BX       lr
;;;1060   
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_ClrSS||, CODE, READONLY, ALIGN=2

                  DrvSPI_ClrSS PROC
;;;762    /*-------------------------------------------------------------------------------------------------------------------*/
;;;763    void DrvSPI_ClrSS(E_DRVSPI_PORT eSpiPort, E_DRVSPI_SLAVE_SEL eSlaveSel)
000000  b530              PUSH     {r4,r5,lr}
;;;764    {
000002  460a              MOV      r2,r1
;;;765    	uint32_t u32Reg;
;;;766    	
;;;767    	u32Reg = SPI_PORT[eSpiPort]->SSR.SSR;
000004  0083              LSLS     r3,r0,#2
000006  4c09              LDR      r4,|L7.44|
000008  58e3              LDR      r3,[r4,r3]
00000a  689b              LDR      r3,[r3,#8]
00000c  0799              LSLS     r1,r3,#30
00000e  0f89              LSRS     r1,r1,#30
;;;768    	u32Reg = u32Reg & (~eSlaveSel);
000010  460b              MOV      r3,r1
000012  4393              BICS     r3,r3,r2
000014  4619              MOV      r1,r3
;;;769    	SPI_PORT[eSpiPort]->SSR.SSR = u32Reg;
000016  0083              LSLS     r3,r0,#2
000018  58e3              LDR      r3,[r4,r3]
00001a  689b              LDR      r3,[r3,#8]
00001c  089b              LSRS     r3,r3,#2
00001e  009b              LSLS     r3,r3,#2
000020  430b              ORRS     r3,r3,r1
000022  0084              LSLS     r4,r0,#2
000024  4d01              LDR      r5,|L7.44|
000026  592c              LDR      r4,[r5,r4]
000028  60a3              STR      r3,[r4,#8]
;;;770    }
00002a  bd30              POP      {r4,r5,pc}
;;;771    
                          ENDP

                  |L7.44|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_DisableAutoSS||, CODE, READONLY, ALIGN=2

                  DrvSPI_DisableAutoSS PROC
;;;722    /*----------------------------------------------------------------------------------------------------------*/
;;;723    void DrvSPI_DisableAutoSS(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;724    {
;;;725        SPI_PORT[eSpiPort]->SSR.AUTOSS = 0;
000002  4a09              LDR      r2,|L8.40|
000004  5851              LDR      r1,[r2,r1]
000006  6889              LDR      r1,[r1,#8]
000008  2208              MOVS     r2,#8
00000a  4391              BICS     r1,r1,r2
00000c  0082              LSLS     r2,r0,#2
00000e  4b06              LDR      r3,|L8.40|
000010  589a              LDR      r2,[r3,r2]
000012  6091              STR      r1,[r2,#8]
;;;726        SPI_PORT[eSpiPort]->SSR.SSR = eDRVSPI_NONE;
000014  0081              LSLS     r1,r0,#2
000016  461a              MOV      r2,r3
000018  5851              LDR      r1,[r2,r1]
00001a  6889              LDR      r1,[r1,#8]
00001c  0889              LSRS     r1,r1,#2
00001e  0089              LSLS     r1,r1,#2
000020  0082              LSLS     r2,r0,#2
000022  589a              LDR      r2,[r3,r2]
000024  6091              STR      r1,[r2,#8]
;;;727    }
000026  4770              BX       lr
;;;728    
                          ENDP

                  |L8.40|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvSPI_DisableInt PROC
;;;1000   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1001   void DrvSPI_DisableInt(E_DRVSPI_PORT eSpiPort)
000000  b510              PUSH     {r4,lr}
;;;1002   {
000002  4604              MOV      r4,r0
;;;1003   	g_sSpiHandler[eSpiPort].pfncallback = NULL;
000004  2100              MOVS     r1,#0
000006  200c              MOVS     r0,#0xc
000008  4360              MULS     r0,r4,r0
00000a  4a14              LDR      r2,|L9.92|
00000c  1880              ADDS     r0,r0,r2
00000e  6041              STR      r1,[r0,#4]
;;;1004   	g_sSpiHandler[eSpiPort].u32userData = 0;
000010  200c              MOVS     r0,#0xc
000012  4360              MULS     r0,r4,r0
000014  1880              ADDS     r0,r0,r2
000016  6081              STR      r1,[r0,#8]
;;;1005   	
;;;1006   	SPI_PORT[eSpiPort]->CNTRL.IE = 0;
000018  00a0              LSLS     r0,r4,#2
00001a  4911              LDR      r1,|L9.96|
00001c  5808              LDR      r0,[r1,r0]
00001e  6800              LDR      r0,[r0,#0]
000020  2101              MOVS     r1,#1
000022  0449              LSLS     r1,r1,#17
000024  4388              BICS     r0,r0,r1
000026  00a1              LSLS     r1,r4,#2
000028  4a0d              LDR      r2,|L9.96|
00002a  5851              LDR      r1,[r2,r1]
00002c  6008              STR      r0,[r1,#0]
;;;1007   
;;;1008   	if(eSpiPort == eDRVSPI_PORT0)
00002e  2c00              CMP      r4,#0
000030  d103              BNE      |L9.58|
;;;1009   	{
;;;1010   	    NVIC_DisableIRQ(SPI0_IRQn);
000032  200e              MOVS     r0,#0xe
000034  f7fffffe          BL       NVIC_DisableIRQ
000038  e00e              B        |L9.88|
                  |L9.58|
;;;1011   	}
;;;1012   	else if(eSpiPort == eDRVSPI_PORT1)
00003a  2c01              CMP      r4,#1
00003c  d103              BNE      |L9.70|
;;;1013   	{
;;;1014   	    NVIC_DisableIRQ(SPI1_IRQn);
00003e  200f              MOVS     r0,#0xf
000040  f7fffffe          BL       NVIC_DisableIRQ
000044  e008              B        |L9.88|
                  |L9.70|
;;;1015   	}
;;;1016   	else if(eSpiPort == eDRVSPI_PORT2)
000046  2c02              CMP      r4,#2
000048  d103              BNE      |L9.82|
;;;1017   	{
;;;1018   	    NVIC_DisableIRQ(SPI2_IRQn);
00004a  2010              MOVS     r0,#0x10
00004c  f7fffffe          BL       NVIC_DisableIRQ
000050  e002              B        |L9.88|
                  |L9.82|
;;;1019   	}
;;;1020   	else
;;;1021   	{
;;;1022   	    NVIC_DisableIRQ(SPI3_IRQn);
000052  2011              MOVS     r0,#0x11
000054  f7fffffe          BL       NVIC_DisableIRQ
                  |L9.88|
;;;1023   	}
;;;1024   }
000058  bd10              POP      {r4,pc}
;;;1025   
                          ENDP

00005a  0000              DCW      0x0000
                  |L9.92|
                          DCD      g_sSpiHandler
                  |L9.96|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_DumpRxRegister||, CODE, READONLY, ALIGN=2

                  DrvSPI_DumpRxRegister PROC
;;;1174   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1175   uint32_t DrvSPI_DumpRxRegister(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Buf, uint32_t u32DataCount)
000000  b530              PUSH     {r4,r5,lr}
;;;1176   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1177   	uint32_t i;
;;;1178   	
;;;1179   	if(u32DataCount>2)
000006  2a02              CMP      r2,#2
000008  d900              BLS      |L10.12|
;;;1180   		u32DataCount = 2;
00000a  2202              MOVS     r2,#2
                  |L10.12|
;;;1181   	
;;;1182   	for(i=0; i<u32DataCount; i++)
00000c  2100              MOVS     r1,#0
00000e  e008              B        |L10.34|
                  |L10.16|
;;;1183   	{
;;;1184   		pu32Buf[i] = SPI_PORT[eSpiPort]->RX[i];
000010  0098              LSLS     r0,r3,#2
000012  4d06              LDR      r5,|L10.44|
000014  5828              LDR      r0,[r5,r0]
000016  3010              ADDS     r0,r0,#0x10
000018  008d              LSLS     r5,r1,#2
00001a  5940              LDR      r0,[r0,r5]
00001c  008d              LSLS     r5,r1,#2
00001e  5160              STR      r0,[r4,r5]
000020  1c49              ADDS     r1,r1,#1              ;1182
                  |L10.34|
000022  4291              CMP      r1,r2                 ;1182
000024  d3f4              BCC      |L10.16|
;;;1185   	}
;;;1186   
;;;1187       return u32DataCount;
000026  4610              MOV      r0,r2
;;;1188   }
000028  bd30              POP      {r4,r5,pc}
;;;1189   
                          ENDP

00002a  0000              DCW      0x0000
                  |L10.44|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_EnableAutoSS||, CODE, READONLY, ALIGN=2

                  DrvSPI_EnableAutoSS PROC
;;;704    /*----------------------------------------------------------------------------------------------------------*/
;;;705    void DrvSPI_EnableAutoSS(E_DRVSPI_PORT eSpiPort, E_DRVSPI_SLAVE_SEL eSlaveSel)
000000  b510              PUSH     {r4,lr}
;;;706    {
;;;707        SPI_PORT[eSpiPort]->SSR.AUTOSS = 1;
000002  0082              LSLS     r2,r0,#2
000004  4b0b              LDR      r3,|L11.52|
000006  589a              LDR      r2,[r3,r2]
000008  6892              LDR      r2,[r2,#8]
00000a  2308              MOVS     r3,#8
00000c  439a              BICS     r2,r2,r3
00000e  3208              ADDS     r2,r2,#8
000010  0083              LSLS     r3,r0,#2
000012  4c08              LDR      r4,|L11.52|
000014  58e3              LDR      r3,[r4,r3]
000016  609a              STR      r2,[r3,#8]
;;;708        SPI_PORT[eSpiPort]->SSR.SSR = eSlaveSel;
000018  0082              LSLS     r2,r0,#2
00001a  4623              MOV      r3,r4
00001c  589a              LDR      r2,[r3,r2]
00001e  6892              LDR      r2,[r2,#8]
000020  0892              LSRS     r2,r2,#2
000022  0092              LSLS     r2,r2,#2
000024  078b              LSLS     r3,r1,#30
000026  0f9b              LSRS     r3,r3,#30
000028  431a              ORRS     r2,r2,r3
00002a  0083              LSLS     r3,r0,#2
00002c  58e3              LDR      r3,[r4,r3]
00002e  609a              STR      r2,[r3,#8]
;;;709    }
000030  bd10              POP      {r4,pc}
;;;710    
                          ENDP

000032  0000              DCW      0x0000
                  |L11.52|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvSPI_EnableInt PROC
;;;959    /*-------------------------------------------------------------------------------------------------------------------*/
;;;960    void DrvSPI_EnableInt(E_DRVSPI_PORT eSpiPort, PFN_DRVSPI_CALLBACK pfnCallback, uint32_t u32UserData)
000000  b570              PUSH     {r4-r6,lr}
;;;961    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;962    	
;;;963    	if(pfnCallback != NULL)
000008  2d00              CMP      r5,#0
00000a  d008              BEQ      |L12.30|
;;;964    	{
;;;965    		g_sSpiHandler[eSpiPort].pfncallback = pfnCallback;
00000c  200c              MOVS     r0,#0xc
00000e  4360              MULS     r0,r4,r0
000010  4914              LDR      r1,|L12.100|
000012  1840              ADDS     r0,r0,r1
000014  6045              STR      r5,[r0,#4]
;;;966    		g_sSpiHandler[eSpiPort].u32userData = u32UserData;
000016  200c              MOVS     r0,#0xc
000018  4360              MULS     r0,r4,r0
00001a  1840              ADDS     r0,r0,r1
00001c  6086              STR      r6,[r0,#8]
                  |L12.30|
;;;967    	}
;;;968    	
;;;969    	SPI_PORT[eSpiPort]->CNTRL.IE = 1;
00001e  00a0              LSLS     r0,r4,#2
000020  4911              LDR      r1,|L12.104|
000022  5808              LDR      r0,[r1,r0]
000024  6800              LDR      r0,[r0,#0]
000026  2101              MOVS     r1,#1
000028  0449              LSLS     r1,r1,#17
00002a  4388              BICS     r0,r0,r1
00002c  1840              ADDS     r0,r0,r1
00002e  00a1              LSLS     r1,r4,#2
000030  4a0d              LDR      r2,|L12.104|
000032  5851              LDR      r1,[r2,r1]
000034  6008              STR      r0,[r1,#0]
;;;970    	
;;;971    	if(eSpiPort == eDRVSPI_PORT0)
000036  2c00              CMP      r4,#0
000038  d103              BNE      |L12.66|
;;;972    	{
;;;973    	    NVIC_EnableIRQ(SPI0_IRQn);
00003a  200e              MOVS     r0,#0xe
00003c  f7fffffe          BL       NVIC_EnableIRQ
000040  e00e              B        |L12.96|
                  |L12.66|
;;;974    	}
;;;975    	else if(eSpiPort == eDRVSPI_PORT1)
000042  2c01              CMP      r4,#1
000044  d103              BNE      |L12.78|
;;;976    	{
;;;977    	    NVIC_EnableIRQ(SPI1_IRQn);
000046  200f              MOVS     r0,#0xf
000048  f7fffffe          BL       NVIC_EnableIRQ
00004c  e008              B        |L12.96|
                  |L12.78|
;;;978    	}
;;;979    	else if(eSpiPort == eDRVSPI_PORT2)
00004e  2c02              CMP      r4,#2
000050  d103              BNE      |L12.90|
;;;980    	{
;;;981    	    NVIC_EnableIRQ(SPI2_IRQn);
000052  2010              MOVS     r0,#0x10
000054  f7fffffe          BL       NVIC_EnableIRQ
000058  e002              B        |L12.96|
                  |L12.90|
;;;982    	}
;;;983    	else
;;;984    	{
;;;985    	    NVIC_EnableIRQ(SPI3_IRQn);
00005a  2011              MOVS     r0,#0x11
00005c  f7fffffe          BL       NVIC_EnableIRQ
                  |L12.96|
;;;986    	}
;;;987    }	
000060  bd70              POP      {r4-r6,pc}
;;;988    
                          ENDP

000062  0000              DCW      0x0000
                  |L12.100|
                          DCD      g_sSpiHandler
                  |L12.104|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_GetClock1Freq||, CODE, READONLY, ALIGN=2

                  DrvSPI_GetClock1Freq PROC
;;;885    /*-------------------------------------------------------------------------------------------------------------------*/
;;;886    uint32_t DrvSPI_GetClock1Freq(E_DRVSPI_PORT eSpiPort)
000000  b570              PUSH     {r4-r6,lr}
;;;887    {
000002  4604              MOV      r4,r0
;;;888    	uint32_t u32Div;
;;;889    	uint32_t u32ApbClock;
;;;890    
;;;891    	u32ApbClock = DrvSYS_GetHCLKFreq();
000004  f7fffffe          BL       DrvSYS_GetHCLKFreq
000008  4606              MOV      r6,r0
;;;892    	u32Div = SPI_PORT[eSpiPort]->DIVIDER.DIVIDER;
00000a  00a0              LSLS     r0,r4,#2
00000c  4904              LDR      r1,|L13.32|
00000e  5808              LDR      r0,[r1,r0]
000010  6840              LDR      r0,[r0,#4]
000012  b285              UXTH     r5,r0
;;;893    	return ((u32ApbClock >> 1) / (u32Div + 1));   /* SPI_CLK = APB_CLK / ((Divider + 1) * 2) */
000014  0870              LSRS     r0,r6,#1
000016  1c69              ADDS     r1,r5,#1
000018  f7fffffe          BL       __aeabi_uidivmod
;;;894    }
00001c  bd70              POP      {r4-r6,pc}
;;;895    
                          ENDP

00001e  0000              DCW      0x0000
                  |L13.32|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_GetClock2Freq||, CODE, READONLY, ALIGN=2

                  DrvSPI_GetClock2Freq PROC
;;;907    /*-------------------------------------------------------------------------------------------------------------------*/
;;;908    uint32_t DrvSPI_GetClock2Freq(E_DRVSPI_PORT eSpiPort)
000000  b570              PUSH     {r4-r6,lr}
;;;909    {
000002  4604              MOV      r4,r0
;;;910    	uint32_t u32Div;
;;;911    	uint32_t u32ApbClock;
;;;912    
;;;913    	u32ApbClock = DrvSYS_GetHCLKFreq();
000004  f7fffffe          BL       DrvSYS_GetHCLKFreq
000008  4606              MOV      r6,r0
;;;914    	u32Div = SPI_PORT[eSpiPort]->DIVIDER.DIVIDER2;
00000a  00a0              LSLS     r0,r4,#2
00000c  4904              LDR      r1,|L14.32|
00000e  5808              LDR      r0,[r1,r0]
000010  6840              LDR      r0,[r0,#4]
000012  0c05              LSRS     r5,r0,#16
;;;915    	return ((u32ApbClock >> 1) / (u32Div + 1));   /* SPI_CLK = APB_CLK / ((Divider + 1) * 2) */
000014  0870              LSRS     r0,r6,#1
000016  1c69              ADDS     r1,r5,#1
000018  f7fffffe          BL       __aeabi_uidivmod
;;;916    }
00001c  bd70              POP      {r4-r6,pc}
;;;917    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_GetIntFlag||, CODE, READONLY, ALIGN=2

                  DrvSPI_GetIntFlag PROC
;;;1038   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1039   uint32_t DrvSPI_GetIntFlag(E_DRVSPI_PORT eSpiPort)
000000  4601              MOV      r1,r0
;;;1040   {
;;;1041   	return (SPI_PORT[eSpiPort]->CNTRL.IF);
000002  0088              LSLS     r0,r1,#2
000004  4a02              LDR      r2,|L15.16|
000006  5810              LDR      r0,[r2,r0]
000008  6800              LDR      r0,[r0,#0]
00000a  03c0              LSLS     r0,r0,#15
00000c  0fc0              LSRS     r0,r0,#31
;;;1042   }
00000e  4770              BX       lr
;;;1043   
                          ENDP

                  |L15.16|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_GetLevelTriggerStatus||, CODE, READONLY, ALIGN=2

                  DrvSPI_GetLevelTriggerStatus PROC
;;;683    /*-------------------------------------------------------------------------------------------------------------------*/
;;;684    uint8_t DrvSPI_GetLevelTriggerStatus(E_DRVSPI_PORT eSpiPort)
000000  4601              MOV      r1,r0
;;;685    {
;;;686    	if(SPI_PORT[eSpiPort]->SSR.LTRIG_FLAG==1)
000002  0088              LSLS     r0,r1,#2
000004  4a04              LDR      r2,|L16.24|
000006  5810              LDR      r0,[r2,r0]
000008  6880              LDR      r0,[r0,#8]
00000a  0680              LSLS     r0,r0,#26
00000c  0fc0              LSRS     r0,r0,#31
00000e  2801              CMP      r0,#1
000010  d100              BNE      |L16.20|
                  |L16.18|
;;;687    		return TRUE;
;;;688    	else
;;;689    		return FALSE;
;;;690    }
000012  4770              BX       lr
                  |L16.20|
000014  2000              MOVS     r0,#0                 ;689
000016  e7fc              B        |L16.18|
;;;691    
                          ENDP

                  |L16.24|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvSPI_GetVersion PROC
;;;1299   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1300   uint32_t DrvSPI_GetVersion(void)
000000  4800              LDR      r0,|L17.4|
;;;1301   {
;;;1302   	return DRVSPI_VERSION_NUM;
;;;1303   }
000002  4770              BX       lr
                          ENDP

                  |L17.4|
                          DCD      0x00010202

                          AREA ||i.DrvSPI_IsBusy||, CODE, READONLY, ALIGN=2

                  DrvSPI_IsBusy PROC
;;;784    /*-------------------------------------------------------------------------------------------------------------------*/
;;;785    uint8_t DrvSPI_IsBusy(E_DRVSPI_PORT eSpiPort)
000000  4601              MOV      r1,r0
;;;786    {
;;;787        return ((SPI_PORT[eSpiPort]->CNTRL.GO_BUSY)?TRUE:FALSE);
000002  0088              LSLS     r0,r1,#2
000004  4a02              LDR      r2,|L18.16|
000006  5810              LDR      r0,[r2,r0]
000008  6800              LDR      r0,[r0,#0]
00000a  07c0              LSLS     r0,r0,#31
00000c  0fc0              LSRS     r0,r0,#31
;;;788    }
00000e  4770              BX       lr
;;;789    
                          ENDP

                  |L18.16|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Open||, CODE, READONLY, ALIGN=2

                  DrvSPI_Open PROC
;;;250    /*--------------------------------------------------------------------------------------------------------------*/
;;;251    int32_t DrvSPI_Open(E_DRVSPI_PORT eSpiPort, E_DRVSPI_MODE eMode, E_DRVSPI_TRANS_TYPE eType, int32_t i32BitLength, uint8_t bQFN36PIN)
000000  b5ff              PUSH     {r0-r7,lr}
;;;252    {
000002  4604              MOV      r4,r0
;;;253    	int32_t i32TimeOut;
;;;254    	
;;;255    	if(g_sSpiHandler[eSpiPort].bBusy)
000004  200c              MOVS     r0,#0xc
000006  4360              MULS     r0,r4,r0
000008  4efd              LDR      r6,|L19.1024|
00000a  1980              ADDS     r0,r0,r6
00000c  7840              LDRB     r0,[r0,#1]
00000e  2800              CMP      r0,#0
000010  d002              BEQ      |L19.24|
;;;256    	{
;;;257    		return E_DRVSPI_ERR_INIT;
000012  48fc              LDR      r0,|L19.1028|
                  |L19.20|
;;;258    	}
;;;259    	
;;;260    	g_sSpiHandler[eSpiPort].bQFN36PinPackage = bQFN36PIN;
;;;261    	
;;;262    	if(eSpiPort == eDRVSPI_PORT0)
;;;263    	{
;;;264    		SYSCLK->APBCLK.SPI0_EN        =1;
;;;265    		SYS->IPRSTC2.SPI0_RST         =1;
;;;266    		SYS->IPRSTC2.SPI0_RST         =0;
;;;267    		SYS->GPCMFP.SPI0_SS0_I2SLRCLK =1;
;;;268    		SYS->ALTMFP.PC0_I2SLRCLK      =0;
;;;269    		SYS->GPCMFP.SPI0_CLK_I2SBCLK  =1;
;;;270    		SYS->ALTMFP.PC1_I2SBCLK       =0;
;;;271    		SYS->GPCMFP.SPI0_MISO0_I2SDI  =1;
;;;272    		SYS->ALTMFP.PC2_I2SDI         =0;
;;;273    		SYS->GPCMFP.SPI0_MOSI0_I2SDO  =1;
;;;274    		SYS->ALTMFP.PC3_I2SDO         =0;
;;;275    		if(bQFN36PIN)                          /* for QFN 36-pin package */
;;;276    			SYS->GPDMFP.SPI2_CLK_SPI0_SS1 =1;  /* for SS01 */
;;;277    		else
;;;278    			SYS->GPBMFP.TM2_SS01          =1;
;;;279    			SYS->ALTMFP.PB10_S01          =1;
;;;280    	}
;;;281    	else if(eSpiPort == eDRVSPI_PORT1)
;;;282    	{
;;;283    		SYSCLK->APBCLK.SPI1_EN     =1;
;;;284    		SYS->IPRSTC2.SPI1_RST      =1;
;;;285    		SYS->IPRSTC2.SPI1_RST      =0;
;;;286    		SYS->GPCMFP.SPI1_SS0_MCLK 	=1;
;;;287    		SYS->GPCMFP.SPI1_CLK 	   =1;
;;;288    		SYS->GPCMFP.SPI1_MISO0   	=1;
;;;289    		SYS->GPCMFP.SPI1_MOSI0    	=1;
;;;290    		SYS->GPBMFP.TM1_SS11       =1;
;;;291    		SYS->ALTMFP.PB9_S11        =1;
;;;292    	}
;;;293    	else if(eSpiPort == eDRVSPI_PORT2)
;;;294    	{
;;;295    		SYSCLK->APBCLK.SPI2_EN             =1;
;;;296    		SYS->IPRSTC2.SPI2_RST              =1;
;;;297    		SYS->IPRSTC2.SPI2_RST              =0;
;;;298    		SYS->GPDMFP.SPI2_SS0               =1;
;;;299    		SYS->GPDMFP.SPI2_CLK_SPI0_SS1      =1;
;;;300    		SYS->GPDMFP.SPI2_MISO0_SPI0_MISO1  =1;
;;;301    		SYS->GPDMFP.SPI2_MOSI0_SPI0_MOSI1  =1;
;;;302    		SYS->GPAMFP.ADC7_SS21_AD6          =1;
;;;303    		SYS->ALTMFP.PA7_S21                =1;
;;;304    	}
;;;305    	else
;;;306    	{
;;;307    		SYSCLK->APBCLK.SPI3_EN  =1;
;;;308    		SYS->IPRSTC2.SPI3_RST   =1;
;;;309    		SYS->IPRSTC2.SPI3_RST   =0;
;;;310    		SYS->GPDMFP.SPI3_SS0 	=1;
;;;311    		SYS->GPDMFP.SPI3_CLK 	=1;
;;;312    		SYS->GPDMFP.SPI3_MISO0 	=1;
;;;313    		SYS->GPDMFP.SPI3_MOSI0 	=1;
;;;314    		SYS->GPBMFP.INT1_SS31   =1;
;;;315    		SYS->ALTMFP.PB14_S31    =1;
;;;316    	}
;;;317    	
;;;318    	/* Check busy*/
;;;319    	i32TimeOut = 0x10000;
;;;320    	while(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY == 1)
;;;321    	{
;;;322    		if(i32TimeOut-- <= 0)
;;;323    			return E_DRVSPI_ERR_BUSY;
;;;324    	}
;;;325    	
;;;326    	g_sSpiHandler[eSpiPort].bBusy = TRUE;
;;;327    	g_sSpiHandler[eSpiPort].pfncallback = NULL;
;;;328    	g_sSpiHandler[eSpiPort].u32userData = 0;
;;;329    	
;;;330    	/* Bit length 1 ~ 32 */
;;;331    	if((i32BitLength <= 0) || (i32BitLength > 32))
;;;332    	{
;;;333    		return E_DRVSPI_ERR_BIT_LENGTH;
;;;334    	}
;;;335       
;;;336    	/* "i32BitLength = 0" means 32 bits */
;;;337    	if(i32BitLength == 32)
;;;338    	{
;;;339    		i32BitLength = 0;
;;;340    	}
;;;341    	SPI_PORT[eSpiPort]->CNTRL.TX_BIT_LEN = i32BitLength;
;;;342    	
;;;343    	if(eMode == eDRVSPI_SLAVE)
;;;344    		SPI_PORT[eSpiPort]->CNTRL.SLAVE = 1;
;;;345    	else
;;;346    		SPI_PORT[eSpiPort]->CNTRL.SLAVE = 0;
;;;347    	
;;;348    	/* Automatic slave select and low active */
;;;349    	SPI_PORT[eSpiPort]->SSR.AUTOSS = 1;
;;;350    		
;;;351    	/* Transition types */
;;;352    	if(eType==eDRVSPI_TYPE0)
;;;353    	{
;;;354    		SPI_PORT[eSpiPort]->CNTRL.CLKP = 0;
;;;355    		SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 0;
;;;356    		SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 0;
;;;357    	}
;;;358    	else if(eType==eDRVSPI_TYPE1)
;;;359    	{
;;;360    		SPI_PORT[eSpiPort]->CNTRL.CLKP = 0;
;;;361    		SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 1;
;;;362    		SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 0;
;;;363    	}
;;;364    	else if(eType==eDRVSPI_TYPE2)
;;;365    	{
;;;366    		SPI_PORT[eSpiPort]->CNTRL.CLKP = 0;
;;;367    		SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 0;
;;;368    		SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 1;
;;;369    	}
;;;370    	else if(eType==eDRVSPI_TYPE3)
;;;371    	{
;;;372    		SPI_PORT[eSpiPort]->CNTRL.CLKP = 0;
;;;373    		SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 1;
;;;374    		SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 1;
;;;375    	}
;;;376    	else if(eType==eDRVSPI_TYPE4)
;;;377    	{
;;;378    		SPI_PORT[eSpiPort]->CNTRL.CLKP = 1;
;;;379    		SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 0;
;;;380    		SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 0;
;;;381    	}
;;;382    	else if(eType==eDRVSPI_TYPE5)
;;;383    	{
;;;384    		SPI_PORT[eSpiPort]->CNTRL.CLKP = 1;
;;;385    		SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 1;
;;;386    		SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 0;
;;;387    	}
;;;388    	else if(eType==eDRVSPI_TYPE6)
;;;389    	{
;;;390    		SPI_PORT[eSpiPort]->CNTRL.CLKP = 1;
;;;391    		SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 0;
;;;392    		SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 1;
;;;393    	}
;;;394    	else
;;;395    	{
;;;396    		SPI_PORT[eSpiPort]->CNTRL.CLKP = 1;
;;;397    		SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 1;
;;;398    		SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 1;
;;;399    	}
;;;400    
;;;401        return E_SUCCESS;
;;;402    }
000014  b004              ADD      sp,sp,#0x10
000016  bdf0              POP      {r4-r7,pc}
                  |L19.24|
000018  260c              MOVS     r6,#0xc               ;260
00001a  4366              MULS     r6,r4,r6              ;260
00001c  4ff8              LDR      r7,|L19.1024|
00001e  9809              LDR      r0,[sp,#0x24]         ;260
000020  55b8              STRB     r0,[r7,r6]            ;260
000022  2c00              CMP      r4,#0                 ;262
000024  d173              BNE      |L19.270|
000026  48f8              LDR      r0,|L19.1032|
000028  6880              LDR      r0,[r0,#8]            ;264
00002a  2601              MOVS     r6,#1                 ;264
00002c  0336              LSLS     r6,r6,#12             ;264
00002e  43b0              BICS     r0,r0,r6              ;264
000030  1980              ADDS     r0,r0,r6              ;264
000032  4ef5              LDR      r6,|L19.1032|
000034  60b0              STR      r0,[r6,#8]            ;264
000036  2005              MOVS     r0,#5                 ;265
000038  0700              LSLS     r0,r0,#28             ;265
00003a  68c0              LDR      r0,[r0,#0xc]          ;265
00003c  2601              MOVS     r6,#1                 ;265
00003e  0336              LSLS     r6,r6,#12             ;265
000040  43b0              BICS     r0,r0,r6              ;265
000042  1980              ADDS     r0,r0,r6              ;265
000044  2605              MOVS     r6,#5                 ;265
000046  0736              LSLS     r6,r6,#28             ;265
000048  60f0              STR      r0,[r6,#0xc]          ;265
00004a  4630              MOV      r0,r6                 ;266
00004c  68c0              LDR      r0,[r0,#0xc]          ;266
00004e  2601              MOVS     r6,#1                 ;266
000050  0336              LSLS     r6,r6,#12             ;266
000052  43b0              BICS     r0,r0,r6              ;266
000054  2605              MOVS     r6,#5                 ;266
000056  0736              LSLS     r6,r6,#28             ;266
000058  60f0              STR      r0,[r6,#0xc]          ;266
00005a  4630              MOV      r0,r6                 ;267
00005c  6b80              LDR      r0,[r0,#0x38]         ;267
00005e  0840              LSRS     r0,r0,#1              ;267
000060  0040              LSLS     r0,r0,#1              ;267
000062  1c40              ADDS     r0,r0,#1              ;267
000064  63b0              STR      r0,[r6,#0x38]         ;267
000066  48e9              LDR      r0,|L19.1036|
000068  6900              LDR      r0,[r0,#0x10]         ;268
00006a  2620              MOVS     r6,#0x20              ;268
00006c  43b0              BICS     r0,r0,r6              ;268
00006e  4ee7              LDR      r6,|L19.1036|
000070  6130              STR      r0,[r6,#0x10]         ;268
000072  2005              MOVS     r0,#5                 ;269
000074  0700              LSLS     r0,r0,#28             ;269
000076  6b80              LDR      r0,[r0,#0x38]         ;269
000078  2602              MOVS     r6,#2                 ;269
00007a  43b0              BICS     r0,r0,r6              ;269
00007c  1c80              ADDS     r0,r0,#2              ;269
00007e  2605              MOVS     r6,#5                 ;269
000080  0736              LSLS     r6,r6,#28             ;269
000082  63b0              STR      r0,[r6,#0x38]         ;269
000084  48e1              LDR      r0,|L19.1036|
000086  6900              LDR      r0,[r0,#0x10]         ;270
000088  2640              MOVS     r6,#0x40              ;270
00008a  43b0              BICS     r0,r0,r6              ;270
00008c  4edf              LDR      r6,|L19.1036|
00008e  6130              STR      r0,[r6,#0x10]         ;270
000090  2005              MOVS     r0,#5                 ;271
000092  0700              LSLS     r0,r0,#28             ;271
000094  6b80              LDR      r0,[r0,#0x38]         ;271
000096  2604              MOVS     r6,#4                 ;271
000098  43b0              BICS     r0,r0,r6              ;271
00009a  1d00              ADDS     r0,r0,#4              ;271
00009c  2605              MOVS     r6,#5                 ;271
00009e  0736              LSLS     r6,r6,#28             ;271
0000a0  63b0              STR      r0,[r6,#0x38]         ;271
0000a2  48da              LDR      r0,|L19.1036|
0000a4  6900              LDR      r0,[r0,#0x10]         ;272
0000a6  2680              MOVS     r6,#0x80              ;272
0000a8  43b0              BICS     r0,r0,r6              ;272
0000aa  4ed8              LDR      r6,|L19.1036|
0000ac  6130              STR      r0,[r6,#0x10]         ;272
0000ae  2005              MOVS     r0,#5                 ;273
0000b0  0700              LSLS     r0,r0,#28             ;273
0000b2  6b80              LDR      r0,[r0,#0x38]         ;273
0000b4  2608              MOVS     r6,#8                 ;273
0000b6  43b0              BICS     r0,r0,r6              ;273
0000b8  3008              ADDS     r0,r0,#8              ;273
0000ba  2605              MOVS     r6,#5                 ;273
0000bc  0736              LSLS     r6,r6,#28             ;273
0000be  63b0              STR      r0,[r6,#0x38]         ;273
0000c0  48d2              LDR      r0,|L19.1036|
0000c2  6900              LDR      r0,[r0,#0x10]         ;274
0000c4  26ff              MOVS     r6,#0xff              ;274
0000c6  3601              ADDS     r6,#1                 ;274
0000c8  43b0              BICS     r0,r0,r6              ;274
0000ca  4ed0              LDR      r6,|L19.1036|
0000cc  6130              STR      r0,[r6,#0x10]         ;274
0000ce  9809              LDR      r0,[sp,#0x24]         ;275
0000d0  2800              CMP      r0,#0                 ;275
0000d2  d009              BEQ      |L19.232|
0000d4  2005              MOVS     r0,#5                 ;276
0000d6  0700              LSLS     r0,r0,#28             ;276
0000d8  6bc0              LDR      r0,[r0,#0x3c]         ;276
0000da  2602              MOVS     r6,#2                 ;276
0000dc  43b0              BICS     r0,r0,r6              ;276
0000de  1c80              ADDS     r0,r0,#2              ;276
0000e0  2605              MOVS     r6,#5                 ;276
0000e2  0736              LSLS     r6,r6,#28             ;276
0000e4  63f0              STR      r0,[r6,#0x3c]         ;276
0000e6  e009              B        |L19.252|
                  |L19.232|
0000e8  2005              MOVS     r0,#5                 ;278
0000ea  0700              LSLS     r0,r0,#28             ;278
0000ec  6b40              LDR      r0,[r0,#0x34]         ;278
0000ee  2601              MOVS     r6,#1                 ;278
0000f0  02b6              LSLS     r6,r6,#10             ;278
0000f2  43b0              BICS     r0,r0,r6              ;278
0000f4  1980              ADDS     r0,r0,r6              ;278
0000f6  2605              MOVS     r6,#5                 ;278
0000f8  0736              LSLS     r6,r6,#28             ;278
0000fa  6370              STR      r0,[r6,#0x34]         ;278
                  |L19.252|
0000fc  48c3              LDR      r0,|L19.1036|
0000fe  6900              LDR      r0,[r0,#0x10]         ;279
000100  0840              LSRS     r0,r0,#1              ;279
000102  0040              LSLS     r0,r0,#1              ;279
000104  1c40              ADDS     r0,r0,#1              ;279
000106  4ec1              LDR      r6,|L19.1036|
000108  6130              STR      r0,[r6,#0x10]         ;279
00010a  e0dd              B        |L19.712|
00010c  e7ff              B        |L19.270|
                  |L19.270|
00010e  2c01              CMP      r4,#1                 ;281
000110  d146              BNE      |L19.416|
000112  48bd              LDR      r0,|L19.1032|
000114  6880              LDR      r0,[r0,#8]            ;283
000116  0366              LSLS     r6,r4,#13             ;283
000118  43b0              BICS     r0,r0,r6              ;283
00011a  1980              ADDS     r0,r0,r6              ;283
00011c  4eba              LDR      r6,|L19.1032|
00011e  60b0              STR      r0,[r6,#8]            ;283
000120  2005              MOVS     r0,#5                 ;284
000122  0700              LSLS     r0,r0,#28             ;284
000124  68c0              LDR      r0,[r0,#0xc]          ;284
000126  0366              LSLS     r6,r4,#13             ;284
000128  43b0              BICS     r0,r0,r6              ;284
00012a  1980              ADDS     r0,r0,r6              ;284
00012c  2605              MOVS     r6,#5                 ;284
00012e  0736              LSLS     r6,r6,#28             ;284
000130  60f0              STR      r0,[r6,#0xc]          ;284
000132  4630              MOV      r0,r6                 ;285
000134  68c0              LDR      r0,[r0,#0xc]          ;285
000136  0366              LSLS     r6,r4,#13             ;285
000138  43b0              BICS     r0,r0,r6              ;285
00013a  2605              MOVS     r6,#5                 ;285
00013c  0736              LSLS     r6,r6,#28             ;285
00013e  60f0              STR      r0,[r6,#0xc]          ;285
000140  4630              MOV      r0,r6                 ;286
000142  6b80              LDR      r0,[r0,#0x38]         ;286
000144  0226              LSLS     r6,r4,#8              ;286
000146  43b0              BICS     r0,r0,r6              ;286
000148  1980              ADDS     r0,r0,r6              ;286
00014a  2605              MOVS     r6,#5                 ;286
00014c  0736              LSLS     r6,r6,#28             ;286
00014e  63b0              STR      r0,[r6,#0x38]         ;286
000150  4630              MOV      r0,r6                 ;287
000152  6b80              LDR      r0,[r0,#0x38]         ;287
000154  0266              LSLS     r6,r4,#9              ;287
000156  43b0              BICS     r0,r0,r6              ;287
000158  1980              ADDS     r0,r0,r6              ;287
00015a  2605              MOVS     r6,#5                 ;287
00015c  0736              LSLS     r6,r6,#28             ;287
00015e  63b0              STR      r0,[r6,#0x38]         ;287
000160  4630              MOV      r0,r6                 ;288
000162  6b80              LDR      r0,[r0,#0x38]         ;288
000164  02a6              LSLS     r6,r4,#10             ;288
000166  43b0              BICS     r0,r0,r6              ;288
000168  1980              ADDS     r0,r0,r6              ;288
00016a  2605              MOVS     r6,#5                 ;288
00016c  0736              LSLS     r6,r6,#28             ;288
00016e  63b0              STR      r0,[r6,#0x38]         ;288
000170  4630              MOV      r0,r6                 ;289
000172  6b80              LDR      r0,[r0,#0x38]         ;289
000174  02e6              LSLS     r6,r4,#11             ;289
000176  43b0              BICS     r0,r0,r6              ;289
000178  1980              ADDS     r0,r0,r6              ;289
00017a  2605              MOVS     r6,#5                 ;289
00017c  0736              LSLS     r6,r6,#28             ;289
00017e  63b0              STR      r0,[r6,#0x38]         ;289
000180  4630              MOV      r0,r6                 ;290
000182  6b40              LDR      r0,[r0,#0x34]         ;290
000184  0266              LSLS     r6,r4,#9              ;290
000186  43b0              BICS     r0,r0,r6              ;290
000188  1980              ADDS     r0,r0,r6              ;290
00018a  2605              MOVS     r6,#5                 ;290
00018c  0736              LSLS     r6,r6,#28             ;290
00018e  6370              STR      r0,[r6,#0x34]         ;290
000190  489e              LDR      r0,|L19.1036|
000192  6900              LDR      r0,[r0,#0x10]         ;291
000194  2602              MOVS     r6,#2                 ;291
000196  43b0              BICS     r0,r0,r6              ;291
000198  1c80              ADDS     r0,r0,#2              ;291
00019a  4e9c              LDR      r6,|L19.1036|
00019c  6130              STR      r0,[r6,#0x10]         ;291
00019e  e093              B        |L19.712|
                  |L19.416|
0001a0  2c02              CMP      r4,#2                 ;293
0001a2  d144              BNE      |L19.558|
0001a4  4898              LDR      r0,|L19.1032|
0001a6  6880              LDR      r0,[r0,#8]            ;295
0001a8  0366              LSLS     r6,r4,#13             ;295
0001aa  43b0              BICS     r0,r0,r6              ;295
0001ac  1980              ADDS     r0,r0,r6              ;295
0001ae  4e96              LDR      r6,|L19.1032|
0001b0  60b0              STR      r0,[r6,#8]            ;295
0001b2  2005              MOVS     r0,#5                 ;296
0001b4  0700              LSLS     r0,r0,#28             ;296
0001b6  68c0              LDR      r0,[r0,#0xc]          ;296
0001b8  0366              LSLS     r6,r4,#13             ;296
0001ba  43b0              BICS     r0,r0,r6              ;296
0001bc  1980              ADDS     r0,r0,r6              ;296
0001be  2605              MOVS     r6,#5                 ;296
0001c0  0736              LSLS     r6,r6,#28             ;296
0001c2  60f0              STR      r0,[r6,#0xc]          ;296
0001c4  4630              MOV      r0,r6                 ;297
0001c6  68c0              LDR      r0,[r0,#0xc]          ;297
0001c8  0366              LSLS     r6,r4,#13             ;297
0001ca  43b0              BICS     r0,r0,r6              ;297
0001cc  2605              MOVS     r6,#5                 ;297
0001ce  0736              LSLS     r6,r6,#28             ;297
0001d0  60f0              STR      r0,[r6,#0xc]          ;297
0001d2  4630              MOV      r0,r6                 ;298
0001d4  6bc0              LDR      r0,[r0,#0x3c]         ;298
0001d6  0840              LSRS     r0,r0,#1              ;298
0001d8  0040              LSLS     r0,r0,#1              ;298
0001da  1c40              ADDS     r0,r0,#1              ;298
0001dc  63f0              STR      r0,[r6,#0x3c]         ;298
0001de  4630              MOV      r0,r6                 ;299
0001e0  6bc0              LDR      r0,[r0,#0x3c]         ;299
0001e2  2602              MOVS     r6,#2                 ;299
0001e4  43b0              BICS     r0,r0,r6              ;299
0001e6  1c80              ADDS     r0,r0,#2              ;299
0001e8  2605              MOVS     r6,#5                 ;299
0001ea  0736              LSLS     r6,r6,#28             ;299
0001ec  63f0              STR      r0,[r6,#0x3c]         ;299
0001ee  4630              MOV      r0,r6                 ;300
0001f0  6bc0              LDR      r0,[r0,#0x3c]         ;300
0001f2  2604              MOVS     r6,#4                 ;300
0001f4  43b0              BICS     r0,r0,r6              ;300
0001f6  1d00              ADDS     r0,r0,#4              ;300
0001f8  2605              MOVS     r6,#5                 ;300
0001fa  0736              LSLS     r6,r6,#28             ;300
0001fc  63f0              STR      r0,[r6,#0x3c]         ;300
0001fe  4630              MOV      r0,r6                 ;301
000200  6bc0              LDR      r0,[r0,#0x3c]         ;301
000202  2608              MOVS     r6,#8                 ;301
000204  43b0              BICS     r0,r0,r6              ;301
000206  3008              ADDS     r0,r0,#8              ;301
000208  2605              MOVS     r6,#5                 ;301
00020a  0736              LSLS     r6,r6,#28             ;301
00020c  63f0              STR      r0,[r6,#0x3c]         ;301
00020e  4630              MOV      r0,r6                 ;302
000210  6b00              LDR      r0,[r0,#0x30]         ;302
000212  2680              MOVS     r6,#0x80              ;302
000214  43b0              BICS     r0,r0,r6              ;302
000216  3080              ADDS     r0,r0,#0x80           ;302
000218  2605              MOVS     r6,#5                 ;302
00021a  0736              LSLS     r6,r6,#28             ;302
00021c  6330              STR      r0,[r6,#0x30]         ;302
00021e  487b              LDR      r0,|L19.1036|
000220  6900              LDR      r0,[r0,#0x10]         ;303
000222  2604              MOVS     r6,#4                 ;303
000224  43b0              BICS     r0,r0,r6              ;303
000226  1d00              ADDS     r0,r0,#4              ;303
000228  4e78              LDR      r6,|L19.1036|
00022a  6130              STR      r0,[r6,#0x10]         ;303
00022c  e04c              B        |L19.712|
                  |L19.558|
00022e  4876              LDR      r0,|L19.1032|
000230  6880              LDR      r0,[r0,#8]            ;307
000232  2601              MOVS     r6,#1                 ;307
000234  03f6              LSLS     r6,r6,#15             ;307
000236  43b0              BICS     r0,r0,r6              ;307
000238  1980              ADDS     r0,r0,r6              ;307
00023a  4e73              LDR      r6,|L19.1032|
00023c  60b0              STR      r0,[r6,#8]            ;307
00023e  2005              MOVS     r0,#5                 ;308
000240  0700              LSLS     r0,r0,#28             ;308
000242  68c0              LDR      r0,[r0,#0xc]          ;308
000244  01b6              LSLS     r6,r6,#6              ;308
000246  43b0              BICS     r0,r0,r6              ;308
000248  1980              ADDS     r0,r0,r6              ;308
00024a  2605              MOVS     r6,#5                 ;308
00024c  0736              LSLS     r6,r6,#28             ;308
00024e  60f0              STR      r0,[r6,#0xc]          ;308
000250  4630              MOV      r0,r6                 ;309
000252  68c0              LDR      r0,[r0,#0xc]          ;309
000254  2601              MOVS     r6,#1                 ;309
000256  03f6              LSLS     r6,r6,#15             ;309
000258  43b0              BICS     r0,r0,r6              ;309
00025a  2605              MOVS     r6,#5                 ;309
00025c  0736              LSLS     r6,r6,#28             ;309
00025e  60f0              STR      r0,[r6,#0xc]          ;309
000260  4630              MOV      r0,r6                 ;310
000262  6bc0              LDR      r0,[r0,#0x3c]         ;310
000264  26ff              MOVS     r6,#0xff              ;310
000266  3601              ADDS     r6,#1                 ;310
000268  43b0              BICS     r0,r0,r6              ;310
00026a  1980              ADDS     r0,r0,r6              ;310
00026c  2605              MOVS     r6,#5                 ;310
00026e  0736              LSLS     r6,r6,#28             ;310
000270  63f0              STR      r0,[r6,#0x3c]         ;310
000272  4630              MOV      r0,r6                 ;311
000274  6bc0              LDR      r0,[r0,#0x3c]         ;311
000276  2601              MOVS     r6,#1                 ;311
000278  0276              LSLS     r6,r6,#9              ;311
00027a  43b0              BICS     r0,r0,r6              ;311
00027c  1980              ADDS     r0,r0,r6              ;311
00027e  2605              MOVS     r6,#5                 ;311
000280  0736              LSLS     r6,r6,#28             ;311
000282  63f0              STR      r0,[r6,#0x3c]         ;311
000284  4630              MOV      r0,r6                 ;312
000286  6bc0              LDR      r0,[r0,#0x3c]         ;312
000288  2601              MOVS     r6,#1                 ;312
00028a  02b6              LSLS     r6,r6,#10             ;312
00028c  43b0              BICS     r0,r0,r6              ;312
00028e  1980              ADDS     r0,r0,r6              ;312
000290  2605              MOVS     r6,#5                 ;312
000292  0736              LSLS     r6,r6,#28             ;312
000294  63f0              STR      r0,[r6,#0x3c]         ;312
000296  4630              MOV      r0,r6                 ;313
000298  6bc0              LDR      r0,[r0,#0x3c]         ;313
00029a  2601              MOVS     r6,#1                 ;313
00029c  02f6              LSLS     r6,r6,#11             ;313
00029e  43b0              BICS     r0,r0,r6              ;313
0002a0  1980              ADDS     r0,r0,r6              ;313
0002a2  2605              MOVS     r6,#5                 ;313
0002a4  0736              LSLS     r6,r6,#28             ;313
0002a6  63f0              STR      r0,[r6,#0x3c]         ;313
0002a8  4630              MOV      r0,r6                 ;314
0002aa  6b40              LDR      r0,[r0,#0x34]         ;314
0002ac  2601              MOVS     r6,#1                 ;314
0002ae  03b6              LSLS     r6,r6,#14             ;314
0002b0  43b0              BICS     r0,r0,r6              ;314
0002b2  1980              ADDS     r0,r0,r6              ;314
0002b4  2605              MOVS     r6,#5                 ;314
0002b6  0736              LSLS     r6,r6,#28             ;314
0002b8  6370              STR      r0,[r6,#0x34]         ;314
0002ba  4854              LDR      r0,|L19.1036|
0002bc  6900              LDR      r0,[r0,#0x10]         ;315
0002be  2608              MOVS     r6,#8                 ;315
0002c0  43b0              BICS     r0,r0,r6              ;315
0002c2  3008              ADDS     r0,r0,#8              ;315
0002c4  4e51              LDR      r6,|L19.1036|
0002c6  6130              STR      r0,[r6,#0x10]         ;315
                  |L19.712|
0002c8  2501              MOVS     r5,#1                 ;319
0002ca  042d              LSLS     r5,r5,#16             ;319
0002cc  e006              B        |L19.732|
                  |L19.718|
0002ce  4628              MOV      r0,r5                 ;322
0002d0  1e6d              SUBS     r5,r5,#1              ;322
0002d2  2800              CMP      r0,#0                 ;322
0002d4  dc02              BGT      |L19.732|
0002d6  484b              LDR      r0,|L19.1028|
0002d8  1c40              ADDS     r0,r0,#1              ;323
0002da  e69b              B        |L19.20|
                  |L19.732|
0002dc  00a0              LSLS     r0,r4,#2              ;320
0002de  4e4c              LDR      r6,|L19.1040|
0002e0  5830              LDR      r0,[r6,r0]            ;320
0002e2  6800              LDR      r0,[r0,#0]            ;320
0002e4  07c0              LSLS     r0,r0,#31             ;320
0002e6  0fc0              LSRS     r0,r0,#31             ;320
0002e8  2801              CMP      r0,#1                 ;320
0002ea  d0f0              BEQ      |L19.718|
0002ec  2601              MOVS     r6,#1                 ;326
0002ee  200c              MOVS     r0,#0xc               ;326
0002f0  4360              MULS     r0,r4,r0              ;326
0002f2  4f43              LDR      r7,|L19.1024|
0002f4  19c0              ADDS     r0,r0,r7              ;326
0002f6  7046              STRB     r6,[r0,#1]            ;326
0002f8  2600              MOVS     r6,#0                 ;327
0002fa  200c              MOVS     r0,#0xc               ;327
0002fc  4360              MULS     r0,r4,r0              ;327
0002fe  19c0              ADDS     r0,r0,r7              ;327
000300  6046              STR      r6,[r0,#4]            ;327
000302  200c              MOVS     r0,#0xc               ;328
000304  4360              MULS     r0,r4,r0              ;328
000306  19c0              ADDS     r0,r0,r7              ;328
000308  6086              STR      r6,[r0,#8]            ;328
00030a  2b00              CMP      r3,#0                 ;331
00030c  dd01              BLE      |L19.786|
00030e  2b20              CMP      r3,#0x20              ;331
000310  dd02              BLE      |L19.792|
                  |L19.786|
000312  483c              LDR      r0,|L19.1028|
000314  1e40              SUBS     r0,r0,#1              ;333
000316  e67d              B        |L19.20|
                  |L19.792|
000318  2b20              CMP      r3,#0x20              ;337
00031a  d100              BNE      |L19.798|
00031c  2300              MOVS     r3,#0                 ;339
                  |L19.798|
00031e  00a0              LSLS     r0,r4,#2              ;341
000320  4e3b              LDR      r6,|L19.1040|
000322  5830              LDR      r0,[r6,r0]            ;341
000324  6800              LDR      r0,[r0,#0]            ;341
000326  26f8              MOVS     r6,#0xf8              ;341
000328  43b0              BICS     r0,r0,r6              ;341
00032a  00de              LSLS     r6,r3,#3              ;341
00032c  27f8              MOVS     r7,#0xf8              ;341
00032e  403e              ANDS     r6,r6,r7              ;341
000330  4330              ORRS     r0,r0,r6              ;341
000332  00a6              LSLS     r6,r4,#2              ;341
000334  4f36              LDR      r7,|L19.1040|
000336  59be              LDR      r6,[r7,r6]            ;341
000338  6030              STR      r0,[r6,#0]            ;341
00033a  2901              CMP      r1,#1                 ;343
00033c  d10a              BNE      |L19.852|
00033e  00a0              LSLS     r0,r4,#2              ;344
000340  463e              MOV      r6,r7                 ;344
000342  5830              LDR      r0,[r6,r0]            ;344
000344  6800              LDR      r0,[r0,#0]            ;344
000346  048e              LSLS     r6,r1,#18             ;344
000348  43b0              BICS     r0,r0,r6              ;344
00034a  1980              ADDS     r0,r0,r6              ;344
00034c  00a6              LSLS     r6,r4,#2              ;344
00034e  59be              LDR      r6,[r7,r6]            ;344
000350  6030              STR      r0,[r6,#0]            ;344
000352  e00a              B        |L19.874|
                  |L19.852|
000354  00a0              LSLS     r0,r4,#2              ;346
000356  4e2e              LDR      r6,|L19.1040|
000358  5830              LDR      r0,[r6,r0]            ;346
00035a  6800              LDR      r0,[r0,#0]            ;346
00035c  2601              MOVS     r6,#1                 ;346
00035e  04b6              LSLS     r6,r6,#18             ;346
000360  43b0              BICS     r0,r0,r6              ;346
000362  00a6              LSLS     r6,r4,#2              ;346
000364  4f2a              LDR      r7,|L19.1040|
000366  59be              LDR      r6,[r7,r6]            ;346
000368  6030              STR      r0,[r6,#0]            ;346
                  |L19.874|
00036a  00a0              LSLS     r0,r4,#2              ;349
00036c  4e28              LDR      r6,|L19.1040|
00036e  5830              LDR      r0,[r6,r0]            ;349
000370  6880              LDR      r0,[r0,#8]            ;349
000372  2608              MOVS     r6,#8                 ;349
000374  43b0              BICS     r0,r0,r6              ;349
000376  3008              ADDS     r0,r0,#8              ;349
000378  00a6              LSLS     r6,r4,#2              ;349
00037a  4f25              LDR      r7,|L19.1040|
00037c  59be              LDR      r6,[r7,r6]            ;349
00037e  60b0              STR      r0,[r6,#8]            ;349
000380  2a00              CMP      r2,#0                 ;352
000382  d11c              BNE      |L19.958|
000384  00a0              LSLS     r0,r4,#2              ;354
000386  463e              MOV      r6,r7                 ;354
000388  5830              LDR      r0,[r6,r0]            ;354
00038a  6800              LDR      r0,[r0,#0]            ;354
00038c  2601              MOVS     r6,#1                 ;354
00038e  02f6              LSLS     r6,r6,#11             ;354
000390  43b0              BICS     r0,r0,r6              ;354
000392  00a6              LSLS     r6,r4,#2              ;354
000394  59be              LDR      r6,[r7,r6]            ;354
000396  6030              STR      r0,[r6,#0]            ;354
000398  00a0              LSLS     r0,r4,#2              ;355
00039a  463e              MOV      r6,r7                 ;355
00039c  5830              LDR      r0,[r6,r0]            ;355
00039e  6800              LDR      r0,[r0,#0]            ;355
0003a0  2604              MOVS     r6,#4                 ;355
0003a2  43b0              BICS     r0,r0,r6              ;355
0003a4  00a6              LSLS     r6,r4,#2              ;355
0003a6  59be              LDR      r6,[r7,r6]            ;355
0003a8  6030              STR      r0,[r6,#0]            ;355
0003aa  00a0              LSLS     r0,r4,#2              ;356
0003ac  463e              MOV      r6,r7                 ;356
0003ae  5830              LDR      r0,[r6,r0]            ;356
0003b0  6800              LDR      r0,[r0,#0]            ;356
0003b2  2602              MOVS     r6,#2                 ;356
0003b4  43b0              BICS     r0,r0,r6              ;356
0003b6  00a6              LSLS     r6,r4,#2              ;356
0003b8  59be              LDR      r6,[r7,r6]            ;356
0003ba  6030              STR      r0,[r6,#0]            ;356
0003bc  e0f0              B        |L19.1440|
                  |L19.958|
0003be  2a01              CMP      r2,#1                 ;358
0003c0  d128              BNE      |L19.1044|
0003c2  00a0              LSLS     r0,r4,#2              ;360
0003c4  4e12              LDR      r6,|L19.1040|
0003c6  5830              LDR      r0,[r6,r0]            ;360
0003c8  6800              LDR      r0,[r0,#0]            ;360
0003ca  02d6              LSLS     r6,r2,#11             ;360
0003cc  43b0              BICS     r0,r0,r6              ;360
0003ce  00a6              LSLS     r6,r4,#2              ;360
0003d0  4f0f              LDR      r7,|L19.1040|
0003d2  59be              LDR      r6,[r7,r6]            ;360
0003d4  6030              STR      r0,[r6,#0]            ;360
0003d6  00a0              LSLS     r0,r4,#2              ;361
0003d8  463e              MOV      r6,r7                 ;361
0003da  5830              LDR      r0,[r6,r0]            ;361
0003dc  6800              LDR      r0,[r0,#0]            ;361
0003de  2604              MOVS     r6,#4                 ;361
0003e0  43b0              BICS     r0,r0,r6              ;361
0003e2  1d00              ADDS     r0,r0,#4              ;361
0003e4  00a6              LSLS     r6,r4,#2              ;361
0003e6  59be              LDR      r6,[r7,r6]            ;361
0003e8  6030              STR      r0,[r6,#0]            ;361
0003ea  00a0              LSLS     r0,r4,#2              ;362
0003ec  463e              MOV      r6,r7                 ;362
0003ee  5830              LDR      r0,[r6,r0]            ;362
0003f0  6800              LDR      r0,[r0,#0]            ;362
0003f2  2602              MOVS     r6,#2                 ;362
0003f4  43b0              BICS     r0,r0,r6              ;362
0003f6  00a6              LSLS     r6,r4,#2              ;362
0003f8  59be              LDR      r6,[r7,r6]            ;362
0003fa  6030              STR      r0,[r6,#0]            ;362
0003fc  e0d0              B        |L19.1440|
0003fe  0000              DCW      0x0000
                  |L19.1024|
                          DCD      g_sSpiHandler
                  |L19.1028|
                          DCD      0xffff9403
                  |L19.1032|
                          DCD      0x50000200
                  |L19.1036|
                          DCD      0x50000040
                  |L19.1040|
                          DCD      SPI_PORT
                  |L19.1044|
000414  2a02              CMP      r2,#2                 ;364
000416  d11d              BNE      |L19.1108|
000418  00a0              LSLS     r0,r4,#2              ;366
00041a  4e62              LDR      r6,|L19.1444|
00041c  5830              LDR      r0,[r6,r0]            ;366
00041e  6800              LDR      r0,[r0,#0]            ;366
000420  0296              LSLS     r6,r2,#10             ;366
000422  43b0              BICS     r0,r0,r6              ;366
000424  00a6              LSLS     r6,r4,#2              ;366
000426  4f5f              LDR      r7,|L19.1444|
000428  59be              LDR      r6,[r7,r6]            ;366
00042a  6030              STR      r0,[r6,#0]            ;366
00042c  00a0              LSLS     r0,r4,#2              ;367
00042e  463e              MOV      r6,r7                 ;367
000430  5830              LDR      r0,[r6,r0]            ;367
000432  6800              LDR      r0,[r0,#0]            ;367
000434  2604              MOVS     r6,#4                 ;367
000436  43b0              BICS     r0,r0,r6              ;367
000438  00a6              LSLS     r6,r4,#2              ;367
00043a  59be              LDR      r6,[r7,r6]            ;367
00043c  6030              STR      r0,[r6,#0]            ;367
00043e  00a0              LSLS     r0,r4,#2              ;368
000440  463e              MOV      r6,r7                 ;368
000442  5830              LDR      r0,[r6,r0]            ;368
000444  6800              LDR      r0,[r0,#0]            ;368
000446  2602              MOVS     r6,#2                 ;368
000448  43b0              BICS     r0,r0,r6              ;368
00044a  1c80              ADDS     r0,r0,#2              ;368
00044c  00a6              LSLS     r6,r4,#2              ;368
00044e  59be              LDR      r6,[r7,r6]            ;368
000450  6030              STR      r0,[r6,#0]            ;368
000452  e0a5              B        |L19.1440|
                  |L19.1108|
000454  2a03              CMP      r2,#3                 ;370
000456  d11f              BNE      |L19.1176|
000458  00a0              LSLS     r0,r4,#2              ;372
00045a  4e52              LDR      r6,|L19.1444|
00045c  5830              LDR      r0,[r6,r0]            ;372
00045e  6800              LDR      r0,[r0,#0]            ;372
000460  2601              MOVS     r6,#1                 ;372
000462  02f6              LSLS     r6,r6,#11             ;372
000464  43b0              BICS     r0,r0,r6              ;372
000466  00a6              LSLS     r6,r4,#2              ;372
000468  4f4e              LDR      r7,|L19.1444|
00046a  59be              LDR      r6,[r7,r6]            ;372
00046c  6030              STR      r0,[r6,#0]            ;372
00046e  00a0              LSLS     r0,r4,#2              ;373
000470  463e              MOV      r6,r7                 ;373
000472  5830              LDR      r0,[r6,r0]            ;373
000474  6800              LDR      r0,[r0,#0]            ;373
000476  2604              MOVS     r6,#4                 ;373
000478  43b0              BICS     r0,r0,r6              ;373
00047a  1d00              ADDS     r0,r0,#4              ;373
00047c  00a6              LSLS     r6,r4,#2              ;373
00047e  59be              LDR      r6,[r7,r6]            ;373
000480  6030              STR      r0,[r6,#0]            ;373
000482  00a0              LSLS     r0,r4,#2              ;374
000484  463e              MOV      r6,r7                 ;374
000486  5830              LDR      r0,[r6,r0]            ;374
000488  6800              LDR      r0,[r0,#0]            ;374
00048a  2602              MOVS     r6,#2                 ;374
00048c  43b0              BICS     r0,r0,r6              ;374
00048e  1c80              ADDS     r0,r0,#2              ;374
000490  00a6              LSLS     r6,r4,#2              ;374
000492  59be              LDR      r6,[r7,r6]            ;374
000494  6030              STR      r0,[r6,#0]            ;374
000496  e083              B        |L19.1440|
                  |L19.1176|
000498  2a04              CMP      r2,#4                 ;376
00049a  d11d              BNE      |L19.1240|
00049c  00a0              LSLS     r0,r4,#2              ;378
00049e  4e41              LDR      r6,|L19.1444|
0004a0  5830              LDR      r0,[r6,r0]            ;378
0004a2  6800              LDR      r0,[r0,#0]            ;378
0004a4  0256              LSLS     r6,r2,#9              ;378
0004a6  43b0              BICS     r0,r0,r6              ;378
0004a8  1980              ADDS     r0,r0,r6              ;378
0004aa  00a6              LSLS     r6,r4,#2              ;378
0004ac  4f3d              LDR      r7,|L19.1444|
0004ae  59be              LDR      r6,[r7,r6]            ;378
0004b0  6030              STR      r0,[r6,#0]            ;378
0004b2  00a0              LSLS     r0,r4,#2              ;379
0004b4  463e              MOV      r6,r7                 ;379
0004b6  5830              LDR      r0,[r6,r0]            ;379
0004b8  6800              LDR      r0,[r0,#0]            ;379
0004ba  2604              MOVS     r6,#4                 ;379
0004bc  43b0              BICS     r0,r0,r6              ;379
0004be  00a6              LSLS     r6,r4,#2              ;379
0004c0  59be              LDR      r6,[r7,r6]            ;379
0004c2  6030              STR      r0,[r6,#0]            ;379
0004c4  00a0              LSLS     r0,r4,#2              ;380
0004c6  463e              MOV      r6,r7                 ;380
0004c8  5830              LDR      r0,[r6,r0]            ;380
0004ca  6800              LDR      r0,[r0,#0]            ;380
0004cc  2602              MOVS     r6,#2                 ;380
0004ce  43b0              BICS     r0,r0,r6              ;380
0004d0  00a6              LSLS     r6,r4,#2              ;380
0004d2  59be              LDR      r6,[r7,r6]            ;380
0004d4  6030              STR      r0,[r6,#0]            ;380
0004d6  e063              B        |L19.1440|
                  |L19.1240|
0004d8  2a05              CMP      r2,#5                 ;382
0004da  d11f              BNE      |L19.1308|
0004dc  00a0              LSLS     r0,r4,#2              ;384
0004de  4e31              LDR      r6,|L19.1444|
0004e0  5830              LDR      r0,[r6,r0]            ;384
0004e2  6800              LDR      r0,[r0,#0]            ;384
0004e4  2601              MOVS     r6,#1                 ;384
0004e6  02f6              LSLS     r6,r6,#11             ;384
0004e8  43b0              BICS     r0,r0,r6              ;384
0004ea  1980              ADDS     r0,r0,r6              ;384
0004ec  00a6              LSLS     r6,r4,#2              ;384
0004ee  4f2d              LDR      r7,|L19.1444|
0004f0  59be              LDR      r6,[r7,r6]            ;384
0004f2  6030              STR      r0,[r6,#0]            ;384
0004f4  00a0              LSLS     r0,r4,#2              ;385
0004f6  463e              MOV      r6,r7                 ;385
0004f8  5830              LDR      r0,[r6,r0]            ;385
0004fa  6800              LDR      r0,[r0,#0]            ;385
0004fc  2604              MOVS     r6,#4                 ;385
0004fe  43b0              BICS     r0,r0,r6              ;385
000500  1d00              ADDS     r0,r0,#4              ;385
000502  00a6              LSLS     r6,r4,#2              ;385
000504  59be              LDR      r6,[r7,r6]            ;385
000506  6030              STR      r0,[r6,#0]            ;385
000508  00a0              LSLS     r0,r4,#2              ;386
00050a  463e              MOV      r6,r7                 ;386
00050c  5830              LDR      r0,[r6,r0]            ;386
00050e  6800              LDR      r0,[r0,#0]            ;386
000510  2602              MOVS     r6,#2                 ;386
000512  43b0              BICS     r0,r0,r6              ;386
000514  00a6              LSLS     r6,r4,#2              ;386
000516  59be              LDR      r6,[r7,r6]            ;386
000518  6030              STR      r0,[r6,#0]            ;386
00051a  e041              B        |L19.1440|
                  |L19.1308|
00051c  2a06              CMP      r2,#6                 ;388
00051e  d11f              BNE      |L19.1376|
000520  00a0              LSLS     r0,r4,#2              ;390
000522  4e20              LDR      r6,|L19.1444|
000524  5830              LDR      r0,[r6,r0]            ;390
000526  6800              LDR      r0,[r0,#0]            ;390
000528  2601              MOVS     r6,#1                 ;390
00052a  02f6              LSLS     r6,r6,#11             ;390
00052c  43b0              BICS     r0,r0,r6              ;390
00052e  1980              ADDS     r0,r0,r6              ;390
000530  00a6              LSLS     r6,r4,#2              ;390
000532  4f1c              LDR      r7,|L19.1444|
000534  59be              LDR      r6,[r7,r6]            ;390
000536  6030              STR      r0,[r6,#0]            ;390
000538  00a0              LSLS     r0,r4,#2              ;391
00053a  463e              MOV      r6,r7                 ;391
00053c  5830              LDR      r0,[r6,r0]            ;391
00053e  6800              LDR      r0,[r0,#0]            ;391
000540  2604              MOVS     r6,#4                 ;391
000542  43b0              BICS     r0,r0,r6              ;391
000544  00a6              LSLS     r6,r4,#2              ;391
000546  59be              LDR      r6,[r7,r6]            ;391
000548  6030              STR      r0,[r6,#0]            ;391
00054a  00a0              LSLS     r0,r4,#2              ;392
00054c  463e              MOV      r6,r7                 ;392
00054e  5830              LDR      r0,[r6,r0]            ;392
000550  6800              LDR      r0,[r0,#0]            ;392
000552  2602              MOVS     r6,#2                 ;392
000554  43b0              BICS     r0,r0,r6              ;392
000556  1c80              ADDS     r0,r0,#2              ;392
000558  00a6              LSLS     r6,r4,#2              ;392
00055a  59be              LDR      r6,[r7,r6]            ;392
00055c  6030              STR      r0,[r6,#0]            ;392
00055e  e01f              B        |L19.1440|
                  |L19.1376|
000560  00a0              LSLS     r0,r4,#2              ;396
000562  4e10              LDR      r6,|L19.1444|
000564  5830              LDR      r0,[r6,r0]            ;396
000566  6800              LDR      r0,[r0,#0]            ;396
000568  2601              MOVS     r6,#1                 ;396
00056a  02f6              LSLS     r6,r6,#11             ;396
00056c  43b0              BICS     r0,r0,r6              ;396
00056e  1980              ADDS     r0,r0,r6              ;396
000570  00a6              LSLS     r6,r4,#2              ;396
000572  4f0c              LDR      r7,|L19.1444|
000574  59be              LDR      r6,[r7,r6]            ;396
000576  6030              STR      r0,[r6,#0]            ;396
000578  00a0              LSLS     r0,r4,#2              ;397
00057a  463e              MOV      r6,r7                 ;397
00057c  5830              LDR      r0,[r6,r0]            ;397
00057e  6800              LDR      r0,[r0,#0]            ;397
000580  2604              MOVS     r6,#4                 ;397
000582  43b0              BICS     r0,r0,r6              ;397
000584  1d00              ADDS     r0,r0,#4              ;397
000586  00a6              LSLS     r6,r4,#2              ;397
000588  59be              LDR      r6,[r7,r6]            ;397
00058a  6030              STR      r0,[r6,#0]            ;397
00058c  00a0              LSLS     r0,r4,#2              ;398
00058e  463e              MOV      r6,r7                 ;398
000590  5830              LDR      r0,[r6,r0]            ;398
000592  6800              LDR      r0,[r0,#0]            ;398
000594  2602              MOVS     r6,#2                 ;398
000596  43b0              BICS     r0,r0,r6              ;398
000598  1c80              ADDS     r0,r0,#2              ;398
00059a  00a6              LSLS     r6,r4,#2              ;398
00059c  59be              LDR      r6,[r7,r6]            ;398
00059e  6030              STR      r0,[r6,#0]            ;398
                  |L19.1440|
0005a0  2000              MOVS     r0,#0                 ;401
0005a2  e537              B        |L19.20|
;;;403    
                          ENDP

                  |L19.1444|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Set2BitTransferMode||, CODE, READONLY, ALIGN=2

                  DrvSPI_Set2BitTransferMode PROC
;;;476    /*--------------------------------------------------------------------------------------------------------------------*/
;;;477    void DrvSPI_Set2BitTransferMode(E_DRVSPI_PORT eSpiPort, uint8_t bEnable)
000000  b510              PUSH     {r4,lr}
;;;478    {
;;;479    	if(bEnable)
000002  2900              CMP      r1,#0
000004  d07e              BEQ      |L20.260|
;;;480    	{
;;;481    		SPI_PORT[eSpiPort]->CNTRL.TWOB = 1;
000006  0082              LSLS     r2,r0,#2
000008  4b44              LDR      r3,|L20.284|
00000a  589a              LDR      r2,[r3,r2]
00000c  6812              LDR      r2,[r2,#0]
00000e  2301              MOVS     r3,#1
000010  059b              LSLS     r3,r3,#22
000012  439a              BICS     r2,r2,r3
000014  18d2              ADDS     r2,r2,r3
000016  0083              LSLS     r3,r0,#2
000018  4c40              LDR      r4,|L20.284|
00001a  58e3              LDR      r3,[r4,r3]
00001c  601a              STR      r2,[r3,#0]
;;;482    		SPI_PORT[eSpiPort]->CNTRL.TX_NUM = 0;
00001e  0082              LSLS     r2,r0,#2
000020  4623              MOV      r3,r4
000022  589a              LDR      r2,[r3,r2]
000024  6812              LDR      r2,[r2,#0]
000026  2303              MOVS     r3,#3
000028  021b              LSLS     r3,r3,#8
00002a  439a              BICS     r2,r2,r3
00002c  0083              LSLS     r3,r0,#2
00002e  58e3              LDR      r3,[r4,r3]
000030  601a              STR      r2,[r3,#0]
;;;483    		if(eSpiPort == eDRVSPI_PORT0)
000032  2800              CMP      r0,#0
000034  d129              BNE      |L20.138|
;;;484    		{
;;;485    			if(g_sSpiHandler[eSpiPort].bQFN36PinPackage)     /* for QFN 36-pin package */
000036  220c              MOVS     r2,#0xc
000038  4342              MULS     r2,r0,r2
00003a  4b39              LDR      r3,|L20.288|
00003c  5c9a              LDRB     r2,[r3,r2]
00003e  2a00              CMP      r2,#0
000040  d011              BEQ      |L20.102|
;;;486    			{
;;;487    				SYS->GPDMFP.SPI2_MISO0_SPI0_MISO1 = 1;
000042  2205              MOVS     r2,#5
000044  0712              LSLS     r2,r2,#28
000046  6bd2              LDR      r2,[r2,#0x3c]
000048  2304              MOVS     r3,#4
00004a  439a              BICS     r2,r2,r3
00004c  1d12              ADDS     r2,r2,#4
00004e  2305              MOVS     r3,#5
000050  071b              LSLS     r3,r3,#28
000052  63da              STR      r2,[r3,#0x3c]
;;;488    				SYS->GPDMFP.SPI2_MOSI0_SPI0_MOSI1 = 1;
000054  461a              MOV      r2,r3
000056  6bd2              LDR      r2,[r2,#0x3c]
000058  2308              MOVS     r3,#8
00005a  439a              BICS     r2,r2,r3
00005c  3208              ADDS     r2,r2,#8
00005e  2305              MOVS     r3,#5
000060  071b              LSLS     r3,r3,#28
000062  63da              STR      r2,[r3,#0x3c]
000064  e059              B        |L20.282|
                  |L20.102|
;;;489    			}
;;;490    			else
;;;491    			{
;;;492    				SYS->GPCMFP.SPI0_MISO1 	=1;
000066  2205              MOVS     r2,#5
000068  0712              LSLS     r2,r2,#28
00006a  6b92              LDR      r2,[r2,#0x38]
00006c  2310              MOVS     r3,#0x10
00006e  439a              BICS     r2,r2,r3
000070  3210              ADDS     r2,r2,#0x10
000072  2305              MOVS     r3,#5
000074  071b              LSLS     r3,r3,#28
000076  639a              STR      r2,[r3,#0x38]
;;;493    				SYS->GPCMFP.SPI0_MOSI1 	=1;
000078  461a              MOV      r2,r3
00007a  6b92              LDR      r2,[r2,#0x38]
00007c  2320              MOVS     r3,#0x20
00007e  439a              BICS     r2,r2,r3
000080  3220              ADDS     r2,r2,#0x20
000082  2305              MOVS     r3,#5
000084  071b              LSLS     r3,r3,#28
000086  639a              STR      r2,[r3,#0x38]
000088  e047              B        |L20.282|
                  |L20.138|
;;;494    			}
;;;495    		}
;;;496    		else if(eSpiPort == eDRVSPI_PORT1)
00008a  2801              CMP      r0,#1
00008c  d111              BNE      |L20.178|
;;;497    		{
;;;498    			SYS->GPCMFP.SPI1_MISO1 	=1;
00008e  2205              MOVS     r2,#5
000090  0712              LSLS     r2,r2,#28
000092  6b92              LDR      r2,[r2,#0x38]
000094  0303              LSLS     r3,r0,#12
000096  439a              BICS     r2,r2,r3
000098  18d2              ADDS     r2,r2,r3
00009a  2305              MOVS     r3,#5
00009c  071b              LSLS     r3,r3,#28
00009e  639a              STR      r2,[r3,#0x38]
;;;499    			SYS->GPCMFP.SPI1_MOSI1 	=1;
0000a0  461a              MOV      r2,r3
0000a2  6b92              LDR      r2,[r2,#0x38]
0000a4  0343              LSLS     r3,r0,#13
0000a6  439a              BICS     r2,r2,r3
0000a8  18d2              ADDS     r2,r2,r3
0000aa  2305              MOVS     r3,#5
0000ac  071b              LSLS     r3,r3,#28
0000ae  639a              STR      r2,[r3,#0x38]
0000b0  e033              B        |L20.282|
                  |L20.178|
;;;500    		}
;;;501    		else if(eSpiPort == eDRVSPI_PORT2)
0000b2  2802              CMP      r0,#2
0000b4  d111              BNE      |L20.218|
;;;502    		{
;;;503    			SYS->GPDMFP.SPI2_MISO1 	=1;
0000b6  2205              MOVS     r2,#5
0000b8  0712              LSLS     r2,r2,#28
0000ba  6bd2              LDR      r2,[r2,#0x3c]
0000bc  2310              MOVS     r3,#0x10
0000be  439a              BICS     r2,r2,r3
0000c0  3210              ADDS     r2,r2,#0x10
0000c2  2305              MOVS     r3,#5
0000c4  071b              LSLS     r3,r3,#28
0000c6  63da              STR      r2,[r3,#0x3c]
;;;504    			SYS->GPDMFP.SPI2_MOSI1 	=1;
0000c8  461a              MOV      r2,r3
0000ca  6bd2              LDR      r2,[r2,#0x3c]
0000cc  2320              MOVS     r3,#0x20
0000ce  439a              BICS     r2,r2,r3
0000d0  3220              ADDS     r2,r2,#0x20
0000d2  2305              MOVS     r3,#5
0000d4  071b              LSLS     r3,r3,#28
0000d6  63da              STR      r2,[r3,#0x3c]
0000d8  e01f              B        |L20.282|
                  |L20.218|
;;;505    		}
;;;506    		else
;;;507    		{
;;;508    			SYS->GPDMFP.SPI3_MISO1 	=1;
0000da  2205              MOVS     r2,#5
0000dc  0712              LSLS     r2,r2,#28
0000de  6bd2              LDR      r2,[r2,#0x3c]
0000e0  2301              MOVS     r3,#1
0000e2  031b              LSLS     r3,r3,#12
0000e4  439a              BICS     r2,r2,r3
0000e6  18d2              ADDS     r2,r2,r3
0000e8  2305              MOVS     r3,#5
0000ea  071b              LSLS     r3,r3,#28
0000ec  63da              STR      r2,[r3,#0x3c]
;;;509    			SYS->GPDMFP.SPI3_MOSI1 	=1;
0000ee  461a              MOV      r2,r3
0000f0  6bd2              LDR      r2,[r2,#0x3c]
0000f2  2301              MOVS     r3,#1
0000f4  035b              LSLS     r3,r3,#13
0000f6  439a              BICS     r2,r2,r3
0000f8  18d2              ADDS     r2,r2,r3
0000fa  2305              MOVS     r3,#5
0000fc  071b              LSLS     r3,r3,#28
0000fe  63da              STR      r2,[r3,#0x3c]
000100  e00b              B        |L20.282|
000102  e7ff              B        |L20.260|
                  |L20.260|
;;;510    		}
;;;511    	}
;;;512    	else
;;;513    		SPI_PORT[eSpiPort]->CNTRL.TWOB = 0;
000104  0082              LSLS     r2,r0,#2
000106  4b05              LDR      r3,|L20.284|
000108  589a              LDR      r2,[r3,r2]
00010a  6812              LDR      r2,[r2,#0]
00010c  2301              MOVS     r3,#1
00010e  059b              LSLS     r3,r3,#22
000110  439a              BICS     r2,r2,r3
000112  0083              LSLS     r3,r0,#2
000114  4c01              LDR      r4,|L20.284|
000116  58e3              LDR      r3,[r4,r3]
000118  601a              STR      r2,[r3,#0]
                  |L20.282|
;;;514    }
00011a  bd10              POP      {r4,pc}
;;;515    
                          ENDP

                  |L20.284|
                          DCD      SPI_PORT
                  |L20.288|
                          DCD      g_sSpiHandler

                          AREA ||i.DrvSPI_SetBitLength||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetBitLength PROC
;;;554    /*---------------------------------------------------------------------------------------------------------*/
;;;555    int32_t DrvSPI_SetBitLength(E_DRVSPI_PORT eSpiPort, int32_t i32BitLength)
000000  b510              PUSH     {r4,lr}
;;;556    {
000002  4602              MOV      r2,r0
;;;557    
;;;558        if((i32BitLength < 1) || (i32BitLength > 32))
000004  2901              CMP      r1,#1
000006  db01              BLT      |L21.12|
000008  2920              CMP      r1,#0x20
00000a  dd01              BLE      |L21.16|
                  |L21.12|
;;;559        {
;;;560            return E_DRVSPI_ERR_BIT_LENGTH;
00000c  480a              LDR      r0,|L21.56|
                  |L21.14|
;;;561        }
;;;562        if(i32BitLength == 32)
;;;563            i32BitLength = 0;
;;;564    
;;;565    	SPI_PORT[eSpiPort]->CNTRL.TX_BIT_LEN = i32BitLength;
;;;566    	
;;;567        return E_SUCCESS;
;;;568    }
00000e  bd10              POP      {r4,pc}
                  |L21.16|
000010  2920              CMP      r1,#0x20              ;562
000012  d100              BNE      |L21.22|
000014  2100              MOVS     r1,#0                 ;563
                  |L21.22|
000016  0090              LSLS     r0,r2,#2              ;565
000018  4b08              LDR      r3,|L21.60|
00001a  5818              LDR      r0,[r3,r0]            ;565
00001c  6800              LDR      r0,[r0,#0]            ;565
00001e  23f8              MOVS     r3,#0xf8              ;565
000020  4398              BICS     r0,r0,r3              ;565
000022  00cb              LSLS     r3,r1,#3              ;565
000024  24f8              MOVS     r4,#0xf8              ;565
000026  4023              ANDS     r3,r3,r4              ;565
000028  4318              ORRS     r0,r0,r3              ;565
00002a  0093              LSLS     r3,r2,#2              ;565
00002c  4c03              LDR      r4,|L21.60|
00002e  58e3              LDR      r3,[r4,r3]            ;565
000030  6018              STR      r0,[r3,#0]            ;565
000032  2000              MOVS     r0,#0                 ;567
000034  e7eb              B        |L21.14|
;;;569    
                          ENDP

000036  0000              DCW      0x0000
                  |L21.56|
                          DCD      0xffff9402
                  |L21.60|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetByteReorder||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetByteReorder PROC
;;;591    /*----------------------------------------------------------------------------------------------------------*/
;;;592    int32_t DrvSPI_SetByteReorder(E_DRVSPI_PORT eSpiPort, E_DRVSPI_BYTE_REORDER eOption)
000000  b510              PUSH     {r4,lr}
;;;593    {
000002  4602              MOV      r2,r0
;;;594    	if( (SPI_PORT[eSpiPort]->CNTRL.TX_BIT_LEN) % 8 )
000004  0093              LSLS     r3,r2,#2
000006  4c10              LDR      r4,|L22.72|
000008  58e3              LDR      r3,[r4,r3]
00000a  681b              LDR      r3,[r3,#0]
00000c  061b              LSLS     r3,r3,#24
00000e  0ed8              LSRS     r0,r3,#27
000010  17c3              ASRS     r3,r0,#31
000012  0f5b              LSRS     r3,r3,#29
000014  181b              ADDS     r3,r3,r0
000016  10db              ASRS     r3,r3,#3
000018  00db              LSLS     r3,r3,#3
00001a  1ac3              SUBS     r3,r0,r3
00001c  d001              BEQ      |L22.34|
;;;595    		return E_DRVSPI_ERR_BIT_LENGTH;
00001e  480b              LDR      r0,|L22.76|
                  |L22.32|
;;;596    
;;;597    	SPI_PORT[eSpiPort]->CNTRL.BYTE_REORDER = eOption;
;;;598    
;;;599        return E_SUCCESS;
;;;600    }
000020  bd10              POP      {r4,pc}
                  |L22.34|
000022  0090              LSLS     r0,r2,#2              ;597
000024  4b08              LDR      r3,|L22.72|
000026  5818              LDR      r0,[r3,r0]            ;597
000028  6800              LDR      r0,[r0,#0]            ;597
00002a  2303              MOVS     r3,#3                 ;597
00002c  04db              LSLS     r3,r3,#19             ;597
00002e  4398              BICS     r0,r0,r3              ;597
000030  04cb              LSLS     r3,r1,#19             ;597
000032  2403              MOVS     r4,#3                 ;597
000034  04e4              LSLS     r4,r4,#19             ;597
000036  4023              ANDS     r3,r3,r4              ;597
000038  4318              ORRS     r0,r0,r3              ;597
00003a  0093              LSLS     r3,r2,#2              ;597
00003c  4c02              LDR      r4,|L22.72|
00003e  58e3              LDR      r3,[r4,r3]            ;597
000040  6018              STR      r0,[r3,#0]            ;597
000042  2000              MOVS     r0,#0                 ;599
000044  e7ec              B        |L22.32|
;;;601    
                          ENDP

000046  0000              DCW      0x0000
                  |L22.72|
                          DCD      SPI_PORT
                  |L22.76|
                          DCD      0xffff9402

                          AREA ||i.DrvSPI_SetClockFreq||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetClockFreq PROC
;;;840    /*-------------------------------------------------------------------------------------------------------------------*/
;;;841    uint32_t DrvSPI_SetClockFreq(E_DRVSPI_PORT eSpiPort, uint32_t u32Clock1, uint32_t u32Clock2)
000000  b5f8              PUSH     {r3-r7,lr}
;;;842    {
000002  4604              MOV      r4,r0
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
;;;843        uint32_t u32Div;
;;;844        uint32_t u32Pclk;
;;;845        
;;;846        u32Pclk = DrvSYS_GetHCLKFreq();
000008  f7fffffe          BL       DrvSYS_GetHCLKFreq
00000c  9000              STR      r0,[sp,#0]
;;;847        
;;;848    	if(u32Clock2!=0)
00000e  2e00              CMP      r6,#0
000010  d018              BEQ      |L23.68|
;;;849    	{
;;;850    		u32Div = (((u32Pclk / u32Clock2) + 1) >> 1) - 1;
000012  4631              MOV      r1,r6
000014  9800              LDR      r0,[sp,#0]
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  1c40              ADDS     r0,r0,#1
00001c  0840              LSRS     r0,r0,#1
00001e  1e45              SUBS     r5,r0,#1
;;;851    		if(u32Div > 65535)
000020  4824              LDR      r0,|L23.180|
000022  4285              CMP      r5,r0
000024  d900              BLS      |L23.40|
;;;852    		    u32Div = 65535;
000026  4605              MOV      r5,r0
                  |L23.40|
;;;853    		SPI_PORT[eSpiPort]->DIVIDER.DIVIDER2 = u32Div;
000028  00a0              LSLS     r0,r4,#2
00002a  4923              LDR      r1,|L23.184|
00002c  5808              LDR      r0,[r1,r0]
00002e  6840              LDR      r0,[r0,#4]
000030  b280              UXTH     r0,r0
000032  0429              LSLS     r1,r5,#16
000034  0c09              LSRS     r1,r1,#16
000036  0409              LSLS     r1,r1,#16
000038  4308              ORRS     r0,r0,r1
00003a  00a1              LSLS     r1,r4,#2
00003c  4a1e              LDR      r2,|L23.184|
00003e  5851              LDR      r1,[r2,r1]
000040  6048              STR      r0,[r1,#4]
000042  e00b              B        |L23.92|
                  |L23.68|
;;;854    	}
;;;855    	else
;;;856    		SPI_PORT[eSpiPort]->DIVIDER.DIVIDER2 = 0xFFFF;
000044  00a0              LSLS     r0,r4,#2
000046  491c              LDR      r1,|L23.184|
000048  5808              LDR      r0,[r1,r0]
00004a  6840              LDR      r0,[r0,#4]
00004c  b280              UXTH     r0,r0
00004e  2101              MOVS     r1,#1
000050  0409              LSLS     r1,r1,#16
000052  1a40              SUBS     r0,r0,r1
000054  00a1              LSLS     r1,r4,#2
000056  4a18              LDR      r2,|L23.184|
000058  5851              LDR      r1,[r2,r1]
00005a  6048              STR      r0,[r1,#4]
                  |L23.92|
;;;857    	
;;;858    	if(u32Clock1!=0)
00005c  2f00              CMP      r7,#0
00005e  d017              BEQ      |L23.144|
;;;859    	{
;;;860    		u32Div = (((u32Pclk / u32Clock1) + 1) >> 1) - 1;
000060  4639              MOV      r1,r7
000062  9800              LDR      r0,[sp,#0]
000064  f7fffffe          BL       __aeabi_uidivmod
000068  1c40              ADDS     r0,r0,#1
00006a  0840              LSRS     r0,r0,#1
00006c  1e45              SUBS     r5,r0,#1
;;;861    		if(u32Div > 0xFFFF)
00006e  4811              LDR      r0,|L23.180|
000070  4285              CMP      r5,r0
000072  d900              BLS      |L23.118|
;;;862    		    u32Div = 0xFFFF;
000074  4605              MOV      r5,r0
                  |L23.118|
;;;863    		SPI_PORT[eSpiPort]->DIVIDER.DIVIDER = u32Div;
000076  00a0              LSLS     r0,r4,#2
000078  490f              LDR      r1,|L23.184|
00007a  5808              LDR      r0,[r1,r0]
00007c  6840              LDR      r0,[r0,#4]
00007e  0c00              LSRS     r0,r0,#16
000080  0400              LSLS     r0,r0,#16
000082  b2a9              UXTH     r1,r5
000084  4308              ORRS     r0,r0,r1
000086  00a1              LSLS     r1,r4,#2
000088  4a0b              LDR      r2,|L23.184|
00008a  5851              LDR      r1,[r2,r1]
00008c  6048              STR      r0,[r1,#4]
00008e  e00a              B        |L23.166|
                  |L23.144|
;;;864    		
;;;865    	}
;;;866    	else
;;;867    	{
;;;868    		u32Div = 0xFFFF;
000090  4d08              LDR      r5,|L23.180|
;;;869    		SPI_PORT[eSpiPort]->DIVIDER.DIVIDER = u32Div;
000092  00a0              LSLS     r0,r4,#2
000094  4908              LDR      r1,|L23.184|
000096  5808              LDR      r0,[r1,r0]
000098  6840              LDR      r0,[r0,#4]
00009a  43a8              BICS     r0,r0,r5
00009c  4328              ORRS     r0,r0,r5
00009e  00a1              LSLS     r1,r4,#2
0000a0  4a05              LDR      r2,|L23.184|
0000a2  5851              LDR      r1,[r2,r1]
0000a4  6048              STR      r0,[r1,#4]
                  |L23.166|
;;;870    	}
;;;871    	return ( u32Pclk / ((u32Div+1)*2) );
0000a6  1c68              ADDS     r0,r5,#1
0000a8  0041              LSLS     r1,r0,#1
0000aa  9800              LDR      r0,[sp,#0]
0000ac  f7fffffe          BL       __aeabi_uidivmod
;;;872    }
0000b0  bdf8              POP      {r3-r7,pc}
;;;873    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L23.180|
                          DCD      0x0000ffff
                  |L23.184|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetEndian||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetEndian PROC
;;;528    /*------------------------------------------------------------------------------------------------------------------*/
;;;529    void DrvSPI_SetEndian(E_DRVSPI_PORT eSpiPort, E_DRVSPI_ENDIAN eEndian)
000000  b510              PUSH     {r4,lr}
;;;530    {
;;;531    
;;;532    	if(eEndian == eDRVSPI_LSB_FIRST)
000002  2900              CMP      r1,#0
000004  d10c              BNE      |L24.32|
;;;533    	{
;;;534    		SPI_PORT[eSpiPort]->CNTRL.LSB = 1;
000006  0082              LSLS     r2,r0,#2
000008  4b0b              LDR      r3,|L24.56|
00000a  589a              LDR      r2,[r3,r2]
00000c  6812              LDR      r2,[r2,#0]
00000e  2301              MOVS     r3,#1
000010  029b              LSLS     r3,r3,#10
000012  439a              BICS     r2,r2,r3
000014  18d2              ADDS     r2,r2,r3
000016  0083              LSLS     r3,r0,#2
000018  4c07              LDR      r4,|L24.56|
00001a  58e3              LDR      r3,[r4,r3]
00001c  601a              STR      r2,[r3,#0]
00001e  e00a              B        |L24.54|
                  |L24.32|
;;;535    	}
;;;536    	else
;;;537    		SPI_PORT[eSpiPort]->CNTRL.LSB = 0;
000020  0082              LSLS     r2,r0,#2
000022  4b05              LDR      r3,|L24.56|
000024  589a              LDR      r2,[r3,r2]
000026  6812              LDR      r2,[r2,#0]
000028  2301              MOVS     r3,#1
00002a  029b              LSLS     r3,r3,#10
00002c  439a              BICS     r2,r2,r3
00002e  0083              LSLS     r3,r0,#2
000030  4c01              LDR      r4,|L24.56|
000032  58e3              LDR      r3,[r4,r3]
000034  601a              STR      r2,[r3,#0]
                  |L24.54|
;;;538    
;;;539    }
000036  bd10              POP      {r4,pc}
;;;540    
                          ENDP

                  |L24.56|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetGo||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetGo PROC
;;;1230   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1231   void DrvSPI_SetGo(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1232   {
;;;1233   	SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
000002  4a05              LDR      r2,|L25.24|
000004  5851              LDR      r1,[r2,r1]
000006  6809              LDR      r1,[r1,#0]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  1c49              ADDS     r1,r1,#1
00000e  0082              LSLS     r2,r0,#2
000010  4b01              LDR      r3,|L25.24|
000012  589a              LDR      r2,[r3,r2]
000014  6011              STR      r1,[r2,#0]
;;;1234   }
000016  4770              BX       lr
;;;1235   
                          ENDP

                  |L25.24|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetPDMA||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetPDMA PROC
;;;1269   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1270   void DrvSPI_SetPDMA(E_DRVSPI_PORT eSpiPort, E_DRVSPI_DMA_MODE eDmaMode, uint8_t bEnable)
000000  b530              PUSH     {r4,r5,lr}
;;;1271   {
;;;1272   	if(eDmaMode==eDRVSPI_TX_DMA)
000002  2900              CMP      r1,#0
000004  d118              BNE      |L26.56|
;;;1273   	{
;;;1274   		if(bEnable)
000006  2a00              CMP      r2,#0
000008  d00b              BEQ      |L26.34|
;;;1275   			SPI_PORT[eSpiPort]->DMA.TX_DMA_GO = 1;
00000a  0083              LSLS     r3,r0,#2
00000c  4c17              LDR      r4,|L26.108|
00000e  58e3              LDR      r3,[r4,r3]
000010  6b9b              LDR      r3,[r3,#0x38]
000012  085b              LSRS     r3,r3,#1
000014  005b              LSLS     r3,r3,#1
000016  1c5b              ADDS     r3,r3,#1
000018  0084              LSLS     r4,r0,#2
00001a  4d14              LDR      r5,|L26.108|
00001c  592c              LDR      r4,[r5,r4]
00001e  63a3              STR      r3,[r4,#0x38]
000020  e022              B        |L26.104|
                  |L26.34|
;;;1276   		else
;;;1277   			SPI_PORT[eSpiPort]->DMA.TX_DMA_GO = 0;
000022  0083              LSLS     r3,r0,#2
000024  4c11              LDR      r4,|L26.108|
000026  58e3              LDR      r3,[r4,r3]
000028  6b9b              LDR      r3,[r3,#0x38]
00002a  085b              LSRS     r3,r3,#1
00002c  005b              LSLS     r3,r3,#1
00002e  0084              LSLS     r4,r0,#2
000030  4d0e              LDR      r5,|L26.108|
000032  592c              LDR      r4,[r5,r4]
000034  63a3              STR      r3,[r4,#0x38]
000036  e017              B        |L26.104|
                  |L26.56|
;;;1278   	}
;;;1279   	else
;;;1280   	{
;;;1281   		if(bEnable)
000038  2a00              CMP      r2,#0
00003a  d00b              BEQ      |L26.84|
;;;1282   			SPI_PORT[eSpiPort]->DMA.RX_DMA_GO = 1;
00003c  0083              LSLS     r3,r0,#2
00003e  4c0b              LDR      r4,|L26.108|
000040  58e3              LDR      r3,[r4,r3]
000042  6b9b              LDR      r3,[r3,#0x38]
000044  2402              MOVS     r4,#2
000046  43a3              BICS     r3,r3,r4
000048  1c9b              ADDS     r3,r3,#2
00004a  0084              LSLS     r4,r0,#2
00004c  4d07              LDR      r5,|L26.108|
00004e  592c              LDR      r4,[r5,r4]
000050  63a3              STR      r3,[r4,#0x38]
000052  e009              B        |L26.104|
                  |L26.84|
;;;1283   		else
;;;1284   			SPI_PORT[eSpiPort]->DMA.RX_DMA_GO = 0;
000054  0083              LSLS     r3,r0,#2
000056  4c05              LDR      r4,|L26.108|
000058  58e3              LDR      r3,[r4,r3]
00005a  6b9b              LDR      r3,[r3,#0x38]
00005c  2402              MOVS     r4,#2
00005e  43a3              BICS     r3,r3,r4
000060  0084              LSLS     r4,r0,#2
000062  4d02              LDR      r5,|L26.108|
000064  592c              LDR      r4,[r5,r4]
000066  63a3              STR      r3,[r4,#0x38]
                  |L26.104|
;;;1285   	}
;;;1286   }
000068  bd30              POP      {r4,r5,pc}
;;;1287   
                          ENDP

00006a  0000              DCW      0x0000
                  |L26.108|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetSS||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetSS PROC
;;;744    /*-------------------------------------------------------------------------------------------------------------------*/
;;;745    void DrvSPI_SetSS(E_DRVSPI_PORT eSpiPort, E_DRVSPI_SLAVE_SEL eSlaveSel)
000000  b510              PUSH     {r4,lr}
;;;746    {
;;;747        SPI_PORT[eSpiPort]->SSR.SSR = eSlaveSel;
000002  0082              LSLS     r2,r0,#2
000004  4b06              LDR      r3,|L27.32|
000006  589a              LDR      r2,[r3,r2]
000008  6892              LDR      r2,[r2,#8]
00000a  0892              LSRS     r2,r2,#2
00000c  0092              LSLS     r2,r2,#2
00000e  078b              LSLS     r3,r1,#30
000010  0f9b              LSRS     r3,r3,#30
000012  431a              ORRS     r2,r2,r3
000014  0083              LSLS     r3,r0,#2
000016  4c02              LDR      r4,|L27.32|
000018  58e3              LDR      r3,[r4,r3]
00001a  609a              STR      r2,[r3,#8]
;;;748    }
00001c  bd10              POP      {r4,pc}
;;;749    
                          ENDP

00001e  0000              DCW      0x0000
                  |L27.32|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetSlaveSelectActiveLevel||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetSlaveSelectActiveLevel PROC
;;;664    /*----------------------------------------------------------------------------------------------------------*/
;;;665    void DrvSPI_SetSlaveSelectActiveLevel(E_DRVSPI_PORT eSpiPort, E_DRVSPI_SS_ACT_TYPE eSSActType)
000000  b510              PUSH     {r4,lr}
;;;666    {
;;;667        SPI_PORT[eSpiPort]->SSR.SS_LVL = eSSActType;
000002  0082              LSLS     r2,r0,#2
000004  4b06              LDR      r3,|L28.32|
000006  589a              LDR      r2,[r3,r2]
000008  6892              LDR      r2,[r2,#8]
00000a  2304              MOVS     r3,#4
00000c  439a              BICS     r2,r2,r3
00000e  008b              LSLS     r3,r1,#2
000010  2404              MOVS     r4,#4
000012  4023              ANDS     r3,r3,r4
000014  431a              ORRS     r2,r2,r3
000016  0083              LSLS     r3,r0,#2
000018  4c01              LDR      r4,|L28.32|
00001a  58e3              LDR      r3,[r4,r3]
00001c  609a              STR      r2,[r3,#8]
;;;668    }
00001e  bd10              POP      {r4,pc}
;;;669    
                          ENDP

                  |L28.32|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetSuspendCycle||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetSuspendCycle PROC
;;;617    /*-----------------------------------------------------------------------------------------------------------*/
;;;618    int32_t DrvSPI_SetSuspendCycle(E_DRVSPI_PORT eSpiPort, int32_t i32Interval)
000000  b510              PUSH     {r4,lr}
;;;619    {
000002  4602              MOV      r2,r0
;;;620        if((i32Interval < 2) || (i32Interval > 17))
000004  2902              CMP      r1,#2
000006  db01              BLT      |L29.12|
000008  2911              CMP      r1,#0x11
00000a  dd01              BLE      |L29.16|
                  |L29.12|
;;;621    	{
;;;622    		return E_DRVSPI_ERR_SUSPEND_INTERVAL;
00000c  480a              LDR      r0,|L29.56|
                  |L29.14|
;;;623    	}
;;;624    
;;;625    	SPI_PORT[eSpiPort]->CNTRL.SP_CYCLE = i32Interval-2;
;;;626    
;;;627    	return E_SUCCESS;
;;;628    }
00000e  bd10              POP      {r4,pc}
                  |L29.16|
000010  0090              LSLS     r0,r2,#2              ;625
000012  4b0a              LDR      r3,|L29.60|
000014  5818              LDR      r0,[r3,r0]            ;625
000016  6800              LDR      r0,[r0,#0]            ;625
000018  230f              MOVS     r3,#0xf               ;625
00001a  031b              LSLS     r3,r3,#12             ;625
00001c  4398              BICS     r0,r0,r3              ;625
00001e  1e8b              SUBS     r3,r1,#2              ;625
000020  031b              LSLS     r3,r3,#12             ;625
000022  240f              MOVS     r4,#0xf               ;625
000024  0324              LSLS     r4,r4,#12             ;625
000026  4023              ANDS     r3,r3,r4              ;625
000028  4318              ORRS     r0,r0,r3              ;625
00002a  0093              LSLS     r3,r2,#2              ;625
00002c  4c03              LDR      r4,|L29.60|
00002e  58e3              LDR      r3,[r4,r3]            ;625
000030  6018              STR      r0,[r3,#0]            ;625
000032  2000              MOVS     r0,#0                 ;627
000034  e7eb              B        |L29.14|
;;;629    
                          ENDP

000036  0000              DCW      0x0000
                  |L29.56|
                          DCD      0xffff9401
                  |L29.60|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetTriggerMode||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetTriggerMode PROC
;;;642    /*---------------------------------------------------------------------------------------------------------*/
;;;643    void DrvSPI_SetTriggerMode(E_DRVSPI_PORT eSpiPort, E_DRVSPI_SSLTRIG eSSTriggerMode)
000000  b510              PUSH     {r4,lr}
;;;644    {
;;;645        SPI_PORT[eSpiPort]->SSR.SS_LTRIG = eSSTriggerMode;
000002  0082              LSLS     r2,r0,#2
000004  4b06              LDR      r3,|L30.32|
000006  589a              LDR      r2,[r3,r2]
000008  6892              LDR      r2,[r2,#8]
00000a  2310              MOVS     r3,#0x10
00000c  439a              BICS     r2,r2,r3
00000e  010b              LSLS     r3,r1,#4
000010  2410              MOVS     r4,#0x10
000012  4023              ANDS     r3,r3,r4
000014  431a              ORRS     r2,r2,r3
000016  0083              LSLS     r3,r0,#2
000018  4c01              LDR      r4,|L30.32|
00001a  58e3              LDR      r3,[r4,r3]
00001c  609a              STR      r2,[r3,#8]
;;;646    }
00001e  bd10              POP      {r4,pc}
;;;647    
                          ENDP

                  |L30.32|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetTxRegister||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetTxRegister PROC
;;;1203   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1204   uint32_t DrvSPI_SetTxRegister(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Buf, uint32_t u32DataCount)
000000  b570              PUSH     {r4-r6,lr}
;;;1205   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1206   	uint32_t i;
;;;1207   
;;;1208   	if(u32DataCount>2)
000006  2a02              CMP      r2,#2
000008  d900              BLS      |L31.12|
;;;1209   		u32DataCount = 2;
00000a  2202              MOVS     r2,#2
                  |L31.12|
;;;1210   	
;;;1211   	for(i=0; i<u32DataCount; i++)
00000c  2100              MOVS     r1,#0
00000e  e008              B        |L31.34|
                  |L31.16|
;;;1212   	{
;;;1213   		SPI_PORT[eSpiPort]->TX[i] = pu32Buf[i];
000010  0088              LSLS     r0,r1,#2
000012  5825              LDR      r5,[r4,r0]
000014  0098              LSLS     r0,r3,#2
000016  4e05              LDR      r6,|L31.44|
000018  5830              LDR      r0,[r6,r0]
00001a  3020              ADDS     r0,r0,#0x20
00001c  008e              LSLS     r6,r1,#2
00001e  5185              STR      r5,[r0,r6]
000020  1c49              ADDS     r1,r1,#1              ;1211
                  |L31.34|
000022  4291              CMP      r1,r2                 ;1211
000024  d3f4              BCC      |L31.16|
;;;1214   	}
;;;1215   
;;;1216       return u32DataCount;
000026  4610              MOV      r0,r2
;;;1217   }
000028  bd70              POP      {r4-r6,pc}
;;;1218   
                          ENDP

00002a  0000              DCW      0x0000
                  |L31.44|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetVariableClockFunction||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetVariableClockFunction PROC
;;;934    /*-------------------------------------------------------------------------------------------------------------------*/
;;;935    void DrvSPI_SetVariableClockFunction(E_DRVSPI_PORT eSpiPort, uint8_t bEnable, uint32_t u32Pattern)
000000  b530              PUSH     {r4,r5,lr}
;;;936    {
;;;937    	if(bEnable)
000002  2900              CMP      r1,#0
000004  d010              BEQ      |L32.40|
;;;938    	{
;;;939    		SPI_PORT[eSpiPort]->CNTRL.VARCLK_EN = 1;
000006  0083              LSLS     r3,r0,#2
000008  4c0d              LDR      r4,|L32.64|
00000a  58e3              LDR      r3,[r4,r3]
00000c  681b              LDR      r3,[r3,#0]
00000e  2401              MOVS     r4,#1
000010  05e4              LSLS     r4,r4,#23
000012  43a3              BICS     r3,r3,r4
000014  191b              ADDS     r3,r3,r4
000016  0084              LSLS     r4,r0,#2
000018  4d09              LDR      r5,|L32.64|
00001a  592c              LDR      r4,[r5,r4]
00001c  6023              STR      r3,[r4,#0]
;;;940    		SPI_PORT[eSpiPort]->VARCLK = u32Pattern;
00001e  0083              LSLS     r3,r0,#2
000020  462c              MOV      r4,r5
000022  58e3              LDR      r3,[r4,r3]
000024  635a              STR      r2,[r3,#0x34]
000026  e00a              B        |L32.62|
                  |L32.40|
;;;941    	}
;;;942    	else
;;;943    		SPI_PORT[eSpiPort]->CNTRL.VARCLK_EN = 0;
000028  0083              LSLS     r3,r0,#2
00002a  4c05              LDR      r4,|L32.64|
00002c  58e3              LDR      r3,[r4,r3]
00002e  681b              LDR      r3,[r3,#0]
000030  2401              MOVS     r4,#1
000032  05e4              LSLS     r4,r4,#23
000034  43a3              BICS     r3,r3,r4
000036  0084              LSLS     r4,r0,#2
000038  4d01              LDR      r5,|L32.64|
00003a  592c              LDR      r4,[r5,r4]
00003c  6023              STR      r3,[r4,#0]
                  |L32.62|
;;;944    }
00003e  bd30              POP      {r4,r5,pc}
;;;945    
                          ENDP

                  |L32.64|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SingleRead||, CODE, READONLY, ALIGN=2

                  DrvSPI_SingleRead PROC
;;;1074   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1075   uint8_t DrvSPI_SingleRead(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Data)
000000  b510              PUSH     {r4,lr}
;;;1076   {
000002  4602              MOV      r2,r0
;;;1077   	if(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY==1)
000004  0090              LSLS     r0,r2,#2
000006  4b0d              LDR      r3,|L33.60|
000008  5818              LDR      r0,[r3,r0]
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  0fc0              LSRS     r0,r0,#31
000010  2801              CMP      r0,#1
000012  d101              BNE      |L33.24|
;;;1078   		return FALSE;
000014  2000              MOVS     r0,#0
                  |L33.22|
;;;1079   
;;;1080   	*pu32Data = SPI_PORT[eSpiPort]->RX[0];
;;;1081   	SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
;;;1082   	return TRUE;
;;;1083   }
000016  bd10              POP      {r4,pc}
                  |L33.24|
000018  0090              LSLS     r0,r2,#2              ;1080
00001a  4b08              LDR      r3,|L33.60|
00001c  5818              LDR      r0,[r3,r0]            ;1080
00001e  6900              LDR      r0,[r0,#0x10]         ;1080
000020  6008              STR      r0,[r1,#0]            ;1080
000022  0090              LSLS     r0,r2,#2              ;1081
000024  5818              LDR      r0,[r3,r0]            ;1081
000026  6800              LDR      r0,[r0,#0]            ;1081
000028  0840              LSRS     r0,r0,#1              ;1081
00002a  0040              LSLS     r0,r0,#1              ;1081
00002c  1c40              ADDS     r0,r0,#1              ;1081
00002e  0093              LSLS     r3,r2,#2              ;1081
000030  4c02              LDR      r4,|L33.60|
000032  58e3              LDR      r3,[r4,r3]            ;1081
000034  6018              STR      r0,[r3,#0]            ;1081
000036  2001              MOVS     r0,#1                 ;1082
000038  e7ed              B        |L33.22|
;;;1084   
                          ENDP

00003a  0000              DCW      0x0000
                  |L33.60|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SingleWrite||, CODE, READONLY, ALIGN=2

                  DrvSPI_SingleWrite PROC
;;;1098   /*-------------------------------------------------------------------------------------------------------------------*/
;;;1099   uint8_t DrvSPI_SingleWrite(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Data)
000000  b510              PUSH     {r4,lr}
;;;1100   {
000002  4602              MOV      r2,r0
;;;1101   	if(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY==1)
000004  0090              LSLS     r0,r2,#2
000006  4b0d              LDR      r3,|L34.60|
000008  5818              LDR      r0,[r3,r0]
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  0fc0              LSRS     r0,r0,#31
000010  2801              CMP      r0,#1
000012  d101              BNE      |L34.24|
;;;1102   		return FALSE;
000014  2000              MOVS     r0,#0
                  |L34.22|
;;;1103   
;;;1104   	SPI_PORT[eSpiPort]->TX[0] = *pu32Data;
;;;1105   	SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
;;;1106   	return TRUE;
;;;1107   }
000016  bd10              POP      {r4,pc}
                  |L34.24|
000018  0093              LSLS     r3,r2,#2              ;1104
00001a  4c08              LDR      r4,|L34.60|
00001c  58e3              LDR      r3,[r4,r3]            ;1104
00001e  6808              LDR      r0,[r1,#0]            ;1104
000020  6218              STR      r0,[r3,#0x20]         ;1104
000022  0090              LSLS     r0,r2,#2              ;1105
000024  4623              MOV      r3,r4                 ;1105
000026  5818              LDR      r0,[r3,r0]            ;1105
000028  6800              LDR      r0,[r0,#0]            ;1105
00002a  0840              LSRS     r0,r0,#1              ;1105
00002c  0040              LSLS     r0,r0,#1              ;1105
00002e  1c40              ADDS     r0,r0,#1              ;1105
000030  0093              LSLS     r3,r2,#2              ;1105
000032  58e3              LDR      r3,[r4,r3]            ;1105
000034  6018              STR      r0,[r3,#0]            ;1105
000036  2001              MOVS     r0,#1                 ;1106
000038  e7ed              B        |L34.22|
;;;1108   
                          ENDP

00003a  0000              DCW      0x0000
                  |L34.60|
                          DCD      SPI_PORT

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L35.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L35.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L36.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L36.16|
                          DCD      0xe000e100

                          AREA ||i.SPI0_IRQHandler||, CODE, READONLY, ALIGN=2

                  SPI0_IRQHandler PROC
;;;46     /*---------------------------------------------------------------------------------------------------------*/
;;;47     void SPI0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;48     {
;;;49     	// write '1' to clear SPI0 interrupt flag
;;;50     	SPI0->CNTRL.IF = 1;
000002  4808              LDR      r0,|L37.36|
000004  6800              LDR      r0,[r0,#0]
000006  2101              MOVS     r1,#1
000008  0409              LSLS     r1,r1,#16
00000a  4388              BICS     r0,r0,r1
00000c  1840              ADDS     r0,r0,r1
00000e  4905              LDR      r1,|L37.36|
000010  6008              STR      r0,[r1,#0]
;;;51     	
;;;52     	if(g_sSpiHandler[0].pfncallback != NULL)
000012  4805              LDR      r0,|L37.40|
000014  6840              LDR      r0,[r0,#4]  ; g_sSpiHandler
000016  2800              CMP      r0,#0
000018  d003              BEQ      |L37.34|
;;;53     	{
;;;54     	g_sSpiHandler[0].pfncallback(g_sSpiHandler[0].u32userData);
00001a  4a03              LDR      r2,|L37.40|
00001c  6890              LDR      r0,[r2,#8]  ; g_sSpiHandler
00001e  6851              LDR      r1,[r2,#4]  ; g_sSpiHandler
000020  4788              BLX      r1
                  |L37.34|
;;;55     	}
;;;56     	
;;;57     }
000022  bd10              POP      {r4,pc}
;;;58     
                          ENDP

                  |L37.36|
                          DCD      0x40030000
                  |L37.40|
                          DCD      g_sSpiHandler

                          AREA ||i.SPI1_IRQHandler||, CODE, READONLY, ALIGN=2

                  SPI1_IRQHandler PROC
;;;70     /*-----------------------------------------------------------------------------------------------------------*/
;;;71     void SPI1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;72     {
;;;73     	// write '1' to clear SPI1 interrupt flag
;;;74     	SPI1->CNTRL.IF = 1;
000002  4808              LDR      r0,|L38.36|
000004  6800              LDR      r0,[r0,#0]
000006  2101              MOVS     r1,#1
000008  0409              LSLS     r1,r1,#16
00000a  4388              BICS     r0,r0,r1
00000c  1840              ADDS     r0,r0,r1
00000e  4905              LDR      r1,|L38.36|
000010  6008              STR      r0,[r1,#0]
;;;75     	
;;;76     	if(g_sSpiHandler[1].pfncallback != NULL)
000012  4805              LDR      r0,|L38.40|
000014  6900              LDR      r0,[r0,#0x10]
000016  2800              CMP      r0,#0
000018  d003              BEQ      |L38.34|
;;;77     	{
;;;78     		g_sSpiHandler[1].pfncallback(g_sSpiHandler[1].u32userData);
00001a  4a03              LDR      r2,|L38.40|
00001c  6950              LDR      r0,[r2,#0x14]
00001e  6911              LDR      r1,[r2,#0x10]
000020  4788              BLX      r1
                  |L38.34|
;;;79     	}
;;;80     }
000022  bd10              POP      {r4,pc}
;;;81     
                          ENDP

                  |L38.36|
                          DCD      0x40034000
                  |L38.40|
                          DCD      g_sSpiHandler

                          AREA ||i.SPI2_IRQHandler||, CODE, READONLY, ALIGN=2

                  SPI2_IRQHandler PROC
;;;93     /*-----------------------------------------------------------------------------------------------------------*/
;;;94     void SPI2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;95     {
;;;96     	// write '1' to clear SPI2 interrupt flag
;;;97     	SPI2->CNTRL.IF = 1;
000002  4808              LDR      r0,|L39.36|
000004  6800              LDR      r0,[r0,#0]
000006  2101              MOVS     r1,#1
000008  0409              LSLS     r1,r1,#16
00000a  4388              BICS     r0,r0,r1
00000c  1840              ADDS     r0,r0,r1
00000e  4905              LDR      r1,|L39.36|
000010  6008              STR      r0,[r1,#0]
;;;98     	
;;;99     	if(g_sSpiHandler[2].pfncallback != NULL)
000012  4805              LDR      r0,|L39.40|
000014  69c0              LDR      r0,[r0,#0x1c]
000016  2800              CMP      r0,#0
000018  d003              BEQ      |L39.34|
;;;100    	{
;;;101    		g_sSpiHandler[2].pfncallback(g_sSpiHandler[2].u32userData);
00001a  4a03              LDR      r2,|L39.40|
00001c  6a10              LDR      r0,[r2,#0x20]
00001e  69d1              LDR      r1,[r2,#0x1c]
000020  4788              BLX      r1
                  |L39.34|
;;;102    	}
;;;103    }
000022  bd10              POP      {r4,pc}
;;;104    
                          ENDP

                  |L39.36|
                          DCD      0x40130000
                  |L39.40|
                          DCD      g_sSpiHandler

                          AREA ||i.SPI3_IRQHandler||, CODE, READONLY, ALIGN=2

                  SPI3_IRQHandler PROC
;;;116    /*-----------------------------------------------------------------------------------------------------------*/
;;;117    void SPI3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;118    {
;;;119    	// write '1' to clear SPI3 interrupt flag
;;;120    	SPI3->CNTRL.IF = 1;
000002  4808              LDR      r0,|L40.36|
000004  6800              LDR      r0,[r0,#0]
000006  2101              MOVS     r1,#1
000008  0409              LSLS     r1,r1,#16
00000a  4388              BICS     r0,r0,r1
00000c  1840              ADDS     r0,r0,r1
00000e  4905              LDR      r1,|L40.36|
000010  6008              STR      r0,[r1,#0]
;;;121    	
;;;122    	if(g_sSpiHandler[3].pfncallback != NULL)
000012  4805              LDR      r0,|L40.40|
000014  6a80              LDR      r0,[r0,#0x28]
000016  2800              CMP      r0,#0
000018  d003              BEQ      |L40.34|
;;;123    	{
;;;124    		g_sSpiHandler[3].pfncallback(g_sSpiHandler[3].u32userData);
00001a  4a03              LDR      r2,|L40.40|
00001c  6ad0              LDR      r0,[r2,#0x2c]
00001e  6a91              LDR      r1,[r2,#0x28]
000020  4788              BLX      r1
                  |L40.34|
;;;125    	}
;;;126    	
;;;127    }
000022  bd10              POP      {r4,pc}
;;;128    
                          ENDP

                  |L40.36|
                          DCD      0x40134000
                  |L40.40|
                          DCD      g_sSpiHandler

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_sSpiHandler
                          %        48

                          AREA ||.data||, DATA, ALIGN=2

                  SPI_PORT
                          DCD      0x40030000
                          DCD      0x40034000
                          DCD      0x40130000
                          DCD      0x40134000
