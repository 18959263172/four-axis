; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvgpio.o --depend=.\obj\drvgpio.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvgpio.crf ..\BSP_Lib\Src\Driver\DrvGPIO.c]
                          THUMB

                          AREA ||i.DrvGPIO_Close||, CODE, READONLY, ALIGN=2

                  DrvGPIO_Close PROC
;;;159    /*---------------------------------------------------------------------------------------------------------*/
;;;160    int32_t DrvGPIO_Close(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b530              PUSH     {r4,r5,lr}
;;;161    {
000002  4603              MOV      r3,r0
;;;162        volatile uint32_t u32Reg;
;;;163    
;;;164        if ((i32Bit < 0) || (i32Bit > 16))
000004  2900              CMP      r1,#0
000006  db01              BLT      |L1.12|
000008  2910              CMP      r1,#0x10
00000a  dd01              BLE      |L1.16|
                  |L1.12|
;;;165        {
;;;166            return E_DRVGPIO_ARGUMENT;
00000c  4809              LDR      r0,|L1.52|
                  |L1.14|
;;;167        }
;;;168        
;;;169        u32Reg = (uint32_t)&GPIOA->PMD + (port*PORT_OFFSET);    
;;;170        outpw(u32Reg, inpw(u32Reg) | (0x3<<(i32Bit*2)));
;;;171    	
;;;172    	GPIO_DBNCECON->ICLK_ON = 0; 
;;;173    
;;;174        return E_SUCCESS;
;;;175    }	
00000e  bd30              POP      {r4,r5,pc}
                  |L1.16|
000010  0198              LSLS     r0,r3,#6              ;169
000012  4c09              LDR      r4,|L1.56|
000014  1902              ADDS     r2,r0,r4              ;169
000016  6810              LDR      r0,[r2,#0]            ;170
000018  004d              LSLS     r5,r1,#1              ;170
00001a  2403              MOVS     r4,#3                 ;170
00001c  40ac              LSLS     r4,r4,r5              ;170
00001e  4320              ORRS     r0,r0,r4              ;170
000020  6010              STR      r0,[r2,#0]            ;170
000022  4806              LDR      r0,|L1.60|
000024  6800              LDR      r0,[r0,#0]            ;172
000026  2420              MOVS     r4,#0x20              ;172
000028  43a0              BICS     r0,r0,r4              ;172
00002a  4c04              LDR      r4,|L1.60|
00002c  6020              STR      r0,[r4,#0]            ;172
00002e  2000              MOVS     r0,#0                 ;174
000030  e7ed              B        |L1.14|
;;;176    
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0xffff8901
                  |L1.56|
                          DCD      0x50004000
                  |L1.60|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_ClrBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_ClrBit PROC
;;;248    /*---------------------------------------------------------------------------------------------------------*/
;;;249    int32_t DrvGPIO_ClrBit(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;250    {
000002  4603              MOV      r3,r0
;;;251    	GPIO_T * tGPIO;
;;;252    
;;;253        if ((i32Bit < 0) || (i32Bit > 16))
000004  2900              CMP      r1,#0
000006  db01              BLT      |L2.12|
000008  2910              CMP      r1,#0x10
00000a  dd01              BLE      |L2.16|
                  |L2.12|
;;;254        {
;;;255            return E_DRVGPIO_ARGUMENT;
00000c  4805              LDR      r0,|L2.36|
                  |L2.14|
;;;256        }
;;;257    
;;;258    	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
;;;259    
;;;260    	tGPIO->DOUT &= ~(1 << i32Bit);
;;;261    
;;;262    	return E_SUCCESS;    
;;;263    }
00000e  bd10              POP      {r4,pc}
                  |L2.16|
000010  0198              LSLS     r0,r3,#6              ;258
000012  4c05              LDR      r4,|L2.40|
000014  1902              ADDS     r2,r0,r4              ;258
000016  6890              LDR      r0,[r2,#8]            ;260
000018  2401              MOVS     r4,#1                 ;260
00001a  408c              LSLS     r4,r4,r1              ;260
00001c  43a0              BICS     r0,r0,r4              ;260
00001e  6090              STR      r0,[r2,#8]            ;260
000020  2000              MOVS     r0,#0                 ;262
000022  e7f4              B        |L2.14|
;;;264    
                          ENDP

                  |L2.36|
                          DCD      0xffff8901
                  |L2.40|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_ClrBitMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_ClrBitMask PROC
;;;424    /*---------------------------------------------------------------------------------------------------------*/
;;;425    int32_t DrvGPIO_ClrBitMask(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;426    {
000002  4602              MOV      r2,r0
;;;427        volatile uint32_t u32Reg;
;;;428    
;;;429        u32Reg = (uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET);    
000004  4804              LDR      r0,|L3.24|
000006  0194              LSLS     r4,r2,#6
000008  1903              ADDS     r3,r0,r4
;;;430    
;;;431    	outpw(u32Reg, inpw(u32Reg) & ~(1<<i32Bit));
00000a  6818              LDR      r0,[r3,#0]
00000c  2401              MOVS     r4,#1
00000e  408c              LSLS     r4,r4,r1
000010  43a0              BICS     r0,r0,r4
000012  6018              STR      r0,[r3,#0]
;;;432    	
;;;433    	return E_SUCCESS;
000014  2000              MOVS     r0,#0
;;;434    }
000016  bd10              POP      {r4,pc}
;;;435    
                          ENDP

                  |L3.24|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_ClrPortMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_ClrPortMask PROC
;;;489    /*---------------------------------------------------------------------------------------------------------*/
;;;490    int32_t DrvGPIO_ClrPortMask(E_DRVGPIO_PORT port, int32_t i32MaskData)
000000  b510              PUSH     {r4,lr}
;;;491    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;492    	outpw((uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET), DrvGPIO_GetPortMask(port) & ~(i32MaskData));
000006  4618              MOV      r0,r3
000008  f7fffffe          BL       DrvGPIO_GetPortMask
00000c  43a0              BICS     r0,r0,r4
00000e  4902              LDR      r1,|L4.24|
000010  019a              LSLS     r2,r3,#6
000012  5088              STR      r0,[r1,r2]
;;;493    	
;;;494    	return E_SUCCESS;
000014  2000              MOVS     r0,#0
;;;495    }
000016  bd10              POP      {r4,pc}
;;;496    
                          ENDP

                  |L4.24|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_DisableDebounce||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableDebounce PROC
;;;535    /*---------------------------------------------------------------------------------------------------------*/
;;;536    int32_t DrvGPIO_DisableDebounce(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;537    {
000002  4602              MOV      r2,r0
;;;538        volatile uint32_t u32Reg;
;;;539    
;;;540        u32Reg = (uint32_t)&GPIOA->DBEN + (port*PORT_OFFSET);
000004  4804              LDR      r0,|L5.24|
000006  0194              LSLS     r4,r2,#6
000008  1903              ADDS     r3,r0,r4
;;;541            
;;;542        outpw(u32Reg, inpw(u32Reg) & ~(1<<i32Bit));
00000a  6818              LDR      r0,[r3,#0]
00000c  2401              MOVS     r4,#1
00000e  408c              LSLS     r4,r4,r1
000010  43a0              BICS     r0,r0,r4
000012  6018              STR      r0,[r3,#0]
;;;543        
;;;544    	return E_SUCCESS;
000014  2000              MOVS     r0,#0
;;;545    }
000016  bd10              POP      {r4,pc}
;;;546    
                          ENDP

                  |L5.24|
                          DCD      0x50004014

                          AREA ||i.DrvGPIO_DisableEINT0||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableEINT0 PROC
;;;793    /*---------------------------------------------------------------------------------------------------------*/
;;;794    void DrvGPIO_DisableEINT0(void)
000000  b510              PUSH     {r4,lr}
;;;795    {
;;;796        volatile uint32_t u32Reg;
;;;797    
;;;798        u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
000002  4c04              LDR      r4,|L6.20|
;;;799    
;;;800        outpw(u32Reg, inpw(u32Reg) & ~((1UL<<(14))|(1UL<<(14+16))));	 
000004  6820              LDR      r0,[r4,#0]
000006  4904              LDR      r1,|L6.24|
000008  4008              ANDS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;801    
;;;802        NVIC_DisableIRQ(EINT0_IRQn);
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       NVIC_DisableIRQ
;;;803    }
000012  bd10              POP      {r4,pc}
;;;804    
                          ENDP

                  |L6.20|
                          DCD      0x5000405c
                  |L6.24|
                          DCD      0xbfffbfff

                          AREA ||i.DrvGPIO_DisableEINT1||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableEINT1 PROC
;;;871    /*---------------------------------------------------------------------------------------------------------*/
;;;872    void DrvGPIO_DisableEINT1(void)
000000  b510              PUSH     {r4,lr}
;;;873    {
;;;874        volatile uint32_t u32Reg;
;;;875    
;;;876        u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
000002  4c04              LDR      r4,|L7.20|
;;;877    
;;;878        outpw(u32Reg, inpw(u32Reg) & ~((1UL<<(15))|(1UL<<(15+16))));	 
000004  6820              LDR      r0,[r4,#0]
000006  4904              LDR      r1,|L7.24|
000008  4008              ANDS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;879    
;;;880        NVIC_DisableIRQ(EINT1_IRQn);
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       NVIC_DisableIRQ
;;;881    }
000012  bd10              POP      {r4,pc}
;;;882    
                          ENDP

                  |L7.20|
                          DCD      0x5000405c
                  |L7.24|
                          DCD      0x7fff7fff

                          AREA ||i.DrvGPIO_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableInt PROC
;;;686    /*---------------------------------------------------------------------------------------------------------*/
;;;687    int32_t DrvGPIO_DisableInt(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b570              PUSH     {r4-r6,lr}
;;;688    {                                             
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;689        volatile uint32_t u32Reg;
;;;690    
;;;691        /* Disable both rising/falling or both high level/low level interrupts */
;;;692        u32Reg = (uint32_t)&GPIOA->IEN + (port*PORT_OFFSET);
000006  480f              LDR      r0,|L8.68|
000008  01a1              LSLS     r1,r4,#6
00000a  1846              ADDS     r6,r0,r1
;;;693    
;;;694        outpw(u32Reg, inpw(u32Reg) & ~((1<<i32Bit) | (1<<(i32Bit+16))));	 
00000c  2001              MOVS     r0,#1
00000e  40a8              LSLS     r0,r0,r5
000010  4629              MOV      r1,r5
000012  3110              ADDS     r1,r1,#0x10
000014  2201              MOVS     r2,#1
000016  408a              LSLS     r2,r2,r1
000018  4310              ORRS     r0,r0,r2
00001a  6831              LDR      r1,[r6,#0]
00001c  4381              BICS     r1,r1,r0
00001e  6031              STR      r1,[r6,#0]
;;;695    
;;;696        /* Disable the relative interrupt of M0 */
;;;697        if ((port == E_GPA) || (port == E_GPB))
000020  2c00              CMP      r4,#0
000022  d001              BEQ      |L8.40|
000024  2c01              CMP      r4,#1
000026  d102              BNE      |L8.46|
                  |L8.40|
;;;698        {
;;;699            NVIC_DisableIRQ(GPAB_IRQn);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       NVIC_DisableIRQ
                  |L8.46|
;;;700        }
;;;701    
;;;702        if ((port == E_GPC) || (port == E_GPD) || (port == E_GPE))
00002e  2c02              CMP      r4,#2
000030  d003              BEQ      |L8.58|
000032  2c03              CMP      r4,#3
000034  d001              BEQ      |L8.58|
000036  2c04              CMP      r4,#4
000038  d102              BNE      |L8.64|
                  |L8.58|
;;;703        {
;;;704            NVIC_DisableIRQ(GPCDE_IRQn);
00003a  2005              MOVS     r0,#5
00003c  f7fffffe          BL       NVIC_DisableIRQ
                  |L8.64|
;;;705        }  
;;;706          
;;;707        return E_SUCCESS;
000040  2000              MOVS     r0,#0
;;;708    }
000042  bd70              POP      {r4-r6,pc}
;;;709    
                          ENDP

                  |L8.68|
                          DCD      0x5000401c

                          AREA ||i.DrvGPIO_EnableDebounce||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableDebounce PROC
;;;509    /*---------------------------------------------------------------------------------------------------------*/
;;;510    int32_t DrvGPIO_EnableDebounce(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;511    {
000002  4602              MOV      r2,r0
;;;512        volatile uint32_t u32Reg;
;;;513    
;;;514        u32Reg = (uint32_t)&GPIOA->DBEN + (port*PORT_OFFSET);    
000004  4808              LDR      r0,|L9.40|
000006  0194              LSLS     r4,r2,#6
000008  1903              ADDS     r3,r0,r4
;;;515    
;;;516        outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));
00000a  6818              LDR      r0,[r3,#0]
00000c  2401              MOVS     r4,#1
00000e  408c              LSLS     r4,r4,r1
000010  4320              ORRS     r0,r0,r4
000012  6018              STR      r0,[r3,#0]
;;;517    
;;;518    	GPIO_DBNCECON->ICLK_ON = 1;
000014  4805              LDR      r0,|L9.44|
000016  6800              LDR      r0,[r0,#0]
000018  2420              MOVS     r4,#0x20
00001a  43a0              BICS     r0,r0,r4
00001c  3020              ADDS     r0,r0,#0x20
00001e  4c03              LDR      r4,|L9.44|
000020  6020              STR      r0,[r4,#0]
;;;519    
;;;520        return E_SUCCESS;
000022  2000              MOVS     r0,#0
;;;521    }
000024  bd10              POP      {r4,pc}
;;;522    
                          ENDP

000026  0000              DCW      0x0000
                  |L9.40|
                          DCD      0x50004014
                  |L9.44|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_EnableEINT0||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableEINT0 PROC
;;;750    /*---------------------------------------------------------------------------------------------------------*/
;;;751    void DrvGPIO_EnableEINT0(E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode, GPIO_EINT0_CALLBACK pfEINT0Callback)
000000  b5f8              PUSH     {r3-r7,lr}
;;;752    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;753        volatile uint32_t u32Reg;
;;;754    
;;;755        if ((TriggerType == E_IO_BOTH_EDGE) && (Mode == E_MODE_LEVEL))
000008  2d02              CMP      r5,#2
00000a  d102              BNE      |L10.18|
00000c  2e01              CMP      r6,#1
00000e  d100              BNE      |L10.18|
                  |L10.16|
;;;756            return ;
;;;757    
;;;758        u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
;;;759    	if (TriggerType == E_IO_RISING)
;;;760        {
;;;761            outpw(u32Reg, inpw(u32Reg) | (1UL<<(14+16)));	 
;;;762    	}
;;;763        else if (TriggerType == E_IO_FALLING)
;;;764    	{
;;;765            outpw(u32Reg, inpw(u32Reg) | (1UL<<(14)));	 
;;;766    	}
;;;767        else if (TriggerType == E_IO_BOTH_EDGE)
;;;768        {  
;;;769            outpw(u32Reg, inpw(u32Reg) | (1UL<<(14))|(1UL<<(14+16)));	 
;;;770    	}    	 
;;;771    
;;;772         /* Configure to be level trigger or edge trigger */
;;;773        u32Reg = (uint32_t)&GPIOA->IMD + (E_GPB*PORT_OFFSET);
;;;774    	if (Mode == E_MODE_EDGE)
;;;775    		outpw(u32Reg, inpw(u32Reg) & ~(1<<14));
;;;776    	else if(Mode == E_MODE_LEVEL)
;;;777    		outpw(u32Reg, inpw(u32Reg) | (1<<14));
;;;778    
;;;779       _pfEINT0Callback = pfEINT0Callback;
;;;780    
;;;781        NVIC_EnableIRQ(EINT0_IRQn);
;;;782    }
000010  bdf8              POP      {r3-r7,pc}
                  |L10.18|
000012  4c16              LDR      r4,|L10.108|
000014  2d00              CMP      r5,#0                 ;759
000016  d105              BNE      |L10.36|
000018  6820              LDR      r0,[r4,#0]            ;761
00001a  2101              MOVS     r1,#1                 ;761
00001c  0789              LSLS     r1,r1,#30             ;761
00001e  4308              ORRS     r0,r0,r1              ;761
000020  6020              STR      r0,[r4,#0]            ;761
000022  e00c              B        |L10.62|
                  |L10.36|
000024  2d01              CMP      r5,#1                 ;763
000026  d104              BNE      |L10.50|
000028  6820              LDR      r0,[r4,#0]            ;765
00002a  03a9              LSLS     r1,r5,#14             ;765
00002c  4308              ORRS     r0,r0,r1              ;765
00002e  6020              STR      r0,[r4,#0]            ;765
000030  e005              B        |L10.62|
                  |L10.50|
000032  2d02              CMP      r5,#2                 ;767
000034  d103              BNE      |L10.62|
000036  6820              LDR      r0,[r4,#0]            ;769
000038  490d              LDR      r1,|L10.112|
00003a  4308              ORRS     r0,r0,r1              ;769
00003c  6020              STR      r0,[r4,#0]            ;769
                  |L10.62|
00003e  4c0b              LDR      r4,|L10.108|
000040  1f24              SUBS     r4,r4,#4              ;773
000042  2e00              CMP      r6,#0                 ;774
000044  d105              BNE      |L10.82|
000046  6820              LDR      r0,[r4,#0]            ;775
000048  2101              MOVS     r1,#1                 ;775
00004a  0389              LSLS     r1,r1,#14             ;775
00004c  4388              BICS     r0,r0,r1              ;775
00004e  6020              STR      r0,[r4,#0]            ;775
000050  e005              B        |L10.94|
                  |L10.82|
000052  2e01              CMP      r6,#1                 ;776
000054  d103              BNE      |L10.94|
000056  6820              LDR      r0,[r4,#0]            ;777
000058  03b1              LSLS     r1,r6,#14             ;777
00005a  4308              ORRS     r0,r0,r1              ;777
00005c  6020              STR      r0,[r4,#0]            ;777
                  |L10.94|
00005e  4805              LDR      r0,|L10.116|
000060  6007              STR      r7,[r0,#0]            ;779  ; _pfEINT0Callback
000062  2002              MOVS     r0,#2                 ;781
000064  f7fffffe          BL       NVIC_EnableIRQ
000068  bf00              NOP      
00006a  e7d1              B        |L10.16|
;;;783    
                          ENDP

                  |L10.108|
                          DCD      0x5000405c
                  |L10.112|
                          DCD      0x40004000
                  |L10.116|
                          DCD      _pfEINT0Callback

                          AREA ||i.DrvGPIO_EnableEINT1||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableEINT1 PROC
;;;828    /*---------------------------------------------------------------------------------------------------------*/
;;;829    void DrvGPIO_EnableEINT1(E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode, GPIO_EINT1_CALLBACK pfEINT1Callback)
000000  b5f8              PUSH     {r3-r7,lr}
;;;830    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;831        volatile uint32_t u32Reg;
;;;832    
;;;833        if ((TriggerType == E_IO_BOTH_EDGE) && (Mode == E_MODE_LEVEL))
000008  2d02              CMP      r5,#2
00000a  d102              BNE      |L11.18|
00000c  2e01              CMP      r6,#1
00000e  d100              BNE      |L11.18|
                  |L11.16|
;;;834            return ;
;;;835    
;;;836        u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
;;;837    	if (TriggerType == E_IO_RISING)
;;;838        {
;;;839            outpw(u32Reg, inpw(u32Reg) | (1UL<<(15+16)));	 
;;;840    	}
;;;841        else if (TriggerType == E_IO_FALLING)
;;;842    	{
;;;843            outpw(u32Reg, inpw(u32Reg) | (1UL<<(15)));	 
;;;844    	}
;;;845        else if (TriggerType == E_IO_BOTH_EDGE)
;;;846        {  
;;;847            outpw(u32Reg, inpw(u32Reg) | (1UL<<(15))|(1UL<<(15+16)));	 
;;;848    	}    	 
;;;849    
;;;850         /* Configure to be level trigger or edge trigger */
;;;851        u32Reg = (uint32_t)&GPIOA->IMD + (E_GPB*PORT_OFFSET);
;;;852    	if (Mode == E_MODE_EDGE)
;;;853    		outpw(u32Reg, inpw(u32Reg) & ~(1<<15));
;;;854    	else if(Mode == E_MODE_LEVEL)
;;;855    		outpw(u32Reg, inpw(u32Reg) | (1<<15));
;;;856    
;;;857        _pfEINT1Callback = pfEINT1Callback;
;;;858    
;;;859        NVIC_EnableIRQ(EINT1_IRQn);
;;;860    }
000010  bdf8              POP      {r3-r7,pc}
                  |L11.18|
000012  4c16              LDR      r4,|L11.108|
000014  2d00              CMP      r5,#0                 ;837
000016  d104              BNE      |L11.34|
000018  6820              LDR      r0,[r4,#0]            ;839
00001a  0761              LSLS     r1,r4,#29             ;839
00001c  4308              ORRS     r0,r0,r1              ;839
00001e  6020              STR      r0,[r4,#0]            ;839
000020  e00c              B        |L11.60|
                  |L11.34|
000022  2d01              CMP      r5,#1                 ;841
000024  d104              BNE      |L11.48|
000026  6820              LDR      r0,[r4,#0]            ;843
000028  03e9              LSLS     r1,r5,#15             ;843
00002a  4308              ORRS     r0,r0,r1              ;843
00002c  6020              STR      r0,[r4,#0]            ;843
00002e  e005              B        |L11.60|
                  |L11.48|
000030  2d02              CMP      r5,#2                 ;845
000032  d103              BNE      |L11.60|
000034  6820              LDR      r0,[r4,#0]            ;847
000036  490e              LDR      r1,|L11.112|
000038  4308              ORRS     r0,r0,r1              ;847
00003a  6020              STR      r0,[r4,#0]            ;847
                  |L11.60|
00003c  4c0b              LDR      r4,|L11.108|
00003e  1f24              SUBS     r4,r4,#4              ;851
000040  2e00              CMP      r6,#0                 ;852
000042  d105              BNE      |L11.80|
000044  6820              LDR      r0,[r4,#0]            ;853
000046  2101              MOVS     r1,#1                 ;853
000048  03c9              LSLS     r1,r1,#15             ;853
00004a  4388              BICS     r0,r0,r1              ;853
00004c  6020              STR      r0,[r4,#0]            ;853
00004e  e005              B        |L11.92|
                  |L11.80|
000050  2e01              CMP      r6,#1                 ;854
000052  d103              BNE      |L11.92|
000054  6820              LDR      r0,[r4,#0]            ;855
000056  03f1              LSLS     r1,r6,#15             ;855
000058  4308              ORRS     r0,r0,r1              ;855
00005a  6020              STR      r0,[r4,#0]            ;855
                  |L11.92|
00005c  4805              LDR      r0,|L11.116|
00005e  6007              STR      r7,[r0,#0]            ;857  ; _pfEINT1Callback
000060  2003              MOVS     r0,#3                 ;859
000062  f7fffffe          BL       NVIC_EnableIRQ
000066  bf00              NOP      
000068  e7d2              B        |L11.16|
;;;861    
                          ENDP

00006a  0000              DCW      0x0000
                  |L11.108|
                          DCD      0x5000405c
                  |L11.112|
                          DCD      0x80008000
                  |L11.116|
                          DCD      _pfEINT1Callback

                          AREA ||i.DrvGPIO_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableInt PROC
;;;623    /*---------------------------------------------------------------------------------------------------------*/
;;;624    int32_t DrvGPIO_EnableInt(E_DRVGPIO_PORT port, int32_t i32Bit, E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode)
000000  b5ff              PUSH     {r0-r7,lr}
;;;625    {
000002  b081              SUB      sp,sp,#4
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;626        volatile uint32_t u32Reg;
;;;627    
;;;628        if ((TriggerType == E_IO_BOTH_EDGE) && (Mode == E_MODE_LEVEL))
00000a  2f02              CMP      r7,#2
00000c  d105              BNE      |L12.26|
00000e  9804              LDR      r0,[sp,#0x10]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L12.26|
;;;629            return E_DRVGPIO_ARGUMENT;
000014  4830              LDR      r0,|L12.216|
                  |L12.22|
;;;630    
;;;631        if ((port == E_GPB) && ((i32Bit == 14) || (i32Bit == 15)))
;;;632        {
;;;633            /* GPB14 is EINT0, GPB15 is EINT1. Both of them can't be assigned to GPAB interrupt */
;;;634            return E_DRVGPIO_ARGUMENT;    
;;;635        }
;;;636        
;;;637        /* Configure the interrupt to be rising/falling when edge trigger or high/low level when level trigger */
;;;638        u32Reg = (uint32_t)&GPIOA->IEN + (port*PORT_OFFSET);
;;;639    	if (TriggerType == E_IO_RISING)
;;;640    		outpw(u32Reg, inpw(u32Reg) | (1<<(i32Bit+16)));	 
;;;641    	else if(TriggerType == E_IO_FALLING)
;;;642    		outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));	 
;;;643    	else if(TriggerType == E_IO_BOTH_EDGE)  
;;;644    		outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit)| (1<<(i32Bit+16)));	 
;;;645    	else
;;;646    		return E_DRVGPIO_ARGUMENT;
;;;647    
;;;648        /* Configure to be level trigger or edge trigger */
;;;649        u32Reg = (uint32_t)&GPIOA->IMD + (port*PORT_OFFSET);
;;;650    	if(Mode == E_MODE_EDGE)
;;;651    		outpw(u32Reg, inpw(u32Reg) & ~(1<<i32Bit));
;;;652    	else if(Mode ==E_MODE_LEVEL)
;;;653    		outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));
;;;654    	else
;;;655    		return E_DRVGPIO_ARGUMENT;
;;;656        
;;;657        /* Enable the relative interrupt of M0 */
;;;658        if ((port == E_GPA) || (port == E_GPB))
;;;659        {
;;;660            NVIC_SetPriority(GPAB_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
;;;661            NVIC_EnableIRQ(GPAB_IRQn);
;;;662        }
;;;663    
;;;664        if ((port == E_GPC) || (port == E_GPD) || (port == E_GPE))
;;;665        {
;;;666            NVIC_SetPriority(GPCDE_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
;;;667            NVIC_EnableIRQ(GPCDE_IRQn);
;;;668        }    
;;;669    
;;;670        return E_SUCCESS;
;;;671    }
000016  b005              ADD      sp,sp,#0x14
000018  bdf0              POP      {r4-r7,pc}
                  |L12.26|
00001a  2d01              CMP      r5,#1                 ;631
00001c  d105              BNE      |L12.42|
00001e  2e0e              CMP      r6,#0xe               ;631
000020  d001              BEQ      |L12.38|
000022  2e0f              CMP      r6,#0xf               ;631
000024  d101              BNE      |L12.42|
                  |L12.38|
000026  482c              LDR      r0,|L12.216|
000028  e7f5              B        |L12.22|
                  |L12.42|
00002a  482c              LDR      r0,|L12.220|
00002c  01a9              LSLS     r1,r5,#6              ;638
00002e  1844              ADDS     r4,r0,r1              ;638
000030  2f00              CMP      r7,#0                 ;639
000032  d107              BNE      |L12.68|
000034  6820              LDR      r0,[r4,#0]            ;640
000036  4631              MOV      r1,r6                 ;640
000038  3110              ADDS     r1,r1,#0x10           ;640
00003a  2201              MOVS     r2,#1                 ;640
00003c  408a              LSLS     r2,r2,r1              ;640
00003e  4310              ORRS     r0,r0,r2              ;640
000040  6020              STR      r0,[r4,#0]            ;640
000042  e016              B        |L12.114|
                  |L12.68|
000044  2f01              CMP      r7,#1                 ;641
000046  d105              BNE      |L12.84|
000048  6820              LDR      r0,[r4,#0]            ;642
00004a  2101              MOVS     r1,#1                 ;642
00004c  40b1              LSLS     r1,r1,r6              ;642
00004e  4308              ORRS     r0,r0,r1              ;642
000050  6020              STR      r0,[r4,#0]            ;642
000052  e00e              B        |L12.114|
                  |L12.84|
000054  2f02              CMP      r7,#2                 ;643
000056  d10a              BNE      |L12.110|
000058  6820              LDR      r0,[r4,#0]            ;644
00005a  2101              MOVS     r1,#1                 ;644
00005c  40b1              LSLS     r1,r1,r6              ;644
00005e  4308              ORRS     r0,r0,r1              ;644
000060  4631              MOV      r1,r6                 ;644
000062  3110              ADDS     r1,r1,#0x10           ;644
000064  2201              MOVS     r2,#1                 ;644
000066  408a              LSLS     r2,r2,r1              ;644
000068  4310              ORRS     r0,r0,r2              ;644
00006a  6020              STR      r0,[r4,#0]            ;644
00006c  e001              B        |L12.114|
                  |L12.110|
00006e  481a              LDR      r0,|L12.216|
000070  e7d1              B        |L12.22|
                  |L12.114|
000072  481a              LDR      r0,|L12.220|
000074  1f00              SUBS     r0,r0,#4              ;649
000076  01a9              LSLS     r1,r5,#6              ;649
000078  1844              ADDS     r4,r0,r1              ;649
00007a  9804              LDR      r0,[sp,#0x10]         ;650
00007c  2800              CMP      r0,#0                 ;650
00007e  d105              BNE      |L12.140|
000080  6820              LDR      r0,[r4,#0]            ;651
000082  2101              MOVS     r1,#1                 ;651
000084  40b1              LSLS     r1,r1,r6              ;651
000086  4388              BICS     r0,r0,r1              ;651
000088  6020              STR      r0,[r4,#0]            ;651
00008a  e00a              B        |L12.162|
                  |L12.140|
00008c  9804              LDR      r0,[sp,#0x10]         ;652
00008e  2801              CMP      r0,#1                 ;652
000090  d105              BNE      |L12.158|
000092  6820              LDR      r0,[r4,#0]            ;653
000094  2101              MOVS     r1,#1                 ;653
000096  40b1              LSLS     r1,r1,r6              ;653
000098  4308              ORRS     r0,r0,r1              ;653
00009a  6020              STR      r0,[r4,#0]            ;653
00009c  e001              B        |L12.162|
                  |L12.158|
00009e  480e              LDR      r0,|L12.216|
0000a0  e7b9              B        |L12.22|
                  |L12.162|
0000a2  2d00              CMP      r5,#0                 ;658
0000a4  d001              BEQ      |L12.170|
0000a6  2d01              CMP      r5,#1                 ;658
0000a8  d106              BNE      |L12.184|
                  |L12.170|
0000aa  2102              MOVS     r1,#2                 ;660
0000ac  2004              MOVS     r0,#4                 ;660
0000ae  f7fffffe          BL       NVIC_SetPriority
0000b2  2004              MOVS     r0,#4                 ;661
0000b4  f7fffffe          BL       NVIC_EnableIRQ
                  |L12.184|
0000b8  2d02              CMP      r5,#2                 ;664
0000ba  d003              BEQ      |L12.196|
0000bc  2d03              CMP      r5,#3                 ;664
0000be  d001              BEQ      |L12.196|
0000c0  2d04              CMP      r5,#4                 ;664
0000c2  d106              BNE      |L12.210|
                  |L12.196|
0000c4  2102              MOVS     r1,#2                 ;666
0000c6  2005              MOVS     r0,#5                 ;666
0000c8  f7fffffe          BL       NVIC_SetPriority
0000cc  2005              MOVS     r0,#5                 ;667
0000ce  f7fffffe          BL       NVIC_EnableIRQ
                  |L12.210|
0000d2  2000              MOVS     r0,#0                 ;670
0000d4  e79f              B        |L12.22|
;;;672    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L12.216|
                          DCD      0xffff8901
                  |L12.220|
                          DCD      0x5000401c

                          AREA ||i.DrvGPIO_GetBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetBit PROC
;;;220    /*---------------------------------------------------------------------------------------------------------*/
;;;221    int32_t DrvGPIO_GetBit(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;222    {
000002  4602              MOV      r2,r0
;;;223        volatile uint32_t u32Reg;
;;;224            
;;;225        if ((i32Bit < 0) || (i32Bit > 16))
000004  2900              CMP      r1,#0
000006  db01              BLT      |L13.12|
000008  2910              CMP      r1,#0x10
00000a  dd01              BLE      |L13.16|
                  |L13.12|
;;;226        {
;;;227            return E_DRVGPIO_ARGUMENT;
00000c  4804              LDR      r0,|L13.32|
                  |L13.14|
;;;228        }
;;;229    
;;;230        u32Reg = (uint32_t)&GPIOA->PIN + (port*PORT_OFFSET);    
;;;231    
;;;232        return ((inpw(u32Reg)>>i32Bit) & 0x1);
;;;233    }
00000e  bd10              POP      {r4,pc}
                  |L13.16|
000010  4804              LDR      r0,|L13.36|
000012  0194              LSLS     r4,r2,#6              ;230
000014  1903              ADDS     r3,r0,r4              ;230
000016  6818              LDR      r0,[r3,#0]            ;232
000018  40c8              LSRS     r0,r0,r1              ;232
00001a  07c0              LSLS     r0,r0,#31             ;232
00001c  0fc0              LSRS     r0,r0,#31             ;232
00001e  e7f6              B        |L13.14|
;;;234    
                          ENDP

                  |L13.32|
                          DCD      0xffff8901
                  |L13.36|
                          DCD      0x50004010

                          AREA ||i.DrvGPIO_GetBitMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetBitMask PROC
;;;401    /*---------------------------------------------------------------------------------------------------------*/
;;;402    int32_t DrvGPIO_GetBitMask(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;403    {
000002  4602              MOV      r2,r0
;;;404        volatile uint32_t u32Reg;
;;;405    
;;;406        u32Reg = (uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET);    
000004  4803              LDR      r0,|L14.20|
000006  0194              LSLS     r4,r2,#6
000008  1903              ADDS     r3,r0,r4
;;;407    
;;;408        return ((inpw(u32Reg)>>i32Bit) & 0x1);
00000a  6818              LDR      r0,[r3,#0]
00000c  40c8              LSRS     r0,r0,r1
00000e  07c0              LSLS     r0,r0,#31
000010  0fc0              LSRS     r0,r0,#31
;;;409    }
000012  bd10              POP      {r4,pc}
;;;410    
                          ENDP

                  |L14.20|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_GetDebounceSampleCycle||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetDebounceSampleCycle PROC
;;;589    /*---------------------------------------------------------------------------------------------------------*/
;;;590    int32_t DrvGPIO_GetDebounceSampleCycle(void)
000000  4802              LDR      r0,|L15.12|
;;;591    {   
;;;592        return GPIO_DBNCECON->DBCLKSEL;
000002  6800              LDR      r0,[r0,#0]
000004  0700              LSLS     r0,r0,#28
000006  0f00              LSRS     r0,r0,#28
;;;593    }
000008  4770              BX       lr
;;;594    
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_GetDoutBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetDoutBit PROC
;;;326    /*---------------------------------------------------------------------------------------------------------*/
;;;327    int32_t DrvGPIO_GetDoutBit(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  4602              MOV      r2,r0
;;;328    {    
;;;329        if ((i32Bit < 0) || (i32Bit >= 15))
000002  2900              CMP      r1,#0
000004  db01              BLT      |L16.10|
000006  290f              CMP      r1,#0xf
000008  db01              BLT      |L16.14|
                  |L16.10|
;;;330        {
;;;331            return E_DRVGPIO_ARGUMENT;
00000a  4804              LDR      r0,|L16.28|
                  |L16.12|
;;;332        }
;;;333     
;;;334        return ((inpw((uint32_t)&GPIOA->DOUT + (port*PORT_OFFSET))>>i32Bit) & 0x1);
;;;335    }
00000c  4770              BX       lr
                  |L16.14|
00000e  4804              LDR      r0,|L16.32|
000010  0193              LSLS     r3,r2,#6              ;334
000012  58c0              LDR      r0,[r0,r3]            ;334
000014  40c8              LSRS     r0,r0,r1              ;334
000016  07c0              LSLS     r0,r0,#31             ;334
000018  0fc0              LSRS     r0,r0,#31             ;334
00001a  e7f7              B        |L16.12|
;;;336    
                          ENDP

                  |L16.28|
                          DCD      0xffff8901
                  |L16.32|
                          DCD      0x50004008

                          AREA ||i.DrvGPIO_GetIntStatus||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetIntStatus PROC
;;;895    /*---------------------------------------------------------------------------------------------------------*/
;;;896    int32_t DrvGPIO_GetIntStatus(E_DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;897    {
;;;898    	GPIO_T * tGPIO;
;;;899    
;;;900    	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
000002  0188              LSLS     r0,r1,#6
000004  4b01              LDR      r3,|L17.12|
000006  18c2              ADDS     r2,r0,r3
;;;901    
;;;902    	return tGPIO->ISRC;
000008  6a10              LDR      r0,[r2,#0x20]
;;;903    }
00000a  4770              BX       lr
;;;904    
                          ENDP

                  |L17.12|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_GetPortBits||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetPortBits PROC
;;;301    /*---------------------------------------------------------------------------------------------------------*/
;;;302    int32_t DrvGPIO_GetPortBits(E_DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;303    {
;;;304    	GPIO_T * tGPIO;
;;;305    
;;;306    	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
000002  0188              LSLS     r0,r1,#6
000004  4b01              LDR      r3,|L18.12|
000006  18c2              ADDS     r2,r0,r3
;;;307    
;;;308        return tGPIO->PIN;
000008  6910              LDR      r0,[r2,#0x10]
;;;309    }
00000a  4770              BX       lr
;;;310    
                          ENDP

                  |L18.12|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_GetPortDoutBits||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetPortDoutBits PROC
;;;350    /*---------------------------------------------------------------------------------------------------------*/
;;;351    int32_t DrvGPIO_GetPortDoutBits(E_DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;352    {
;;;353        if (port > 4)
000002  2904              CMP      r1,#4
000004  dd01              BLE      |L19.10|
;;;354        {
;;;355            return E_DRVGPIO_ARGUMENT;
000006  4803              LDR      r0,|L19.20|
                  |L19.8|
;;;356        }
;;;357    
;;;358        return inpw((uint32_t)&GPIOA->DOUT + (port*PORT_OFFSET));
;;;359    }
000008  4770              BX       lr
                  |L19.10|
00000a  4803              LDR      r0,|L19.24|
00000c  018a              LSLS     r2,r1,#6              ;358
00000e  5880              LDR      r0,[r0,r2]            ;358
000010  e7fa              B        |L19.8|
;;;360    
                          ENDP

000012  0000              DCW      0x0000
                  |L19.20|
                          DCD      0xffff8901
                  |L19.24|
                          DCD      0x50004008

                          AREA ||i.DrvGPIO_GetPortMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetPortMask PROC
;;;470    /*---------------------------------------------------------------------------------------------------------*/
;;;471    int32_t DrvGPIO_GetPortMask(E_DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;472    {
;;;473    	return inpw((uint32_t)&GPIOA->DMASK + (port* PORT_OFFSET)); 
000002  4802              LDR      r0,|L20.12|
000004  018a              LSLS     r2,r1,#6
000006  5880              LDR      r0,[r0,r2]
;;;474    }
000008  4770              BX       lr
;;;475    
                          ENDP

00000a  0000              DCW      0x0000
                  |L20.12|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetVersion PROC
;;;1203   /*---------------------------------------------------------------------------------------------------------*/
;;;1204   int32_t DrvGPIO_GetVersion(void)
000000  4800              LDR      r0,|L21.4|
;;;1205   {
;;;1206      return DRVGPIO_VERSION_NUM;
;;;1207   }
000002  4770              BX       lr
;;;1208   
                          ENDP

                  |L21.4|
                          DCD      0x00010202

                          AREA ||i.DrvGPIO_InitFunction||, CODE, READONLY, ALIGN=2

                  DrvGPIO_InitFunction PROC
;;;933    /*---------------------------------------------------------------------------------------------------------*/
;;;934    int32_t DrvGPIO_InitFunction(E_DRVGPIO_FUNC function)
000000  b500              PUSH     {lr}
;;;935    {  
000002  4601              MOV      r1,r0
;;;936    	switch ( function )
000004  460b              MOV      r3,r1
000006  f7fffffe          BL       __ARM_common_switch8
00000a  2413              DCB      0x24,0x13
00000c  1d2e3842          DCB      0x1d,0x2e,0x38,0x42
000010  5a636c76          DCB      0x5a,0x63,0x6c,0x76
000014  96aec5fd          DCB      0x96,0xae,0xc5,0xfd
000018  fefff2f1          DCB      0xfe,0xff,0xf2,0xf1
00001c  f0eff6ed          DCB      0xf0,0xef,0xf6,0xed
000020  ecebeae9          DCB      0xec,0xeb,0xea,0xe9
000024  e8e7e6e5          DCB      0xe8,0xe7,0xe6,0xe5
000028  e4e3e2e1          DCB      0xe4,0xe3,0xe2,0xe1
00002c  e0dfdedd          DCB      0xe0,0xdf,0xde,0xdd
;;;937    	{
;;;938    		/*---------------------------------------------------------------------------------------------------------*/
;;;939    		/* GPIO                                                                                                    */
;;;940    		/*---------------------------------------------------------------------------------------------------------*/
;;;941    		case E_FUNC_GPIO:
;;;942    		{
;;;943    		  	outpw(&SYS->GPAMFP, 0);
000030  2000              MOVS     r0,#0
000032  2205              MOVS     r2,#5
000034  0712              LSLS     r2,r2,#28
000036  6310              STR      r0,[r2,#0x30]
;;;944    			outpw(&SYS->GPBMFP, 0);
000038  6350              STR      r0,[r2,#0x34]
;;;945    			outpw(&SYS->GPCMFP, 0);
00003a  6390              STR      r0,[r2,#0x38]
;;;946    			outpw(&SYS->GPDMFP, 0);
00003c  63d0              STR      r0,[r2,#0x3c]
;;;947    			outpw(&SYS->GPEMFP, 0);		  	
00003e  4afc              LDR      r2,|L22.1072|
000040  6010              STR      r0,[r2,#0]
;;;948    		}break;
000042  e215              B        |L22.1136|
;;;949    
;;;950    		/*---------------------------------------------------------------------------------------------------------*/
;;;951    		/* Clock frequence output                                                                                        */
;;;952    		/*---------------------------------------------------------------------------------------------------------*/
;;;953    		case E_FUNC_CLKO:
;;;954    		{
;;;955    		  	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<12));
000044  2005              MOVS     r0,#5
000046  0700              LSLS     r0,r0,#28
000048  6b40              LDR      r0,[r0,#0x34]
00004a  2201              MOVS     r2,#1
00004c  0312              LSLS     r2,r2,#12
00004e  4310              ORRS     r0,r0,r2
000050  2205              MOVS     r2,#5
000052  0712              LSLS     r2,r2,#28
000054  6350              STR      r0,[r2,#0x34]
;;;956    		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<10));
000056  48f6              LDR      r0,|L22.1072|
000058  6900              LDR      r0,[r0,#0x10]
00005a  2201              MOVS     r2,#1
00005c  0292              LSLS     r2,r2,#10
00005e  4310              ORRS     r0,r0,r2
000060  4af3              LDR      r2,|L22.1072|
000062  6110              STR      r0,[r2,#0x10]
;;;957    		}break;
000064  e204              B        |L22.1136|
;;;958    
;;;959    		/*---------------------------------------------------------------------------------------------------------*/
;;;960    		/* I2C0                                                                                                    */
;;;961    		/*---------------------------------------------------------------------------------------------------------*/
;;;962    		case E_FUNC_I2C0:
;;;963    		{
;;;964    		  	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<8));
000066  2005              MOVS     r0,#5
000068  0700              LSLS     r0,r0,#28
00006a  6b00              LDR      r0,[r0,#0x30]
00006c  2203              MOVS     r2,#3
00006e  0212              LSLS     r2,r2,#8
000070  4310              ORRS     r0,r0,r2
000072  2205              MOVS     r2,#5
000074  0712              LSLS     r2,r2,#28
000076  6310              STR      r0,[r2,#0x30]
;;;965    		}break;		
000078  e1fa              B        |L22.1136|
;;;966    
;;;967    		/*---------------------------------------------------------------------------------------------------------*/
;;;968    		/* I2C1                                                                                                    */
;;;969    		/*---------------------------------------------------------------------------------------------------------*/
;;;970    		case E_FUNC_I2C1:
;;;971    		{
;;;972    		  	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<10));
00007a  2005              MOVS     r0,#5
00007c  0700              LSLS     r0,r0,#28
00007e  6b00              LDR      r0,[r0,#0x30]
000080  2203              MOVS     r2,#3
000082  0292              LSLS     r2,r2,#10
000084  4310              ORRS     r0,r0,r2
000086  2205              MOVS     r2,#5
000088  0712              LSLS     r2,r2,#28
00008a  6310              STR      r0,[r2,#0x30]
;;;973    		}break;
00008c  e1f0              B        |L22.1136|
;;;974    
;;;975    		/*---------------------------------------------------------------------------------------------------------*/
;;;976    		/* I2S                                                                                                     */
;;;977    		/*---------------------------------------------------------------------------------------------------------*/
;;;978    		case E_FUNC_I2S:	
;;;979    		{
;;;980              	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0xF<<0));
00008e  2005              MOVS     r0,#5
000090  0700              LSLS     r0,r0,#28
000092  6b80              LDR      r0,[r0,#0x38]
000094  220f              MOVS     r2,#0xf
000096  4310              ORRS     r0,r0,r2
000098  2205              MOVS     r2,#5
00009a  0712              LSLS     r2,r2,#28
00009c  6390              STR      r0,[r2,#0x38]
;;;981              	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x1<<15));
00009e  4610              MOV      r0,r2
0000a0  6b00              LDR      r0,[r0,#0x30]
0000a2  2201              MOVS     r2,#1
0000a4  03d2              LSLS     r2,r2,#15
0000a6  4310              ORRS     r0,r0,r2
0000a8  2205              MOVS     r2,#5
0000aa  0712              LSLS     r2,r2,#28
0000ac  6310              STR      r0,[r2,#0x30]
;;;982              	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1F<<5));			
0000ae  48e0              LDR      r0,|L22.1072|
0000b0  6900              LDR      r0,[r0,#0x10]
0000b2  221f              MOVS     r2,#0x1f
0000b4  0152              LSLS     r2,r2,#5
0000b6  4310              ORRS     r0,r0,r2
0000b8  4add              LDR      r2,|L22.1072|
0000ba  6110              STR      r0,[r2,#0x10]
;;;983    		}break;
0000bc  e1d8              B        |L22.1136|
;;;984    		
;;;985    		/*---------------------------------------------------------------------------------------------------------*/
;;;986    		/* CAN0                                                                                                    */
;;;987    		/*---------------------------------------------------------------------------------------------------------*/
;;;988    		case E_FUNC_CAN0:	
;;;989    		{
;;;990              	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0x3<<6));
0000be  2005              MOVS     r0,#5
0000c0  0700              LSLS     r0,r0,#28
0000c2  6bc0              LDR      r0,[r0,#0x3c]
0000c4  22c0              MOVS     r2,#0xc0
0000c6  4310              ORRS     r0,r0,r2
0000c8  2205              MOVS     r2,#5
0000ca  0712              LSLS     r2,r2,#28
0000cc  63d0              STR      r0,[r2,#0x3c]
;;;991    		}break;	
0000ce  e1cf              B        |L22.1136|
;;;992    
;;;993    		/*---------------------------------------------------------------------------------------------------------*/
;;;994    		/* Analog Comparator                                                                                       */
;;;995    		/*---------------------------------------------------------------------------------------------------------*/
;;;996    		case E_FUNC_ACMP0:	
;;;997    		{
;;;998              	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0x3<<6));
0000d0  2005              MOVS     r0,#5
0000d2  0700              LSLS     r0,r0,#28
0000d4  6b80              LDR      r0,[r0,#0x38]
0000d6  22c0              MOVS     r2,#0xc0
0000d8  4310              ORRS     r0,r0,r2
0000da  2205              MOVS     r2,#5
0000dc  0712              LSLS     r2,r2,#28
0000de  6390              STR      r0,[r2,#0x38]
;;;999    		}break;
0000e0  e1c6              B        |L22.1136|
;;;1000   
;;;1001   		case E_FUNC_ACMP1:
;;;1002   		{
;;;1003             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0x3<<14));
0000e2  2005              MOVS     r0,#5
0000e4  0700              LSLS     r0,r0,#28
0000e6  6b80              LDR      r0,[r0,#0x38]
0000e8  2203              MOVS     r2,#3
0000ea  0392              LSLS     r2,r2,#14
0000ec  4310              ORRS     r0,r0,r2
0000ee  2205              MOVS     r2,#5
0000f0  0712              LSLS     r2,r2,#28
0000f2  6390              STR      r0,[r2,#0x38]
;;;1004   		}break;
0000f4  e1bc              B        |L22.1136|
;;;1005   
;;;1006   		/*---------------------------------------------------------------------------------------------------------*/
;;;1007   		/* SPI                                                                                                     */
;;;1008   		/*---------------------------------------------------------------------------------------------------------*/
;;;1009   		case E_FUNC_SPI0:	
;;;1010   		{
;;;1011             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0xF<<0));
0000f6  2005              MOVS     r0,#5
0000f8  0700              LSLS     r0,r0,#28
0000fa  6b80              LDR      r0,[r0,#0x38]
0000fc  220f              MOVS     r2,#0xf
0000fe  4310              ORRS     r0,r0,r2
000100  2205              MOVS     r2,#5
000102  0712              LSLS     r2,r2,#28
000104  6390              STR      r0,[r2,#0x38]
;;;1012             	outpw(&SYS->ALTMFP, (inpw(&SYS->ALTMFP) & ~(0xF<<5)) | (0x1<<0));
000106  48ca              LDR      r0,|L22.1072|
000108  6900              LDR      r0,[r0,#0x10]
00010a  22ff              MOVS     r2,#0xff
00010c  32e1              ADDS     r2,r2,#0xe1
00010e  4390              BICS     r0,r0,r2
000110  2201              MOVS     r2,#1
000112  4310              ORRS     r0,r0,r2
000114  4ac6              LDR      r2,|L22.1072|
000116  6110              STR      r0,[r2,#0x10]
;;;1013   
;;;1014             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<10));
000118  2005              MOVS     r0,#5
00011a  0700              LSLS     r0,r0,#28
00011c  6b40              LDR      r0,[r0,#0x34]
00011e  0112              LSLS     r2,r2,#4
000120  4310              ORRS     r0,r0,r2
000122  2205              MOVS     r2,#5
000124  0712              LSLS     r2,r2,#28
000126  6350              STR      r0,[r2,#0x34]
;;;1015             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<0));
000128  48c1              LDR      r0,|L22.1072|
00012a  6900              LDR      r0,[r0,#0x10]
00012c  2201              MOVS     r2,#1
00012e  4310              ORRS     r0,r0,r2
000130  4abf              LDR      r2,|L22.1072|
000132  6110              STR      r0,[r2,#0x10]
;;;1016   
;;;1017   		}break;
000134  e19c              B        |L22.1136|
;;;1018   
;;;1019   		case E_FUNC_SPI1:
;;;1020   		{
;;;1021             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0xF<<8));
000136  2005              MOVS     r0,#5
000138  0700              LSLS     r0,r0,#28
00013a  6b80              LDR      r0,[r0,#0x38]
00013c  220f              MOVS     r2,#0xf
00013e  0212              LSLS     r2,r2,#8
000140  4310              ORRS     r0,r0,r2
000142  2205              MOVS     r2,#5
000144  0712              LSLS     r2,r2,#28
000146  6390              STR      r0,[r2,#0x38]
;;;1022   
;;;1023             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<9));
000148  4610              MOV      r0,r2
00014a  6b40              LDR      r0,[r0,#0x34]
00014c  2201              MOVS     r2,#1
00014e  0252              LSLS     r2,r2,#9
000150  4310              ORRS     r0,r0,r2
000152  2205              MOVS     r2,#5
000154  0712              LSLS     r2,r2,#28
000156  6350              STR      r0,[r2,#0x34]
;;;1024             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<1));
000158  48b5              LDR      r0,|L22.1072|
00015a  6900              LDR      r0,[r0,#0x10]
00015c  2202              MOVS     r2,#2
00015e  4310              ORRS     r0,r0,r2
000160  4ab3              LDR      r2,|L22.1072|
000162  6110              STR      r0,[r2,#0x10]
;;;1025   		}break;
000164  e184              B        |L22.1136|
;;;1026   
;;;1027   		case E_FUNC_SPI2:	
;;;1028   		{
;;;1029             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0xF<<0));
000166  2005              MOVS     r0,#5
000168  0700              LSLS     r0,r0,#28
00016a  6bc0              LDR      r0,[r0,#0x3c]
00016c  220f              MOVS     r2,#0xf
00016e  4310              ORRS     r0,r0,r2
000170  2205              MOVS     r2,#5
000172  0712              LSLS     r2,r2,#28
000174  63d0              STR      r0,[r2,#0x3c]
;;;1030             	
;;;1031              	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x1<<9));
000176  4610              MOV      r0,r2
000178  6b00              LDR      r0,[r0,#0x30]
00017a  2201              MOVS     r2,#1
00017c  0252              LSLS     r2,r2,#9
00017e  4310              ORRS     r0,r0,r2
000180  2205              MOVS     r2,#5
000182  0712              LSLS     r2,r2,#28
000184  6310              STR      r0,[r2,#0x30]
;;;1032               outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<7));
000186  48aa              LDR      r0,|L22.1072|
000188  6900              LDR      r0,[r0,#0x10]
00018a  2280              MOVS     r2,#0x80
00018c  4310              ORRS     r0,r0,r2
00018e  4aa8              LDR      r2,|L22.1072|
000190  6110              STR      r0,[r2,#0x10]
;;;1033   		}break;				
000192  e16d              B        |L22.1136|
;;;1034   
;;;1035   		case E_FUNC_SPI3:	
;;;1036   		{
;;;1037             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0xF<<8));
000194  2005              MOVS     r0,#5
000196  0700              LSLS     r0,r0,#28
000198  6bc0              LDR      r0,[r0,#0x3c]
00019a  220f              MOVS     r2,#0xf
00019c  0212              LSLS     r2,r2,#8
00019e  4310              ORRS     r0,r0,r2
0001a0  2205              MOVS     r2,#5
0001a2  0712              LSLS     r2,r2,#28
0001a4  63d0              STR      r0,[r2,#0x3c]
;;;1038   
;;;1039              	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<14));
0001a6  4610              MOV      r0,r2
0001a8  6b40              LDR      r0,[r0,#0x34]
0001aa  2201              MOVS     r2,#1
0001ac  0392              LSLS     r2,r2,#14
0001ae  4310              ORRS     r0,r0,r2
0001b0  2205              MOVS     r2,#5
0001b2  0712              LSLS     r2,r2,#28
0001b4  6350              STR      r0,[r2,#0x34]
;;;1040               outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<3));
0001b6  489e              LDR      r0,|L22.1072|
0001b8  6900              LDR      r0,[r0,#0x10]
0001ba  2208              MOVS     r2,#8
0001bc  4310              ORRS     r0,r0,r2
0001be  4a9c              LDR      r2,|L22.1072|
0001c0  6110              STR      r0,[r2,#0x10]
;;;1041   		}break;
0001c2  e155              B        |L22.1136|
0001c4  e152              B        |L22.1132|
0001c6  e139              B        |L22.1084|
0001c8  e0dc              B        |L22.900|
0001ca  e0fa              B        |L22.962|
0001cc  e0cd              B        |L22.874|
0001ce  e0b6              B        |L22.830|
0001d0  e0a4              B        |L22.796|
0001d2  e099              B        |L22.776|
0001d4  e08e              B        |L22.756|
0001d6  e084              B        |L22.738|
0001d8  e07a              B        |L22.720|
0001da  e069              B        |L22.688|
0001dc  e058              B        |L22.656|
0001de  e047              B        |L22.624|
0001e0  e03c              B        |L22.604|
0001e2  e031              B        |L22.584|
0001e4  e020              B        |L22.552|
0001e6  e006              B        |L22.502|
0001e8  e012              B        |L22.528|
0001ea  e010              B        |L22.526|
0001ec  e00e              B        |L22.524|
0001ee  e00c              B        |L22.522|
0001f0  e00a              B        |L22.520|
0001f2  e008              B        |L22.518|
0001f4  e006              B        |L22.516|
                  |L22.502|
;;;1042   
;;;1043   		/*---------------------------------------------------------------------------------------------------------*/
;;;1044   		/* ADC                                                                                                     */
;;;1045   		/*---------------------------------------------------------------------------------------------------------*/
;;;1046   		case E_FUNC_ADC7:
;;;1047   		{
;;;1048             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<2));
0001f6  488e              LDR      r0,|L22.1072|
0001f8  6900              LDR      r0,[r0,#0x10]
0001fa  2204              MOVS     r2,#4
0001fc  4390              BICS     r0,r0,r2
0001fe  4a8c              LDR      r2,|L22.1072|
000200  6110              STR      r0,[r2,#0x10]
;;;1049           }
;;;1050   		case E_FUNC_ADC0:
000202  bf00              NOP      
                  |L22.516|
;;;1051   		case E_FUNC_ADC1:
000204  bf00              NOP      
                  |L22.518|
;;;1052   		case E_FUNC_ADC2:
000206  bf00              NOP      
                  |L22.520|
;;;1053   		case E_FUNC_ADC3:
000208  bf00              NOP      
                  |L22.522|
;;;1054   		case E_FUNC_ADC4:
00020a  bf00              NOP      
                  |L22.524|
;;;1055   		case E_FUNC_ADC5:
00020c  bf00              NOP      
                  |L22.526|
;;;1056   		case E_FUNC_ADC6:
00020e  bf00              NOP      
                  |L22.528|
;;;1057   		{
;;;1058             	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x1<<(function-E_FUNC_ADC0)));
000210  2005              MOVS     r0,#5
000212  0700              LSLS     r0,r0,#28
000214  6b00              LDR      r0,[r0,#0x30]
000216  460a              MOV      r2,r1
000218  3a0c              SUBS     r2,r2,#0xc
00021a  2301              MOVS     r3,#1
00021c  4093              LSLS     r3,r3,r2
00021e  4318              ORRS     r0,r0,r3
000220  2205              MOVS     r2,#5
000222  0712              LSLS     r2,r2,#28
000224  6310              STR      r0,[r2,#0x30]
;;;1059           }break;
000226  e123              B        |L22.1136|
                  |L22.552|
;;;1060   
;;;1061     		/*---------------------------------------------------------------------------------------------------------*/
;;;1062   		/* External Interrupt                                                                                      */
;;;1063   		/*---------------------------------------------------------------------------------------------------------*/		
;;;1064   	  	case E_FUNC_EXTINT0:
;;;1065   		{	
;;;1066             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<14));
000228  2005              MOVS     r0,#5
00022a  0700              LSLS     r0,r0,#28
00022c  6b40              LDR      r0,[r0,#0x34]
00022e  2201              MOVS     r2,#1
000230  0392              LSLS     r2,r2,#14
000232  4310              ORRS     r0,r0,r2
000234  2205              MOVS     r2,#5
000236  0712              LSLS     r2,r2,#28
000238  6350              STR      r0,[r2,#0x34]
;;;1067             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<3));
00023a  487d              LDR      r0,|L22.1072|
00023c  6900              LDR      r0,[r0,#0x10]
00023e  2208              MOVS     r2,#8
000240  4390              BICS     r0,r0,r2
000242  4a7b              LDR      r2,|L22.1072|
000244  6110              STR      r0,[r2,#0x10]
;;;1068   		}break;
000246  e113              B        |L22.1136|
                  |L22.584|
;;;1069   
;;;1070   	  	case E_FUNC_EXTINT1:
;;;1071   		{	
;;;1072             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<15));
000248  2005              MOVS     r0,#5
00024a  0700              LSLS     r0,r0,#28
00024c  6b40              LDR      r0,[r0,#0x34]
00024e  2201              MOVS     r2,#1
000250  03d2              LSLS     r2,r2,#15
000252  4310              ORRS     r0,r0,r2
000254  2205              MOVS     r2,#5
000256  0712              LSLS     r2,r2,#28
000258  6350              STR      r0,[r2,#0x34]
;;;1073   		}break;
00025a  e109              B        |L22.1136|
                  |L22.604|
;;;1074   
;;;1075   		/*---------------------------------------------------------------------------------------------------------*/
;;;1076   		/* TIMER                                                                                                   */
;;;1077   		/*---------------------------------------------------------------------------------------------------------*/
;;;1078   		case E_FUNC_TMR0:
;;;1079   		{
;;;1080             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<8));
00025c  2005              MOVS     r0,#5
00025e  0700              LSLS     r0,r0,#28
000260  6b40              LDR      r0,[r0,#0x34]
000262  22ff              MOVS     r2,#0xff
000264  3201              ADDS     r2,#1
000266  4310              ORRS     r0,r0,r2
000268  2205              MOVS     r2,#5
00026a  0712              LSLS     r2,r2,#28
00026c  6350              STR      r0,[r2,#0x34]
;;;1081   		}break;
00026e  e0ff              B        |L22.1136|
                  |L22.624|
;;;1082   	
;;;1083   		case E_FUNC_TMR1:
;;;1084   		{
;;;1085             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<9));
000270  2005              MOVS     r0,#5
000272  0700              LSLS     r0,r0,#28
000274  6b40              LDR      r0,[r0,#0x34]
000276  2201              MOVS     r2,#1
000278  0252              LSLS     r2,r2,#9
00027a  4310              ORRS     r0,r0,r2
00027c  2205              MOVS     r2,#5
00027e  0712              LSLS     r2,r2,#28
000280  6350              STR      r0,[r2,#0x34]
;;;1086             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<1));
000282  486b              LDR      r0,|L22.1072|
000284  6900              LDR      r0,[r0,#0x10]
000286  2202              MOVS     r2,#2
000288  4390              BICS     r0,r0,r2
00028a  4a69              LDR      r2,|L22.1072|
00028c  6110              STR      r0,[r2,#0x10]
;;;1087   		}break;
00028e  e0ef              B        |L22.1136|
                  |L22.656|
;;;1088   
;;;1089   		case E_FUNC_TMR2:
;;;1090   		{
;;;1091             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<10));
000290  2005              MOVS     r0,#5
000292  0700              LSLS     r0,r0,#28
000294  6b40              LDR      r0,[r0,#0x34]
000296  2201              MOVS     r2,#1
000298  0292              LSLS     r2,r2,#10
00029a  4310              ORRS     r0,r0,r2
00029c  2205              MOVS     r2,#5
00029e  0712              LSLS     r2,r2,#28
0002a0  6350              STR      r0,[r2,#0x34]
;;;1092             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<0));
0002a2  4863              LDR      r0,|L22.1072|
0002a4  6900              LDR      r0,[r0,#0x10]
0002a6  0840              LSRS     r0,r0,#1
0002a8  0040              LSLS     r0,r0,#1
0002aa  4a61              LDR      r2,|L22.1072|
0002ac  6110              STR      r0,[r2,#0x10]
;;;1093   		}break;
0002ae  e0df              B        |L22.1136|
                  |L22.688|
;;;1094   
;;;1095   		case E_FUNC_TMR3:
;;;1096   		{
;;;1097             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<11));
0002b0  2005              MOVS     r0,#5
0002b2  0700              LSLS     r0,r0,#28
0002b4  6b40              LDR      r0,[r0,#0x34]
0002b6  2201              MOVS     r2,#1
0002b8  02d2              LSLS     r2,r2,#11
0002ba  4310              ORRS     r0,r0,r2
0002bc  2205              MOVS     r2,#5
0002be  0712              LSLS     r2,r2,#28
0002c0  6350              STR      r0,[r2,#0x34]
;;;1098             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<4));
0002c2  485b              LDR      r0,|L22.1072|
0002c4  6900              LDR      r0,[r0,#0x10]
0002c6  2210              MOVS     r2,#0x10
0002c8  4390              BICS     r0,r0,r2
0002ca  4a59              LDR      r2,|L22.1072|
0002cc  6110              STR      r0,[r2,#0x10]
;;;1099   		}break;
0002ce  e0cf              B        |L22.1136|
                  |L22.720|
;;;1100   
;;;1101   		/*---------------------------------------------------------------------------------------------------------*/
;;;1102   		/* UART                                                                                                    */
;;;1103   		/*--------------------------------------------------------------------------------------------------------*/
;;;1104   		case E_FUNC_UART0:
;;;1105   		{
;;;1106             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0xF<<0));
0002d0  2005              MOVS     r0,#5
0002d2  0700              LSLS     r0,r0,#28
0002d4  6b40              LDR      r0,[r0,#0x34]
0002d6  220f              MOVS     r2,#0xf
0002d8  4310              ORRS     r0,r0,r2
0002da  2205              MOVS     r2,#5
0002dc  0712              LSLS     r2,r2,#28
0002de  6350              STR      r0,[r2,#0x34]
;;;1107   		}break;
0002e0  e0c6              B        |L22.1136|
                  |L22.738|
;;;1108   
;;;1109   		case E_FUNC_UART1:
;;;1110   		{
;;;1111             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0xF<<4));
0002e2  2005              MOVS     r0,#5
0002e4  0700              LSLS     r0,r0,#28
0002e6  6b40              LDR      r0,[r0,#0x34]
0002e8  22f0              MOVS     r2,#0xf0
0002ea  4310              ORRS     r0,r0,r2
0002ec  2205              MOVS     r2,#5
0002ee  0712              LSLS     r2,r2,#28
0002f0  6350              STR      r0,[r2,#0x34]
;;;1112   		}break;
0002f2  e0bd              B        |L22.1136|
                  |L22.756|
;;;1113   
;;;1114   		case E_FUNC_UART2:
;;;1115   		{
;;;1116             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0x3<<14));
0002f4  2005              MOVS     r0,#5
0002f6  0700              LSLS     r0,r0,#28
0002f8  6bc0              LDR      r0,[r0,#0x3c]
0002fa  2203              MOVS     r2,#3
0002fc  0392              LSLS     r2,r2,#14
0002fe  4310              ORRS     r0,r0,r2
000300  2205              MOVS     r2,#5
000302  0712              LSLS     r2,r2,#28
000304  63d0              STR      r0,[r2,#0x3c]
;;;1117           }break;
000306  e0b3              B        |L22.1136|
                  |L22.776|
;;;1118   
;;;1119   		/*---------------------------------------------------------------------------------------------------------*/
;;;1120   		/* PWM                                                                                                     */
;;;1121   		/*---------------------------------------------------------------------------------------------------------*/
;;;1122   		case E_FUNC_PWM01:
;;;1123   		{
;;;1124   		  	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<12));
000308  2005              MOVS     r0,#5
00030a  0700              LSLS     r0,r0,#28
00030c  6b00              LDR      r0,[r0,#0x30]
00030e  2203              MOVS     r2,#3
000310  0312              LSLS     r2,r2,#12
000312  4310              ORRS     r0,r0,r2
000314  2205              MOVS     r2,#5
000316  0712              LSLS     r2,r2,#28
000318  6310              STR      r0,[r2,#0x30]
;;;1125   		}break;
00031a  e0a9              B        |L22.1136|
                  |L22.796|
;;;1126   
;;;1127   		case E_FUNC_PWM23:
;;;1128   		{
;;;1129   		  	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<14));
00031c  2005              MOVS     r0,#5
00031e  0700              LSLS     r0,r0,#28
000320  6b00              LDR      r0,[r0,#0x30]
000322  2203              MOVS     r2,#3
000324  0392              LSLS     r2,r2,#14
000326  4310              ORRS     r0,r0,r2
000328  2205              MOVS     r2,#5
00032a  0712              LSLS     r2,r2,#28
00032c  6310              STR      r0,[r2,#0x30]
;;;1130   		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<9));
00032e  4840              LDR      r0,|L22.1072|
000330  6900              LDR      r0,[r0,#0x10]
000332  2201              MOVS     r2,#1
000334  0252              LSLS     r2,r2,#9
000336  4390              BICS     r0,r0,r2
000338  4a3d              LDR      r2,|L22.1072|
00033a  6110              STR      r0,[r2,#0x10]
;;;1131   		}break;
00033c  e098              B        |L22.1136|
                  |L22.830|
;;;1132   
;;;1133   		case E_FUNC_PWM45:
;;;1134   		{
;;;1135   		  	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<11));
00033e  2005              MOVS     r0,#5
000340  0700              LSLS     r0,r0,#28
000342  6b40              LDR      r0,[r0,#0x34]
000344  2201              MOVS     r2,#1
000346  02d2              LSLS     r2,r2,#11
000348  4310              ORRS     r0,r0,r2
00034a  2205              MOVS     r2,#5
00034c  0712              LSLS     r2,r2,#28
00034e  6350              STR      r0,[r2,#0x34]
;;;1136   		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<4));
000350  4837              LDR      r0,|L22.1072|
000352  6900              LDR      r0,[r0,#0x10]
000354  2210              MOVS     r2,#0x10
000356  4310              ORRS     r0,r0,r2
000358  4a35              LDR      r2,|L22.1072|
00035a  6110              STR      r0,[r2,#0x10]
;;;1137   		  	outpw(&SYS->GPEMFP, inpw(&SYS->GPEMFP) | (0x1<<5));
00035c  4610              MOV      r0,r2
00035e  6800              LDR      r0,[r0,#0]
000360  2220              MOVS     r2,#0x20
000362  4310              ORRS     r0,r0,r2
000364  4a32              LDR      r2,|L22.1072|
000366  6010              STR      r0,[r2,#0]
;;;1138   		}break;
000368  e082              B        |L22.1136|
                  |L22.874|
;;;1139   
;;;1140   		case E_FUNC_PWM67:
;;;1141   		{
;;;1142   		  	outpw(&SYS->GPEMFP, inpw(&SYS->GPEMFP) | (0x1));
00036a  4831              LDR      r0,|L22.1072|
00036c  6800              LDR      r0,[r0,#0]
00036e  2201              MOVS     r2,#1
000370  4310              ORRS     r0,r0,r2
000372  4a2f              LDR      r2,|L22.1072|
000374  6010              STR      r0,[r2,#0]
;;;1143   		  	outpw(&SYS->GPEMFP, inpw(&SYS->GPEMFP) | (0x1<<1));
000376  4610              MOV      r0,r2
000378  6800              LDR      r0,[r0,#0]
00037a  2202              MOVS     r2,#2
00037c  4310              ORRS     r0,r0,r2
00037e  4a2c              LDR      r2,|L22.1072|
000380  6010              STR      r0,[r2,#0]
;;;1144   		}break;
000382  e075              B        |L22.1136|
                  |L22.900|
;;;1145   
;;;1146   		/*---------------------------------------------------------------------------------------------------------*/
;;;1147   		/* EBI                                                                                                     */
;;;1148   		/*---------------------------------------------------------------------------------------------------------*/
;;;1149   		case E_FUNC_EBI_16B:	
;;;1150   		{
;;;1151   			// Enable nWRH & nWRL for support Byte-Write in 16bit Data Width Device(SARM) 
;;;1152             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x3<<2));
000384  2005              MOVS     r0,#5
000386  0700              LSLS     r0,r0,#28
000388  6b40              LDR      r0,[r0,#0x34]
00038a  220c              MOVS     r2,#0xc
00038c  4310              ORRS     r0,r0,r2
00038e  2205              MOVS     r2,#5
000390  0712              LSLS     r2,r2,#28
000392  6350              STR      r0,[r2,#0x34]
;;;1153             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x3<<13));			
000394  4826              LDR      r0,|L22.1072|
000396  6900              LDR      r0,[r0,#0x10]
000398  2203              MOVS     r2,#3
00039a  0352              LSLS     r2,r2,#13
00039c  4310              ORRS     r0,r0,r2
00039e  4a24              LDR      r2,|L22.1072|
0003a0  6110              STR      r0,[r2,#0x10]
;;;1154   		
;;;1155   			// Enable EBI AD High-byte, bit 15~8
;;;1156             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0xFF<<16));			
0003a2  4610              MOV      r0,r2
0003a4  6900              LDR      r0,[r0,#0x10]
0003a6  22ff              MOVS     r2,#0xff
0003a8  0412              LSLS     r2,r2,#16
0003aa  4310              ORRS     r0,r0,r2
0003ac  4a20              LDR      r2,|L22.1072|
0003ae  6110              STR      r0,[r2,#0x10]
;;;1157             	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x703E));
0003b0  2005              MOVS     r0,#5
0003b2  0700              LSLS     r0,r0,#28
0003b4  6b00              LDR      r0,[r0,#0x30]
0003b6  4a1f              LDR      r2,|L22.1076|
0003b8  4310              ORRS     r0,r0,r2
0003ba  2205              MOVS     r2,#5
0003bc  0712              LSLS     r2,r2,#28
0003be  6310              STR      r0,[r2,#0x30]
;;;1158   		}
;;;1159   				
;;;1160   		case E_FUNC_EBI_8B:	
0003c0  bf00              NOP      
                  |L22.962|
;;;1161   		{
;;;1162   			// Enable EBI_EN and EBI_MCLK_EN
;;;1163             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x3<<11));			
0003c2  481b              LDR      r0,|L22.1072|
0003c4  6900              LDR      r0,[r0,#0x10]
0003c6  2203              MOVS     r2,#3
0003c8  02d2              LSLS     r2,r2,#11
0003ca  4310              ORRS     r0,r0,r2
0003cc  4a18              LDR      r2,|L22.1072|
0003ce  6110              STR      r0,[r2,#0x10]
;;;1164             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0x1<<8));
0003d0  2005              MOVS     r0,#5
0003d2  0700              LSLS     r0,r0,#28
0003d4  6b80              LDR      r0,[r0,#0x38]
0003d6  22ff              MOVS     r2,#0xff
0003d8  3201              ADDS     r2,#1
0003da  4310              ORRS     r0,r0,r2
0003dc  2205              MOVS     r2,#5
0003de  0712              LSLS     r2,r2,#28
0003e0  6390              STR      r0,[r2,#0x38]
;;;1165   			
;;;1166   			// Enable nRD/nWR/ALE/nCS for EBI
;;;1167             	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<10));
0003e2  4610              MOV      r0,r2
0003e4  6b00              LDR      r0,[r0,#0x30]
0003e6  2203              MOVS     r2,#3
0003e8  0292              LSLS     r2,r2,#10
0003ea  4310              ORRS     r0,r0,r2
0003ec  2205              MOVS     r2,#5
0003ee  0712              LSLS     r2,r2,#28
0003f0  6310              STR      r0,[r2,#0x30]
;;;1168             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x3<<6));
0003f2  4610              MOV      r0,r2
0003f4  6b40              LDR      r0,[r0,#0x34]
0003f6  22c0              MOVS     r2,#0xc0
0003f8  4310              ORRS     r0,r0,r2
0003fa  2205              MOVS     r2,#5
0003fc  0712              LSLS     r2,r2,#28
0003fe  6350              STR      r0,[r2,#0x34]
;;;1169   			
;;;1170   			// Enable EBI AD Low-byte, bit 7~0
;;;1171             	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<6));
000400  4610              MOV      r0,r2
000402  6b00              LDR      r0,[r0,#0x30]
000404  22c0              MOVS     r2,#0xc0
000406  4310              ORRS     r0,r0,r2
000408  2205              MOVS     r2,#5
00040a  0712              LSLS     r2,r2,#28
00040c  6310              STR      r0,[r2,#0x30]
;;;1172             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0x3<<6) | (0x3<<14));
00040e  4610              MOV      r0,r2
000410  6b80              LDR      r0,[r0,#0x38]
000412  4a09              LDR      r2,|L22.1080|
000414  4310              ORRS     r0,r0,r2
000416  2205              MOVS     r2,#5
000418  0712              LSLS     r2,r2,#28
00041a  6390              STR      r0,[r2,#0x38]
;;;1173             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x3<<12));
00041c  4610              MOV      r0,r2
00041e  6b40              LDR      r0,[r0,#0x34]
000420  2203              MOVS     r2,#3
000422  0312              LSLS     r2,r2,#12
000424  4310              ORRS     r0,r0,r2
000426  2205              MOVS     r2,#5
000428  0712              LSLS     r2,r2,#28
00042a  6350              STR      r0,[r2,#0x34]
;;;1174   		}break;
00042c  e020              B        |L22.1136|
00042e  0000              DCW      0x0000
                  |L22.1072|
                          DCD      0x50000040
                  |L22.1076|
                          DCD      0x0000703e
                  |L22.1080|
                          DCD      0x0000c0c0
                  |L22.1084|
;;;1175   
;;;1176   		/*---------------------------------------------------------------------------------------------------------*/
;;;1177   		/* SPI - QFN36PIN                                                                                          */
;;;1178   		/*---------------------------------------------------------------------------------------------------------*/
;;;1179   		case E_FUNC_SPI0_QFN36PIN:	
;;;1180   		{           		
;;;1181             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0xF<<0));
00043c  2005              MOVS     r0,#5
00043e  0700              LSLS     r0,r0,#28
000440  6b80              LDR      r0,[r0,#0x38]
000442  220f              MOVS     r2,#0xf
000444  4310              ORRS     r0,r0,r2
000446  2205              MOVS     r2,#5
000448  0712              LSLS     r2,r2,#28
00044a  6390              STR      r0,[r2,#0x38]
;;;1182             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0xF<<5));
00044c  480a              LDR      r0,|L22.1144|
00044e  6900              LDR      r0,[r0,#0x10]
000450  22ff              MOVS     r2,#0xff
000452  32e1              ADDS     r2,r2,#0xe1
000454  4390              BICS     r0,r0,r2
000456  4a08              LDR      r2,|L22.1144|
000458  6110              STR      r0,[r2,#0x10]
;;;1183   
;;;1184             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0x1<<1));
00045a  2005              MOVS     r0,#5
00045c  0700              LSLS     r0,r0,#28
00045e  6bc0              LDR      r0,[r0,#0x3c]
000460  2202              MOVS     r2,#2
000462  4310              ORRS     r0,r0,r2
000464  2205              MOVS     r2,#5
000466  0712              LSLS     r2,r2,#28
000468  63d0              STR      r0,[r2,#0x3c]
;;;1185   		}break;
00046a  e001              B        |L22.1136|
                  |L22.1132|
;;;1186   
;;;1187   		default:
;;;1188   			return E_DRVGPIO_ARGUMENT;
00046c  4803              LDR      r0,|L22.1148|
                  |L22.1134|
;;;1189   	}
;;;1190   
;;;1191   	return E_SUCCESS;
;;;1192   }
00046e  bd00              POP      {pc}
                  |L22.1136|
000470  bf00              NOP                            ;948
000472  2000              MOVS     r0,#0                 ;1191
000474  e7fb              B        |L22.1134|
;;;1193   
                          ENDP

000476  0000              DCW      0x0000
                  |L22.1144|
                          DCD      0x50000040
                  |L22.1148|
                          DCD      0xffff8901

                          AREA ||i.DrvGPIO_Open||, CODE, READONLY, ALIGN=2

                  DrvGPIO_Open PROC
;;;112    /*---------------------------------------------------------------------------------------------------------*/
;;;113    int32_t DrvGPIO_Open(E_DRVGPIO_PORT port, int32_t i32Bit, E_DRVGPIO_IO mode)
000000  b570              PUSH     {r4-r6,lr}
;;;114    {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;115        volatile uint32_t u32Reg;
;;;116        
;;;117        if ((i32Bit < 0) || (i32Bit > 16))
000006  2b00              CMP      r3,#0
000008  db01              BLT      |L23.14|
00000a  2b10              CMP      r3,#0x10
00000c  dd01              BLE      |L23.18|
                  |L23.14|
;;;118        {
;;;119            return E_DRVGPIO_ARGUMENT;
00000e  4818              LDR      r0,|L23.112|
                  |L23.16|
;;;120        }    
;;;121    
;;;122        u32Reg = (uint32_t)&GPIOA->PMD + (port*PORT_OFFSET);    
;;;123        if ((mode == E_IO_INPUT) || (mode == E_IO_OUTPUT) || (mode == E_IO_OPENDRAIN))
;;;124        {
;;;125            outpw(u32Reg, inpw(u32Reg) & ~(0x3<<(i32Bit*2)));
;;;126            if (mode == E_IO_OUTPUT)
;;;127            {
;;;128                outpw(u32Reg, inpw(u32Reg) | (0x1<<(i32Bit*2)));
;;;129            }else
;;;130            if (mode == E_IO_OPENDRAIN) 
;;;131            {
;;;132                outpw(u32Reg, inpw(u32Reg) | (0x2<<(i32Bit*2)));
;;;133            }
;;;134        }else
;;;135    	if (mode == E_IO_QUASI)
;;;136        {
;;;137            outpw(u32Reg, inpw(u32Reg) | (0x3<<(i32Bit*2)));
;;;138        }else
;;;139        {
;;;140            return E_DRVGPIO_ARGUMENT;
;;;141        }
;;;142            
;;;143    	return E_SUCCESS;
;;;144    }
000010  bd70              POP      {r4-r6,pc}
                  |L23.18|
000012  01a0              LSLS     r0,r4,#6              ;122
000014  4d17              LDR      r5,|L23.116|
000016  1941              ADDS     r1,r0,r5              ;122
000018  2a00              CMP      r2,#0                 ;123
00001a  d003              BEQ      |L23.36|
00001c  2a01              CMP      r2,#1                 ;123
00001e  d001              BEQ      |L23.36|
000020  2a02              CMP      r2,#2                 ;123
000022  d117              BNE      |L23.84|
                  |L23.36|
000024  6808              LDR      r0,[r1,#0]            ;125
000026  005e              LSLS     r6,r3,#1              ;125
000028  2503              MOVS     r5,#3                 ;125
00002a  40b5              LSLS     r5,r5,r6              ;125
00002c  43a8              BICS     r0,r0,r5              ;125
00002e  6008              STR      r0,[r1,#0]            ;125
000030  2a01              CMP      r2,#1                 ;126
000032  d106              BNE      |L23.66|
000034  6808              LDR      r0,[r1,#0]            ;128
000036  005e              LSLS     r6,r3,#1              ;128
000038  2501              MOVS     r5,#1                 ;128
00003a  40b5              LSLS     r5,r5,r6              ;128
00003c  4328              ORRS     r0,r0,r5              ;128
00003e  6008              STR      r0,[r1,#0]            ;128
000040  e013              B        |L23.106|
                  |L23.66|
000042  2a02              CMP      r2,#2                 ;130
000044  d111              BNE      |L23.106|
000046  6808              LDR      r0,[r1,#0]            ;132
000048  005e              LSLS     r6,r3,#1              ;132
00004a  2502              MOVS     r5,#2                 ;132
00004c  40b5              LSLS     r5,r5,r6              ;132
00004e  4328              ORRS     r0,r0,r5              ;132
000050  6008              STR      r0,[r1,#0]            ;132
000052  e00a              B        |L23.106|
                  |L23.84|
000054  2a03              CMP      r2,#3                 ;135
000056  d106              BNE      |L23.102|
000058  6808              LDR      r0,[r1,#0]            ;137
00005a  005e              LSLS     r6,r3,#1              ;137
00005c  2503              MOVS     r5,#3                 ;137
00005e  40b5              LSLS     r5,r5,r6              ;137
000060  4328              ORRS     r0,r0,r5              ;137
000062  6008              STR      r0,[r1,#0]            ;137
000064  e001              B        |L23.106|
                  |L23.102|
000066  4802              LDR      r0,|L23.112|
000068  e7d2              B        |L23.16|
                  |L23.106|
00006a  2000              MOVS     r0,#0                 ;143
00006c  e7d0              B        |L23.16|
;;;145    
                          ENDP

00006e  0000              DCW      0x0000
                  |L23.112|
                          DCD      0xffff8901
                  |L23.116|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_SetBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetBit PROC
;;;190    /*---------------------------------------------------------------------------------------------------------*/
;;;191    int32_t DrvGPIO_SetBit(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;192    {
000002  4603              MOV      r3,r0
;;;193    	GPIO_T * tGPIO;
;;;194    
;;;195        if ((i32Bit < 0) || (i32Bit > 16))
000004  2900              CMP      r1,#0
000006  db01              BLT      |L24.12|
000008  2910              CMP      r1,#0x10
00000a  dd01              BLE      |L24.16|
                  |L24.12|
;;;196        {
;;;197            return E_DRVGPIO_ARGUMENT;
00000c  4805              LDR      r0,|L24.36|
                  |L24.14|
;;;198        }
;;;199    
;;;200    	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
;;;201    
;;;202    	tGPIO->DOUT |= (1 << i32Bit);
;;;203    
;;;204    	return E_SUCCESS;
;;;205    }
00000e  bd10              POP      {r4,pc}
                  |L24.16|
000010  0198              LSLS     r0,r3,#6              ;200
000012  4c05              LDR      r4,|L24.40|
000014  1902              ADDS     r2,r0,r4              ;200
000016  6890              LDR      r0,[r2,#8]            ;202
000018  2401              MOVS     r4,#1                 ;202
00001a  408c              LSLS     r4,r4,r1              ;202
00001c  4320              ORRS     r0,r0,r4              ;202
00001e  6090              STR      r0,[r2,#8]            ;202
000020  2000              MOVS     r0,#0                 ;204
000022  e7f4              B        |L24.14|
;;;206    
                          ENDP

                  |L24.36|
                          DCD      0xffff8901
                  |L24.40|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_SetBitMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetBitMask PROC
;;;375    /*---------------------------------------------------------------------------------------------------------*/
;;;376    int32_t DrvGPIO_SetBitMask(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;377    {
000002  4602              MOV      r2,r0
;;;378        volatile uint32_t u32Reg;
;;;379    
;;;380        u32Reg = (uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET);    
000004  4804              LDR      r0,|L25.24|
000006  0194              LSLS     r4,r2,#6
000008  1903              ADDS     r3,r0,r4
;;;381    
;;;382    	outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));
00000a  6818              LDR      r0,[r3,#0]
00000c  2401              MOVS     r4,#1
00000e  408c              LSLS     r4,r4,r1
000010  4320              ORRS     r0,r0,r4
000012  6018              STR      r0,[r3,#0]
;;;383    
;;;384    	return E_SUCCESS;
000014  2000              MOVS     r0,#0
;;;385    }
000016  bd10              POP      {r4,pc}
;;;386    
                          ENDP

                  |L25.24|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_SetDebounceTime||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetDebounceTime PROC
;;;564    /*---------------------------------------------------------------------------------------------------------*/
;;;565    int32_t DrvGPIO_SetDebounceTime(uint32_t u32CycleSelection, E_DRVGPIO_DBCLKSRC ClockSource)
000000  b510              PUSH     {r4,lr}
;;;566    {
000002  4602              MOV      r2,r0
;;;567        /* Maximum debounce time is 2^(15)*(clk src) */
;;;568        if (u32CycleSelection > 15)
000004  2a0f              CMP      r2,#0xf
000006  d901              BLS      |L26.12|
;;;569        {
;;;570            return E_DRVGPIO_ARGUMENT;
000008  480b              LDR      r0,|L26.56|
                  |L26.10|
;;;571        }
;;;572        
;;;573    	GPIO_DBNCECON->DBCLKSEL = u32CycleSelection ; 
;;;574    
;;;575    	GPIO_DBNCECON->DBCLKSRC = ClockSource ; 
;;;576    
;;;577        return E_SUCCESS;
;;;578    }
00000a  bd10              POP      {r4,pc}
                  |L26.12|
00000c  480b              LDR      r0,|L26.60|
00000e  6800              LDR      r0,[r0,#0]            ;573
000010  0900              LSRS     r0,r0,#4              ;573
000012  0100              LSLS     r0,r0,#4              ;573
000014  0713              LSLS     r3,r2,#28             ;573
000016  0f1b              LSRS     r3,r3,#28             ;573
000018  4318              ORRS     r0,r0,r3              ;573
00001a  4b08              LDR      r3,|L26.60|
00001c  6018              STR      r0,[r3,#0]            ;573
00001e  4618              MOV      r0,r3                 ;575
000020  6800              LDR      r0,[r0,#0]            ;575
000022  2310              MOVS     r3,#0x10              ;575
000024  4398              BICS     r0,r0,r3              ;575
000026  010b              LSLS     r3,r1,#4              ;575
000028  2410              MOVS     r4,#0x10              ;575
00002a  4023              ANDS     r3,r3,r4              ;575
00002c  4318              ORRS     r0,r0,r3              ;575
00002e  4b03              LDR      r3,|L26.60|
000030  6018              STR      r0,[r3,#0]            ;575
000032  2000              MOVS     r0,#0                 ;577
000034  e7e9              B        |L26.10|
;;;579    
                          ENDP

000036  0000              DCW      0x0000
                  |L26.56|
                          DCD      0xffff8901
                  |L26.60|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_SetIntCallback||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetIntCallback PROC
;;;720    /*---------------------------------------------------------------------------------------------------------*/
;;;721    void DrvGPIO_SetIntCallback(GPIO_GPAB_CALLBACK pfGPABCallback, GPIO_GPCDE_CALLBACK pfGPCDECallback)
000000  4a02              LDR      r2,|L27.12|
;;;722    {
;;;723        _pfGPABCallback  = (void (*)(uint32_t, uint32_t))pfGPABCallback;
000002  6010              STR      r0,[r2,#0]  ; _pfGPABCallback
;;;724        _pfGPCDECallback = (void (*)(uint32_t, uint32_t, uint32_t))pfGPCDECallback;    
000004  4a02              LDR      r2,|L27.16|
000006  6011              STR      r1,[r2,#0]  ; _pfGPCDECallback
;;;725    }
000008  4770              BX       lr
;;;726    
                          ENDP

00000a  0000              DCW      0x0000
                  |L27.12|
                          DCD      _pfGPABCallback
                  |L27.16|
                          DCD      _pfGPCDECallback

                          AREA ||i.DrvGPIO_SetPortBits||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetPortBits PROC
;;;278    /*---------------------------------------------------------------------------------------------------------*/
;;;279    int32_t DrvGPIO_SetPortBits(E_DRVGPIO_PORT port,int32_t i32Data)
000000  b510              PUSH     {r4,lr}
;;;280    {
000002  4602              MOV      r2,r0
;;;281        GPIO_T * tGPIO;
;;;282    
;;;283    	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
000004  0190              LSLS     r0,r2,#6
000006  4c02              LDR      r4,|L28.16|
000008  1903              ADDS     r3,r0,r4
;;;284    
;;;285    	tGPIO->DOUT = i32Data;
00000a  6099              STR      r1,[r3,#8]
;;;286    
;;;287        return E_SUCCESS;
00000c  2000              MOVS     r0,#0
;;;288    }
00000e  bd10              POP      {r4,pc}
;;;289    
                          ENDP

                  |L28.16|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_SetPortMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetPortMask PROC
;;;450    /*---------------------------------------------------------------------------------------------------------*/
;;;451    int32_t DrvGPIO_SetPortMask(E_DRVGPIO_PORT port, int32_t i32MaskData)
000000  b510              PUSH     {r4,lr}
;;;452    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;453        outpw((uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET), DrvGPIO_GetPortMask(port) | i32MaskData);
000006  4618              MOV      r0,r3
000008  f7fffffe          BL       DrvGPIO_GetPortMask
00000c  4320              ORRS     r0,r0,r4
00000e  4902              LDR      r1,|L29.24|
000010  019a              LSLS     r2,r3,#6
000012  5088              STR      r0,[r1,r2]
;;;454    
;;;455        return E_SUCCESS;
000014  2000              MOVS     r0,#0
;;;456    }
000016  bd10              POP      {r4,pc}
;;;457    
                          ENDP

                  |L29.24|
                          DCD      0x5000400c

                          AREA ||i.EINT0_IRQHandler||, CODE, READONLY, ALIGN=2

                  EINT0_IRQHandler PROC
;;;71     /*---------------------------------------------------------------------------------------------------------*/
;;;72     void EINT0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74         /* EINT0 = GPB14. Clear the interrupt */
;;;75       	GPIOB->ISRC  = 1UL << 14;
000002  2001              MOVS     r0,#1
000004  0380              LSLS     r0,r0,#14
000006  4905              LDR      r1,|L30.28|
000008  6208              STR      r0,[r1,#0x20]
;;;76     	if ( _pfEINT0Callback )
00000a  4805              LDR      r0,|L30.32|
00000c  6800              LDR      r0,[r0,#0]  ; _pfEINT0Callback
00000e  2800              CMP      r0,#0
000010  d002              BEQ      |L30.24|
;;;77             _pfEINT0Callback();
000012  4803              LDR      r0,|L30.32|
000014  6800              LDR      r0,[r0,#0]  ; _pfEINT0Callback
000016  4780              BLX      r0
                  |L30.24|
;;;78     }
000018  bd10              POP      {r4,pc}
;;;79     
                          ENDP

00001a  0000              DCW      0x0000
                  |L30.28|
                          DCD      0x50004040
                  |L30.32|
                          DCD      _pfEINT0Callback

                          AREA ||i.EINT1_IRQHandler||, CODE, READONLY, ALIGN=2

                  EINT1_IRQHandler PROC
;;;82     /*---------------------------------------------------------------------------------------------------------*/
;;;83     void EINT1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85         /* EINT0 = GPB15. Clear the interrupt */
;;;86       	GPIOB->ISRC  = 1UL << 15;
000002  2001              MOVS     r0,#1
000004  03c0              LSLS     r0,r0,#15
000006  4905              LDR      r1,|L31.28|
000008  6208              STR      r0,[r1,#0x20]
;;;87     	if ( _pfEINT1Callback )
00000a  4805              LDR      r0,|L31.32|
00000c  6800              LDR      r0,[r0,#0]  ; _pfEINT1Callback
00000e  2800              CMP      r0,#0
000010  d002              BEQ      |L31.24|
;;;88             _pfEINT1Callback();
000012  4803              LDR      r0,|L31.32|
000014  6800              LDR      r0,[r0,#0]  ; _pfEINT1Callback
000016  4780              BLX      r0
                  |L31.24|
;;;89     }
000018  bd10              POP      {r4,pc}
;;;90     
                          ENDP

00001a  0000              DCW      0x0000
                  |L31.28|
                          DCD      0x50004040
                  |L31.32|
                          DCD      _pfEINT1Callback

                          AREA ||i.GPAB_IRQHandler||, CODE, READONLY, ALIGN=2

                  GPAB_IRQHandler PROC
;;;29     /*---------------------------------------------------------------------------------------------------------*/
;;;30     void GPAB_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;31     {
;;;32     	uint32_t u32GPAStatus, u32GPBStatus;
;;;33     	
;;;34         /* Keep the interrupt source */
;;;35     	u32GPAStatus = GPIOA->ISRC;
000002  480a              LDR      r0,|L32.44|
000004  6a04              LDR      r4,[r0,#0x20]
;;;36     	u32GPBStatus = GPIOB->ISRC;
000006  4809              LDR      r0,|L32.44|
000008  3040              ADDS     r0,r0,#0x40
00000a  6a05              LDR      r5,[r0,#0x20]
;;;37     
;;;38         /* Clear the interrupt */
;;;39         GPIOA->ISRC = u32GPAStatus;
00000c  4807              LDR      r0,|L32.44|
00000e  6204              STR      r4,[r0,#0x20]
;;;40         GPIOB->ISRC = u32GPBStatus;
000010  4806              LDR      r0,|L32.44|
000012  3040              ADDS     r0,r0,#0x40
000014  6205              STR      r5,[r0,#0x20]
;;;41     
;;;42         /* Call the callback function of GPIOAB interrupt */
;;;43         if ( _pfGPABCallback )
000016  4806              LDR      r0,|L32.48|
000018  6800              LDR      r0,[r0,#0]  ; _pfGPABCallback
00001a  2800              CMP      r0,#0
00001c  d004              BEQ      |L32.40|
;;;44             _pfGPABCallback(u32GPAStatus, u32GPBStatus);    
00001e  4629              MOV      r1,r5
000020  4620              MOV      r0,r4
000022  4a03              LDR      r2,|L32.48|
000024  6812              LDR      r2,[r2,#0]  ; _pfGPABCallback
000026  4790              BLX      r2
                  |L32.40|
;;;45     }
000028  bd70              POP      {r4-r6,pc}
;;;46     
                          ENDP

00002a  0000              DCW      0x0000
                  |L32.44|
                          DCD      0x50004000
                  |L32.48|
                          DCD      _pfGPABCallback

                          AREA ||i.GPCDE_IRQHandler||, CODE, READONLY, ALIGN=2

                  GPCDE_IRQHandler PROC
;;;49     /*---------------------------------------------------------------------------------------------------------*/
;;;50     void GPCDE_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;51     {
;;;52     	uint32_t u32GPCStatus, u32GPDStatus, u32GPEStatus;
;;;53     	
;;;54         /* Keep the interrupt source */
;;;55     	u32GPCStatus = GPIOC->ISRC;
000002  480d              LDR      r0,|L33.56|
000004  6a04              LDR      r4,[r0,#0x20]
;;;56     	u32GPDStatus = GPIOD->ISRC;
000006  480c              LDR      r0,|L33.56|
000008  3040              ADDS     r0,r0,#0x40
00000a  6a05              LDR      r5,[r0,#0x20]
;;;57     	u32GPEStatus = GPIOE->ISRC;
00000c  480a              LDR      r0,|L33.56|
00000e  3080              ADDS     r0,r0,#0x80
000010  6a06              LDR      r6,[r0,#0x20]
;;;58     
;;;59         /* Clear the interrupt */
;;;60         GPIOC->ISRC = u32GPCStatus;
000012  4809              LDR      r0,|L33.56|
000014  6204              STR      r4,[r0,#0x20]
;;;61         GPIOD->ISRC = u32GPDStatus;
000016  4808              LDR      r0,|L33.56|
000018  3040              ADDS     r0,r0,#0x40
00001a  6205              STR      r5,[r0,#0x20]
;;;62         GPIOE->ISRC = u32GPEStatus;
00001c  4806              LDR      r0,|L33.56|
00001e  3080              ADDS     r0,r0,#0x80
000020  6206              STR      r6,[r0,#0x20]
;;;63     
;;;64         /* Call the callback function of GPIOAB interrupt */
;;;65         if ( _pfGPCDECallback )
000022  4806              LDR      r0,|L33.60|
000024  6800              LDR      r0,[r0,#0]  ; _pfGPCDECallback
000026  2800              CMP      r0,#0
000028  d005              BEQ      |L33.54|
;;;66             _pfGPCDECallback(u32GPCStatus, u32GPDStatus, u32GPEStatus);    
00002a  4632              MOV      r2,r6
00002c  4629              MOV      r1,r5
00002e  4620              MOV      r0,r4
000030  4b02              LDR      r3,|L33.60|
000032  681b              LDR      r3,[r3,#0]  ; _pfGPCDECallback
000034  4798              BLX      r3
                  |L33.54|
;;;67     }
000036  bd70              POP      {r4-r6,pc}
;;;68     
                          ENDP

                  |L33.56|
                          DCD      0x50004080
                  |L33.60|
                          DCD      _pfGPCDECallback

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L34.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L34.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L35.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L35.16|
                          DCD      0xe000e100

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;866     */
;;;867    static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;868    {
;;;869      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L36.58|
;;;870        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
000006  4a1a              LDR      r2,|L36.112|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L36.112|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L36.108|
                  |L36.58|
;;;871            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;872      else {
;;;873        NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L36.116|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L36.116|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L36.108|
;;;874            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;875    }
00006c  bd10              POP      {r4,pc}
;;;876    
                          ENDP

00006e  0000              DCW      0x0000
                  |L36.112|
                          DCD      0xe000ed1c
                  |L36.116|
                          DCD      0xe000e100

                          AREA ||.data||, DATA, ALIGN=2

                  _pfGPABCallback
                          DCD      0x00000000
                  _pfGPCDECallback
                          DCD      0x00000000
                  _pfEINT0Callback
                          DCD      0x00000000
                  _pfEINT1Callback
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L222.16|
00000e  461d              MOV      r5,r3
                  |L222.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

