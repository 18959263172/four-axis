; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvpdma.o --depend=.\obj\drvpdma.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvpdma.crf ..\BSP_Lib\Src\Driver\DrvPDMA.c]
                          THUMB

                          AREA ||i.DrvPDMA_CHEnableTransfer||, CODE, READONLY, ALIGN=2

                  DrvPDMA_CHEnableTransfer PROC
;;;440    
;;;441    int32_t	DrvPDMA_CHEnableTransfer(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4602              MOV      r2,r0
;;;442    {
;;;443        volatile uint32_t u32SFR;
;;;444    	PDMA_T * tPDMA;
;;;445        																		/* Check PDMA Channel is Valid */
;;;446        if (eChannel > MAX_CHANNEL_NUM  )	    						        /* Check Channel is valid */
000002  2a09              CMP      r2,#9
000004  dd01              BLE      |L1.10|
;;;447            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4808              LDR      r0,|L1.40|
                  |L1.8|
;;;448                
;;;449       	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET);
;;;450    
;;;451        tPDMA->CSR.PDMACEN = 1;
;;;452        tPDMA->CSR.TRIG_EN = 1;												   /* PDMA Channl & Trigger Enable */
;;;453    
;;;454        return E_SUCCESS;      
;;;455    }
000008  4770              BX       lr
                  |L1.10|
00000a  0210              LSLS     r0,r2,#8              ;449
00000c  4b07              LDR      r3,|L1.44|
00000e  18c1              ADDS     r1,r0,r3              ;449
000010  6808              LDR      r0,[r1,#0]            ;451
000012  0840              LSRS     r0,r0,#1              ;451
000014  0040              LSLS     r0,r0,#1              ;451
000016  1c40              ADDS     r0,r0,#1              ;451
000018  6008              STR      r0,[r1,#0]            ;451
00001a  6808              LDR      r0,[r1,#0]            ;452
00001c  021b              LSLS     r3,r3,#8              ;452
00001e  4398              BICS     r0,r0,r3              ;452
000020  18c0              ADDS     r0,r0,r3              ;452
000022  6008              STR      r0,[r1,#0]            ;452
000024  2000              MOVS     r0,#0                 ;454
000026  e7ef              B        |L1.8|
;;;456    
                          ENDP

                  |L1.40|
                          DCD      0xffff9082
                  |L1.44|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_CHSoftwareReset||, CODE, READONLY, ALIGN=2

                  DrvPDMA_CHSoftwareReset PROC
;;;412    /*---------------------------------------------------------------------------------------------------------*/
;;;413    int32_t DrvPDMA_CHSoftwareReset(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;414    {
;;;415    	PDMA_T * tPDMA;
;;;416    	    
;;;417        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000002  2909              CMP      r1,#9
000004  dd01              BLE      |L2.10|
;;;418            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4806              LDR      r0,|L2.32|
                  |L2.8|
;;;419    
;;;420    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;421     
;;;422       	tPDMA->CSR.SW_RST = 1;											   /* Set S/W Reset Bit */
;;;423     	
;;;424        return E_SUCCESS;     
;;;425    }
000008  4770              BX       lr
                  |L2.10|
00000a  0208              LSLS     r0,r1,#8              ;420
00000c  4b05              LDR      r3,|L2.36|
00000e  18c2              ADDS     r2,r0,r3              ;420
000010  6810              LDR      r0,[r2,#0]            ;422
000012  2302              MOVS     r3,#2                 ;422
000014  4398              BICS     r0,r0,r3              ;422
000016  1c80              ADDS     r0,r0,#2              ;422
000018  6010              STR      r0,[r2,#0]            ;422
00001a  2000              MOVS     r0,#0                 ;424
00001c  e7f4              B        |L2.8|
;;;426    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0xffff9082
                  |L2.36|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  DrvPDMA_ClearIntFlag PROC
;;;563    /*---------------------------------------------------------------------------------------------------------*/
;;;564    void DrvPDMA_ClearIntFlag(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_FLAG eIntFlag)
000000  b510              PUSH     {r4,lr}
;;;565    {
;;;566        volatile uint32_t u32SFR;
;;;567    	
;;;568    	u32SFR = (uint32_t)&PDMA0->ISR + eChannel * CHANNEL_OFFSET; 
000002  4b02              LDR      r3,|L3.12|
000004  0204              LSLS     r4,r0,#8
000006  191a              ADDS     r2,r3,r4
;;;569        
;;;570        outpw(u32SFR, eIntFlag);
000008  6011              STR      r1,[r2,#0]
;;;571    }
00000a  bd10              POP      {r4,pc}
;;;572    						  
                          ENDP

                  |L3.12|
                          DCD      0x50008024

                          AREA ||i.DrvPDMA_Close||, CODE, READONLY, ALIGN=2

                  DrvPDMA_Close PROC
;;;64     /*---------------------------------------------------------------------------------------------------------*/
;;;65     void DrvPDMA_Close(void)
000000  2000              MOVS     r0,#0
;;;66     {
;;;67        	/* Disable All PDMA clock */
;;;68     	outpw(&PDMA_GCR->GCRCSR,0x0);
000002  4909              LDR      r1,|L4.40|
000004  6008              STR      r0,[r1,#0]
;;;69     	
;;;70     	/* Disable PDMA clock */
;;;71     	UNLOCKREG();
000006  2059              MOVS     r0,#0x59
000008  4908              LDR      r1,|L4.44|
00000a  6008              STR      r0,[r1,#0]
00000c  2016              MOVS     r0,#0x16
00000e  6008              STR      r0,[r1,#0]
000010  2088              MOVS     r0,#0x88
000012  6008              STR      r0,[r1,#0]
;;;72     	SYSCLK->AHBCLK.PDMA_EN  =0;
000014  4806              LDR      r0,|L4.48|
000016  6840              LDR      r0,[r0,#4]
000018  2102              MOVS     r1,#2
00001a  4388              BICS     r0,r0,r1
00001c  4904              LDR      r1,|L4.48|
00001e  6048              STR      r0,[r1,#4]
;;;73     	LOCKREG();					
000020  2000              MOVS     r0,#0
000022  4902              LDR      r1,|L4.44|
000024  6008              STR      r0,[r1,#0]
;;;74     	
;;;75     }
000026  4770              BX       lr
;;;76     
                          ENDP

                  |L4.40|
                          DCD      0x50008f00
                  |L4.44|
                          DCD      0x50000100
                  |L4.48|
                          DCD      0x50000200

                          AREA ||i.DrvPDMA_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvPDMA_DisableInt PROC
;;;503    
;;;504    int32_t DrvPDMA_DisableInt(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_ENABLE eIntSource)
000000  b510              PUSH     {r4,lr}
;;;505    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;506        PDMA_T * tPDMA;
;;;507    	
;;;508        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000006  2a09              CMP      r2,#9
000008  dd01              BLE      |L5.14|
;;;509            return E_DRVPDMA_ERR_PORT_INVALID;    
00000a  480a              LDR      r0,|L5.52|
                  |L5.12|
;;;510    
;;;511    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;512    	
;;;513    	if((eIntSource&eDRVPDMA_TABORT)!=0)					 					/* Disable Specified Interrupt */
;;;514    		tPDMA->IER.TABORT_IE = 0;
;;;515    
;;;516    	if((eIntSource&eDRVPDMA_BLKD)!=0)
;;;517    		tPDMA->IER.BLKD_IE = 0;
;;;518    
;;;519    	return E_SUCCESS; 
;;;520    }
00000c  bd10              POP      {r4,pc}
                  |L5.14|
00000e  0210              LSLS     r0,r2,#8              ;511
000010  4c09              LDR      r4,|L5.56|
000012  1901              ADDS     r1,r0,r4              ;511
000014  07d8              LSLS     r0,r3,#31             ;513
000016  0fc0              LSRS     r0,r0,#31             ;513
000018  d003              BEQ      |L5.34|
00001a  6a08              LDR      r0,[r1,#0x20]         ;514
00001c  0840              LSRS     r0,r0,#1              ;514
00001e  0040              LSLS     r0,r0,#1              ;514
000020  6208              STR      r0,[r1,#0x20]         ;514
                  |L5.34|
000022  2002              MOVS     r0,#2                 ;516
000024  4203              TST      r3,r0                 ;516
000026  d003              BEQ      |L5.48|
000028  6a08              LDR      r0,[r1,#0x20]         ;517
00002a  2402              MOVS     r4,#2                 ;517
00002c  43a0              BICS     r0,r0,r4              ;517
00002e  6208              STR      r0,[r1,#0x20]         ;517
                  |L5.48|
000030  2000              MOVS     r0,#0                 ;519
000032  e7eb              B        |L5.12|
;;;521    
                          ENDP

                  |L5.52|
                          DCD      0xffff9082
                  |L5.56|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvPDMA_EnableInt PROC
;;;469    /*---------------------------------------------------------------------------------------------------------*/
;;;470    int32_t DrvPDMA_EnableInt(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_ENABLE eIntSource)
000000  b510              PUSH     {r4,lr}
;;;471    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;472        PDMA_T * tPDMA;
;;;473    
;;;474        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000006  2a09              CMP      r2,#9
000008  dd01              BLE      |L6.14|
;;;475            return E_DRVPDMA_ERR_PORT_INVALID;    
00000a  480f              LDR      r0,|L6.72|
                  |L6.12|
;;;476    			
;;;477    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;478    	
;;;479    	if((eIntSource&eDRVPDMA_TABORT)!=0)
;;;480    		tPDMA->IER.TABORT_IE = 1;
;;;481    
;;;482    	if((eIntSource&eDRVPDMA_BLKD)!=0)
;;;483    		tPDMA->IER.BLKD_IE = 1;
;;;484    	    
;;;485        /* Enable Specified Interrupt */
;;;486    	NVIC_EnableIRQ(PDMA_IRQn);  
;;;487       
;;;488        return E_SUCCESS;      
;;;489    }
00000c  bd10              POP      {r4,pc}
                  |L6.14|
00000e  0210              LSLS     r0,r2,#8              ;477
000010  4c0e              LDR      r4,|L6.76|
000012  1901              ADDS     r1,r0,r4              ;477
000014  07d8              LSLS     r0,r3,#31             ;479
000016  0fc0              LSRS     r0,r0,#31             ;479
000018  d004              BEQ      |L6.36|
00001a  6a08              LDR      r0,[r1,#0x20]         ;480
00001c  0840              LSRS     r0,r0,#1              ;480
00001e  0040              LSLS     r0,r0,#1              ;480
000020  1c40              ADDS     r0,r0,#1              ;480
000022  6208              STR      r0,[r1,#0x20]         ;480
                  |L6.36|
000024  2002              MOVS     r0,#2                 ;482
000026  4203              TST      r3,r0                 ;482
000028  d004              BEQ      |L6.52|
00002a  6a08              LDR      r0,[r1,#0x20]         ;483
00002c  2402              MOVS     r4,#2                 ;483
00002e  43a0              BICS     r0,r0,r4              ;483
000030  1c80              ADDS     r0,r0,#2              ;483
000032  6208              STR      r0,[r1,#0x20]         ;483
                  |L6.52|
000034  bf00              NOP                            ;486
000036  201a              MOVS     r0,#0x1a              ;486
000038  2401              MOVS     r4,#1                 ;486
00003a  4084              LSLS     r4,r4,r0              ;486
00003c  4804              LDR      r0,|L6.80|
00003e  6004              STR      r4,[r0,#0]            ;486
000040  bf00              NOP                            ;486
000042  2000              MOVS     r0,#0                 ;488
000044  e7e2              B        |L6.12|
;;;490    
                          ENDP

000046  0000              DCW      0x0000
                  |L6.72|
                          DCD      0xffff9082
                  |L6.76|
                          DCD      0x50008000
                  |L6.80|
                          DCD      0xe000e100

                          AREA ||i.DrvPDMA_GetAPBTransferWidth||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetAPBTransferWidth PROC
;;;226    /*---------------------------------------------------------------------------------------------------------*/
;;;227    int32_t DrvPDMA_GetAPBTransferWidth(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;228    {
;;;229     	PDMA_T * tPDMA;
;;;230    	   																		/* Check Channel is valid */
;;;231        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000002  2909              CMP      r1,#9
000004  dd01              BLE      |L7.10|
;;;232            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4804              LDR      r0,|L7.24|
                  |L7.8|
;;;233    
;;;234    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;235    
;;;236    	return (int32_t)(tPDMA->CSR.APB_TWS);            					    /* Get Transfer Length */   
;;;237    }
000008  4770              BX       lr
                  |L7.10|
00000a  0208              LSLS     r0,r1,#8              ;234
00000c  4b03              LDR      r3,|L7.28|
00000e  18c2              ADDS     r2,r0,r3              ;234
000010  6810              LDR      r0,[r2,#0]            ;236
000012  02c0              LSLS     r0,r0,#11             ;236
000014  0f80              LSRS     r0,r0,#30             ;236
000016  e7f7              B        |L7.8|
;;;238    
                          ENDP

                  |L7.24|
                          DCD      0xffff9082
                  |L7.28|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetCHForAPBDevice||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetCHForAPBDevice PROC
;;;342    /*---------------------------------------------------------------------------------------------------------*/
;;;343    int32_t DrvPDMA_GetCHForAPBDevice(E_DRVPDMA_APB_DEVICE eDevice,E_DRVPDMA_APB_RW eRWAPB)
000000  b500              PUSH     {lr}
;;;344    {
000002  4602              MOV      r2,r0
;;;345      
;;;346    	switch(eDevice)
000004  4613              MOV      r3,r2
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0906              DCB      0x09,0x06
00000c  121e2a35          DCB      0x12,0x1e,0x2a,0x35
000010  41644d58          DCB      0x41,0x64,0x4d,0x58
000014  6400              DCB      0x64,0x00
;;;347    	{
;;;348    		case eDRVPDMA_SPI0:
;;;349    			if(eRWAPB)	  
000016  2900              CMP      r1,#0
000018  d004              BEQ      |L8.36|
;;;350    				return PDMA_GCR->PDSSR0.SPI0_TXSEL;						 	/* Get SPI0 PDMA Channel */
00001a  482f              LDR      r0,|L8.216|
00001c  6840              LDR      r0,[r0,#4]
00001e  0600              LSLS     r0,r0,#24
000020  0f00              LSRS     r0,r0,#28
                  |L8.34|
;;;351    			else
;;;352    				return PDMA_GCR->PDSSR0.SPI0_RXSEL;
;;;353    	   		
;;;354    	   	case eDRVPDMA_SPI1:												 	/* Get SPI1 PDMA Channel */
;;;355    			if(eRWAPB)	  
;;;356    				return PDMA_GCR->PDSSR0.SPI1_TXSEL;
;;;357    			else
;;;358    				return PDMA_GCR->PDSSR0.SPI1_RXSEL;
;;;359    	   		
;;;360    		case eDRVPDMA_SPI2:												 	/* Get SPI2 PDMA Channel */
;;;361    			if(eRWAPB)	
;;;362    				return PDMA_GCR->PDSSR0.SPI2_TXSEL;
;;;363    			else
;;;364    				return PDMA_GCR->PDSSR0.SPI2_RXSEL;
;;;365    	   																	 	
;;;366    		case eDRVPDMA_SPI3:													/* Get SPI3 PDMA Channel */
;;;367    			if(eRWAPB)	
;;;368    				return PDMA_GCR->PDSSR0.SPI3_TXSEL;
;;;369    			else
;;;370    				return PDMA_GCR->PDSSR0.SPI3_RXSEL;
;;;371    	   		
;;;372    		case eDRVPDMA_UART0:											 	/* Get UART0 PDMA Channel */
;;;373    			if(eRWAPB)	
;;;374    				return PDMA_GCR->PDSSR1.UART0_TXSEL;
;;;375    			else
;;;376    				return PDMA_GCR->PDSSR1.UART0_RXSEL;
;;;377    	   		
;;;378    		case eDRVPDMA_UART1:											 	/* Get UART1 PDMA Channel */
;;;379    			if(eRWAPB)	
;;;380    				return PDMA_GCR->PDSSR1.UART1_TXSEL;
;;;381    			else
;;;382    				return PDMA_GCR->PDSSR1.UART1_RXSEL;
;;;383    	   		
;;;384    		case eDRVPDMA_ADC:													/* Get ADC PDMA Channel */
;;;385    			if(eRWAPB)	
;;;386    				return PDMA_GCR->PDSSR1.ADC_TXSEL;
;;;387    			else
;;;388    				return PDMA_GCR->PDSSR1.ADC_RXSEL;
;;;389    
;;;390    		case eDRVPDMA_I2S:													/* Set I2S PDMA Channel */
;;;391    			if(eRWAPB)	
;;;392    				return PDMA_GCR->PDSSR2.I2S_TXSEL;
;;;393    			else								 
;;;394    				return PDMA_GCR->PDSSR2.I2S_RXSEL;
;;;395    	   		
;;;396    		default:
;;;397    			return 	E_DRVPDMA_FALSE_INPUT;
;;;398    	}
;;;399    }
000022  bd00              POP      {pc}
                  |L8.36|
000024  482c              LDR      r0,|L8.216|
000026  6840              LDR      r0,[r0,#4]            ;352
000028  0700              LSLS     r0,r0,#28             ;352
00002a  0f00              LSRS     r0,r0,#28             ;352
00002c  e7f9              B        |L8.34|
00002e  2900              CMP      r1,#0                 ;355
000030  d004              BEQ      |L8.60|
000032  4829              LDR      r0,|L8.216|
000034  6840              LDR      r0,[r0,#4]            ;356
000036  0400              LSLS     r0,r0,#16             ;356
000038  0f00              LSRS     r0,r0,#28             ;356
00003a  e7f2              B        |L8.34|
                  |L8.60|
00003c  4826              LDR      r0,|L8.216|
00003e  6840              LDR      r0,[r0,#4]            ;358
000040  0500              LSLS     r0,r0,#20             ;358
000042  0f00              LSRS     r0,r0,#28             ;358
000044  e7ed              B        |L8.34|
000046  2900              CMP      r1,#0                 ;361
000048  d004              BEQ      |L8.84|
00004a  4823              LDR      r0,|L8.216|
00004c  6840              LDR      r0,[r0,#4]            ;362
00004e  0200              LSLS     r0,r0,#8              ;362
000050  0f00              LSRS     r0,r0,#28             ;362
000052  e7e6              B        |L8.34|
                  |L8.84|
000054  4820              LDR      r0,|L8.216|
000056  6840              LDR      r0,[r0,#4]            ;364
000058  0300              LSLS     r0,r0,#12             ;364
00005a  0f00              LSRS     r0,r0,#28             ;364
00005c  e7e1              B        |L8.34|
00005e  2900              CMP      r1,#0                 ;367
000060  d003              BEQ      |L8.106|
000062  481d              LDR      r0,|L8.216|
000064  6840              LDR      r0,[r0,#4]            ;368
000066  0f00              LSRS     r0,r0,#28             ;368
000068  e7db              B        |L8.34|
                  |L8.106|
00006a  481b              LDR      r0,|L8.216|
00006c  6840              LDR      r0,[r0,#4]            ;370
00006e  0100              LSLS     r0,r0,#4              ;370
000070  0f00              LSRS     r0,r0,#28             ;370
000072  e7d6              B        |L8.34|
000074  2900              CMP      r1,#0                 ;373
000076  d004              BEQ      |L8.130|
000078  4817              LDR      r0,|L8.216|
00007a  6880              LDR      r0,[r0,#8]            ;374
00007c  0600              LSLS     r0,r0,#24             ;374
00007e  0f00              LSRS     r0,r0,#28             ;374
000080  e7cf              B        |L8.34|
                  |L8.130|
000082  4815              LDR      r0,|L8.216|
000084  6880              LDR      r0,[r0,#8]            ;376
000086  0700              LSLS     r0,r0,#28             ;376
000088  0f00              LSRS     r0,r0,#28             ;376
00008a  e7ca              B        |L8.34|
00008c  2900              CMP      r1,#0                 ;379
00008e  d004              BEQ      |L8.154|
000090  4811              LDR      r0,|L8.216|
000092  6880              LDR      r0,[r0,#8]            ;380
000094  0400              LSLS     r0,r0,#16             ;380
000096  0f00              LSRS     r0,r0,#28             ;380
000098  e7c3              B        |L8.34|
                  |L8.154|
00009a  480f              LDR      r0,|L8.216|
00009c  6880              LDR      r0,[r0,#8]            ;382
00009e  0500              LSLS     r0,r0,#20             ;382
0000a0  0f00              LSRS     r0,r0,#28             ;382
0000a2  e7be              B        |L8.34|
0000a4  2900              CMP      r1,#0                 ;385
0000a6  d003              BEQ      |L8.176|
0000a8  480b              LDR      r0,|L8.216|
0000aa  6880              LDR      r0,[r0,#8]            ;386
0000ac  0f00              LSRS     r0,r0,#28             ;386
0000ae  e7b8              B        |L8.34|
                  |L8.176|
0000b0  4809              LDR      r0,|L8.216|
0000b2  6880              LDR      r0,[r0,#8]            ;388
0000b4  0100              LSLS     r0,r0,#4              ;388
0000b6  0f00              LSRS     r0,r0,#28             ;388
0000b8  e7b3              B        |L8.34|
0000ba  2900              CMP      r1,#0                 ;391
0000bc  d004              BEQ      |L8.200|
0000be  4806              LDR      r0,|L8.216|
0000c0  6900              LDR      r0,[r0,#0x10]         ;392
0000c2  0600              LSLS     r0,r0,#24             ;392
0000c4  0f00              LSRS     r0,r0,#28             ;392
0000c6  e7ac              B        |L8.34|
                  |L8.200|
0000c8  4803              LDR      r0,|L8.216|
0000ca  6900              LDR      r0,[r0,#0x10]         ;394
0000cc  0700              LSLS     r0,r0,#28             ;394
0000ce  0f00              LSRS     r0,r0,#28             ;394
0000d0  e7a7              B        |L8.34|
0000d2  4802              LDR      r0,|L8.220|
0000d4  e7a5              B        |L8.34|
;;;400    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L8.216|
                          DCD      0x50008f00
                  |L8.220|
                          DCD      0xffff9081

                          AREA ||i.DrvPDMA_GetCurrentDestAddr||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetCurrentDestAddr PROC
;;;734    /*---------------------------------------------------------------------------------------------------------*/
;;;735    uint32_t DrvPDMA_GetCurrentDestAddr(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;736    {
;;;737        volatile uint32_t u32SFR;
;;;738        
;;;739    	u32SFR = (uint32_t)&PDMA0->CDAR + eChannel * CHANNEL_OFFSET;
000002  4802              LDR      r0,|L9.12|
000004  020b              LSLS     r3,r1,#8
000006  18c2              ADDS     r2,r0,r3
;;;740        
;;;741        return inpw(u32SFR);      
000008  6810              LDR      r0,[r2,#0]
;;;742    }
00000a  4770              BX       lr
;;;743    
                          ENDP

                  |L9.12|
                          DCD      0x50008018

                          AREA ||i.DrvPDMA_GetCurrentSourceAddr||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetCurrentSourceAddr PROC
;;;715    /*---------------------------------------------------------------------------------------------------------*/
;;;716    uint32_t DrvPDMA_GetCurrentSourceAddr(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;717    {
;;;718        volatile uint32_t u32SFR;
;;;719        
;;;720        u32SFR = (uint32_t)&PDMA0->CSAR + eChannel * CHANNEL_OFFSET;    
000002  4802              LDR      r0,|L10.12|
000004  020b              LSLS     r3,r1,#8
000006  18c2              ADDS     r2,r0,r3
;;;721    
;;;722        return inpw(u32SFR);      
000008  6810              LDR      r0,[r2,#0]
;;;723    }
00000a  4770              BX       lr
;;;724    
                          ENDP

                  |L10.12|
                          DCD      0x50008014

                          AREA ||i.DrvPDMA_GetInternalBufPointer||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetInternalBufPointer PROC
;;;602    /*---------------------------------------------------------------------------------------------------------*/
;;;603    uint32_t DrvPDMA_GetInternalBufPointer(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;604    {
;;;605     	PDMA_T * tPDMA;
;;;606        
;;;607        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000002  2909              CMP      r1,#9
000004  dd01              BLE      |L11.10|
;;;608            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4803              LDR      r0,|L11.20|
                  |L11.8|
;;;609       
;;;610    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;611    
;;;612    	return (uint32_t)(tPDMA->POINT);
;;;613    }
000008  4770              BX       lr
                  |L11.10|
00000a  0208              LSLS     r0,r1,#8              ;610
00000c  4b02              LDR      r3,|L11.24|
00000e  18c2              ADDS     r2,r0,r3              ;610
000010  6910              LDR      r0,[r2,#0x10]         ;612
000012  e7f9              B        |L11.8|
;;;614    
                          ENDP

                  |L11.20|
                          DCD      0xffff9082
                  |L11.24|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetRemainTransferCount||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetRemainTransferCount PROC
;;;753    /*---------------------------------------------------------------------------------------------------------*/
;;;754    uint32_t DrvPDMA_GetRemainTransferCount(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;755    {
;;;756        volatile uint32_t u32SFR;
;;;757        
;;;758        u32SFR = (uint32_t)&PDMA0->CBCR + eChannel * CHANNEL_OFFSET;
000002  4802              LDR      r0,|L12.12|
000004  020b              LSLS     r3,r1,#8
000006  18c2              ADDS     r2,r0,r3
;;;759        
;;;760    	return inpw(u32SFR);   
000008  6810              LDR      r0,[r2,#0]
;;;761    }
00000a  4770              BX       lr
;;;762    
                          ENDP

                  |L12.12|
                          DCD      0x5000801c

                          AREA ||i.DrvPDMA_GetSharedBufData||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetSharedBufData PROC
;;;624    /*---------------------------------------------------------------------------------------------------------*/
;;;625    uint32_t DrvPDMA_GetSharedBufData(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;626    {
;;;627        volatile uint32_t u32SFR;
;;;628        
;;;629        u32SFR = (uint32_t)&PDMA0->SBUF + eChannel * CHANNEL_OFFSET;  
000002  4802              LDR      r0,|L13.12|
000004  020b              LSLS     r3,r1,#8
000006  18c2              ADDS     r2,r0,r3
;;;630        
;;;631        return inpw(u32SFR);
000008  6810              LDR      r0,[r2,#0]
;;;632    }
00000a  4770              BX       lr
;;;633    
                          ENDP

                  |L13.12|
                          DCD      0x50008028

                          AREA ||i.DrvPDMA_GetTransferLength||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetTransferLength PROC
;;;169    /*---------------------------------------------------------------------------------------------------------*/
;;;170    int32_t DrvPDMA_GetTransferLength(E_DRVPDMA_CHANNEL_INDEX eChannel, uint32_t* pu32TransferLength)
000000  b510              PUSH     {r4,lr}
;;;171    {
000002  4602              MOV      r2,r0
;;;172    	PDMA_T * tPDMA;
;;;173        
;;;174        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000004  2a09              CMP      r2,#9
000006  dd01              BLE      |L14.12|
;;;175            return E_DRVPDMA_ERR_PORT_INVALID;    
000008  4804              LDR      r0,|L14.28|
                  |L14.10|
;;;176        
;;;177    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;178    	
;;;179    	*pu32TransferLength = tPDMA->BCR;      								    /* Get Transfer Length */
;;;180    
;;;181        return E_SUCCESS;       
;;;182    }
00000a  bd10              POP      {r4,pc}
                  |L14.12|
00000c  0210              LSLS     r0,r2,#8              ;177
00000e  4c04              LDR      r4,|L14.32|
000010  1903              ADDS     r3,r0,r4              ;177
000012  68d8              LDR      r0,[r3,#0xc]          ;179
000014  6008              STR      r0,[r1,#0]            ;179
000016  2000              MOVS     r0,#0                 ;181
000018  e7f7              B        |L14.10|
;;;183    
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      0xffff9082
                  |L14.32|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetVersion PROC
;;;773    /*---------------------------------------------------------------------------------------------------------*/
;;;774    int32_t DrvPDMA_GetVersion(void)
000000  4800              LDR      r0,|L15.4|
;;;775    {
;;;776    	return DRVPDMA_VERSION_NUM;
;;;777    }
000002  4770              BX       lr
;;;778    
                          ENDP

                  |L15.4|
                          DCD      0x00010202

                          AREA ||i.DrvPDMA_Init||, CODE, READONLY, ALIGN=2

                  DrvPDMA_Init PROC
;;;45     /*---------------------------------------------------------------------------------------------------------*/
;;;46     void DrvPDMA_Init(void)
000000  2059              MOVS     r0,#0x59
;;;47     {
;;;48         UNLOCKREG();
000002  4908              LDR      r1,|L16.36|
000004  6008              STR      r0,[r1,#0]
000006  2016              MOVS     r0,#0x16
000008  6008              STR      r0,[r1,#0]
00000a  2088              MOVS     r0,#0x88
00000c  6008              STR      r0,[r1,#0]
;;;49     
;;;50     	/* Enable PDMA Clock */
;;;51     	SYSCLK->AHBCLK.PDMA_EN  =1;		 	
00000e  4806              LDR      r0,|L16.40|
000010  6840              LDR      r0,[r0,#4]
000012  2102              MOVS     r1,#2
000014  4388              BICS     r0,r0,r1
000016  1c80              ADDS     r0,r0,#2
000018  4903              LDR      r1,|L16.40|
00001a  6048              STR      r0,[r1,#4]
;;;52     	LOCKREG();
00001c  2000              MOVS     r0,#0
00001e  4901              LDR      r1,|L16.36|
000020  6008              STR      r0,[r1,#0]
;;;53     }
000022  4770              BX       lr
;;;54     
                          ENDP

                  |L16.36|
                          DCD      0x50000100
                  |L16.40|
                          DCD      0x50000200

                          AREA ||i.DrvPDMA_InstallCallBack||, CODE, READONLY, ALIGN=2

                  DrvPDMA_InstallCallBack PROC
;;;689    /*---------------------------------------------------------------------------------------------------------*/
;;;690    int32_t DrvPDMA_InstallCallBack(
000000  b510              PUSH     {r4,lr}
;;;691    	E_DRVPDMA_CHANNEL_INDEX eChannel, 
;;;692        E_DRVPDMA_INT_ENABLE eIntSource,
;;;693    	PFN_DRVPDMA_CALLBACK pfncallback   
;;;694    )
;;;695    {
000002  4603              MOV      r3,r0
;;;696      
;;;697        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000004  2b09              CMP      r3,#9
000006  dd01              BLE      |L17.12|
;;;698            return E_DRVPDMA_ERR_PORT_INVALID;    
000008  4805              LDR      r0,|L17.32|
                  |L17.10|
;;;699    
;;;700    	g_pfnPDMACallback[eChannel][eIntSource>>1] = pfncallback;	       /* Install Callback funtion */
;;;701    	
;;;702        return E_SUCCESS;      
;;;703    }
00000a  bd10              POP      {r4,pc}
                  |L17.12|
00000c  200c              MOVS     r0,#0xc               ;700
00000e  4358              MULS     r0,r3,r0              ;700
000010  4c04              LDR      r4,|L17.36|
000012  1900              ADDS     r0,r0,r4              ;700
000014  104c              ASRS     r4,r1,#1              ;700
000016  00a4              LSLS     r4,r4,#2              ;700
000018  5102              STR      r2,[r0,r4]            ;700
00001a  2000              MOVS     r0,#0                 ;702
00001c  e7f5              B        |L17.10|
;;;704    
                          ENDP

00001e  0000              DCW      0x0000
                  |L17.32|
                          DCD      0xffff9082
                  |L17.36|
                          DCD      g_pfnPDMACallback

                          AREA ||i.DrvPDMA_IsCHBusy||, CODE, READONLY, ALIGN=2

                  DrvPDMA_IsCHBusy PROC
;;;141    /*---------------------------------------------------------------------------------------------------------*/
;;;142    int32_t DrvPDMA_IsCHBusy(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;143    {
;;;144      	PDMA_T * tPDMA;
;;;145        
;;;146        if (eChannel > MAX_CHANNEL_NUM  )	    						       /* Check Channel is valid */
000002  2909              CMP      r1,#9
000004  dd01              BLE      |L18.10|
;;;147            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4804              LDR      r0,|L18.24|
                  |L18.8|
;;;148     
;;;149     	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;150    
;;;151    	return (tPDMA->CSR.TRIG_EN)?TRUE:FALSE;								   /* Check Channel is triggering or not */
;;;152    }
000008  4770              BX       lr
                  |L18.10|
00000a  0208              LSLS     r0,r1,#8              ;149
00000c  4b03              LDR      r3,|L18.28|
00000e  18c2              ADDS     r2,r0,r3              ;149
000010  6810              LDR      r0,[r2,#0]            ;151
000012  0200              LSLS     r0,r0,#8              ;151
000014  0fc0              LSRS     r0,r0,#31             ;151
000016  e7f7              B        |L18.8|
;;;153    
                          ENDP

                  |L18.24|
                          DCD      0xffff9082
                  |L18.28|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_IsIntEnabled||, CODE, READONLY, ALIGN=2

                  DrvPDMA_IsIntEnabled PROC
;;;533    /*---------------------------------------------------------------------------------------------------------*/
;;;534    int32_t	DrvPDMA_IsIntEnabled(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_ENABLE eIntSource )
000000  b510              PUSH     {r4,lr}
;;;535    {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;536    	PDMA_T * tPDMA;
;;;537    
;;;538    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
000006  0218              LSLS     r0,r3,#8
000008  4c0b              LDR      r4,|L19.56|
00000a  1901              ADDS     r1,r0,r4
;;;539    	
;;;540    	if(eIntSource==eDRVPDMA_TABORT)
00000c  2a01              CMP      r2,#1
00000e  d106              BNE      |L19.30|
;;;541    	{
;;;542    	  if(tPDMA->IER.TABORT_IE==1)
000010  6a08              LDR      r0,[r1,#0x20]
000012  4010              ANDS     r0,r0,r2
000014  2801              CMP      r0,#1
000016  d102              BNE      |L19.30|
;;;543            return (tPDMA->IER.TABORT_IE)?TRUE:FALSE;
000018  6a08              LDR      r0,[r1,#0x20]
00001a  4010              ANDS     r0,r0,r2
                  |L19.28|
;;;544    	}
;;;545    	if(eIntSource==eDRVPDMA_BLKD)		   
;;;546    	{
;;;547    	  if(tPDMA->IER.BLKD_IE==1)
;;;548    	    return (tPDMA->IER.BLKD_IE)?TRUE:FALSE;
;;;549    	}
;;;550    	return 0;
;;;551    }
00001c  bd10              POP      {r4,pc}
                  |L19.30|
00001e  2a02              CMP      r2,#2                 ;545
000020  d108              BNE      |L19.52|
000022  6a08              LDR      r0,[r1,#0x20]         ;547
000024  0780              LSLS     r0,r0,#30             ;547
000026  0fc0              LSRS     r0,r0,#31             ;547
000028  2801              CMP      r0,#1                 ;547
00002a  d103              BNE      |L19.52|
00002c  6a08              LDR      r0,[r1,#0x20]         ;548
00002e  0780              LSLS     r0,r0,#30             ;548
000030  0fc0              LSRS     r0,r0,#31             ;548
000032  e7f3              B        |L19.28|
                  |L19.52|
000034  2000              MOVS     r0,#0                 ;550
000036  e7f1              B        |L19.28|
;;;552    
                          ENDP

                  |L19.56|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_Open||, CODE, READONLY, ALIGN=2

                  DrvPDMA_Open PROC
;;;98     /*---------------------------------------------------------------------------------------------------------*/
;;;99     int32_t DrvPDMA_Open(E_DRVPDMA_CHANNEL_INDEX eChannel,STR_PDMA_T *sParam)
000000  b530              PUSH     {r4,r5,lr}
;;;100    {						  
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;101    	PDMA_T * tPDMA;
;;;102    
;;;103        /*-----------------------------------------------------------------------------------------------------*/
;;;104        /* Check PDMA channel                                                                                  */
;;;105        /*-----------------------------------------------------------------------------------------------------*/
;;;106        if (eChannel > eDRVPDMA_CHANNEL_8)
000006  2b08              CMP      r3,#8
000008  dd01              BLE      |L20.14|
;;;107        {
;;;108    		return E_DRVPDMA_ERR_PORT_INVALID;
00000a  481f              LDR      r0,|L20.136|
                  |L20.12|
;;;109        }
;;;110    
;;;111    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;112    
;;;113    	/*-----------------------------------------------------------------------------------------------------*/
;;;114        /* Set PDMA settings                                                                                   */
;;;115        /*-----------------------------------------------------------------------------------------------------*/
;;;116    	outpw(&PDMA_GCR->GCRCSR,inpw(&PDMA_GCR->GCRCSR) | 1<<(eChannel+8) );     	/* Enable Channel Clock */
;;;117    
;;;118     
;;;119     	tPDMA->CSR.PDMACEN 	= 1;   													/* Enable PDMA Channel */
;;;120    	tPDMA->SAR	 		= sParam->sSrcCtrl.u32Addr;								/* Set Source Address */
;;;121    	tPDMA->DAR 			= sParam->sDestCtrl.u32Addr;	    					/* Set Destination Address */
;;;122    	tPDMA->CSR.SAD_SEL 	= sParam->sSrcCtrl.eAddrDirection; 
;;;123    	tPDMA->CSR.DAD_SEL 	= sParam->sDestCtrl.eAddrDirection;
;;;124    	tPDMA->CSR.APB_TWS 	= sParam->u8TransWidth;
;;;125    	tPDMA->CSR.MODE_SEL = sParam->u8Mode;										/* Set Control Register */
;;;126    	tPDMA->BCR 			= sParam->i32ByteCnt;								    /* Set Byte Count Register */
;;;127    	return E_SUCCESS;    
;;;128    }
00000c  bd30              POP      {r4,r5,pc}
                  |L20.14|
00000e  0218              LSLS     r0,r3,#8              ;111
000010  4c1e              LDR      r4,|L20.140|
000012  1901              ADDS     r1,r0,r4              ;111
000014  481e              LDR      r0,|L20.144|
000016  6800              LDR      r0,[r0,#0]            ;116
000018  461c              MOV      r4,r3                 ;116
00001a  3408              ADDS     r4,r4,#8              ;116
00001c  2501              MOVS     r5,#1                 ;116
00001e  40a5              LSLS     r5,r5,r4              ;116
000020  4328              ORRS     r0,r0,r5              ;116
000022  4c1b              LDR      r4,|L20.144|
000024  6020              STR      r0,[r4,#0]            ;116
000026  6808              LDR      r0,[r1,#0]            ;119
000028  0840              LSRS     r0,r0,#1              ;119
00002a  0040              LSLS     r0,r0,#1              ;119
00002c  1c40              ADDS     r0,r0,#1              ;119
00002e  6008              STR      r0,[r1,#0]            ;119
000030  6810              LDR      r0,[r2,#0]            ;120
000032  6048              STR      r0,[r1,#4]            ;120
000034  6890              LDR      r0,[r2,#8]            ;121
000036  6088              STR      r0,[r1,#8]            ;121
000038  6808              LDR      r0,[r1,#0]            ;122
00003a  2430              MOVS     r4,#0x30              ;122
00003c  43a0              BICS     r0,r0,r4              ;122
00003e  7914              LDRB     r4,[r2,#4]            ;122
000040  0124              LSLS     r4,r4,#4              ;122
000042  2530              MOVS     r5,#0x30              ;122
000044  402c              ANDS     r4,r4,r5              ;122
000046  4320              ORRS     r0,r0,r4              ;122
000048  6008              STR      r0,[r1,#0]            ;122
00004a  6808              LDR      r0,[r1,#0]            ;123
00004c  24c0              MOVS     r4,#0xc0              ;123
00004e  43a0              BICS     r0,r0,r4              ;123
000050  7b14              LDRB     r4,[r2,#0xc]          ;123
000052  01a4              LSLS     r4,r4,#6              ;123
000054  25c0              MOVS     r5,#0xc0              ;123
000056  402c              ANDS     r4,r4,r5              ;123
000058  4320              ORRS     r0,r0,r4              ;123
00005a  6008              STR      r0,[r1,#0]            ;123
00005c  6808              LDR      r0,[r1,#0]            ;124
00005e  036c              LSLS     r4,r5,#13             ;124
000060  43a0              BICS     r0,r0,r4              ;124
000062  7c14              LDRB     r4,[r2,#0x10]         ;124
000064  04e4              LSLS     r4,r4,#19             ;124
000066  036d              LSLS     r5,r5,#13             ;124
000068  402c              ANDS     r4,r4,r5              ;124
00006a  4320              ORRS     r0,r0,r4              ;124
00006c  6008              STR      r0,[r1,#0]            ;124
00006e  6808              LDR      r0,[r1,#0]            ;125
000070  240c              MOVS     r4,#0xc               ;125
000072  43a0              BICS     r0,r0,r4              ;125
000074  7c54              LDRB     r4,[r2,#0x11]         ;125
000076  00a4              LSLS     r4,r4,#2              ;125
000078  250c              MOVS     r5,#0xc               ;125
00007a  402c              ANDS     r4,r4,r5              ;125
00007c  4320              ORRS     r0,r0,r4              ;125
00007e  6008              STR      r0,[r1,#0]            ;125
000080  6950              LDR      r0,[r2,#0x14]         ;126
000082  60c8              STR      r0,[r1,#0xc]          ;126
000084  2000              MOVS     r0,#0                 ;127
000086  e7c1              B        |L20.12|
;;;129    
                          ENDP

                  |L20.136|
                          DCD      0xffff9082
                  |L20.140|
                          DCD      0x50008000
                  |L20.144|
                          DCD      0x50008f00

                          AREA ||i.DrvPDMA_PollInt||, CODE, READONLY, ALIGN=2

                  DrvPDMA_PollInt PROC
;;;585    /*---------------------------------------------------------------------------------------------------------*/
;;;586    int32_t	DrvPDMA_PollInt(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_FLAG eIntFlag)
000000  b510              PUSH     {r4,lr}
;;;587    {
000002  4602              MOV      r2,r0
;;;588        volatile uint32_t u32SFR;
;;;589        
;;;590        u32SFR = (uint32_t) & PDMA0->ISR + eChannel * CHANNEL_OFFSET; 
000004  4802              LDR      r0,|L21.16|
000006  0214              LSLS     r4,r2,#8
000008  1903              ADDS     r3,r0,r4
;;;591        return inpw(u32SFR) & eIntFlag;
00000a  6818              LDR      r0,[r3,#0]
00000c  4008              ANDS     r0,r0,r1
;;;592    }
00000e  bd10              POP      {r4,pc}
;;;593    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

                  |L21.16|
                          DCD      0x50008024

                          AREA ||i.DrvPDMA_SetAPBTransferWidth||, CODE, READONLY, ALIGN=2

                  DrvPDMA_SetAPBTransferWidth PROC
;;;198    /*---------------------------------------------------------------------------------------------------------*/
;;;199    int32_t	DrvPDMA_SetAPBTransferWidth(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_TRANSFER_WIDTH eTransferWidth)
000000  b530              PUSH     {r4,r5,lr}
;;;200    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;201    	PDMA_T * tPDMA;
;;;202    	    
;;;203        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000006  2a09              CMP      r2,#9
000008  dd01              BLE      |L22.14|
;;;204            return E_DRVPDMA_ERR_PORT_INVALID;    
00000a  4808              LDR      r0,|L22.44|
                  |L22.12|
;;;205        
;;;206    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;207    																			
;;;208    	tPDMA->CSR.APB_TWS = eTransferWidth;	        						/* Set PDMA Transfer Length */
;;;209    
;;;210        return E_SUCCESS;     													
;;;211    }
00000c  bd30              POP      {r4,r5,pc}
                  |L22.14|
00000e  0210              LSLS     r0,r2,#8              ;206
000010  4c07              LDR      r4,|L22.48|
000012  1901              ADDS     r1,r0,r4              ;206
000014  6808              LDR      r0,[r1,#0]            ;208
000016  2403              MOVS     r4,#3                 ;208
000018  04e4              LSLS     r4,r4,#19             ;208
00001a  43a0              BICS     r0,r0,r4              ;208
00001c  04dc              LSLS     r4,r3,#19             ;208
00001e  2503              MOVS     r5,#3                 ;208
000020  04ed              LSLS     r5,r5,#19             ;208
000022  402c              ANDS     r4,r4,r5              ;208
000024  4320              ORRS     r0,r0,r4              ;208
000026  6008              STR      r0,[r1,#0]            ;208
000028  2000              MOVS     r0,#0                 ;210
00002a  e7ef              B        |L22.12|
;;;212    
                          ENDP

                  |L22.44|
                          DCD      0xffff9082
                  |L22.48|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_SetCHForAPBDevice||, CODE, READONLY, ALIGN=2

                  DrvPDMA_SetCHForAPBDevice PROC
;;;256    /*---------------------------------------------------------------------------------------------------------*/
;;;257    int32_t	DrvPDMA_SetCHForAPBDevice(
000000  b530              PUSH     {r4,r5,lr}
;;;258        E_DRVPDMA_CHANNEL_INDEX eChannel, 
;;;259        E_DRVPDMA_APB_DEVICE 	eDevice,
;;;260        E_DRVPDMA_APB_RW 		eRWAPB    
;;;261    )
;;;262    {  
000002  4604              MOV      r4,r0
;;;263        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000004  2c09              CMP      r4,#9
000006  dd01              BLE      |L23.12|
;;;264            return E_DRVPDMA_ERR_PORT_INVALID;    
000008  486e              LDR      r0,|L23.452|
                  |L23.10|
;;;265       
;;;266    	switch(eDevice)
;;;267    	{
;;;268    		case eDRVPDMA_SPI0:												    /* Set SPI0 PDMA Channel */
;;;269    			if(eRWAPB)	  
;;;270    				PDMA_GCR->PDSSR0.SPI0_TXSEL	=	eChannel;
;;;271    			else
;;;272    				PDMA_GCR->PDSSR0.SPI0_RXSEL	=	eChannel;
;;;273    	   		break;
;;;274    
;;;275    	   	case eDRVPDMA_SPI1:													/* Set SPI1 PDMA Channel */
;;;276    			if(eRWAPB)	  
;;;277    				PDMA_GCR->PDSSR0.SPI1_TXSEL	=	eChannel;
;;;278    			else
;;;279    				PDMA_GCR->PDSSR0.SPI1_RXSEL	=	eChannel;
;;;280    	   		break;
;;;281    																			
;;;282    		case eDRVPDMA_SPI2:													/* Set SPI2 PDMA Channel */
;;;283    			if(eRWAPB)	
;;;284    				PDMA_GCR->PDSSR0.SPI2_TXSEL	=	eChannel;
;;;285    			else
;;;286    				PDMA_GCR->PDSSR0.SPI2_RXSEL	=	eChannel;
;;;287    	   		break;
;;;288    																		   	
;;;289    		case eDRVPDMA_SPI3:													/* Set SPI3 PDMA Channel */
;;;290    			if(eRWAPB)	
;;;291    				PDMA_GCR->PDSSR0.SPI3_TXSEL	=	eChannel;
;;;292    			else
;;;293    				PDMA_GCR->PDSSR0.SPI3_RXSEL	=	eChannel;
;;;294    	   		break;
;;;295    
;;;296    		case eDRVPDMA_UART0:											   	/* Set UART0 PDMA Channel */
;;;297    			if(eRWAPB)	
;;;298    				PDMA_GCR->PDSSR1.UART0_TXSEL	=	eChannel;
;;;299    			else
;;;300    				PDMA_GCR->PDSSR1.UART0_RXSEL	=	eChannel;
;;;301    	   		break;
;;;302    		case eDRVPDMA_UART1:												/* Set UART1 PDMA Channel */
;;;303    			if(eRWAPB)	
;;;304    				PDMA_GCR->PDSSR1.UART1_TXSEL	=	eChannel;
;;;305    			else
;;;306    				PDMA_GCR->PDSSR1.UART1_RXSEL	=	eChannel;
;;;307    	   		break;
;;;308    		case eDRVPDMA_ADC:													/* Set ADC PDMA Channel */
;;;309    			if(eRWAPB)	
;;;310    				PDMA_GCR->PDSSR1.ADC_TXSEL	=	eChannel;
;;;311    			else
;;;312    				PDMA_GCR->PDSSR1.ADC_RXSEL	=	eChannel;
;;;313    	   		break;
;;;314    		case eDRVPDMA_I2S:													/* Set I2S PDMA Channel */
;;;315    			if(eRWAPB)	
;;;316    				PDMA_GCR->PDSSR2.I2S_TXSEL	=	eChannel;
;;;317    			else
;;;318    				PDMA_GCR->PDSSR2.I2S_RXSEL	=	eChannel;
;;;319    	   		break;
;;;320    		default:
;;;321    			return 	E_DRVPDMA_FALSE_INPUT;
;;;322    	}
;;;323     
;;;324        return E_SUCCESS;  
;;;325    }
00000a  bd30              POP      {r4,r5,pc}
                  |L23.12|
00000c  460b              MOV      r3,r1                 ;266
00000e  f7fffffe          BL       __ARM_common_switch8
000012  0906              DCB      0x09,0x06
000014  1d39556f          DCB      0x1d,0x39,0x55,0x6f
000018  86d3a2bc          DCB      0x86,0xd3,0xa2,0xbc
00001c  d300              DCB      0xd3,0x00
00001e  2a00              CMP      r2,#0                 ;269
000020  d00a              BEQ      |L23.56|
000022  4869              LDR      r0,|L23.456|
000024  6840              LDR      r0,[r0,#4]            ;270
000026  23f0              MOVS     r3,#0xf0              ;270
000028  4398              BICS     r0,r0,r3              ;270
00002a  0123              LSLS     r3,r4,#4              ;270
00002c  25f0              MOVS     r5,#0xf0              ;270
00002e  402b              ANDS     r3,r3,r5              ;270
000030  4318              ORRS     r0,r0,r3              ;270
000032  4b65              LDR      r3,|L23.456|
000034  6058              STR      r0,[r3,#4]            ;270
000036  e008              B        |L23.74|
                  |L23.56|
000038  4863              LDR      r0,|L23.456|
00003a  6840              LDR      r0,[r0,#4]            ;272
00003c  0900              LSRS     r0,r0,#4              ;272
00003e  0100              LSLS     r0,r0,#4              ;272
000040  0723              LSLS     r3,r4,#28             ;272
000042  0f1b              LSRS     r3,r3,#28             ;272
000044  4318              ORRS     r0,r0,r3              ;272
000046  4b60              LDR      r3,|L23.456|
000048  6058              STR      r0,[r3,#4]            ;272
                  |L23.74|
00004a  e0b8              B        |L23.446|
00004c  2a00              CMP      r2,#0                 ;276
00004e  d00c              BEQ      |L23.106|
000050  485d              LDR      r0,|L23.456|
000052  6840              LDR      r0,[r0,#4]            ;277
000054  230f              MOVS     r3,#0xf               ;277
000056  031b              LSLS     r3,r3,#12             ;277
000058  4398              BICS     r0,r0,r3              ;277
00005a  0323              LSLS     r3,r4,#12             ;277
00005c  250f              MOVS     r5,#0xf               ;277
00005e  032d              LSLS     r5,r5,#12             ;277
000060  402b              ANDS     r3,r3,r5              ;277
000062  4318              ORRS     r0,r0,r3              ;277
000064  4b58              LDR      r3,|L23.456|
000066  6058              STR      r0,[r3,#4]            ;277
000068  e00b              B        |L23.130|
                  |L23.106|
00006a  4857              LDR      r0,|L23.456|
00006c  6840              LDR      r0,[r0,#4]            ;279
00006e  230f              MOVS     r3,#0xf               ;279
000070  021b              LSLS     r3,r3,#8              ;279
000072  4398              BICS     r0,r0,r3              ;279
000074  0223              LSLS     r3,r4,#8              ;279
000076  250f              MOVS     r5,#0xf               ;279
000078  022d              LSLS     r5,r5,#8              ;279
00007a  402b              ANDS     r3,r3,r5              ;279
00007c  4318              ORRS     r0,r0,r3              ;279
00007e  4b52              LDR      r3,|L23.456|
000080  6058              STR      r0,[r3,#4]            ;279
                  |L23.130|
000082  e09c              B        |L23.446|
000084  2a00              CMP      r2,#0                 ;283
000086  d00c              BEQ      |L23.162|
000088  484f              LDR      r0,|L23.456|
00008a  6840              LDR      r0,[r0,#4]            ;284
00008c  230f              MOVS     r3,#0xf               ;284
00008e  051b              LSLS     r3,r3,#20             ;284
000090  4398              BICS     r0,r0,r3              ;284
000092  0523              LSLS     r3,r4,#20             ;284
000094  250f              MOVS     r5,#0xf               ;284
000096  052d              LSLS     r5,r5,#20             ;284
000098  402b              ANDS     r3,r3,r5              ;284
00009a  4318              ORRS     r0,r0,r3              ;284
00009c  4b4a              LDR      r3,|L23.456|
00009e  6058              STR      r0,[r3,#4]            ;284
0000a0  e00b              B        |L23.186|
                  |L23.162|
0000a2  4849              LDR      r0,|L23.456|
0000a4  6840              LDR      r0,[r0,#4]            ;286
0000a6  230f              MOVS     r3,#0xf               ;286
0000a8  041b              LSLS     r3,r3,#16             ;286
0000aa  4398              BICS     r0,r0,r3              ;286
0000ac  0423              LSLS     r3,r4,#16             ;286
0000ae  250f              MOVS     r5,#0xf               ;286
0000b0  042d              LSLS     r5,r5,#16             ;286
0000b2  402b              ANDS     r3,r3,r5              ;286
0000b4  4318              ORRS     r0,r0,r3              ;286
0000b6  4b44              LDR      r3,|L23.456|
0000b8  6058              STR      r0,[r3,#4]            ;286
                  |L23.186|
0000ba  e080              B        |L23.446|
0000bc  2a00              CMP      r2,#0                 ;290
0000be  d00a              BEQ      |L23.214|
0000c0  4841              LDR      r0,|L23.456|
0000c2  6840              LDR      r0,[r0,#4]            ;291
0000c4  0100              LSLS     r0,r0,#4              ;291
0000c6  0900              LSRS     r0,r0,#4              ;291
0000c8  0723              LSLS     r3,r4,#28             ;291
0000ca  0f1b              LSRS     r3,r3,#28             ;291
0000cc  071b              LSLS     r3,r3,#28             ;291
0000ce  4318              ORRS     r0,r0,r3              ;291
0000d0  4b3d              LDR      r3,|L23.456|
0000d2  6058              STR      r0,[r3,#4]            ;291
0000d4  e00b              B        |L23.238|
                  |L23.214|
0000d6  483c              LDR      r0,|L23.456|
0000d8  6840              LDR      r0,[r0,#4]            ;293
0000da  230f              MOVS     r3,#0xf               ;293
0000dc  061b              LSLS     r3,r3,#24             ;293
0000de  4398              BICS     r0,r0,r3              ;293
0000e0  0623              LSLS     r3,r4,#24             ;293
0000e2  250f              MOVS     r5,#0xf               ;293
0000e4  062d              LSLS     r5,r5,#24             ;293
0000e6  402b              ANDS     r3,r3,r5              ;293
0000e8  4318              ORRS     r0,r0,r3              ;293
0000ea  4b37              LDR      r3,|L23.456|
0000ec  6058              STR      r0,[r3,#4]            ;293
                  |L23.238|
0000ee  e066              B        |L23.446|
0000f0  2a00              CMP      r2,#0                 ;297
0000f2  d00a              BEQ      |L23.266|
0000f4  4834              LDR      r0,|L23.456|
0000f6  6880              LDR      r0,[r0,#8]            ;298
0000f8  23f0              MOVS     r3,#0xf0              ;298
0000fa  4398              BICS     r0,r0,r3              ;298
0000fc  0123              LSLS     r3,r4,#4              ;298
0000fe  25f0              MOVS     r5,#0xf0              ;298
000100  402b              ANDS     r3,r3,r5              ;298
000102  4318              ORRS     r0,r0,r3              ;298
000104  4b30              LDR      r3,|L23.456|
000106  6098              STR      r0,[r3,#8]            ;298
000108  e008              B        |L23.284|
                  |L23.266|
00010a  482f              LDR      r0,|L23.456|
00010c  6880              LDR      r0,[r0,#8]            ;300
00010e  0900              LSRS     r0,r0,#4              ;300
000110  0100              LSLS     r0,r0,#4              ;300
000112  0723              LSLS     r3,r4,#28             ;300
000114  0f1b              LSRS     r3,r3,#28             ;300
000116  4318              ORRS     r0,r0,r3              ;300
000118  4b2b              LDR      r3,|L23.456|
00011a  6098              STR      r0,[r3,#8]            ;300
                  |L23.284|
00011c  e04f              B        |L23.446|
00011e  2a00              CMP      r2,#0                 ;303
000120  d00c              BEQ      |L23.316|
000122  4829              LDR      r0,|L23.456|
000124  6880              LDR      r0,[r0,#8]            ;304
000126  230f              MOVS     r3,#0xf               ;304
000128  031b              LSLS     r3,r3,#12             ;304
00012a  4398              BICS     r0,r0,r3              ;304
00012c  0323              LSLS     r3,r4,#12             ;304
00012e  250f              MOVS     r5,#0xf               ;304
000130  032d              LSLS     r5,r5,#12             ;304
000132  402b              ANDS     r3,r3,r5              ;304
000134  4318              ORRS     r0,r0,r3              ;304
000136  4b24              LDR      r3,|L23.456|
000138  6098              STR      r0,[r3,#8]            ;304
00013a  e00b              B        |L23.340|
                  |L23.316|
00013c  4822              LDR      r0,|L23.456|
00013e  6880              LDR      r0,[r0,#8]            ;306
000140  230f              MOVS     r3,#0xf               ;306
000142  021b              LSLS     r3,r3,#8              ;306
000144  4398              BICS     r0,r0,r3              ;306
000146  0223              LSLS     r3,r4,#8              ;306
000148  250f              MOVS     r5,#0xf               ;306
00014a  022d              LSLS     r5,r5,#8              ;306
00014c  402b              ANDS     r3,r3,r5              ;306
00014e  4318              ORRS     r0,r0,r3              ;306
000150  4b1d              LDR      r3,|L23.456|
000152  6098              STR      r0,[r3,#8]            ;306
                  |L23.340|
000154  e033              B        |L23.446|
000156  2a00              CMP      r2,#0                 ;309
000158  d00a              BEQ      |L23.368|
00015a  481b              LDR      r0,|L23.456|
00015c  6880              LDR      r0,[r0,#8]            ;310
00015e  0100              LSLS     r0,r0,#4              ;310
000160  0900              LSRS     r0,r0,#4              ;310
000162  0723              LSLS     r3,r4,#28             ;310
000164  0f1b              LSRS     r3,r3,#28             ;310
000166  071b              LSLS     r3,r3,#28             ;310
000168  4318              ORRS     r0,r0,r3              ;310
00016a  4b17              LDR      r3,|L23.456|
00016c  6098              STR      r0,[r3,#8]            ;310
00016e  e00b              B        |L23.392|
                  |L23.368|
000170  4815              LDR      r0,|L23.456|
000172  6880              LDR      r0,[r0,#8]            ;312
000174  230f              MOVS     r3,#0xf               ;312
000176  061b              LSLS     r3,r3,#24             ;312
000178  4398              BICS     r0,r0,r3              ;312
00017a  0623              LSLS     r3,r4,#24             ;312
00017c  250f              MOVS     r5,#0xf               ;312
00017e  062d              LSLS     r5,r5,#24             ;312
000180  402b              ANDS     r3,r3,r5              ;312
000182  4318              ORRS     r0,r0,r3              ;312
000184  4b10              LDR      r3,|L23.456|
000186  6098              STR      r0,[r3,#8]            ;312
                  |L23.392|
000188  e019              B        |L23.446|
00018a  2a00              CMP      r2,#0                 ;315
00018c  d00a              BEQ      |L23.420|
00018e  480e              LDR      r0,|L23.456|
000190  6900              LDR      r0,[r0,#0x10]         ;316
000192  23f0              MOVS     r3,#0xf0              ;316
000194  4398              BICS     r0,r0,r3              ;316
000196  0123              LSLS     r3,r4,#4              ;316
000198  25f0              MOVS     r5,#0xf0              ;316
00019a  402b              ANDS     r3,r3,r5              ;316
00019c  4318              ORRS     r0,r0,r3              ;316
00019e  4b0a              LDR      r3,|L23.456|
0001a0  6118              STR      r0,[r3,#0x10]         ;316
0001a2  e008              B        |L23.438|
                  |L23.420|
0001a4  4808              LDR      r0,|L23.456|
0001a6  6900              LDR      r0,[r0,#0x10]         ;318
0001a8  0900              LSRS     r0,r0,#4              ;318
0001aa  0100              LSLS     r0,r0,#4              ;318
0001ac  0723              LSLS     r3,r4,#28             ;318
0001ae  0f1b              LSRS     r3,r3,#28             ;318
0001b0  4318              ORRS     r0,r0,r3              ;318
0001b2  4b05              LDR      r3,|L23.456|
0001b4  6118              STR      r0,[r3,#0x10]         ;318
                  |L23.438|
0001b6  e002              B        |L23.446|
0001b8  4802              LDR      r0,|L23.452|
0001ba  1e40              SUBS     r0,r0,#1              ;321
0001bc  e725              B        |L23.10|
                  |L23.446|
0001be  bf00              NOP                            ;273
0001c0  2000              MOVS     r0,#0                 ;324
0001c2  e722              B        |L23.10|
;;;326    
                          ENDP

                  |L23.452|
                          DCD      0xffff9082
                  |L23.456|
                          DCD      0x50008f00

                          AREA ||i.PDMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  PDMA_IRQHandler PROC
;;;644    /*---------------------------------------------------------------------------------------------------------*/
;;;645    void PDMA_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;646    {
;;;647        volatile uint32_t u32IntStatus;
;;;648    	volatile uint32_t u32SFR;
;;;649        volatile int32_t  i32Channel= 0 ;
000002  2400              MOVS     r4,#0
;;;650    	volatile uint32_t u32ISR;
;;;651    	PDMA_T * tPDMA;
;;;652    		
;;;653    	u32SFR = inpw(&PDMA_GCR->GCRISR);
000004  481e              LDR      r0,|L24.128|
000006  68c6              LDR      r6,[r0,#0xc]
;;;654    
;;;655    	for(i32Channel=0;i32Channel<MAX_CHANNEL_NUM;i32Channel++)  
000008  bf00              NOP      
00000a  e036              B        |L24.122|
                  |L24.12|
;;;656    	{
;;;657    		tPDMA = (PDMA_T *)((uint32_t)PDMA0 + i32Channel * CHANNEL_OFFSET); 
00000c  0220              LSLS     r0,r4,#8
00000e  491d              LDR      r1,|L24.132|
000010  1845              ADDS     r5,r0,r1
;;;658    
;;;659    		if(u32SFR & (1<<i32Channel))  										 		/* Check INT Channel */	
000012  2001              MOVS     r0,#1
000014  40a0              LSLS     r0,r0,r4
000016  4230              TST      r0,r6
000018  d02e              BEQ      |L24.120|
;;;660    		{
;;;661    			if(tPDMA->ISR.TABORT_IF==1)	 											/* Check Target Abort INT and clear */
00001a  6a68              LDR      r0,[r5,#0x24]
00001c  07c0              LSLS     r0,r0,#31
00001e  0fc0              LSRS     r0,r0,#31
000020  2801              CMP      r0,#1
000022  d111              BNE      |L24.72|
;;;662    			{
;;;663    			  tPDMA->ISR.TABORT_IF=1;
000024  6a68              LDR      r0,[r5,#0x24]
000026  0840              LSRS     r0,r0,#1
000028  0040              LSLS     r0,r0,#1
00002a  1c40              ADDS     r0,r0,#1
00002c  6268              STR      r0,[r5,#0x24]
;;;664    			   if (g_pfnPDMACallback[i32Channel][0] != 0)    		
00002e  200c              MOVS     r0,#0xc
000030  4360              MULS     r0,r4,r0
000032  4915              LDR      r1,|L24.136|
000034  5808              LDR      r0,[r1,r0]
000036  2800              CMP      r0,#0
000038  d01e              BEQ      |L24.120|
;;;665    		    		(*g_pfnPDMACallback[i32Channel][0])(0);							/* Target Abort callback funtion */
00003a  200c              MOVS     r0,#0xc
00003c  4360              MULS     r0,r4,r0
00003e  460a              MOV      r2,r1
000040  5811              LDR      r1,[r2,r0]
000042  2000              MOVS     r0,#0
000044  4788              BLX      r1
000046  e017              B        |L24.120|
                  |L24.72|
;;;666    			}
;;;667    			else if(tPDMA->ISR.BLKD_IF==1)		
000048  6a68              LDR      r0,[r5,#0x24]
00004a  0780              LSLS     r0,r0,#30
00004c  0fc0              LSRS     r0,r0,#31
00004e  2801              CMP      r0,#1
000050  d112              BNE      |L24.120|
;;;668    			{																		/* Transfer Done INT and clear */
;;;669    			  tPDMA->ISR.BLKD_IF=1;
000052  6a68              LDR      r0,[r5,#0x24]
000054  2102              MOVS     r1,#2
000056  4388              BICS     r0,r0,r1
000058  1c80              ADDS     r0,r0,#2
00005a  6268              STR      r0,[r5,#0x24]
;;;670    			   if (g_pfnPDMACallback[i32Channel][1] != 0)    		
00005c  200c              MOVS     r0,#0xc
00005e  4360              MULS     r0,r4,r0
000060  4909              LDR      r1,|L24.136|
000062  1840              ADDS     r0,r0,r1
000064  6840              LDR      r0,[r0,#4]
000066  2800              CMP      r0,#0
000068  d006              BEQ      |L24.120|
;;;671    		    		(*g_pfnPDMACallback[i32Channel][1])(0);							
00006a  200c              MOVS     r0,#0xc
00006c  4360              MULS     r0,r4,r0
00006e  460a              MOV      r2,r1
000070  1880              ADDS     r0,r0,r2
000072  6841              LDR      r1,[r0,#4]
000074  2000              MOVS     r0,#0
000076  4788              BLX      r1
                  |L24.120|
000078  1c64              ADDS     r4,r4,#1              ;655
                  |L24.122|
00007a  2c09              CMP      r4,#9                 ;655
00007c  dbc6              BLT      |L24.12|
;;;672    			}
;;;673    		}
;;;674    	}
;;;675    }
00007e  bd70              POP      {r4-r6,pc}
;;;676    
                          ENDP

                  |L24.128|
                          DCD      0x50008f00
                  |L24.132|
                          DCD      0x50008000
                  |L24.136|
                          DCD      g_pfnPDMACallback

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_pfnPDMACallback
                          %        108

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L153.16|
00000e  461d              MOV      r5,r3
                  |L153.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

