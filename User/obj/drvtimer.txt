; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvtimer.o --depend=.\obj\drvtimer.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvtimer.crf ..\BSP_Lib\Src\Driver\DrvTIMER.c]
                          THUMB

                          AREA ||i.CalTimerInitValue||, CODE, READONLY, ALIGN=1

                  CalTimerInitValue PROC
;;;126    /*---------------------------------------------------------------------------------------------------------*/
;;;127    static uint32_t CalTimerInitValue(uint32_t u32ClockValue, uint32_t u32TicksPerSec)
000000  b5f8              PUSH     {r3-r7,lr}
;;;128    {
000002  4607              MOV      r7,r0
000004  460e              MOV      r6,r1
;;;129        uint32_t u32PreScale;
;;;130        uint32_t u32TCMPRValue;
;;;131    
;;;132        if ((u32ClockValue < 2) || (u32TicksPerSec == 0))
000006  2f02              CMP      r7,#2
000008  d301              BCC      |L1.14|
00000a  2e00              CMP      r6,#0
00000c  d102              BNE      |L1.20|
                  |L1.14|
;;;133            return (uint32_t)-1;
00000e  2000              MOVS     r0,#0
000010  43c0              MVNS     r0,r0
                  |L1.18|
;;;134    
;;;135        for (u32PreScale=1; u32PreScale<256; u32PreScale++)
;;;136        {
;;;137            u32TCMPRValue = u32ClockValue / (u32TicksPerSec * u32PreScale);
;;;138    
;;;139            /* The TCMPR value must > 1 */
;;;140            if ((u32TCMPRValue > 1) && (u32TCMPRValue < 0x1000000))
;;;141                return (((u32PreScale-1) << 24) | u32TCMPRValue);
;;;142        }
;;;143        
;;;144        return (uint32_t)-1;
;;;145    }
000012  bdf8              POP      {r3-r7,pc}
                  |L1.20|
000014  2401              MOVS     r4,#1                 ;135
000016  e011              B        |L1.60|
                  |L1.24|
000018  4630              MOV      r0,r6                 ;137
00001a  4360              MULS     r0,r4,r0              ;137
00001c  4601              MOV      r1,r0                 ;137
00001e  4638              MOV      r0,r7                 ;137
000020  f7fffffe          BL       __aeabi_uidivmod
000024  4605              MOV      r5,r0                 ;137
000026  2d01              CMP      r5,#1                 ;140
000028  d907              BLS      |L1.58|
00002a  2001              MOVS     r0,#1                 ;140
00002c  0600              LSLS     r0,r0,#24             ;140
00002e  4285              CMP      r5,r0                 ;140
000030  d203              BCS      |L1.58|
000032  1e60              SUBS     r0,r4,#1              ;141
000034  0600              LSLS     r0,r0,#24             ;141
000036  4328              ORRS     r0,r0,r5              ;141
000038  e7eb              B        |L1.18|
                  |L1.58|
00003a  1c64              ADDS     r4,r4,#1              ;135
                  |L1.60|
00003c  2cff              CMP      r4,#0xff              ;135
00003e  d9eb              BLS      |L1.24|
000040  2000              MOVS     r0,#0                 ;144
000042  43c0              MVNS     r0,r0                 ;144
000044  e7e5              B        |L1.18|
;;;146    
                          ENDP


                          AREA ||i.DrvTIMER_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ClearIntFlag PROC
;;;866    /*---------------------------------------------------------------------------------------------------------*/
;;;867    int32_t DrvTIMER_ClearIntFlag(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;868    {
;;;869    	if (ch == E_TMR0 )
000002  2900              CMP      r1,#0
000004  d107              BNE      |L2.22|
;;;870    		TIMER0->TISR.TIF = 1;
000006  4814              LDR      r0,|L2.88|
000008  6880              LDR      r0,[r0,#8]
00000a  0840              LSRS     r0,r0,#1
00000c  0040              LSLS     r0,r0,#1
00000e  1c40              ADDS     r0,r0,#1
000010  4a11              LDR      r2,|L2.88|
000012  6090              STR      r0,[r2,#8]
000014  e01e              B        |L2.84|
                  |L2.22|
;;;871    	else if(ch == E_TMR1 )									 
000016  2901              CMP      r1,#1
000018  d106              BNE      |L2.40|
;;;872    		TIMER1->TISR.TIF = 1;
00001a  480f              LDR      r0,|L2.88|
00001c  6a80              LDR      r0,[r0,#0x28]
00001e  4388              BICS     r0,r0,r1
000020  1c40              ADDS     r0,r0,#1
000022  4a0d              LDR      r2,|L2.88|
000024  6290              STR      r0,[r2,#0x28]
000026  e015              B        |L2.84|
                  |L2.40|
;;;873    	else if(ch == E_TMR2 )
000028  2902              CMP      r1,#2
00002a  d107              BNE      |L2.60|
;;;874    		TIMER2->TISR.TIF = 1;
00002c  480b              LDR      r0,|L2.92|
00002e  6880              LDR      r0,[r0,#8]
000030  0840              LSRS     r0,r0,#1
000032  0040              LSLS     r0,r0,#1
000034  1c40              ADDS     r0,r0,#1
000036  4a09              LDR      r2,|L2.92|
000038  6090              STR      r0,[r2,#8]
00003a  e00b              B        |L2.84|
                  |L2.60|
;;;875    	else if(ch == E_TMR3 )
00003c  2903              CMP      r1,#3
00003e  d107              BNE      |L2.80|
;;;876    		TIMER3->TISR.TIF = 1;
000040  4806              LDR      r0,|L2.92|
000042  6a80              LDR      r0,[r0,#0x28]
000044  0840              LSRS     r0,r0,#1
000046  0040              LSLS     r0,r0,#1
000048  1c40              ADDS     r0,r0,#1
00004a  4a04              LDR      r2,|L2.92|
00004c  6290              STR      r0,[r2,#0x28]
00004e  e001              B        |L2.84|
                  |L2.80|
;;;877    	else 
;;;878        	return E_DRVTIMER_CHANNEL;
000050  4803              LDR      r0,|L2.96|
                  |L2.82|
;;;879    
;;;880    	return E_SUCCESS;
;;;881    }
000052  4770              BX       lr
                  |L2.84|
000054  2000              MOVS     r0,#0                 ;880
000056  e7fc              B        |L2.82|
;;;882    
                          ENDP

                  |L2.88|
                          DCD      0x40010000
                  |L2.92|
                          DCD      0x40110000
                  |L2.96|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_ClearTimerEvent||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ClearTimerEvent PROC
;;;663    /*---------------------------------------------------------------------------------------------------------*/
;;;664    void DrvTIMER_ClearTimerEvent(E_TIMER_CHANNEL ch, uint32_t uTimerEventNo)
000000  b510              PUSH     {r4,lr}
;;;665    {
;;;666        switch (ch)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L3.20|
000006  2801              CMP      r0,#1
000008  d015              BEQ      |L3.54|
00000a  2802              CMP      r0,#2
00000c  d024              BEQ      |L3.88|
00000e  2803              CMP      r0,#3
000010  d144              BNE      |L3.156|
000012  e032              B        |L3.122|
                  |L3.20|
;;;667        {
;;;668            case E_TMR0:
;;;669            {
;;;670                tTime0Event[uTimerEventNo].active = FALSE;
000014  2300              MOVS     r3,#0
000016  2214              MOVS     r2,#0x14
000018  434a              MULS     r2,r1,r2
00001a  4c22              LDR      r4,|L3.164|
00001c  50a3              STR      r3,[r4,r2]
;;;671                uTime0EventCount--;
00001e  4a22              LDR      r2,|L3.168|
000020  6812              LDR      r2,[r2,#0]  ; uTime0EventCount
000022  1e52              SUBS     r2,r2,#1
000024  4b20              LDR      r3,|L3.168|
000026  601a              STR      r2,[r3,#0]  ; uTime0EventCount
;;;672                if (uTime0EventCount == 0)
000028  461a              MOV      r2,r3
00002a  6812              LDR      r2,[r2,#0]  ; uTime0EventCount
00002c  2a00              CMP      r2,#0
00002e  d101              BNE      |L3.52|
;;;673                {
;;;674                    bIsSetTime0Event = FALSE;
000030  4b1e              LDR      r3,|L3.172|
000032  601a              STR      r2,[r3,#0]  ; bIsSetTime0Event
                  |L3.52|
;;;675                }
;;;676                break;
000034  e033              B        |L3.158|
                  |L3.54|
;;;677            }
;;;678    
;;;679            case E_TMR1:
;;;680            {
;;;681                tTime1Event[uTimerEventNo].active = FALSE;
000036  2300              MOVS     r3,#0
000038  2214              MOVS     r2,#0x14
00003a  434a              MULS     r2,r1,r2
00003c  4c1c              LDR      r4,|L3.176|
00003e  50a3              STR      r3,[r4,r2]
;;;682                uTime1EventCount--;
000040  4a1c              LDR      r2,|L3.180|
000042  6812              LDR      r2,[r2,#0]  ; uTime1EventCount
000044  1e52              SUBS     r2,r2,#1
000046  4b1b              LDR      r3,|L3.180|
000048  601a              STR      r2,[r3,#0]  ; uTime1EventCount
;;;683                if (uTime1EventCount == 0)
00004a  461a              MOV      r2,r3
00004c  6812              LDR      r2,[r2,#0]  ; uTime1EventCount
00004e  2a00              CMP      r2,#0
000050  d101              BNE      |L3.86|
;;;684                {
;;;685                    bIsSetTime1Event = FALSE;
000052  4b19              LDR      r3,|L3.184|
000054  601a              STR      r2,[r3,#0]  ; bIsSetTime1Event
                  |L3.86|
;;;686                }
;;;687                break;
000056  e022              B        |L3.158|
                  |L3.88|
;;;688            }
;;;689    
;;;690            case E_TMR2:
;;;691            {
;;;692                tTime2Event[uTimerEventNo].active = FALSE;
000058  2300              MOVS     r3,#0
00005a  2214              MOVS     r2,#0x14
00005c  434a              MULS     r2,r1,r2
00005e  4c17              LDR      r4,|L3.188|
000060  50a3              STR      r3,[r4,r2]
;;;693                uTime2EventCount--;
000062  4a17              LDR      r2,|L3.192|
000064  6812              LDR      r2,[r2,#0]  ; uTime2EventCount
000066  1e52              SUBS     r2,r2,#1
000068  4b15              LDR      r3,|L3.192|
00006a  601a              STR      r2,[r3,#0]  ; uTime2EventCount
;;;694                if (uTime2EventCount == 0)
00006c  461a              MOV      r2,r3
00006e  6812              LDR      r2,[r2,#0]  ; uTime2EventCount
000070  2a00              CMP      r2,#0
000072  d101              BNE      |L3.120|
;;;695                {
;;;696                    bIsSetTime2Event = FALSE;
000074  4b13              LDR      r3,|L3.196|
000076  601a              STR      r2,[r3,#0]  ; bIsSetTime2Event
                  |L3.120|
;;;697                }
;;;698                break;
000078  e011              B        |L3.158|
                  |L3.122|
;;;699            }
;;;700    
;;;701            case E_TMR3:
;;;702            {
;;;703                tTime3Event[uTimerEventNo].active = FALSE;
00007a  2300              MOVS     r3,#0
00007c  2214              MOVS     r2,#0x14
00007e  434a              MULS     r2,r1,r2
000080  4c11              LDR      r4,|L3.200|
000082  50a3              STR      r3,[r4,r2]
;;;704                uTime3EventCount--;
000084  4a11              LDR      r2,|L3.204|
000086  6812              LDR      r2,[r2,#0]  ; uTime3EventCount
000088  1e52              SUBS     r2,r2,#1
00008a  4b10              LDR      r3,|L3.204|
00008c  601a              STR      r2,[r3,#0]  ; uTime3EventCount
;;;705                if (uTime3EventCount == 0)
00008e  461a              MOV      r2,r3
000090  6812              LDR      r2,[r2,#0]  ; uTime3EventCount
000092  2a00              CMP      r2,#0
000094  d101              BNE      |L3.154|
;;;706                {
;;;707                    bIsSetTime3Event = FALSE;
000096  4b0e              LDR      r3,|L3.208|
000098  601a              STR      r2,[r3,#0]  ; bIsSetTime3Event
                  |L3.154|
;;;708                }
;;;709                break;
00009a  e000              B        |L3.158|
                  |L3.156|
;;;710            }
;;;711    
;;;712            default:
;;;713            {
;;;714                break;
00009c  bf00              NOP      
                  |L3.158|
00009e  bf00              NOP                            ;676
;;;715            }
;;;716        }
;;;717    }
0000a0  bd10              POP      {r4,pc}
;;;718    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L3.164|
                          DCD      tTime0Event
                  |L3.168|
                          DCD      uTime0EventCount
                  |L3.172|
                          DCD      bIsSetTime0Event
                  |L3.176|
                          DCD      tTime1Event
                  |L3.180|
                          DCD      uTime1EventCount
                  |L3.184|
                          DCD      bIsSetTime1Event
                  |L3.188|
                          DCD      tTime2Event
                  |L3.192|
                          DCD      uTime2EventCount
                  |L3.196|
                          DCD      bIsSetTime2Event
                  |L3.200|
                          DCD      tTime3Event
                  |L3.204|
                          DCD      uTime3EventCount
                  |L3.208|
                          DCD      bIsSetTime3Event

                          AREA ||i.DrvTIMER_Close||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Close PROC
;;;473    /*---------------------------------------------------------------------------------------------------------*/
;;;474    int32_t DrvTIMER_Close(E_TIMER_CHANNEL ch)
000000  b510              PUSH     {r4,lr}
;;;475    {
000002  4604              MOV      r4,r0
;;;476        switch (ch)
000004  2c00              CMP      r4,#0
000006  d006              BEQ      |L4.22|
000008  2c01              CMP      r4,#1
00000a  d015              BEQ      |L4.56|
00000c  2c02              CMP      r4,#2
00000e  d024              BEQ      |L4.90|
000010  2c03              CMP      r4,#3
000012  d144              BNE      |L4.158|
000014  e032              B        |L4.124|
                  |L4.22|
;;;477        {
;;;478            case E_TMR0:
;;;479            {
;;;480                DrvTIMER_DisableInt(E_TMR0);
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       DrvTIMER_DisableInt
;;;481    			TIMER0->TCSR.CRST 	= 1;
00001c  4822              LDR      r0,|L4.168|
00001e  6800              LDR      r0,[r0,#0]
000020  2101              MOVS     r1,#1
000022  0689              LSLS     r1,r1,#26
000024  4388              BICS     r0,r0,r1
000026  1840              ADDS     r0,r0,r1
000028  491f              LDR      r1,|L4.168|
00002a  6008              STR      r0,[r1,#0]
;;;482                bIsTimer0Used       = FALSE;
00002c  2000              MOVS     r0,#0
00002e  491f              LDR      r1,|L4.172|
000030  6008              STR      r0,[r1,#0]  ; bIsTimer0Used
;;;483                bIsSetTime0Event    = FALSE;
000032  491f              LDR      r1,|L4.176|
000034  6008              STR      r0,[r1,#0]  ; bIsSetTime0Event
;;;484                break;
000036  e034              B        |L4.162|
                  |L4.56|
;;;485            }
;;;486    
;;;487            case E_TMR1:
;;;488            {
;;;489                DrvTIMER_DisableInt(E_TMR1);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       DrvTIMER_DisableInt
;;;490    			TIMER1->TCSR.CRST 	= 1;
00003e  481a              LDR      r0,|L4.168|
000040  6a00              LDR      r0,[r0,#0x20]
000042  2101              MOVS     r1,#1
000044  0689              LSLS     r1,r1,#26
000046  4388              BICS     r0,r0,r1
000048  1840              ADDS     r0,r0,r1
00004a  4917              LDR      r1,|L4.168|
00004c  6208              STR      r0,[r1,#0x20]
;;;491                bIsTimer1Used       = FALSE;
00004e  2000              MOVS     r0,#0
000050  4918              LDR      r1,|L4.180|
000052  6008              STR      r0,[r1,#0]  ; bIsTimer1Used
;;;492                bIsSetTime1Event    = FALSE;
000054  4918              LDR      r1,|L4.184|
000056  6008              STR      r0,[r1,#0]  ; bIsSetTime1Event
;;;493                break;
000058  e023              B        |L4.162|
                  |L4.90|
;;;494            }
;;;495    
;;;496            case E_TMR2:
;;;497            {
;;;498                DrvTIMER_DisableInt(E_TMR2);
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       DrvTIMER_DisableInt
;;;499    			TIMER2->TCSR.CRST 	= 1;
000060  4816              LDR      r0,|L4.188|
000062  6800              LDR      r0,[r0,#0]
000064  2101              MOVS     r1,#1
000066  0689              LSLS     r1,r1,#26
000068  4388              BICS     r0,r0,r1
00006a  1840              ADDS     r0,r0,r1
00006c  4913              LDR      r1,|L4.188|
00006e  6008              STR      r0,[r1,#0]
;;;500                bIsTimer2Used       = FALSE;
000070  2000              MOVS     r0,#0
000072  4913              LDR      r1,|L4.192|
000074  6008              STR      r0,[r1,#0]  ; bIsTimer2Used
;;;501                bIsSetTime2Event    = FALSE;
000076  4913              LDR      r1,|L4.196|
000078  6008              STR      r0,[r1,#0]  ; bIsSetTime2Event
;;;502                break;
00007a  e012              B        |L4.162|
                  |L4.124|
;;;503            }
;;;504    
;;;505            case E_TMR3:
;;;506            {
;;;507                DrvTIMER_DisableInt(E_TMR3);
00007c  2003              MOVS     r0,#3
00007e  f7fffffe          BL       DrvTIMER_DisableInt
;;;508    			TIMER3->TCSR.CRST 	= 1;
000082  480e              LDR      r0,|L4.188|
000084  6a00              LDR      r0,[r0,#0x20]
000086  2101              MOVS     r1,#1
000088  0689              LSLS     r1,r1,#26
00008a  4388              BICS     r0,r0,r1
00008c  1840              ADDS     r0,r0,r1
00008e  490b              LDR      r1,|L4.188|
000090  6208              STR      r0,[r1,#0x20]
;;;509                bIsTimer3Used       = FALSE;
000092  2000              MOVS     r0,#0
000094  490c              LDR      r1,|L4.200|
000096  6008              STR      r0,[r1,#0]  ; bIsTimer3Used
;;;510                bIsSetTime3Event    = FALSE;
000098  490c              LDR      r1,|L4.204|
00009a  6008              STR      r0,[r1,#0]  ; bIsSetTime3Event
;;;511                break;
00009c  e001              B        |L4.162|
                  |L4.158|
;;;512            }
;;;513    
;;;514            default:
;;;515            {
;;;516                return E_DRVTIMER_CHANNEL ;
00009e  480c              LDR      r0,|L4.208|
                  |L4.160|
;;;517            }
;;;518        }
;;;519    
;;;520        return E_SUCCESS;
;;;521    }
0000a0  bd10              POP      {r4,pc}
                  |L4.162|
0000a2  bf00              NOP                            ;484
0000a4  2000              MOVS     r0,#0                 ;520
0000a6  e7fb              B        |L4.160|
;;;522    
                          ENDP

                  |L4.168|
                          DCD      0x40010000
                  |L4.172|
                          DCD      bIsTimer0Used
                  |L4.176|
                          DCD      bIsSetTime0Event
                  |L4.180|
                          DCD      bIsTimer1Used
                  |L4.184|
                          DCD      bIsSetTime1Event
                  |L4.188|
                          DCD      0x40110000
                  |L4.192|
                          DCD      bIsTimer2Used
                  |L4.196|
                          DCD      bIsSetTime2Event
                  |L4.200|
                          DCD      bIsTimer3Used
                  |L4.204|
                          DCD      bIsSetTime3Event
                  |L4.208|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_Delay||, CODE, READONLY, ALIGN=1

                  DrvTIMER_Delay PROC
;;;1039   /*---------------------------------------------------------------------------------------------------------*/
;;;1040   void DrvTIMER_Delay(E_TIMER_CHANNEL ch, uint32_t uIntTicks)
000000  b510              PUSH     {r4,lr}
;;;1041   {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;1042       uint32_t volatile btime;
;;;1043   
;;;1044       btime = DrvTIMER_GetIntTicks(ch);
000006  4618              MOV      r0,r3
000008  f7fffffe          BL       DrvTIMER_GetIntTicks
00000c  4604              MOV      r4,r0
;;;1045       
;;;1046       while (1)
00000e  e006              B        |L5.30|
                  |L5.16|
;;;1047       {
;;;1048           if ((DrvTIMER_GetIntTicks(ch) - btime) > uIntTicks)
000010  4618              MOV      r0,r3
000012  f7fffffe          BL       DrvTIMER_GetIntTicks
000016  1b00              SUBS     r0,r0,r4
000018  4290              CMP      r0,r2
00001a  d900              BLS      |L5.30|
;;;1049           {
;;;1050               break;
00001c  e000              B        |L5.32|
                  |L5.30|
00001e  e7f7              B        |L5.16|
                  |L5.32|
000020  bf00              NOP      
;;;1051           }
;;;1052       }
;;;1053   }
000022  bd10              POP      {r4,pc}
;;;1054   
                          ENDP


                          AREA ||i.DrvTIMER_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableInt PROC
;;;783    /*---------------------------------------------------------------------------------------------------------*/
;;;784    int32_t DrvTIMER_DisableInt(E_TIMER_CHANNEL ch)
000000  b510              PUSH     {r4,lr}
;;;785    {
000002  4604              MOV      r4,r0
;;;786        switch (ch)
000004  2c00              CMP      r4,#0
000006  d006              BEQ      |L6.22|
000008  2c01              CMP      r4,#1
00000a  d00f              BEQ      |L6.44|
00000c  2c02              CMP      r4,#2
00000e  d018              BEQ      |L6.66|
000010  2c03              CMP      r4,#3
000012  d12c              BNE      |L6.110|
000014  e020              B        |L6.88|
                  |L6.22|
;;;787        {
;;;788            case E_TMR0:
;;;789            {
;;;790                TIMER0->TCSR.IE = 0;
000016  4818              LDR      r0,|L6.120|
000018  6800              LDR      r0,[r0,#0]
00001a  2101              MOVS     r1,#1
00001c  0749              LSLS     r1,r1,#29
00001e  4388              BICS     r0,r0,r1
000020  4915              LDR      r1,|L6.120|
000022  6008              STR      r0,[r1,#0]
;;;791    			NVIC_DisableIRQ(TMR0_IRQn); 
000024  2008              MOVS     r0,#8
000026  f7fffffe          BL       NVIC_DisableIRQ
;;;792                break;
00002a  e022              B        |L6.114|
                  |L6.44|
;;;793            }
;;;794    
;;;795            case E_TMR1:
;;;796            {
;;;797                TIMER1->TCSR.IE = 0;
00002c  4812              LDR      r0,|L6.120|
00002e  6a00              LDR      r0,[r0,#0x20]
000030  2101              MOVS     r1,#1
000032  0749              LSLS     r1,r1,#29
000034  4388              BICS     r0,r0,r1
000036  4910              LDR      r1,|L6.120|
000038  6208              STR      r0,[r1,#0x20]
;;;798    			NVIC_DisableIRQ(TMR1_IRQn); 
00003a  2009              MOVS     r0,#9
00003c  f7fffffe          BL       NVIC_DisableIRQ
;;;799                break;
000040  e017              B        |L6.114|
                  |L6.66|
;;;800            }
;;;801    
;;;802            case E_TMR2:
;;;803            {
;;;804                TIMER2->TCSR.IE = 0;
000042  480e              LDR      r0,|L6.124|
000044  6800              LDR      r0,[r0,#0]
000046  2101              MOVS     r1,#1
000048  0749              LSLS     r1,r1,#29
00004a  4388              BICS     r0,r0,r1
00004c  490b              LDR      r1,|L6.124|
00004e  6008              STR      r0,[r1,#0]
;;;805    			NVIC_DisableIRQ(TMR2_IRQn); 
000050  200a              MOVS     r0,#0xa
000052  f7fffffe          BL       NVIC_DisableIRQ
;;;806                break;
000056  e00c              B        |L6.114|
                  |L6.88|
;;;807            }
;;;808    
;;;809            case E_TMR3:
;;;810            {
;;;811                TIMER3->TCSR.IE = 0;
000058  4808              LDR      r0,|L6.124|
00005a  6a00              LDR      r0,[r0,#0x20]
00005c  2101              MOVS     r1,#1
00005e  0749              LSLS     r1,r1,#29
000060  4388              BICS     r0,r0,r1
000062  4906              LDR      r1,|L6.124|
000064  6208              STR      r0,[r1,#0x20]
;;;812    			NVIC_DisableIRQ(TMR3_IRQn); 
000066  200b              MOVS     r0,#0xb
000068  f7fffffe          BL       NVIC_DisableIRQ
;;;813                break;
00006c  e001              B        |L6.114|
                  |L6.110|
;;;814            }
;;;815    
;;;816            default:
;;;817            {
;;;818    			return E_DRVTIMER_CHANNEL;
00006e  4804              LDR      r0,|L6.128|
                  |L6.112|
;;;819            }
;;;820        }
;;;821        
;;;822        return E_SUCCESS ;
;;;823    }
000070  bd10              POP      {r4,pc}
                  |L6.114|
000072  bf00              NOP                            ;792
000074  2000              MOVS     r0,#0                 ;822
000076  e7fb              B        |L6.112|
;;;824    
                          ENDP

                  |L6.120|
                          DCD      0x40010000
                  |L6.124|
                          DCD      0x40110000
                  |L6.128|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableInt PROC
;;;730    /*---------------------------------------------------------------------------------------------------------*/
;;;731    int32_t DrvTIMER_EnableInt(E_TIMER_CHANNEL ch)
000000  b510              PUSH     {r4,lr}
;;;732    {
000002  4604              MOV      r4,r0
;;;733        switch (ch)
000004  2c00              CMP      r4,#0
000006  d006              BEQ      |L7.22|
000008  2c01              CMP      r4,#1
00000a  d010              BEQ      |L7.46|
00000c  2c02              CMP      r4,#2
00000e  d01a              BEQ      |L7.70|
000010  2c03              CMP      r4,#3
000012  d130              BNE      |L7.118|
000014  e023              B        |L7.94|
                  |L7.22|
;;;734        {
;;;735            case E_TMR0:
;;;736            {
;;;737                TIMER0->TCSR.IE = 1;
000016  481a              LDR      r0,|L7.128|
000018  6800              LDR      r0,[r0,#0]
00001a  2101              MOVS     r1,#1
00001c  0749              LSLS     r1,r1,#29
00001e  4388              BICS     r0,r0,r1
000020  1840              ADDS     r0,r0,r1
000022  4917              LDR      r1,|L7.128|
000024  6008              STR      r0,[r1,#0]
;;;738    			NVIC_EnableIRQ(TMR0_IRQn); 
000026  2008              MOVS     r0,#8
000028  f7fffffe          BL       NVIC_EnableIRQ
;;;739                break;
00002c  e025              B        |L7.122|
                  |L7.46|
;;;740            }
;;;741    
;;;742            case E_TMR1:
;;;743            {
;;;744                TIMER1->TCSR.IE = 1;
00002e  4814              LDR      r0,|L7.128|
000030  6a00              LDR      r0,[r0,#0x20]
000032  2101              MOVS     r1,#1
000034  0749              LSLS     r1,r1,#29
000036  4388              BICS     r0,r0,r1
000038  1840              ADDS     r0,r0,r1
00003a  4911              LDR      r1,|L7.128|
00003c  6208              STR      r0,[r1,#0x20]
;;;745    			NVIC_EnableIRQ(TMR1_IRQn); 
00003e  2009              MOVS     r0,#9
000040  f7fffffe          BL       NVIC_EnableIRQ
;;;746                break;
000044  e019              B        |L7.122|
                  |L7.70|
;;;747            }
;;;748    
;;;749            case E_TMR2:
;;;750            {
;;;751                TIMER2->TCSR.IE = 1;
000046  480f              LDR      r0,|L7.132|
000048  6800              LDR      r0,[r0,#0]
00004a  2101              MOVS     r1,#1
00004c  0749              LSLS     r1,r1,#29
00004e  4388              BICS     r0,r0,r1
000050  1840              ADDS     r0,r0,r1
000052  490c              LDR      r1,|L7.132|
000054  6008              STR      r0,[r1,#0]
;;;752    			NVIC_EnableIRQ(TMR2_IRQn); 
000056  200a              MOVS     r0,#0xa
000058  f7fffffe          BL       NVIC_EnableIRQ
;;;753                break;
00005c  e00d              B        |L7.122|
                  |L7.94|
;;;754            }
;;;755    
;;;756            case E_TMR3:
;;;757            {
;;;758                TIMER3->TCSR.IE = 1;
00005e  4809              LDR      r0,|L7.132|
000060  6a00              LDR      r0,[r0,#0x20]
000062  2101              MOVS     r1,#1
000064  0749              LSLS     r1,r1,#29
000066  4388              BICS     r0,r0,r1
000068  1840              ADDS     r0,r0,r1
00006a  4906              LDR      r1,|L7.132|
00006c  6208              STR      r0,[r1,#0x20]
;;;759    			NVIC_EnableIRQ(TMR3_IRQn); 
00006e  200b              MOVS     r0,#0xb
000070  f7fffffe          BL       NVIC_EnableIRQ
;;;760                break;
000074  e001              B        |L7.122|
                  |L7.118|
;;;761            }
;;;762    
;;;763            default:
;;;764            {
;;;765    			return E_DRVTIMER_CHANNEL;
000076  4804              LDR      r0,|L7.136|
                  |L7.120|
;;;766            }
;;;767        }
;;;768        
;;;769        return E_SUCCESS ;
;;;770    }
000078  bd10              POP      {r4,pc}
                  |L7.122|
00007a  bf00              NOP                            ;739
00007c  2000              MOVS     r0,#0                 ;769
00007e  e7fb              B        |L7.120|
;;;771    
                          ENDP

                  |L7.128|
                          DCD      0x40010000
                  |L7.132|
                          DCD      0x40110000
                  |L7.136|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetCounters||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetCounters PROC
;;;1307   /*---------------------------------------------------------------------------------------------------------*/
;;;1308   uint32_t DrvTIMER_GetCounters(E_TIMER_CHANNEL ch)
000000  4602              MOV      r2,r0
;;;1309   {
;;;1310       volatile uint32_t u32Counters;
;;;1311   
;;;1312       switch (ch)
000002  2a00              CMP      r2,#0
000004  d006              BEQ      |L8.20|
000006  2a01              CMP      r2,#1
000008  d007              BEQ      |L8.26|
00000a  2a02              CMP      r2,#2
00000c  d008              BEQ      |L8.32|
00000e  2a03              CMP      r2,#3
000010  d10c              BNE      |L8.44|
000012  e008              B        |L8.38|
                  |L8.20|
;;;1313       {
;;;1314           case E_TMR0:
;;;1315           {
;;;1316               u32Counters = TIMER0->TDR; 
000014  4808              LDR      r0,|L8.56|
000016  68c1              LDR      r1,[r0,#0xc]
;;;1317               break;  
000018  e00a              B        |L8.48|
                  |L8.26|
;;;1318           }
;;;1319   
;;;1320           case E_TMR1:
;;;1321           {
;;;1322               u32Counters = TIMER1->TDR; 
00001a  4807              LDR      r0,|L8.56|
00001c  6ac1              LDR      r1,[r0,#0x2c]
;;;1323               break;  
00001e  e007              B        |L8.48|
                  |L8.32|
;;;1324           }	
;;;1325   
;;;1326           case E_TMR2:
;;;1327           {
;;;1328               u32Counters = TIMER2->TDR; 
000020  4806              LDR      r0,|L8.60|
000022  68c1              LDR      r1,[r0,#0xc]
;;;1329               break;  
000024  e004              B        |L8.48|
                  |L8.38|
;;;1330           }
;;;1331   
;;;1332           case E_TMR3:
;;;1333           {
;;;1334               u32Counters = TIMER3->TDR; 
000026  4805              LDR      r0,|L8.60|
000028  6ac1              LDR      r1,[r0,#0x2c]
;;;1335               break;  
00002a  e001              B        |L8.48|
                  |L8.44|
;;;1336           }
;;;1337   
;;;1338           default:
;;;1339           {
;;;1340   			return E_DRVTIMER_CHANNEL;
00002c  4804              LDR      r0,|L8.64|
                  |L8.46|
;;;1341           }
;;;1342       }
;;;1343   
;;;1344       return u32Counters;
;;;1345   }
00002e  4770              BX       lr
                  |L8.48|
000030  bf00              NOP                            ;1317
000032  4608              MOV      r0,r1                 ;1344
000034  e7fb              B        |L8.46|
;;;1346   
                          ENDP

000036  0000              DCW      0x0000
                  |L8.56|
                          DCD      0x40010000
                  |L8.60|
                          DCD      0x40110000
                  |L8.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetIntFlag||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetIntFlag PROC
;;;836    /*---------------------------------------------------------------------------------------------------------*/
;;;837    int32_t DrvTIMER_GetIntFlag(E_TIMER_CHANNEL ch)
000000  4602              MOV      r2,r0
;;;838    {
;;;839    	int32_t iIntStatus;
;;;840    
;;;841    	if (ch == E_TMR0 )
000002  2a00              CMP      r2,#0
000004  d104              BNE      |L9.16|
;;;842    		iIntStatus =  TIMER0->TISR.TIF ;
000006  480f              LDR      r0,|L9.68|
000008  6880              LDR      r0,[r0,#8]
00000a  07c1              LSLS     r1,r0,#31
00000c  0fc9              LSRS     r1,r1,#31
00000e  e016              B        |L9.62|
                  |L9.16|
;;;843    	else if(ch == E_TMR1 )
000010  2a01              CMP      r2,#1
000012  d104              BNE      |L9.30|
;;;844        	iIntStatus =  TIMER1->TISR.TIF ;
000014  480b              LDR      r0,|L9.68|
000016  6a80              LDR      r0,[r0,#0x28]
000018  07c1              LSLS     r1,r0,#31
00001a  0fc9              LSRS     r1,r1,#31
00001c  e00f              B        |L9.62|
                  |L9.30|
;;;845    	else if(ch == E_TMR2 )
00001e  2a02              CMP      r2,#2
000020  d104              BNE      |L9.44|
;;;846        	iIntStatus =  TIMER2->TISR.TIF ;
000022  4809              LDR      r0,|L9.72|
000024  6880              LDR      r0,[r0,#8]
000026  07c1              LSLS     r1,r0,#31
000028  0fc9              LSRS     r1,r1,#31
00002a  e008              B        |L9.62|
                  |L9.44|
;;;847    	else if(ch == E_TMR3 )
00002c  2a03              CMP      r2,#3
00002e  d104              BNE      |L9.58|
;;;848        	iIntStatus =  TIMER3->TISR.TIF ;
000030  4805              LDR      r0,|L9.72|
000032  6a80              LDR      r0,[r0,#0x28]
000034  07c1              LSLS     r1,r0,#31
000036  0fc9              LSRS     r1,r1,#31
000038  e001              B        |L9.62|
                  |L9.58|
;;;849    	else 
;;;850        	return E_DRVTIMER_CHANNEL;
00003a  4804              LDR      r0,|L9.76|
                  |L9.60|
;;;851    
;;;852    	return iIntStatus;
;;;853    }
00003c  4770              BX       lr
                  |L9.62|
00003e  4608              MOV      r0,r1                 ;852
000040  e7fc              B        |L9.60|
;;;854    
                          ENDP

000042  0000              DCW      0x0000
                  |L9.68|
                          DCD      0x40010000
                  |L9.72|
                          DCD      0x40110000
                  |L9.76|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetIntTicks||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetIntTicks PROC
;;;945    /*---------------------------------------------------------------------------------------------------------*/
;;;946    uint32_t DrvTIMER_GetIntTicks(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;947    {
;;;948        switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L10.20|
000006  2901              CMP      r1,#1
000008  d007              BEQ      |L10.26|
00000a  2902              CMP      r1,#2
00000c  d008              BEQ      |L10.32|
00000e  2903              CMP      r1,#3
000010  d10c              BNE      |L10.44|
000012  e008              B        |L10.38|
                  |L10.20|
;;;949        {
;;;950            case E_TMR0:
;;;951            {
;;;952                return uTimer0Tick;  
000014  4806              LDR      r0,|L10.48|
000016  6800              LDR      r0,[r0,#0]  ; uTimer0Tick
                  |L10.24|
;;;953            }
;;;954    
;;;955            case E_TMR1:
;;;956            {
;;;957                return uTimer1Tick;
;;;958            }	
;;;959    
;;;960            case E_TMR2:
;;;961            {
;;;962                return uTimer2Tick;
;;;963            }
;;;964    
;;;965            case E_TMR3:
;;;966            {
;;;967                return uTimer3Tick;
;;;968            }
;;;969    
;;;970            default:
;;;971            {
;;;972    			return E_DRVTIMER_CHANNEL;
;;;973            }
;;;974        }
;;;975    }
000018  4770              BX       lr
                  |L10.26|
00001a  4806              LDR      r0,|L10.52|
00001c  6800              LDR      r0,[r0,#0]            ;957  ; uTimer1Tick
00001e  e7fb              B        |L10.24|
                  |L10.32|
000020  4805              LDR      r0,|L10.56|
000022  6800              LDR      r0,[r0,#0]            ;962  ; uTimer2Tick
000024  e7f8              B        |L10.24|
                  |L10.38|
000026  4805              LDR      r0,|L10.60|
000028  6800              LDR      r0,[r0,#0]            ;967  ; uTimer3Tick
00002a  e7f5              B        |L10.24|
                  |L10.44|
00002c  4804              LDR      r0,|L10.64|
00002e  e7f3              B        |L10.24|
;;;976    
                          ENDP

                  |L10.48|
                          DCD      uTimer0Tick
                  |L10.52|
                          DCD      uTimer1Tick
                  |L10.56|
                          DCD      uTimer2Tick
                  |L10.60|
                          DCD      uTimer3Tick
                  |L10.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetVersion PROC
;;;1356   /*---------------------------------------------------------------------------------------------------------*/
;;;1357   uint32_t DrvTIMER_GetVersion(void)
000000  4800              LDR      r0,|L11.4|
;;;1358   {
;;;1359   	return DRVTIMER_VERSION_NUM;
;;;1360   }
000002  4770              BX       lr
;;;1361   
                          ENDP

                  |L11.4|
                          DCD      0x00010202

                          AREA ||i.DrvTIMER_Init||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Init PROC
;;;292    /*---------------------------------------------------------------------------------------------------------*/
;;;293    void DrvTIMER_Init(void)
000000  2001              MOVS     r0,#1
;;;294    {
;;;295        bIsTimer0Initial    = TRUE;
000002  4904              LDR      r1,|L12.20|
000004  6008              STR      r0,[r1,#0]  ; bIsTimer0Initial
;;;296        bIsTimer1Initial    = TRUE;
000006  4904              LDR      r1,|L12.24|
000008  6008              STR      r0,[r1,#0]  ; bIsTimer1Initial
;;;297    	bIsTimer2Initial    = TRUE;
00000a  4904              LDR      r1,|L12.28|
00000c  6008              STR      r0,[r1,#0]  ; bIsTimer2Initial
;;;298    	bIsTimer3Initial    = TRUE;
00000e  4904              LDR      r1,|L12.32|
000010  6008              STR      r0,[r1,#0]  ; bIsTimer3Initial
;;;299    }
000012  4770              BX       lr
;;;300    
                          ENDP

                  |L12.20|
                          DCD      bIsTimer0Initial
                  |L12.24|
                          DCD      bIsTimer1Initial
                  |L12.28|
                          DCD      bIsTimer2Initial
                  |L12.32|
                          DCD      bIsTimer3Initial

                          AREA ||i.DrvTIMER_Open||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Open PROC
;;;317    /*---------------------------------------------------------------------------------------------------------*/
;;;318    int32_t DrvTIMER_Open(E_TIMER_CHANNEL ch, uint32_t uTicksPerSecond, E_TIMER_OPMODE op_mode)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;319    {
000002  b082              SUB      sp,sp,#8
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;320        uint32_t i;
;;;321        uint32_t uRegTcmpr, uRegTcr = 0x0;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;322    
;;;323        switch (ch)
00000c  9802              LDR      r0,[sp,#8]
00000e  2800              CMP      r0,#0
000010  d006              BEQ      |L13.32|
000012  2801              CMP      r0,#1
000014  d04a              BEQ      |L13.172|
000016  2802              CMP      r0,#2
000018  d07e              BEQ      |L13.280|
00001a  2803              CMP      r0,#3
00001c  d17d              BNE      |L13.282|
00001e  e0d2              B        |L13.454|
                  |L13.32|
;;;324        {
;;;325            case E_TMR0:
;;;326            {
;;;327                if ((bIsTimer0Initial != TRUE) || (bIsTimer0Used != FALSE))
000020  488e              LDR      r0,|L13.604|
000022  6800              LDR      r0,[r0,#0]  ; bIsTimer0Initial
000024  2801              CMP      r0,#1
000026  d103              BNE      |L13.48|
000028  488d              LDR      r0,|L13.608|
00002a  6800              LDR      r0,[r0,#0]  ; bIsTimer0Used
00002c  2800              CMP      r0,#0
00002e  d002              BEQ      |L13.54|
                  |L13.48|
;;;328                    return E_DRVTIMER_EIO;
000030  488c              LDR      r0,|L13.612|
                  |L13.50|
;;;329                
;;;330                bIsTimer0Used = TRUE;
;;;331               
;;;332    		   	SYSCLK->APBCLK.TMR0_EN = 1;
;;;333    			                                                  
;;;334    			outpw((uint32_t)&TIMER0->TCSR, 0);                  /* disable timer */
;;;335               
;;;336    		    TIMER0->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;337    							   
;;;338                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;339                {
;;;340                    tTime0Event[i].active = FALSE;
;;;341                }
;;;342    
;;;343                uTimer0Tick = 0;			
;;;344    			_sys_uTimer0TickPerSecond = uTicksPerSecond;
;;;345                		
;;;346                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR0), uTicksPerSecond); 
;;;347    			if (uRegTcmpr == (uint32_t)-1)		
;;;348    			{
;;;349    				return E_DRVTIMER_CLOCK_RATE;			
;;;350    			}
;;;351    
;;;352    			TIMER0->TCMPR = (uRegTcmpr << 8) >> 8;
;;;353    			outpw((uint32_t)&TIMER0->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));   			
;;;354                break;
;;;355            }
;;;356    
;;;357            case E_TMR1:
;;;358            {
;;;359                if ((bIsTimer1Initial != TRUE) || (bIsTimer1Used != FALSE))
;;;360                    return E_DRVTIMER_EIO;
;;;361    
;;;362                bIsTimer1Used = TRUE;
;;;363    
;;;364                SYSCLK->APBCLK.TMR1_EN = 1;
;;;365    			
;;;366    			outpw((uint32_t)&TIMER1->TCSR, 0);                  /* disable timer */
;;;367                
;;;368    			TIMER1->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;369    
;;;370                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;371                {
;;;372                    tTime1Event[i].active = FALSE;
;;;373                }
;;;374    
;;;375                uTimer1Tick = 0;
;;;376                _sys_uTimer1TickPerSecond = uTicksPerSecond;
;;;377    
;;;378                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR1), uTicksPerSecond); 
;;;379    			if(uRegTcmpr == (uint32_t)-1)		
;;;380    			{
;;;381    				return E_DRVTIMER_CLOCK_RATE;			
;;;382    			}
;;;383    
;;;384    			TIMER1->TCMPR = (uRegTcmpr << 8) >> 8;
;;;385    			outpw((uint32_t)&TIMER1->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));   
;;;386                break;
;;;387            }
;;;388    
;;;389            case E_TMR2:
;;;390            {
;;;391                if ((bIsTimer2Initial != TRUE) || (bIsTimer2Used != FALSE))
;;;392                    return E_DRVTIMER_EIO;    
;;;393    
;;;394                bIsTimer2Used = TRUE;
;;;395    
;;;396                SYSCLK->APBCLK.TMR2_EN =1;
;;;397    			
;;;398    			outpw((uint32_t)&TIMER2->TCSR, 0);                  /* disable timer */
;;;399    
;;;400                TIMER2->TISR.TIF = 1;               		        /* write 1 to clear for safty */
;;;401    
;;;402                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;403                {
;;;404                    tTime2Event[i].active = FALSE;
;;;405                }
;;;406    
;;;407                uTimer2Tick = 0;
;;;408                _sys_uTimer2TickPerSecond = uTicksPerSecond;
;;;409    
;;;410                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR2), uTicksPerSecond); 
;;;411    			if(uRegTcmpr == (uint32_t)-1)		
;;;412    			{
;;;413    				return E_DRVTIMER_CLOCK_RATE;			
;;;414    			}
;;;415    
;;;416    			TIMER2->TCMPR = (uRegTcmpr << 8) >> 8;	
;;;417    			outpw((uint32_t)&TIMER2->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));   
;;;418                break;
;;;419            }
;;;420    
;;;421    		case E_TMR3:
;;;422            {
;;;423                if ((bIsTimer3Initial != TRUE) || (bIsTimer3Used != FALSE))
;;;424                    return E_DRVTIMER_EIO;
;;;425    
;;;426                bIsTimer3Used = TRUE;
;;;427    
;;;428                SYSCLK->APBCLK.TMR3_EN = 1;
;;;429    
;;;430    			outpw((uint32_t)&TIMER3->TCSR, 0);                  /* disable timer */
;;;431    
;;;432                TIMER3->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;433    
;;;434                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;435                {
;;;436                    tTime3Event[i].active = FALSE;
;;;437                }
;;;438    
;;;439                uTimer3Tick = 0;
;;;440                _sys_uTimer3TickPerSecond = uTicksPerSecond;
;;;441                
;;;442                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR3), uTicksPerSecond); 
;;;443    			if(uRegTcmpr == (uint32_t)-1)		
;;;444    			{
;;;445    				return E_DRVTIMER_CLOCK_RATE;			
;;;446    			}
;;;447    
;;;448    			TIMER3->TCMPR = (uRegTcmpr << 8) >> 8;
;;;449    			outpw((uint32_t)&TIMER3->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));    
;;;450                break;
;;;451            }
;;;452    
;;;453            default:
;;;454            {
;;;455                return E_DRVTIMER_CHANNEL ;
;;;456            }
;;;457        }
;;;458    
;;;459        return E_SUCCESS;
;;;460    }
000032  b005              ADD      sp,sp,#0x14
000034  bdf0              POP      {r4-r7,pc}
                  |L13.54|
000036  2001              MOVS     r0,#1                 ;330
000038  4989              LDR      r1,|L13.608|
00003a  6008              STR      r0,[r1,#0]            ;330  ; bIsTimer0Used
00003c  488a              LDR      r0,|L13.616|
00003e  6880              LDR      r0,[r0,#8]            ;332
000040  2104              MOVS     r1,#4                 ;332
000042  4388              BICS     r0,r0,r1              ;332
000044  1d00              ADDS     r0,r0,#4              ;332
000046  4988              LDR      r1,|L13.616|
000048  6088              STR      r0,[r1,#8]            ;332
00004a  2000              MOVS     r0,#0                 ;334
00004c  4987              LDR      r1,|L13.620|
00004e  6008              STR      r0,[r1,#0]            ;334
000050  4608              MOV      r0,r1                 ;336
000052  6880              LDR      r0,[r0,#8]            ;336
000054  0840              LSRS     r0,r0,#1              ;336
000056  0040              LSLS     r0,r0,#1              ;336
000058  1c40              ADDS     r0,r0,#1              ;336
00005a  6088              STR      r0,[r1,#8]            ;336
00005c  2500              MOVS     r5,#0                 ;338
00005e  e005              B        |L13.108|
                  |L13.96|
000060  2100              MOVS     r1,#0                 ;340
000062  2014              MOVS     r0,#0x14              ;340
000064  4368              MULS     r0,r5,r0              ;340
000066  4a82              LDR      r2,|L13.624|
000068  5011              STR      r1,[r2,r0]            ;340
00006a  1c6d              ADDS     r5,r5,#1              ;338
                  |L13.108|
00006c  2d00              CMP      r5,#0                 ;338
00006e  d0f7              BEQ      |L13.96|
000070  2000              MOVS     r0,#0                 ;343
000072  4980              LDR      r1,|L13.628|
000074  6008              STR      r0,[r1,#0]            ;343  ; uTimer0Tick
000076  4880              LDR      r0,|L13.632|
000078  6006              STR      r6,[r0,#0]            ;344  ; _sys_uTimer0TickPerSecond
00007a  2000              MOVS     r0,#0                 ;346
00007c  f7fffffe          BL       GetTimerClock
000080  4631              MOV      r1,r6                 ;346
000082  9000              STR      r0,[sp,#0]            ;346
000084  f7fffffe          BL       CalTimerInitValue
000088  4604              MOV      r4,r0                 ;346
00008a  1c60              ADDS     r0,r4,#1              ;347
00008c  d102              BNE      |L13.148|
00008e  4875              LDR      r0,|L13.612|
000090  1e40              SUBS     r0,r0,#1              ;349
000092  e7ce              B        |L13.50|
                  |L13.148|
000094  0220              LSLS     r0,r4,#8              ;352
000096  0a00              LSRS     r0,r0,#8              ;352
000098  4974              LDR      r1,|L13.620|
00009a  6048              STR      r0,[r1,#4]            ;352
00009c  0e20              LSRS     r0,r4,#24             ;353
00009e  9901              LDR      r1,[sp,#4]            ;353
0000a0  4308              ORRS     r0,r0,r1              ;353
0000a2  06f9              LSLS     r1,r7,#27             ;353
0000a4  4308              ORRS     r0,r0,r1              ;353
0000a6  4971              LDR      r1,|L13.620|
0000a8  6008              STR      r0,[r1,#0]            ;353
0000aa  e0d4              B        |L13.598|
                  |L13.172|
0000ac  4873              LDR      r0,|L13.636|
0000ae  6800              LDR      r0,[r0,#0]            ;359  ; bIsTimer1Initial
0000b0  2801              CMP      r0,#1                 ;359
0000b2  d103              BNE      |L13.188|
0000b4  4872              LDR      r0,|L13.640|
0000b6  6800              LDR      r0,[r0,#0]            ;359  ; bIsTimer1Used
0000b8  2800              CMP      r0,#0                 ;359
0000ba  d001              BEQ      |L13.192|
                  |L13.188|
0000bc  4869              LDR      r0,|L13.612|
0000be  e7b8              B        |L13.50|
                  |L13.192|
0000c0  2001              MOVS     r0,#1                 ;362
0000c2  496f              LDR      r1,|L13.640|
0000c4  6008              STR      r0,[r1,#0]            ;362  ; bIsTimer1Used
0000c6  4868              LDR      r0,|L13.616|
0000c8  6880              LDR      r0,[r0,#8]            ;364
0000ca  2108              MOVS     r1,#8                 ;364
0000cc  4388              BICS     r0,r0,r1              ;364
0000ce  3008              ADDS     r0,r0,#8              ;364
0000d0  4965              LDR      r1,|L13.616|
0000d2  6088              STR      r0,[r1,#8]            ;364
0000d4  2000              MOVS     r0,#0                 ;366
0000d6  4965              LDR      r1,|L13.620|
0000d8  6208              STR      r0,[r1,#0x20]         ;366
0000da  4608              MOV      r0,r1                 ;368
0000dc  6a80              LDR      r0,[r0,#0x28]         ;368
0000de  0840              LSRS     r0,r0,#1              ;368
0000e0  0040              LSLS     r0,r0,#1              ;368
0000e2  1c40              ADDS     r0,r0,#1              ;368
0000e4  6288              STR      r0,[r1,#0x28]         ;368
0000e6  2500              MOVS     r5,#0                 ;370
0000e8  e005              B        |L13.246|
                  |L13.234|
0000ea  2100              MOVS     r1,#0                 ;372
0000ec  2014              MOVS     r0,#0x14              ;372
0000ee  4368              MULS     r0,r5,r0              ;372
0000f0  4a64              LDR      r2,|L13.644|
0000f2  5011              STR      r1,[r2,r0]            ;372
0000f4  1c6d              ADDS     r5,r5,#1              ;370
                  |L13.246|
0000f6  2d00              CMP      r5,#0                 ;370
0000f8  d0f7              BEQ      |L13.234|
0000fa  2000              MOVS     r0,#0                 ;375
0000fc  4962              LDR      r1,|L13.648|
0000fe  6008              STR      r0,[r1,#0]            ;375  ; uTimer1Tick
000100  4862              LDR      r0,|L13.652|
000102  6006              STR      r6,[r0,#0]            ;376  ; _sys_uTimer1TickPerSecond
000104  2001              MOVS     r0,#1                 ;378
000106  f7fffffe          BL       GetTimerClock
00010a  4631              MOV      r1,r6                 ;378
00010c  9000              STR      r0,[sp,#0]            ;378
00010e  f7fffffe          BL       CalTimerInitValue
000112  4604              MOV      r4,r0                 ;378
000114  1c60              ADDS     r0,r4,#1              ;379
000116  e001              B        |L13.284|
                  |L13.280|
000118  e010              B        |L13.316|
                  |L13.282|
00011a  e099              B        |L13.592|
                  |L13.284|
00011c  d102              BNE      |L13.292|
00011e  4851              LDR      r0,|L13.612|
000120  1e40              SUBS     r0,r0,#1              ;381
000122  e786              B        |L13.50|
                  |L13.292|
000124  0220              LSLS     r0,r4,#8              ;384
000126  0a00              LSRS     r0,r0,#8              ;384
000128  4950              LDR      r1,|L13.620|
00012a  6248              STR      r0,[r1,#0x24]         ;384
00012c  0e20              LSRS     r0,r4,#24             ;385
00012e  9901              LDR      r1,[sp,#4]            ;385
000130  4308              ORRS     r0,r0,r1              ;385
000132  06f9              LSLS     r1,r7,#27             ;385
000134  4308              ORRS     r0,r0,r1              ;385
000136  494d              LDR      r1,|L13.620|
000138  6208              STR      r0,[r1,#0x20]         ;385
00013a  e08c              B        |L13.598|
                  |L13.316|
00013c  4854              LDR      r0,|L13.656|
00013e  6800              LDR      r0,[r0,#0]            ;391  ; bIsTimer2Initial
000140  2801              CMP      r0,#1                 ;391
000142  d103              BNE      |L13.332|
000144  4853              LDR      r0,|L13.660|
000146  6800              LDR      r0,[r0,#0]            ;391  ; bIsTimer2Used
000148  2800              CMP      r0,#0                 ;391
00014a  d001              BEQ      |L13.336|
                  |L13.332|
00014c  4845              LDR      r0,|L13.612|
00014e  e770              B        |L13.50|
                  |L13.336|
000150  2001              MOVS     r0,#1                 ;394
000152  4950              LDR      r1,|L13.660|
000154  6008              STR      r0,[r1,#0]            ;394  ; bIsTimer2Used
000156  4844              LDR      r0,|L13.616|
000158  6880              LDR      r0,[r0,#8]            ;396
00015a  2110              MOVS     r1,#0x10              ;396
00015c  4388              BICS     r0,r0,r1              ;396
00015e  3010              ADDS     r0,r0,#0x10           ;396
000160  4941              LDR      r1,|L13.616|
000162  6088              STR      r0,[r1,#8]            ;396
000164  2000              MOVS     r0,#0                 ;398
000166  494c              LDR      r1,|L13.664|
000168  6008              STR      r0,[r1,#0]            ;398
00016a  4608              MOV      r0,r1                 ;400
00016c  6880              LDR      r0,[r0,#8]            ;400
00016e  0840              LSRS     r0,r0,#1              ;400
000170  0040              LSLS     r0,r0,#1              ;400
000172  1c40              ADDS     r0,r0,#1              ;400
000174  6088              STR      r0,[r1,#8]            ;400
000176  2500              MOVS     r5,#0                 ;402
000178  e005              B        |L13.390|
                  |L13.378|
00017a  2100              MOVS     r1,#0                 ;404
00017c  2014              MOVS     r0,#0x14              ;404
00017e  4368              MULS     r0,r5,r0              ;404
000180  4a46              LDR      r2,|L13.668|
000182  5011              STR      r1,[r2,r0]            ;404
000184  1c6d              ADDS     r5,r5,#1              ;402
                  |L13.390|
000186  2d00              CMP      r5,#0                 ;402
000188  d0f7              BEQ      |L13.378|
00018a  2000              MOVS     r0,#0                 ;407
00018c  4944              LDR      r1,|L13.672|
00018e  6008              STR      r0,[r1,#0]            ;407  ; uTimer2Tick
000190  4844              LDR      r0,|L13.676|
000192  6006              STR      r6,[r0,#0]            ;408  ; _sys_uTimer2TickPerSecond
000194  2002              MOVS     r0,#2                 ;410
000196  f7fffffe          BL       GetTimerClock
00019a  4631              MOV      r1,r6                 ;410
00019c  9000              STR      r0,[sp,#0]            ;410
00019e  f7fffffe          BL       CalTimerInitValue
0001a2  4604              MOV      r4,r0                 ;410
0001a4  1c60              ADDS     r0,r4,#1              ;411
0001a6  d102              BNE      |L13.430|
0001a8  482e              LDR      r0,|L13.612|
0001aa  1e40              SUBS     r0,r0,#1              ;413
0001ac  e741              B        |L13.50|
                  |L13.430|
0001ae  0220              LSLS     r0,r4,#8              ;416
0001b0  0a00              LSRS     r0,r0,#8              ;416
0001b2  4939              LDR      r1,|L13.664|
0001b4  6048              STR      r0,[r1,#4]            ;416
0001b6  0e20              LSRS     r0,r4,#24             ;417
0001b8  9901              LDR      r1,[sp,#4]            ;417
0001ba  4308              ORRS     r0,r0,r1              ;417
0001bc  06f9              LSLS     r1,r7,#27             ;417
0001be  4308              ORRS     r0,r0,r1              ;417
0001c0  4935              LDR      r1,|L13.664|
0001c2  6008              STR      r0,[r1,#0]            ;417
0001c4  e047              B        |L13.598|
                  |L13.454|
0001c6  4838              LDR      r0,|L13.680|
0001c8  6800              LDR      r0,[r0,#0]            ;423  ; bIsTimer3Initial
0001ca  2801              CMP      r0,#1                 ;423
0001cc  d103              BNE      |L13.470|
0001ce  4837              LDR      r0,|L13.684|
0001d0  6800              LDR      r0,[r0,#0]            ;423  ; bIsTimer3Used
0001d2  2800              CMP      r0,#0                 ;423
0001d4  d001              BEQ      |L13.474|
                  |L13.470|
0001d6  4823              LDR      r0,|L13.612|
0001d8  e72b              B        |L13.50|
                  |L13.474|
0001da  2001              MOVS     r0,#1                 ;426
0001dc  4933              LDR      r1,|L13.684|
0001de  6008              STR      r0,[r1,#0]            ;426  ; bIsTimer3Used
0001e0  4821              LDR      r0,|L13.616|
0001e2  6880              LDR      r0,[r0,#8]            ;428
0001e4  2120              MOVS     r1,#0x20              ;428
0001e6  4388              BICS     r0,r0,r1              ;428
0001e8  3020              ADDS     r0,r0,#0x20           ;428
0001ea  491f              LDR      r1,|L13.616|
0001ec  6088              STR      r0,[r1,#8]            ;428
0001ee  2000              MOVS     r0,#0                 ;430
0001f0  4929              LDR      r1,|L13.664|
0001f2  6208              STR      r0,[r1,#0x20]         ;430
0001f4  4608              MOV      r0,r1                 ;432
0001f6  6a80              LDR      r0,[r0,#0x28]         ;432
0001f8  0840              LSRS     r0,r0,#1              ;432
0001fa  0040              LSLS     r0,r0,#1              ;432
0001fc  1c40              ADDS     r0,r0,#1              ;432
0001fe  6288              STR      r0,[r1,#0x28]         ;432
000200  2500              MOVS     r5,#0                 ;434
000202  e005              B        |L13.528|
                  |L13.516|
000204  2100              MOVS     r1,#0                 ;436
000206  2014              MOVS     r0,#0x14              ;436
000208  4368              MULS     r0,r5,r0              ;436
00020a  4a29              LDR      r2,|L13.688|
00020c  5011              STR      r1,[r2,r0]            ;436
00020e  1c6d              ADDS     r5,r5,#1              ;434
                  |L13.528|
000210  2d00              CMP      r5,#0                 ;434
000212  d0f7              BEQ      |L13.516|
000214  2000              MOVS     r0,#0                 ;439
000216  4927              LDR      r1,|L13.692|
000218  6008              STR      r0,[r1,#0]            ;439  ; uTimer3Tick
00021a  4827              LDR      r0,|L13.696|
00021c  6006              STR      r6,[r0,#0]            ;440  ; _sys_uTimer3TickPerSecond
00021e  2003              MOVS     r0,#3                 ;442
000220  f7fffffe          BL       GetTimerClock
000224  4631              MOV      r1,r6                 ;442
000226  9000              STR      r0,[sp,#0]            ;442
000228  f7fffffe          BL       CalTimerInitValue
00022c  4604              MOV      r4,r0                 ;442
00022e  1c60              ADDS     r0,r4,#1              ;443
000230  d102              BNE      |L13.568|
000232  480c              LDR      r0,|L13.612|
000234  1e40              SUBS     r0,r0,#1              ;445
000236  e6fc              B        |L13.50|
                  |L13.568|
000238  0220              LSLS     r0,r4,#8              ;448
00023a  0a00              LSRS     r0,r0,#8              ;448
00023c  4916              LDR      r1,|L13.664|
00023e  6248              STR      r0,[r1,#0x24]         ;448
000240  0e20              LSRS     r0,r4,#24             ;449
000242  9901              LDR      r1,[sp,#4]            ;449
000244  4308              ORRS     r0,r0,r1              ;449
000246  06f9              LSLS     r1,r7,#27             ;449
000248  4308              ORRS     r0,r0,r1              ;449
00024a  4913              LDR      r1,|L13.664|
00024c  6208              STR      r0,[r1,#0x20]         ;449
00024e  e002              B        |L13.598|
                  |L13.592|
000250  4804              LDR      r0,|L13.612|
000252  1e80              SUBS     r0,r0,#2              ;455
000254  e6ed              B        |L13.50|
                  |L13.598|
000256  bf00              NOP                            ;354
000258  2000              MOVS     r0,#0                 ;459
00025a  e6ea              B        |L13.50|
;;;461    
                          ENDP

                  |L13.604|
                          DCD      bIsTimer0Initial
                  |L13.608|
                          DCD      bIsTimer0Used
                  |L13.612|
                          DCD      0xffff9703
                  |L13.616|
                          DCD      0x50000200
                  |L13.620|
                          DCD      0x40010000
                  |L13.624|
                          DCD      tTime0Event
                  |L13.628|
                          DCD      uTimer0Tick
                  |L13.632|
                          DCD      _sys_uTimer0TickPerSecond
                  |L13.636|
                          DCD      bIsTimer1Initial
                  |L13.640|
                          DCD      bIsTimer1Used
                  |L13.644|
                          DCD      tTime1Event
                  |L13.648|
                          DCD      uTimer1Tick
                  |L13.652|
                          DCD      _sys_uTimer1TickPerSecond
                  |L13.656|
                          DCD      bIsTimer2Initial
                  |L13.660|
                          DCD      bIsTimer2Used
                  |L13.664|
                          DCD      0x40110000
                  |L13.668|
                          DCD      tTime2Event
                  |L13.672|
                          DCD      uTimer2Tick
                  |L13.676|
                          DCD      _sys_uTimer2TickPerSecond
                  |L13.680|
                          DCD      bIsTimer3Initial
                  |L13.684|
                          DCD      bIsTimer3Used
                  |L13.688|
                          DCD      tTime3Event
                  |L13.692|
                          DCD      uTimer3Tick
                  |L13.696|
                          DCD      _sys_uTimer3TickPerSecond

                          AREA ||i.DrvTIMER_OpenCounter||, CODE, READONLY, ALIGN=2

                  DrvTIMER_OpenCounter PROC
;;;1092   /*---------------------------------------------------------------------------------------------------------*/
;;;1093   int32_t DrvTIMER_OpenCounter(E_TIMER_CHANNEL ch, uint32_t uCounterBoundary, E_TIMER_OPMODE op_mode)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1094   {
000002  4607              MOV      r7,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1095       uint32_t i;
;;;1096   
;;;1097       if ((bIsTimer0Initial == FALSE) || (bIsTimer1Initial == FALSE) || 
000008  48b7              LDR      r0,|L14.744|
00000a  6800              LDR      r0,[r0,#0]  ; bIsTimer0Initial
00000c  2800              CMP      r0,#0
00000e  d00b              BEQ      |L14.40|
000010  48b6              LDR      r0,|L14.748|
000012  6800              LDR      r0,[r0,#0]  ; bIsTimer1Initial
000014  2800              CMP      r0,#0
000016  d007              BEQ      |L14.40|
;;;1098           (bIsTimer2Initial == FALSE) || (bIsTimer3Initial == FALSE))
000018  48b5              LDR      r0,|L14.752|
00001a  6800              LDR      r0,[r0,#0]  ; bIsTimer2Initial
00001c  2800              CMP      r0,#0
00001e  d003              BEQ      |L14.40|
000020  48b4              LDR      r0,|L14.756|
000022  6800              LDR      r0,[r0,#0]  ; bIsTimer3Initial
000024  2800              CMP      r0,#0
000026  d101              BNE      |L14.44|
                  |L14.40|
;;;1099       {
;;;1100           return E_DRVTIMER_EIO;
000028  48b3              LDR      r0,|L14.760|
                  |L14.42|
;;;1101       }
;;;1102   
;;;1103   	if (op_mode == E_TOGGLE_MODE)
;;;1104           return E_DRVTIMER_CHANNEL;
;;;1105   				    	
;;;1106      	switch (ch)
;;;1107       {
;;;1108           case E_TMR0:
;;;1109           {
;;;1110               if (bIsTimer0Used != FALSE)
;;;1111                   return E_DRVTIMER_EIO;
;;;1112               
;;;1113   			DrvGPIO_InitFunction(E_FUNC_TMR0);	/* Open external Timer Counter pin */
;;;1114   						           
;;;1115               bIsTimer0Used = TRUE;
;;;1116              
;;;1117    		   	SYSCLK->APBCLK.TMR0_EN = 1;
;;;1118   
;;;1119   			outpw((uint32_t)&TIMER0->TCSR ,0 );	/* Disable timer */
;;;1120   
;;;1121   			TIMER0->TISR.TIF = 1;     		    /* Write 1 to clear for safty */
;;;1122   			
;;;1123    			TIMER0->TCSR.MODE 		= op_mode;	/* Set operation mode */
;;;1124   			TIMER0->TCMPR 			= uCounterBoundary;
;;;1125   			TIMER0->TCSR.PRESCALE 	= 0;
;;;1126   			TIMER0->TCSR.TDR_EN 	= 1;	
;;;1127   			TIMER0->TCSR.IE 		= 0;	
;;;1128   			TIMER0->TCSR.COUNTER_EN = 1;			 
;;;1129   			
;;;1130              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1131               {
;;;1132                   tTime0Event[i].active = FALSE;
;;;1133               }
;;;1134               uTimer0Tick = 0;
;;;1135               break;
;;;1136           }
;;;1137   
;;;1138           case E_TMR1:
;;;1139           {
;;;1140               if (bIsTimer1Used != FALSE)
;;;1141                   return E_DRVTIMER_EIO;
;;;1142               
;;;1143   			DrvGPIO_InitFunction(E_FUNC_TMR1);	/* Open external Timer Counter pin */
;;;1144   						           
;;;1145               bIsTimer1Used = TRUE;
;;;1146              
;;;1147    		   	SYSCLK->APBCLK.TMR1_EN = 1;
;;;1148   
;;;1149   			outpw((uint32_t)&TIMER1->TCSR ,0 );	/* Disable timer */
;;;1150   
;;;1151   			TIMER1->TISR.TIF 		= 1; 	    /* Write 1 to clear for safty */			
;;;1152    			TIMER1->TCSR.MODE 		= op_mode;	/* Set operation mode */
;;;1153   			TIMER1->TCMPR 			= uCounterBoundary;
;;;1154   			TIMER1->TCSR.PRESCALE 	= 0;
;;;1155   			TIMER1->TCSR.TDR_EN 	= 1;	
;;;1156   			TIMER1->TCSR.IE 		= 0;	
;;;1157   			TIMER1->TCSR.COUNTER_EN = 1;			 
;;;1158   			
;;;1159              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1160               {
;;;1161                   tTime1Event[i].active = FALSE;
;;;1162               }
;;;1163               uTimer1Tick = 0;
;;;1164               break;
;;;1165           }
;;;1166   
;;;1167           case E_TMR2:
;;;1168           {
;;;1169               if (bIsTimer2Used != FALSE)
;;;1170                   return E_DRVTIMER_EIO;
;;;1171               
;;;1172   			DrvGPIO_InitFunction(E_FUNC_TMR2);	/* Open external Timer Counter pin */
;;;1173   						           
;;;1174               bIsTimer2Used = TRUE;
;;;1175              
;;;1176    		   	SYSCLK->APBCLK.TMR2_EN = 1;
;;;1177   
;;;1178   			outpw((uint32_t)&TIMER2->TCSR ,0 );	/* Disable timer */
;;;1179   
;;;1180   			TIMER2->TISR.TIF 		= 1; 	    /* Write 1 to clear for safty */			
;;;1181    			TIMER2->TCSR.MODE 		= op_mode;	/* Set operation mode */
;;;1182   			TIMER2->TCMPR 			= uCounterBoundary;
;;;1183   			TIMER2->TCSR.PRESCALE 	= 0;
;;;1184   			TIMER2->TCSR.TDR_EN 	= 1;	
;;;1185   			TIMER2->TCSR.IE 		= 0;	
;;;1186   			TIMER2->TCSR.COUNTER_EN = 1;			 
;;;1187   			
;;;1188              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1189               {
;;;1190                   tTime2Event[i].active = FALSE;
;;;1191               }
;;;1192               uTimer2Tick = 0;
;;;1193               break;
;;;1194           }
;;;1195   
;;;1196   		case E_TMR3:
;;;1197           {
;;;1198               if (bIsTimer3Used != FALSE)
;;;1199                   return E_DRVTIMER_EIO;
;;;1200               
;;;1201   			DrvGPIO_InitFunction(E_FUNC_TMR3);	/* Open external Timer Counter pin */
;;;1202   						           
;;;1203               bIsTimer3Used = TRUE;
;;;1204              
;;;1205    		   	SYSCLK->APBCLK.TMR3_EN = 1;
;;;1206   
;;;1207   			outpw((uint32_t)&TIMER3->TCSR ,0 );	/* Disable timer */
;;;1208   
;;;1209   			TIMER3->TISR.TIF 		= 1; 	    /* Write 1 to clear for safty */			
;;;1210    			TIMER3->TCSR.MODE 		= op_mode;	/* Set operation mode */
;;;1211   			TIMER3->TCMPR 			= uCounterBoundary;
;;;1212   			TIMER3->TCSR.PRESCALE 	= 0;
;;;1213   			TIMER3->TCSR.TDR_EN 	= 1;	
;;;1214   			TIMER3->TCSR.IE 		= 0;	
;;;1215   			TIMER3->TCSR.COUNTER_EN = 1;			 
;;;1216   			
;;;1217              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1218               {
;;;1219                   tTime3Event[i].active = FALSE;
;;;1220               }
;;;1221         		uTimer3Tick = 0;
;;;1222               break;
;;;1223           }
;;;1224   
;;;1225           default:
;;;1226           {
;;;1227               return E_DRVTIMER_CHANNEL ; 
;;;1228           }
;;;1229       }
;;;1230   
;;;1231       return E_SUCCESS;
;;;1232   }
00002a  bdf8              POP      {r3-r7,pc}
                  |L14.44|
00002c  2d02              CMP      r5,#2                 ;1103
00002e  d102              BNE      |L14.54|
000030  48b1              LDR      r0,|L14.760|
000032  1e80              SUBS     r0,r0,#2              ;1104
000034  e7f9              B        |L14.42|
                  |L14.54|
000036  2f00              CMP      r7,#0                 ;1106
000038  d006              BEQ      |L14.72|
00003a  2f01              CMP      r7,#1                 ;1106
00003c  d055              BEQ      |L14.234|
00003e  2f02              CMP      r7,#2                 ;1106
000040  d07e              BEQ      |L14.320|
000042  2f03              CMP      r7,#3                 ;1106
000044  d17d              BNE      |L14.322|
000046  e0f6              B        |L14.566|
                  |L14.72|
000048  48ac              LDR      r0,|L14.764|
00004a  6800              LDR      r0,[r0,#0]            ;1110  ; bIsTimer0Used
00004c  2800              CMP      r0,#0                 ;1110
00004e  d001              BEQ      |L14.84|
000050  48a9              LDR      r0,|L14.760|
000052  e7ea              B        |L14.42|
                  |L14.84|
000054  2016              MOVS     r0,#0x16              ;1113
000056  f7fffffe          BL       DrvGPIO_InitFunction
00005a  2001              MOVS     r0,#1                 ;1115
00005c  49a7              LDR      r1,|L14.764|
00005e  6008              STR      r0,[r1,#0]            ;1115  ; bIsTimer0Used
000060  48a7              LDR      r0,|L14.768|
000062  6880              LDR      r0,[r0,#8]            ;1117
000064  2104              MOVS     r1,#4                 ;1117
000066  4388              BICS     r0,r0,r1              ;1117
000068  1d00              ADDS     r0,r0,#4              ;1117
00006a  49a5              LDR      r1,|L14.768|
00006c  6088              STR      r0,[r1,#8]            ;1117
00006e  2000              MOVS     r0,#0                 ;1119
000070  49a4              LDR      r1,|L14.772|
000072  6008              STR      r0,[r1,#0]            ;1119
000074  4608              MOV      r0,r1                 ;1121
000076  6880              LDR      r0,[r0,#8]            ;1121
000078  0840              LSRS     r0,r0,#1              ;1121
00007a  0040              LSLS     r0,r0,#1              ;1121
00007c  1c40              ADDS     r0,r0,#1              ;1121
00007e  6088              STR      r0,[r1,#8]            ;1121
000080  4608              MOV      r0,r1                 ;1123
000082  6800              LDR      r0,[r0,#0]            ;1123
000084  2103              MOVS     r1,#3                 ;1123
000086  06c9              LSLS     r1,r1,#27             ;1123
000088  4388              BICS     r0,r0,r1              ;1123
00008a  06e9              LSLS     r1,r5,#27             ;1123
00008c  2203              MOVS     r2,#3                 ;1123
00008e  06d2              LSLS     r2,r2,#27             ;1123
000090  4011              ANDS     r1,r1,r2              ;1123
000092  4308              ORRS     r0,r0,r1              ;1123
000094  499b              LDR      r1,|L14.772|
000096  6008              STR      r0,[r1,#0]            ;1123
000098  4608              MOV      r0,r1                 ;1124
00009a  6046              STR      r6,[r0,#4]            ;1124
00009c  6800              LDR      r0,[r0,#0]            ;1125
00009e  0a00              LSRS     r0,r0,#8              ;1125
0000a0  0200              LSLS     r0,r0,#8              ;1125
0000a2  6008              STR      r0,[r1,#0]            ;1125
0000a4  4608              MOV      r0,r1                 ;1126
0000a6  6800              LDR      r0,[r0,#0]            ;1126
0000a8  2101              MOVS     r1,#1                 ;1126
0000aa  0409              LSLS     r1,r1,#16             ;1126
0000ac  4388              BICS     r0,r0,r1              ;1126
0000ae  1840              ADDS     r0,r0,r1              ;1126
0000b0  4994              LDR      r1,|L14.772|
0000b2  6008              STR      r0,[r1,#0]            ;1126
0000b4  4608              MOV      r0,r1                 ;1127
0000b6  6800              LDR      r0,[r0,#0]            ;1127
0000b8  0349              LSLS     r1,r1,#13             ;1127
0000ba  4388              BICS     r0,r0,r1              ;1127
0000bc  4991              LDR      r1,|L14.772|
0000be  6008              STR      r0,[r1,#0]            ;1127
0000c0  4608              MOV      r0,r1                 ;1128
0000c2  6800              LDR      r0,[r0,#0]            ;1128
0000c4  0209              LSLS     r1,r1,#8              ;1128
0000c6  4388              BICS     r0,r0,r1              ;1128
0000c8  1840              ADDS     r0,r0,r1              ;1128
0000ca  498e              LDR      r1,|L14.772|
0000cc  6008              STR      r0,[r1,#0]            ;1128
0000ce  2400              MOVS     r4,#0                 ;1130
0000d0  e005              B        |L14.222|
                  |L14.210|
0000d2  2100              MOVS     r1,#0                 ;1132
0000d4  2014              MOVS     r0,#0x14              ;1132
0000d6  4360              MULS     r0,r4,r0              ;1132
0000d8  4a8b              LDR      r2,|L14.776|
0000da  5011              STR      r1,[r2,r0]            ;1132
0000dc  1c64              ADDS     r4,r4,#1              ;1130
                  |L14.222|
0000de  2c00              CMP      r4,#0                 ;1130
0000e0  d0f7              BEQ      |L14.210|
0000e2  2000              MOVS     r0,#0                 ;1134
0000e4  4989              LDR      r1,|L14.780|
0000e6  6008              STR      r0,[r1,#0]            ;1134  ; uTimer0Tick
0000e8  e0fa              B        |L14.736|
                  |L14.234|
0000ea  4889              LDR      r0,|L14.784|
0000ec  6800              LDR      r0,[r0,#0]            ;1140  ; bIsTimer1Used
0000ee  2800              CMP      r0,#0                 ;1140
0000f0  d001              BEQ      |L14.246|
0000f2  4881              LDR      r0,|L14.760|
0000f4  e799              B        |L14.42|
                  |L14.246|
0000f6  2017              MOVS     r0,#0x17              ;1143
0000f8  f7fffffe          BL       DrvGPIO_InitFunction
0000fc  2001              MOVS     r0,#1                 ;1145
0000fe  4984              LDR      r1,|L14.784|
000100  6008              STR      r0,[r1,#0]            ;1145  ; bIsTimer1Used
000102  487f              LDR      r0,|L14.768|
000104  6880              LDR      r0,[r0,#8]            ;1147
000106  2108              MOVS     r1,#8                 ;1147
000108  4388              BICS     r0,r0,r1              ;1147
00010a  3008              ADDS     r0,r0,#8              ;1147
00010c  497c              LDR      r1,|L14.768|
00010e  6088              STR      r0,[r1,#8]            ;1147
000110  2000              MOVS     r0,#0                 ;1149
000112  497c              LDR      r1,|L14.772|
000114  6208              STR      r0,[r1,#0x20]         ;1149
000116  4608              MOV      r0,r1                 ;1151
000118  6a80              LDR      r0,[r0,#0x28]         ;1151
00011a  0840              LSRS     r0,r0,#1              ;1151
00011c  0040              LSLS     r0,r0,#1              ;1151
00011e  1c40              ADDS     r0,r0,#1              ;1151
000120  6288              STR      r0,[r1,#0x28]         ;1151
000122  4608              MOV      r0,r1                 ;1152
000124  6a00              LDR      r0,[r0,#0x20]         ;1152
000126  2103              MOVS     r1,#3                 ;1152
000128  06c9              LSLS     r1,r1,#27             ;1152
00012a  4388              BICS     r0,r0,r1              ;1152
00012c  06e9              LSLS     r1,r5,#27             ;1152
00012e  2203              MOVS     r2,#3                 ;1152
000130  06d2              LSLS     r2,r2,#27             ;1152
000132  4011              ANDS     r1,r1,r2              ;1152
000134  4308              ORRS     r0,r0,r1              ;1152
000136  4973              LDR      r1,|L14.772|
000138  6208              STR      r0,[r1,#0x20]         ;1152
00013a  4608              MOV      r0,r1                 ;1153
00013c  6246              STR      r6,[r0,#0x24]         ;1153
00013e  e001              B        |L14.324|
                  |L14.320|
000140  e027              B        |L14.402|
                  |L14.322|
000142  e0ca              B        |L14.730|
                  |L14.324|
000144  6a00              LDR      r0,[r0,#0x20]         ;1154
000146  0a00              LSRS     r0,r0,#8              ;1154
000148  0200              LSLS     r0,r0,#8              ;1154
00014a  6208              STR      r0,[r1,#0x20]         ;1154
00014c  4608              MOV      r0,r1                 ;1155
00014e  6a00              LDR      r0,[r0,#0x20]         ;1155
000150  2101              MOVS     r1,#1                 ;1155
000152  0409              LSLS     r1,r1,#16             ;1155
000154  4388              BICS     r0,r0,r1              ;1155
000156  1840              ADDS     r0,r0,r1              ;1155
000158  496a              LDR      r1,|L14.772|
00015a  6208              STR      r0,[r1,#0x20]         ;1155
00015c  4608              MOV      r0,r1                 ;1156
00015e  6a00              LDR      r0,[r0,#0x20]         ;1156
000160  0349              LSLS     r1,r1,#13             ;1156
000162  4388              BICS     r0,r0,r1              ;1156
000164  4967              LDR      r1,|L14.772|
000166  6208              STR      r0,[r1,#0x20]         ;1156
000168  4608              MOV      r0,r1                 ;1157
00016a  6a00              LDR      r0,[r0,#0x20]         ;1157
00016c  0209              LSLS     r1,r1,#8              ;1157
00016e  4388              BICS     r0,r0,r1              ;1157
000170  1840              ADDS     r0,r0,r1              ;1157
000172  4964              LDR      r1,|L14.772|
000174  6208              STR      r0,[r1,#0x20]         ;1157
000176  2400              MOVS     r4,#0                 ;1159
000178  e005              B        |L14.390|
                  |L14.378|
00017a  2100              MOVS     r1,#0                 ;1161
00017c  2014              MOVS     r0,#0x14              ;1161
00017e  4360              MULS     r0,r4,r0              ;1161
000180  4a64              LDR      r2,|L14.788|
000182  5011              STR      r1,[r2,r0]            ;1161
000184  1c64              ADDS     r4,r4,#1              ;1159
                  |L14.390|
000186  2c00              CMP      r4,#0                 ;1159
000188  d0f7              BEQ      |L14.378|
00018a  2000              MOVS     r0,#0                 ;1163
00018c  4962              LDR      r1,|L14.792|
00018e  6008              STR      r0,[r1,#0]            ;1163  ; uTimer1Tick
000190  e0a6              B        |L14.736|
                  |L14.402|
000192  4862              LDR      r0,|L14.796|
000194  6800              LDR      r0,[r0,#0]            ;1169  ; bIsTimer2Used
000196  2800              CMP      r0,#0                 ;1169
000198  d001              BEQ      |L14.414|
00019a  4857              LDR      r0,|L14.760|
00019c  e745              B        |L14.42|
                  |L14.414|
00019e  2018              MOVS     r0,#0x18              ;1172
0001a0  f7fffffe          BL       DrvGPIO_InitFunction
0001a4  2001              MOVS     r0,#1                 ;1174
0001a6  495d              LDR      r1,|L14.796|
0001a8  6008              STR      r0,[r1,#0]            ;1174  ; bIsTimer2Used
0001aa  4855              LDR      r0,|L14.768|
0001ac  6880              LDR      r0,[r0,#8]            ;1176
0001ae  2110              MOVS     r1,#0x10              ;1176
0001b0  4388              BICS     r0,r0,r1              ;1176
0001b2  3010              ADDS     r0,r0,#0x10           ;1176
0001b4  4952              LDR      r1,|L14.768|
0001b6  6088              STR      r0,[r1,#8]            ;1176
0001b8  2000              MOVS     r0,#0                 ;1178
0001ba  4959              LDR      r1,|L14.800|
0001bc  6008              STR      r0,[r1,#0]            ;1178
0001be  4608              MOV      r0,r1                 ;1180
0001c0  6880              LDR      r0,[r0,#8]            ;1180
0001c2  0840              LSRS     r0,r0,#1              ;1180
0001c4  0040              LSLS     r0,r0,#1              ;1180
0001c6  1c40              ADDS     r0,r0,#1              ;1180
0001c8  6088              STR      r0,[r1,#8]            ;1180
0001ca  4608              MOV      r0,r1                 ;1181
0001cc  6800              LDR      r0,[r0,#0]            ;1181
0001ce  2103              MOVS     r1,#3                 ;1181
0001d0  06c9              LSLS     r1,r1,#27             ;1181
0001d2  4388              BICS     r0,r0,r1              ;1181
0001d4  06e9              LSLS     r1,r5,#27             ;1181
0001d6  2203              MOVS     r2,#3                 ;1181
0001d8  06d2              LSLS     r2,r2,#27             ;1181
0001da  4011              ANDS     r1,r1,r2              ;1181
0001dc  4308              ORRS     r0,r0,r1              ;1181
0001de  4950              LDR      r1,|L14.800|
0001e0  6008              STR      r0,[r1,#0]            ;1181
0001e2  4608              MOV      r0,r1                 ;1182
0001e4  6046              STR      r6,[r0,#4]            ;1182
0001e6  6800              LDR      r0,[r0,#0]            ;1183
0001e8  0a00              LSRS     r0,r0,#8              ;1183
0001ea  0200              LSLS     r0,r0,#8              ;1183
0001ec  6008              STR      r0,[r1,#0]            ;1183
0001ee  4608              MOV      r0,r1                 ;1184
0001f0  6800              LDR      r0,[r0,#0]            ;1184
0001f2  2101              MOVS     r1,#1                 ;1184
0001f4  0409              LSLS     r1,r1,#16             ;1184
0001f6  4388              BICS     r0,r0,r1              ;1184
0001f8  1840              ADDS     r0,r0,r1              ;1184
0001fa  4949              LDR      r1,|L14.800|
0001fc  6008              STR      r0,[r1,#0]            ;1184
0001fe  4608              MOV      r0,r1                 ;1185
000200  6800              LDR      r0,[r0,#0]            ;1185
000202  0349              LSLS     r1,r1,#13             ;1185
000204  4388              BICS     r0,r0,r1              ;1185
000206  4946              LDR      r1,|L14.800|
000208  6008              STR      r0,[r1,#0]            ;1185
00020a  4608              MOV      r0,r1                 ;1186
00020c  6800              LDR      r0,[r0,#0]            ;1186
00020e  2101              MOVS     r1,#1                 ;1186
000210  0609              LSLS     r1,r1,#24             ;1186
000212  4388              BICS     r0,r0,r1              ;1186
000214  1840              ADDS     r0,r0,r1              ;1186
000216  4942              LDR      r1,|L14.800|
000218  6008              STR      r0,[r1,#0]            ;1186
00021a  2400              MOVS     r4,#0                 ;1188
00021c  e005              B        |L14.554|
                  |L14.542|
00021e  2100              MOVS     r1,#0                 ;1190
000220  2014              MOVS     r0,#0x14              ;1190
000222  4360              MULS     r0,r4,r0              ;1190
000224  4a3f              LDR      r2,|L14.804|
000226  5011              STR      r1,[r2,r0]            ;1190
000228  1c64              ADDS     r4,r4,#1              ;1188
                  |L14.554|
00022a  2c00              CMP      r4,#0                 ;1188
00022c  d0f7              BEQ      |L14.542|
00022e  2000              MOVS     r0,#0                 ;1192
000230  493d              LDR      r1,|L14.808|
000232  6008              STR      r0,[r1,#0]            ;1192  ; uTimer2Tick
000234  e054              B        |L14.736|
                  |L14.566|
000236  483d              LDR      r0,|L14.812|
000238  6800              LDR      r0,[r0,#0]            ;1198  ; bIsTimer3Used
00023a  2800              CMP      r0,#0                 ;1198
00023c  d001              BEQ      |L14.578|
00023e  482e              LDR      r0,|L14.760|
000240  e6f3              B        |L14.42|
                  |L14.578|
000242  2019              MOVS     r0,#0x19              ;1201
000244  f7fffffe          BL       DrvGPIO_InitFunction
000248  2001              MOVS     r0,#1                 ;1203
00024a  4938              LDR      r1,|L14.812|
00024c  6008              STR      r0,[r1,#0]            ;1203  ; bIsTimer3Used
00024e  482c              LDR      r0,|L14.768|
000250  6880              LDR      r0,[r0,#8]            ;1205
000252  2120              MOVS     r1,#0x20              ;1205
000254  4388              BICS     r0,r0,r1              ;1205
000256  3020              ADDS     r0,r0,#0x20           ;1205
000258  4929              LDR      r1,|L14.768|
00025a  6088              STR      r0,[r1,#8]            ;1205
00025c  2000              MOVS     r0,#0                 ;1207
00025e  4930              LDR      r1,|L14.800|
000260  6208              STR      r0,[r1,#0x20]         ;1207
000262  4608              MOV      r0,r1                 ;1209
000264  6a80              LDR      r0,[r0,#0x28]         ;1209
000266  0840              LSRS     r0,r0,#1              ;1209
000268  0040              LSLS     r0,r0,#1              ;1209
00026a  1c40              ADDS     r0,r0,#1              ;1209
00026c  6288              STR      r0,[r1,#0x28]         ;1209
00026e  4608              MOV      r0,r1                 ;1210
000270  6a00              LDR      r0,[r0,#0x20]         ;1210
000272  2103              MOVS     r1,#3                 ;1210
000274  06c9              LSLS     r1,r1,#27             ;1210
000276  4388              BICS     r0,r0,r1              ;1210
000278  06e9              LSLS     r1,r5,#27             ;1210
00027a  2203              MOVS     r2,#3                 ;1210
00027c  06d2              LSLS     r2,r2,#27             ;1210
00027e  4011              ANDS     r1,r1,r2              ;1210
000280  4308              ORRS     r0,r0,r1              ;1210
000282  4927              LDR      r1,|L14.800|
000284  6208              STR      r0,[r1,#0x20]         ;1210
000286  4608              MOV      r0,r1                 ;1211
000288  6246              STR      r6,[r0,#0x24]         ;1211
00028a  6a00              LDR      r0,[r0,#0x20]         ;1212
00028c  0a00              LSRS     r0,r0,#8              ;1212
00028e  0200              LSLS     r0,r0,#8              ;1212
000290  6208              STR      r0,[r1,#0x20]         ;1212
000292  4608              MOV      r0,r1                 ;1213
000294  6a00              LDR      r0,[r0,#0x20]         ;1213
000296  2101              MOVS     r1,#1                 ;1213
000298  0409              LSLS     r1,r1,#16             ;1213
00029a  4388              BICS     r0,r0,r1              ;1213
00029c  1840              ADDS     r0,r0,r1              ;1213
00029e  4920              LDR      r1,|L14.800|
0002a0  6208              STR      r0,[r1,#0x20]         ;1213
0002a2  4608              MOV      r0,r1                 ;1214
0002a4  6a00              LDR      r0,[r0,#0x20]         ;1214
0002a6  0349              LSLS     r1,r1,#13             ;1214
0002a8  4388              BICS     r0,r0,r1              ;1214
0002aa  491d              LDR      r1,|L14.800|
0002ac  6208              STR      r0,[r1,#0x20]         ;1214
0002ae  4608              MOV      r0,r1                 ;1215
0002b0  6a00              LDR      r0,[r0,#0x20]         ;1215
0002b2  2101              MOVS     r1,#1                 ;1215
0002b4  0609              LSLS     r1,r1,#24             ;1215
0002b6  4388              BICS     r0,r0,r1              ;1215
0002b8  1840              ADDS     r0,r0,r1              ;1215
0002ba  4919              LDR      r1,|L14.800|
0002bc  6208              STR      r0,[r1,#0x20]         ;1215
0002be  2400              MOVS     r4,#0                 ;1217
0002c0  e005              B        |L14.718|
                  |L14.706|
0002c2  2100              MOVS     r1,#0                 ;1219
0002c4  2014              MOVS     r0,#0x14              ;1219
0002c6  4360              MULS     r0,r4,r0              ;1219
0002c8  4a19              LDR      r2,|L14.816|
0002ca  5011              STR      r1,[r2,r0]            ;1219
0002cc  1c64              ADDS     r4,r4,#1              ;1217
                  |L14.718|
0002ce  2c00              CMP      r4,#0                 ;1217
0002d0  d0f7              BEQ      |L14.706|
0002d2  2000              MOVS     r0,#0                 ;1221
0002d4  4917              LDR      r1,|L14.820|
0002d6  6008              STR      r0,[r1,#0]            ;1221  ; uTimer3Tick
0002d8  e002              B        |L14.736|
                  |L14.730|
0002da  4807              LDR      r0,|L14.760|
0002dc  1e80              SUBS     r0,r0,#2              ;1227
0002de  e6a4              B        |L14.42|
                  |L14.736|
0002e0  bf00              NOP                            ;1135
0002e2  2000              MOVS     r0,#0                 ;1231
0002e4  e6a1              B        |L14.42|
;;;1233   
                          ENDP

0002e6  0000              DCW      0x0000
                  |L14.744|
                          DCD      bIsTimer0Initial
                  |L14.748|
                          DCD      bIsTimer1Initial
                  |L14.752|
                          DCD      bIsTimer2Initial
                  |L14.756|
                          DCD      bIsTimer3Initial
                  |L14.760|
                          DCD      0xffff9703
                  |L14.764|
                          DCD      bIsTimer0Used
                  |L14.768|
                          DCD      0x50000200
                  |L14.772|
                          DCD      0x40010000
                  |L14.776|
                          DCD      tTime0Event
                  |L14.780|
                          DCD      uTimer0Tick
                  |L14.784|
                          DCD      bIsTimer1Used
                  |L14.788|
                          DCD      tTime1Event
                  |L14.792|
                          DCD      uTimer1Tick
                  |L14.796|
                          DCD      bIsTimer2Used
                  |L14.800|
                          DCD      0x40110000
                  |L14.804|
                          DCD      tTime2Event
                  |L14.808|
                          DCD      uTimer2Tick
                  |L14.812|
                          DCD      bIsTimer3Used
                  |L14.816|
                          DCD      tTime3Event
                  |L14.820|
                          DCD      uTimer3Tick

                          AREA ||i.DrvTIMER_ResetIntTicks||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ResetIntTicks PROC
;;;988    /*---------------------------------------------------------------------------------------------------------*/
;;;989    int32_t DrvTIMER_ResetIntTicks(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;990    {
;;;991        switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L15.20|
000006  2901              CMP      r1,#1
000008  d008              BEQ      |L15.28|
00000a  2902              CMP      r1,#2
00000c  d00a              BEQ      |L15.36|
00000e  2903              CMP      r1,#3
000010  d110              BNE      |L15.52|
000012  e00b              B        |L15.44|
                  |L15.20|
;;;992        {
;;;993            case E_TMR0:
;;;994            {
;;;995                uTimer0Tick = 0;
000014  2000              MOVS     r0,#0
000016  4a0a              LDR      r2,|L15.64|
000018  6010              STR      r0,[r2,#0]  ; uTimer0Tick
;;;996                break;
00001a  e00d              B        |L15.56|
                  |L15.28|
;;;997            }
;;;998    
;;;999            case E_TMR1:
;;;1000           {
;;;1001               uTimer1Tick = 0;
00001c  2000              MOVS     r0,#0
00001e  4a09              LDR      r2,|L15.68|
000020  6010              STR      r0,[r2,#0]  ; uTimer1Tick
;;;1002               break;
000022  e009              B        |L15.56|
                  |L15.36|
;;;1003           }
;;;1004   
;;;1005           case E_TMR2:
;;;1006           {
;;;1007               uTimer2Tick = 0;
000024  2000              MOVS     r0,#0
000026  4a08              LDR      r2,|L15.72|
000028  6010              STR      r0,[r2,#0]  ; uTimer2Tick
;;;1008               break;
00002a  e005              B        |L15.56|
                  |L15.44|
;;;1009           }
;;;1010   
;;;1011           case E_TMR3:
;;;1012           {
;;;1013               uTimer3Tick = 0;
00002c  2000              MOVS     r0,#0
00002e  4a07              LDR      r2,|L15.76|
000030  6010              STR      r0,[r2,#0]  ; uTimer3Tick
;;;1014               break;
000032  e001              B        |L15.56|
                  |L15.52|
;;;1015           }
;;;1016   
;;;1017           default:
;;;1018           {
;;;1019               return E_DRVTIMER_CHANNEL;
000034  4806              LDR      r0,|L15.80|
                  |L15.54|
;;;1020           }
;;;1021       }
;;;1022   
;;;1023       return E_SUCCESS;
;;;1024   }
000036  4770              BX       lr
                  |L15.56|
000038  bf00              NOP                            ;996
00003a  2000              MOVS     r0,#0                 ;1023
00003c  e7fb              B        |L15.54|
;;;1025   
                          ENDP

00003e  0000              DCW      0x0000
                  |L15.64|
                          DCD      uTimer0Tick
                  |L15.68|
                          DCD      uTimer1Tick
                  |L15.72|
                          DCD      uTimer2Tick
                  |L15.76|
                          DCD      uTimer3Tick
                  |L15.80|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_SetEXTClockFreq||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SetEXTClockFreq PROC
;;;1067   /*---------------------------------------------------------------------------------------------------------*/
;;;1068   void DrvTIMER_SetEXTClockFreq(uint32_t u32ClockFreq)
000000  4901              LDR      r1,|L16.8|
;;;1069   {
;;;1070   	u32EXTClockFreq = u32ClockFreq;
000002  6008              STR      r0,[r1,#0]  ; u32EXTClockFreq
;;;1071   }
000004  4770              BX       lr
;;;1072   
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      u32EXTClockFreq

                          AREA ||i.DrvTIMER_SetTimerEvent||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SetTimerEvent PROC
;;;542    /*---------------------------------------------------------------------------------------------------------*/
;;;543    int32_t DrvTIMER_SetTimerEvent(E_TIMER_CHANNEL ch, uint32_t uInterruptTicks, TIMER_CALLBACK pTimerCallback, uint32_t parameter)
000000  b5ff              PUSH     {r0-r7,lr}
;;;544    {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;545        volatile int32_t i;
;;;546        int32_t uTimerEventNo = 0;
000006  2200              MOVS     r2,#0
;;;547    
;;;548        switch (ch)
000008  9800              LDR      r0,[sp,#0]
00000a  2800              CMP      r0,#0
00000c  d006              BEQ      |L17.28|
00000e  2801              CMP      r0,#1
000010  d038              BEQ      |L17.132|
000012  2802              CMP      r0,#2
000014  d069              BEQ      |L17.234|
000016  2803              CMP      r0,#3
000018  d177              BNE      |L17.266|
00001a  e09a              B        |L17.338|
                  |L17.28|
;;;549        {
;;;550            case E_TMR0:
;;;551            {
;;;552    			if (uTime0EventCount >=	TIMER_EVENT_COUNT)
00001c  4868              LDR      r0,|L17.448|
00001e  6800              LDR      r0,[r0,#0]  ; uTime0EventCount
000020  2800              CMP      r0,#0
000022  d002              BEQ      |L17.42|
;;;553    				return E_DRVTIMER_EVENT_FULL;
000024  4867              LDR      r0,|L17.452|
                  |L17.38|
;;;554    
;;;555                bIsSetTime0Event = TRUE;
;;;556                uTime0EventCount++;
;;;557                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;558                {
;;;559                    if (tTime0Event[i].active  == FALSE)
;;;560                    {
;;;561                        tTime0Event[i].active   	= TRUE;
;;;562                        tTime0Event[i].initTick 	= uInterruptTicks;
;;;563                        tTime0Event[i].curTick  	= uInterruptTicks;
;;;564                        tTime0Event[i].funPtr   	= (TIMER_CALLBACK)pTimerCallback;
;;;565                        tTime0Event[i].transParam   = parameter;
;;;566                        uTimerEventNo = i;
;;;567                        break;
;;;568                    }
;;;569                }
;;;570                break;
;;;571            }
;;;572    
;;;573            case E_TMR1:
;;;574            {
;;;575    			if (uTime1EventCount >=	TIMER_EVENT_COUNT)
;;;576    				return E_DRVTIMER_EVENT_FULL;
;;;577    
;;;578                bIsSetTime1Event = TRUE;
;;;579                uTime1EventCount++;
;;;580                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;581                {
;;;582                    if (tTime1Event[i].active   == FALSE)
;;;583                    {
;;;584                        tTime1Event[i].active   	= TRUE;
;;;585                        tTime1Event[i].initTick 	= uInterruptTicks;
;;;586                        tTime1Event[i].curTick  	= uInterruptTicks;
;;;587                        tTime1Event[i].funPtr   	= (TIMER_CALLBACK)pTimerCallback;
;;;588                        tTime1Event[i].transParam   = parameter;
;;;589                        uTimerEventNo = i;
;;;590                        break;
;;;591                    }
;;;592                }
;;;593                break;
;;;594            }
;;;595    
;;;596            case E_TMR2:
;;;597            {
;;;598    			if (uTime2EventCount >=	TIMER_EVENT_COUNT)
;;;599    				return E_DRVTIMER_EVENT_FULL;
;;;600    
;;;601                bIsSetTime2Event = TRUE;
;;;602                uTime2EventCount++;
;;;603                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;604                {
;;;605                    if (tTime2Event[i].active   == FALSE)
;;;606                    {
;;;607                        tTime2Event[i].active   	= TRUE;
;;;608                        tTime2Event[i].initTick 	= uInterruptTicks;
;;;609                        tTime2Event[i].curTick  	= uInterruptTicks;
;;;610                        tTime2Event[i].funPtr   	= (TIMER_CALLBACK)pTimerCallback;
;;;611                        tTime2Event[i].transParam   = parameter;
;;;612                        uTimerEventNo = i;
;;;613                        break;
;;;614                    }
;;;615                }
;;;616                break;
;;;617            }
;;;618    
;;;619            case E_TMR3:
;;;620            {
;;;621    			if (uTime3EventCount >=	TIMER_EVENT_COUNT)
;;;622    				return E_DRVTIMER_EVENT_FULL;
;;;623    
;;;624                bIsSetTime3Event = TRUE;
;;;625                uTime3EventCount++;
;;;626                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;627                {
;;;628                    if (tTime3Event[i].active   == FALSE)
;;;629                    {
;;;630                        tTime3Event[i].active   	= TRUE;
;;;631                        tTime3Event[i].initTick 	= uInterruptTicks;
;;;632                        tTime3Event[i].curTick  	= uInterruptTicks;
;;;633                        tTime3Event[i].funPtr   	= (TIMER_CALLBACK)pTimerCallback;
;;;634                        tTime3Event[i].transParam   = parameter;
;;;635                        uTimerEventNo = i;
;;;636                        break;
;;;637                    }
;;;638                }
;;;639                break;
;;;640            }
;;;641    
;;;642            default:
;;;643            {
;;;644                break;
;;;645            }
;;;646        }
;;;647    
;;;648        return uTimerEventNo;
;;;649    }
000026  b004              ADD      sp,sp,#0x10
000028  bdf0              POP      {r4-r7,pc}
                  |L17.42|
00002a  2001              MOVS     r0,#1                 ;555
00002c  4e66              LDR      r6,|L17.456|
00002e  6030              STR      r0,[r6,#0]            ;555  ; bIsSetTime0Event
000030  4863              LDR      r0,|L17.448|
000032  6800              LDR      r0,[r0,#0]            ;556  ; uTime0EventCount
000034  1c40              ADDS     r0,r0,#1              ;556
000036  4e62              LDR      r6,|L17.448|
000038  6030              STR      r0,[r6,#0]            ;556  ; uTime0EventCount
00003a  2100              MOVS     r1,#0                 ;557
00003c  e01e              B        |L17.124|
                  |L17.62|
00003e  2014              MOVS     r0,#0x14              ;559
000040  4348              MULS     r0,r1,r0              ;559
000042  4e62              LDR      r6,|L17.460|
000044  5830              LDR      r0,[r6,r0]            ;559
000046  2800              CMP      r0,#0                 ;559
000048  d117              BNE      |L17.122|
00004a  2601              MOVS     r6,#1                 ;561
00004c  2014              MOVS     r0,#0x14              ;561
00004e  4348              MULS     r0,r1,r0              ;561
000050  4f5e              LDR      r7,|L17.460|
000052  503e              STR      r6,[r7,r0]            ;561
000054  2014              MOVS     r0,#0x14              ;562
000056  4348              MULS     r0,r1,r0              ;562
000058  463e              MOV      r6,r7                 ;562
00005a  1980              ADDS     r0,r0,r6              ;562
00005c  6044              STR      r4,[r0,#4]            ;562
00005e  2014              MOVS     r0,#0x14              ;563
000060  4348              MULS     r0,r1,r0              ;563
000062  1980              ADDS     r0,r0,r6              ;563
000064  6084              STR      r4,[r0,#8]            ;563
000066  2014              MOVS     r0,#0x14              ;564
000068  4348              MULS     r0,r1,r0              ;564
00006a  1980              ADDS     r0,r0,r6              ;564
00006c  60c5              STR      r5,[r0,#0xc]          ;564
00006e  2014              MOVS     r0,#0x14              ;565
000070  4348              MULS     r0,r1,r0              ;565
000072  1980              ADDS     r0,r0,r6              ;565
000074  6103              STR      r3,[r0,#0x10]         ;565
000076  460a              MOV      r2,r1                 ;566
000078  e002              B        |L17.128|
                  |L17.122|
00007a  1c49              ADDS     r1,r1,#1              ;557
                  |L17.124|
00007c  2901              CMP      r1,#1                 ;557
00007e  dbde              BLT      |L17.62|
                  |L17.128|
000080  bf00              NOP                            ;567
000082  e09a              B        |L17.442|
                  |L17.132|
000084  4852              LDR      r0,|L17.464|
000086  6800              LDR      r0,[r0,#0]            ;575  ; uTime1EventCount
000088  2800              CMP      r0,#0                 ;575
00008a  d001              BEQ      |L17.144|
00008c  484d              LDR      r0,|L17.452|
00008e  e7ca              B        |L17.38|
                  |L17.144|
000090  2001              MOVS     r0,#1                 ;578
000092  4e50              LDR      r6,|L17.468|
000094  6030              STR      r0,[r6,#0]            ;578  ; bIsSetTime1Event
000096  484e              LDR      r0,|L17.464|
000098  6800              LDR      r0,[r0,#0]            ;579  ; uTime1EventCount
00009a  1c40              ADDS     r0,r0,#1              ;579
00009c  4e4c              LDR      r6,|L17.464|
00009e  6030              STR      r0,[r6,#0]            ;579  ; uTime1EventCount
0000a0  2100              MOVS     r1,#0                 ;580
0000a2  e01e              B        |L17.226|
                  |L17.164|
0000a4  2014              MOVS     r0,#0x14              ;582
0000a6  4348              MULS     r0,r1,r0              ;582
0000a8  4e4b              LDR      r6,|L17.472|
0000aa  5830              LDR      r0,[r6,r0]            ;582
0000ac  2800              CMP      r0,#0                 ;582
0000ae  d117              BNE      |L17.224|
0000b0  2601              MOVS     r6,#1                 ;584
0000b2  2014              MOVS     r0,#0x14              ;584
0000b4  4348              MULS     r0,r1,r0              ;584
0000b6  4f48              LDR      r7,|L17.472|
0000b8  503e              STR      r6,[r7,r0]            ;584
0000ba  2014              MOVS     r0,#0x14              ;585
0000bc  4348              MULS     r0,r1,r0              ;585
0000be  463e              MOV      r6,r7                 ;585
0000c0  1980              ADDS     r0,r0,r6              ;585
0000c2  6044              STR      r4,[r0,#4]            ;585
0000c4  2014              MOVS     r0,#0x14              ;586
0000c6  4348              MULS     r0,r1,r0              ;586
0000c8  1980              ADDS     r0,r0,r6              ;586
0000ca  6084              STR      r4,[r0,#8]            ;586
0000cc  2014              MOVS     r0,#0x14              ;587
0000ce  4348              MULS     r0,r1,r0              ;587
0000d0  1980              ADDS     r0,r0,r6              ;587
0000d2  60c5              STR      r5,[r0,#0xc]          ;587
0000d4  2014              MOVS     r0,#0x14              ;588
0000d6  4348              MULS     r0,r1,r0              ;588
0000d8  1980              ADDS     r0,r0,r6              ;588
0000da  6103              STR      r3,[r0,#0x10]         ;588
0000dc  460a              MOV      r2,r1                 ;589
0000de  e002              B        |L17.230|
                  |L17.224|
0000e0  1c49              ADDS     r1,r1,#1              ;580
                  |L17.226|
0000e2  2901              CMP      r1,#1                 ;580
0000e4  dbde              BLT      |L17.164|
                  |L17.230|
0000e6  bf00              NOP                            ;590
0000e8  e067              B        |L17.442|
                  |L17.234|
0000ea  483c              LDR      r0,|L17.476|
0000ec  6800              LDR      r0,[r0,#0]            ;598  ; uTime2EventCount
0000ee  2800              CMP      r0,#0                 ;598
0000f0  d001              BEQ      |L17.246|
0000f2  4834              LDR      r0,|L17.452|
0000f4  e797              B        |L17.38|
                  |L17.246|
0000f6  2001              MOVS     r0,#1                 ;601
0000f8  4e39              LDR      r6,|L17.480|
0000fa  6030              STR      r0,[r6,#0]            ;601  ; bIsSetTime2Event
0000fc  4837              LDR      r0,|L17.476|
0000fe  6800              LDR      r0,[r0,#0]            ;602  ; uTime2EventCount
000100  1c40              ADDS     r0,r0,#1              ;602
000102  4e36              LDR      r6,|L17.476|
000104  6030              STR      r0,[r6,#0]            ;602  ; uTime2EventCount
000106  2100              MOVS     r1,#0                 ;603
000108  e01f              B        |L17.330|
                  |L17.266|
00010a  e055              B        |L17.440|
                  |L17.268|
00010c  2014              MOVS     r0,#0x14              ;605
00010e  4348              MULS     r0,r1,r0              ;605
000110  4e34              LDR      r6,|L17.484|
000112  5830              LDR      r0,[r6,r0]            ;605
000114  2800              CMP      r0,#0                 ;605
000116  d117              BNE      |L17.328|
000118  2601              MOVS     r6,#1                 ;607
00011a  2014              MOVS     r0,#0x14              ;607
00011c  4348              MULS     r0,r1,r0              ;607
00011e  4f31              LDR      r7,|L17.484|
000120  503e              STR      r6,[r7,r0]            ;607
000122  2014              MOVS     r0,#0x14              ;608
000124  4348              MULS     r0,r1,r0              ;608
000126  463e              MOV      r6,r7                 ;608
000128  1980              ADDS     r0,r0,r6              ;608
00012a  6044              STR      r4,[r0,#4]            ;608
00012c  2014              MOVS     r0,#0x14              ;609
00012e  4348              MULS     r0,r1,r0              ;609
000130  1980              ADDS     r0,r0,r6              ;609
000132  6084              STR      r4,[r0,#8]            ;609
000134  2014              MOVS     r0,#0x14              ;610
000136  4348              MULS     r0,r1,r0              ;610
000138  1980              ADDS     r0,r0,r6              ;610
00013a  60c5              STR      r5,[r0,#0xc]          ;610
00013c  2014              MOVS     r0,#0x14              ;611
00013e  4348              MULS     r0,r1,r0              ;611
000140  1980              ADDS     r0,r0,r6              ;611
000142  6103              STR      r3,[r0,#0x10]         ;611
000144  460a              MOV      r2,r1                 ;612
000146  e002              B        |L17.334|
                  |L17.328|
000148  1c49              ADDS     r1,r1,#1              ;603
                  |L17.330|
00014a  2901              CMP      r1,#1                 ;603
00014c  dbde              BLT      |L17.268|
                  |L17.334|
00014e  bf00              NOP                            ;613
000150  e033              B        |L17.442|
                  |L17.338|
000152  4825              LDR      r0,|L17.488|
000154  6800              LDR      r0,[r0,#0]            ;621  ; uTime3EventCount
000156  2800              CMP      r0,#0                 ;621
000158  d001              BEQ      |L17.350|
00015a  481a              LDR      r0,|L17.452|
00015c  e763              B        |L17.38|
                  |L17.350|
00015e  2001              MOVS     r0,#1                 ;624
000160  4e22              LDR      r6,|L17.492|
000162  6030              STR      r0,[r6,#0]            ;624  ; bIsSetTime3Event
000164  4820              LDR      r0,|L17.488|
000166  6800              LDR      r0,[r0,#0]            ;625  ; uTime3EventCount
000168  1c40              ADDS     r0,r0,#1              ;625
00016a  4e1f              LDR      r6,|L17.488|
00016c  6030              STR      r0,[r6,#0]            ;625  ; uTime3EventCount
00016e  2100              MOVS     r1,#0                 ;626
000170  e01e              B        |L17.432|
                  |L17.370|
000172  2014              MOVS     r0,#0x14              ;628
000174  4348              MULS     r0,r1,r0              ;628
000176  4e1e              LDR      r6,|L17.496|
000178  5830              LDR      r0,[r6,r0]            ;628
00017a  2800              CMP      r0,#0                 ;628
00017c  d117              BNE      |L17.430|
00017e  2601              MOVS     r6,#1                 ;630
000180  2014              MOVS     r0,#0x14              ;630
000182  4348              MULS     r0,r1,r0              ;630
000184  4f1a              LDR      r7,|L17.496|
000186  503e              STR      r6,[r7,r0]            ;630
000188  2014              MOVS     r0,#0x14              ;631
00018a  4348              MULS     r0,r1,r0              ;631
00018c  463e              MOV      r6,r7                 ;631
00018e  1980              ADDS     r0,r0,r6              ;631
000190  6044              STR      r4,[r0,#4]            ;631
000192  2014              MOVS     r0,#0x14              ;632
000194  4348              MULS     r0,r1,r0              ;632
000196  1980              ADDS     r0,r0,r6              ;632
000198  6084              STR      r4,[r0,#8]            ;632
00019a  2014              MOVS     r0,#0x14              ;633
00019c  4348              MULS     r0,r1,r0              ;633
00019e  1980              ADDS     r0,r0,r6              ;633
0001a0  60c5              STR      r5,[r0,#0xc]          ;633
0001a2  2014              MOVS     r0,#0x14              ;634
0001a4  4348              MULS     r0,r1,r0              ;634
0001a6  1980              ADDS     r0,r0,r6              ;634
0001a8  6103              STR      r3,[r0,#0x10]         ;634
0001aa  460a              MOV      r2,r1                 ;635
0001ac  e002              B        |L17.436|
                  |L17.430|
0001ae  1c49              ADDS     r1,r1,#1              ;626
                  |L17.432|
0001b0  2901              CMP      r1,#1                 ;626
0001b2  dbde              BLT      |L17.370|
                  |L17.436|
0001b4  bf00              NOP                            ;636
0001b6  e000              B        |L17.442|
                  |L17.440|
0001b8  bf00              NOP                            ;644
                  |L17.442|
0001ba  bf00              NOP                            ;570
0001bc  4610              MOV      r0,r2                 ;648
0001be  e732              B        |L17.38|
;;;650    
                          ENDP

                  |L17.448|
                          DCD      uTime0EventCount
                  |L17.452|
                          DCD      0xffff9704
                  |L17.456|
                          DCD      bIsSetTime0Event
                  |L17.460|
                          DCD      tTime0Event
                  |L17.464|
                          DCD      uTime1EventCount
                  |L17.468|
                          DCD      bIsSetTime1Event
                  |L17.472|
                          DCD      tTime1Event
                  |L17.476|
                          DCD      uTime2EventCount
                  |L17.480|
                          DCD      bIsSetTime2Event
                  |L17.484|
                          DCD      tTime2Event
                  |L17.488|
                          DCD      uTime3EventCount
                  |L17.492|
                          DCD      bIsSetTime3Event
                  |L17.496|
                          DCD      tTime3Event

                          AREA ||i.DrvTIMER_Start||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Start PROC
;;;894    /*---------------------------------------------------------------------------------------------------------*/
;;;895    int32_t DrvTIMER_Start(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;896    {
;;;897        switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L18.20|
000006  2901              CMP      r1,#1
000008  d00d              BEQ      |L18.38|
00000a  2902              CMP      r1,#2
00000c  d014              BEQ      |L18.56|
00000e  2903              CMP      r1,#3
000010  d124              BNE      |L18.92|
000012  e01a              B        |L18.74|
                  |L18.20|
;;;898        {
;;;899            case E_TMR0:
;;;900            {
;;;901                TIMER0->TCSR.CEN = 1;
000014  4814              LDR      r0,|L18.104|
000016  6800              LDR      r0,[r0,#0]
000018  2201              MOVS     r2,#1
00001a  0792              LSLS     r2,r2,#30
00001c  4390              BICS     r0,r0,r2
00001e  1880              ADDS     r0,r0,r2
000020  4a11              LDR      r2,|L18.104|
000022  6010              STR      r0,[r2,#0]
;;;902                break;
000024  e01c              B        |L18.96|
                  |L18.38|
;;;903            }
;;;904    
;;;905            case E_TMR1:
;;;906            {
;;;907                TIMER1->TCSR.CEN = 1;
000026  4810              LDR      r0,|L18.104|
000028  6a00              LDR      r0,[r0,#0x20]
00002a  2201              MOVS     r2,#1
00002c  0792              LSLS     r2,r2,#30
00002e  4390              BICS     r0,r0,r2
000030  1880              ADDS     r0,r0,r2
000032  4a0d              LDR      r2,|L18.104|
000034  6210              STR      r0,[r2,#0x20]
;;;908                break;
000036  e013              B        |L18.96|
                  |L18.56|
;;;909            }
;;;910    
;;;911            case E_TMR2:
;;;912            {
;;;913                TIMER2->TCSR.CEN = 1;
000038  480c              LDR      r0,|L18.108|
00003a  6800              LDR      r0,[r0,#0]
00003c  2201              MOVS     r2,#1
00003e  0792              LSLS     r2,r2,#30
000040  4390              BICS     r0,r0,r2
000042  1880              ADDS     r0,r0,r2
000044  4a09              LDR      r2,|L18.108|
000046  6010              STR      r0,[r2,#0]
;;;914                break;
000048  e00a              B        |L18.96|
                  |L18.74|
;;;915            }
;;;916    
;;;917            case E_TMR3:
;;;918            {
;;;919                TIMER3->TCSR.CEN = 1;
00004a  4808              LDR      r0,|L18.108|
00004c  6a00              LDR      r0,[r0,#0x20]
00004e  2201              MOVS     r2,#1
000050  0792              LSLS     r2,r2,#30
000052  4390              BICS     r0,r0,r2
000054  1880              ADDS     r0,r0,r2
000056  4a05              LDR      r2,|L18.108|
000058  6210              STR      r0,[r2,#0x20]
;;;920                break;
00005a  e001              B        |L18.96|
                  |L18.92|
;;;921            }
;;;922    
;;;923            default:
;;;924            {
;;;925    			return E_DRVTIMER_CHANNEL;
00005c  4804              LDR      r0,|L18.112|
                  |L18.94|
;;;926            }
;;;927        }
;;;928        
;;;929        return E_SUCCESS ;
;;;930    }
00005e  4770              BX       lr
                  |L18.96|
000060  bf00              NOP                            ;902
000062  2000              MOVS     r0,#0                 ;929
000064  e7fb              B        |L18.94|
;;;931    
                          ENDP

000066  0000              DCW      0x0000
                  |L18.104|
                          DCD      0x40010000
                  |L18.108|
                          DCD      0x40110000
                  |L18.112|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_StartCounter||, CODE, READONLY, ALIGN=2

                  DrvTIMER_StartCounter PROC
;;;1246   /*---------------------------------------------------------------------------------------------------------*/
;;;1247   int32_t DrvTIMER_StartCounter(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1248   {
;;;1249       switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L19.20|
000006  2901              CMP      r1,#1
000008  d01b              BEQ      |L19.66|
00000a  2902              CMP      r1,#2
00000c  d030              BEQ      |L19.112|
00000e  2903              CMP      r1,#3
000010  d15c              BNE      |L19.204|
000012  e044              B        |L19.158|
                  |L19.20|
;;;1250       {
;;;1251           case E_TMR0:
;;;1252           {
;;;1253   			if (TIMER0->TCSR.IE == 0)
000014  4830              LDR      r0,|L19.216|
000016  6800              LDR      r0,[r0,#0]
000018  0080              LSLS     r0,r0,#2
00001a  0fc0              LSRS     r0,r0,#31
00001c  d101              BNE      |L19.34|
;;;1254   				TIMER0->TCMPR 	= 0;	// If use Polling Mode, do not configure Timer Compare Register. 
00001e  4a2e              LDR      r2,|L19.216|
000020  6050              STR      r0,[r2,#4]
                  |L19.34|
;;;1255   			TIMER0->TCSR.CRST 	= 1;					
000022  482d              LDR      r0,|L19.216|
000024  6800              LDR      r0,[r0,#0]
000026  2201              MOVS     r2,#1
000028  0692              LSLS     r2,r2,#26
00002a  4390              BICS     r0,r0,r2
00002c  1880              ADDS     r0,r0,r2
00002e  4a2a              LDR      r2,|L19.216|
000030  6010              STR      r0,[r2,#0]
;;;1256   			TIMER0->TCSR.CEN 	= 1;					
000032  4610              MOV      r0,r2
000034  6800              LDR      r0,[r0,#0]
000036  0392              LSLS     r2,r2,#14
000038  4390              BICS     r0,r0,r2
00003a  1880              ADDS     r0,r0,r2
00003c  4a26              LDR      r2,|L19.216|
00003e  6010              STR      r0,[r2,#0]
;;;1257               break;
000040  e046              B        |L19.208|
                  |L19.66|
;;;1258           }
;;;1259   
;;;1260           case E_TMR1:
;;;1261           {
;;;1262   			if (TIMER1->TCSR.IE == 0)
000042  4825              LDR      r0,|L19.216|
000044  6a00              LDR      r0,[r0,#0x20]
000046  0080              LSLS     r0,r0,#2
000048  0fc0              LSRS     r0,r0,#31
00004a  d101              BNE      |L19.80|
;;;1263   				TIMER1->TCMPR 	= 0;	// If use Polling Mode, do not configure Timer Compare Register. 
00004c  4a22              LDR      r2,|L19.216|
00004e  6250              STR      r0,[r2,#0x24]
                  |L19.80|
;;;1264   			TIMER1->TCSR.CRST 	= 1;					
000050  4821              LDR      r0,|L19.216|
000052  6a00              LDR      r0,[r0,#0x20]
000054  2201              MOVS     r2,#1
000056  0692              LSLS     r2,r2,#26
000058  4390              BICS     r0,r0,r2
00005a  1880              ADDS     r0,r0,r2
00005c  4a1e              LDR      r2,|L19.216|
00005e  6210              STR      r0,[r2,#0x20]
;;;1265   			TIMER1->TCSR.CEN 	= 1;
000060  4610              MOV      r0,r2
000062  6a00              LDR      r0,[r0,#0x20]
000064  0392              LSLS     r2,r2,#14
000066  4390              BICS     r0,r0,r2
000068  1880              ADDS     r0,r0,r2
00006a  4a1b              LDR      r2,|L19.216|
00006c  6210              STR      r0,[r2,#0x20]
;;;1266               break;
00006e  e02f              B        |L19.208|
                  |L19.112|
;;;1267           }
;;;1268   
;;;1269           case E_TMR2:
;;;1270           {
;;;1271   			if (TIMER2->TCSR.IE == 0)
000070  481a              LDR      r0,|L19.220|
000072  6800              LDR      r0,[r0,#0]
000074  0080              LSLS     r0,r0,#2
000076  0fc0              LSRS     r0,r0,#31
000078  d101              BNE      |L19.126|
;;;1272   				TIMER2->TCMPR 	= 0;	// If use Polling Mode, do not configure Timer Compare Register. 
00007a  4a18              LDR      r2,|L19.220|
00007c  6050              STR      r0,[r2,#4]
                  |L19.126|
;;;1273   			TIMER2->TCSR.CRST 	= 1;					
00007e  4817              LDR      r0,|L19.220|
000080  6800              LDR      r0,[r0,#0]
000082  2201              MOVS     r2,#1
000084  0692              LSLS     r2,r2,#26
000086  4390              BICS     r0,r0,r2
000088  1880              ADDS     r0,r0,r2
00008a  4a14              LDR      r2,|L19.220|
00008c  6010              STR      r0,[r2,#0]
;;;1274   			TIMER2->TCSR.CEN 	= 1;					
00008e  4610              MOV      r0,r2
000090  6800              LDR      r0,[r0,#0]
000092  0392              LSLS     r2,r2,#14
000094  4390              BICS     r0,r0,r2
000096  1880              ADDS     r0,r0,r2
000098  4a10              LDR      r2,|L19.220|
00009a  6010              STR      r0,[r2,#0]
;;;1275               break;
00009c  e018              B        |L19.208|
                  |L19.158|
;;;1276           }
;;;1277   
;;;1278           case E_TMR3:
;;;1279           {
;;;1280    			if (TIMER3->TCSR.IE == 0)
00009e  480f              LDR      r0,|L19.220|
0000a0  6a00              LDR      r0,[r0,#0x20]
0000a2  0080              LSLS     r0,r0,#2
0000a4  0fc0              LSRS     r0,r0,#31
0000a6  d101              BNE      |L19.172|
;;;1281   				TIMER3->TCMPR 	= 0;	// If use Polling Mode, do not configure Timer Compare Register. 
0000a8  4a0c              LDR      r2,|L19.220|
0000aa  6250              STR      r0,[r2,#0x24]
                  |L19.172|
;;;1282   			TIMER3->TCSR.CRST 	= 1;					
0000ac  480b              LDR      r0,|L19.220|
0000ae  6a00              LDR      r0,[r0,#0x20]
0000b0  2201              MOVS     r2,#1
0000b2  0692              LSLS     r2,r2,#26
0000b4  4390              BICS     r0,r0,r2
0000b6  1880              ADDS     r0,r0,r2
0000b8  4a08              LDR      r2,|L19.220|
0000ba  6210              STR      r0,[r2,#0x20]
;;;1283   			TIMER3->TCSR.CEN 	= 1;					
0000bc  4610              MOV      r0,r2
0000be  6a00              LDR      r0,[r0,#0x20]
0000c0  0392              LSLS     r2,r2,#14
0000c2  4390              BICS     r0,r0,r2
0000c4  1880              ADDS     r0,r0,r2
0000c6  4a05              LDR      r2,|L19.220|
0000c8  6210              STR      r0,[r2,#0x20]
;;;1284               break;
0000ca  e001              B        |L19.208|
                  |L19.204|
;;;1285          }
;;;1286   
;;;1287           default:
;;;1288           {
;;;1289               return E_DRVTIMER_CHANNEL ;
0000cc  4804              LDR      r0,|L19.224|
                  |L19.206|
;;;1290           }
;;;1291       }
;;;1292   
;;;1293       return E_SUCCESS;
;;;1294   }
0000ce  4770              BX       lr
                  |L19.208|
0000d0  bf00              NOP                            ;1257
0000d2  2000              MOVS     r0,#0                 ;1293
0000d4  e7fb              B        |L19.206|
;;;1295   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L19.216|
                          DCD      0x40010000
                  |L19.220|
                          DCD      0x40110000
                  |L19.224|
                          DCD      0xffff9701

                          AREA ||i.DrvWDT_Close||, CODE, READONLY, ALIGN=2

                  DrvWDT_Close PROC
;;;1418   /*---------------------------------------------------------------------------------------------------------*/
;;;1419   void DrvWDT_Close(void)
000000  b510              PUSH     {r4,lr}
;;;1420   {
;;;1421       DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);     /* Stop WDT */
000002  2100              MOVS     r1,#0
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       DrvWDT_Ioctl
;;;1422       DrvWDT_Ioctl(E_WDT_IOC_DISABLE_INT, 0);    /* Disable WDT Interrupt */
00000a  2100              MOVS     r1,#0
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       DrvWDT_Ioctl
;;;1423   
;;;1424       SYSCLK->APBCLK.WDT_EN = 0;
000012  4803              LDR      r0,|L20.32|
000014  6880              LDR      r0,[r0,#8]
000016  0840              LSRS     r0,r0,#1
000018  0040              LSLS     r0,r0,#1
00001a  4901              LDR      r1,|L20.32|
00001c  6088              STR      r0,[r1,#8]
;;;1425   }
00001e  bd10              POP      {r4,pc}
;;;1426   
                          ENDP

                  |L20.32|
                          DCD      0x50000200

                          AREA ||i.DrvWDT_InstallISR||, CODE, READONLY, ALIGN=2

                  DrvWDT_InstallISR PROC
;;;1437   /*---------------------------------------------------------------------------------------------------------*/
;;;1438   void DrvWDT_InstallISR(WDT_CALLBACK pvWDTISR)
000000  4904              LDR      r1,|L21.20|
;;;1439   {
;;;1440   	WDT->WTCR.WTIE = 1 ;
000002  6809              LDR      r1,[r1,#0]
000004  2240              MOVS     r2,#0x40
000006  4391              BICS     r1,r1,r2
000008  3140              ADDS     r1,r1,#0x40
00000a  4a02              LDR      r2,|L21.20|
00000c  6011              STR      r1,[r2,#0]
;;;1441   	fnCallBack_WDT = (WDT_CALLBACK)pvWDTISR; 	
00000e  4902              LDR      r1,|L21.24|
000010  6008              STR      r0,[r1,#0]  ; fnCallBack_WDT
;;;1442   }
000012  4770              BX       lr
;;;1443   
                          ENDP

                  |L21.20|
                          DCD      0x40004000
                  |L21.24|
                          DCD      fnCallBack_WDT

                          AREA ||i.DrvWDT_Ioctl||, CODE, READONLY, ALIGN=2

                  DrvWDT_Ioctl PROC
;;;1470   /*---------------------------------------------------------------------------------------------------------*/
;;;1471   int32_t DrvWDT_Ioctl(E_WDT_CMD uWDTCmd, uint32_t uArgument)
000000  b570              PUSH     {r4-r6,lr}
;;;1472   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1473       switch (uWDTCmd)
000006  4623              MOV      r3,r4
000008  f7fffffe          BL       __ARM_common_switch8
00000c  0a060e15          DCB      0x0a,0x06,0x0e,0x15
000010  202a3239          DCB      0x20,0x2a,0x32,0x39
000014  4149505d          DCB      0x41,0x49,0x50,0x5d
;;;1474       {
;;;1475           case E_WDT_IOC_START_TIMER  :
;;;1476           {
;;;1477    			WDT->WTCR.WTE = 1;
000018  482d              LDR      r0,|L22.208|
00001a  6800              LDR      r0,[r0,#0]
00001c  2180              MOVS     r1,#0x80
00001e  4388              BICS     r0,r0,r1
000020  3080              ADDS     r0,r0,#0x80
000022  492b              LDR      r1,|L22.208|
000024  6008              STR      r0,[r1,#0]
;;;1478               break ;
000026  e050              B        |L22.202|
;;;1479           }
;;;1480   
;;;1481           case E_WDT_IOC_STOP_TIMER :
;;;1482           {
;;;1483    			WDT->WTCR.WTE = 0;
000028  4829              LDR      r0,|L22.208|
00002a  6800              LDR      r0,[r0,#0]
00002c  2180              MOVS     r1,#0x80
00002e  4388              BICS     r0,r0,r1
000030  4927              LDR      r1,|L22.208|
000032  6008              STR      r0,[r1,#0]
;;;1484               break ;
000034  e049              B        |L22.202|
;;;1485           }
;;;1486   
;;;1487           case E_WDT_IOC_ENABLE_INT :
;;;1488           {
;;;1489    			WDT->WTCR.WTIE = 1;
000036  4826              LDR      r0,|L22.208|
000038  6800              LDR      r0,[r0,#0]
00003a  2140              MOVS     r1,#0x40
00003c  4388              BICS     r0,r0,r1
00003e  3040              ADDS     r0,r0,#0x40
000040  4923              LDR      r1,|L22.208|
000042  6008              STR      r0,[r1,#0]
;;;1490   			NVIC_EnableIRQ(WDT_IRQn); 
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       NVIC_EnableIRQ
;;;1491               break ;
00004a  e03e              B        |L22.202|
;;;1492           }
;;;1493   
;;;1494           case E_WDT_IOC_DISABLE_INT :
;;;1495           {
;;;1496     			WDT->WTCR.WTIE = 0;
00004c  4820              LDR      r0,|L22.208|
00004e  6800              LDR      r0,[r0,#0]
000050  2140              MOVS     r1,#0x40
000052  4388              BICS     r0,r0,r1
000054  491e              LDR      r1,|L22.208|
000056  6008              STR      r0,[r1,#0]
;;;1497   			NVIC_DisableIRQ(WDT_IRQn); 
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       NVIC_DisableIRQ
;;;1498               break ;
00005e  e034              B        |L22.202|
;;;1499           }
;;;1500   
;;;1501           case E_WDT_IOC_ENABLE_WAKEUP :
;;;1502           {
;;;1503   	        WDT->WTCR.WTWKE = 1;            
000060  481b              LDR      r0,|L22.208|
000062  6800              LDR      r0,[r0,#0]
000064  2110              MOVS     r1,#0x10
000066  4388              BICS     r0,r0,r1
000068  3010              ADDS     r0,r0,#0x10
00006a  4919              LDR      r1,|L22.208|
00006c  6008              STR      r0,[r1,#0]
;;;1504               break ;
00006e  e02c              B        |L22.202|
;;;1505           }
;;;1506   
;;;1507           case E_WDT_IOC_DISABLE_WAKEUP :
;;;1508           {
;;;1509   	        WDT->WTCR.WTWKE = 0;            
000070  4817              LDR      r0,|L22.208|
000072  6800              LDR      r0,[r0,#0]
000074  2110              MOVS     r1,#0x10
000076  4388              BICS     r0,r0,r1
000078  4915              LDR      r1,|L22.208|
00007a  6008              STR      r0,[r1,#0]
;;;1510               break ;
00007c  e025              B        |L22.202|
;;;1511           }
;;;1512   
;;;1513           case E_WDT_IOC_RESET_TIMER:
;;;1514           {
;;;1515    			WDT->WTCR.WTR = 1;
00007e  4814              LDR      r0,|L22.208|
000080  6800              LDR      r0,[r0,#0]
000082  0840              LSRS     r0,r0,#1
000084  0040              LSLS     r0,r0,#1
000086  1c40              ADDS     r0,r0,#1
000088  4911              LDR      r1,|L22.208|
00008a  6008              STR      r0,[r1,#0]
;;;1516               break ;
00008c  e01d              B        |L22.202|
;;;1517           }
;;;1518   
;;;1519           case E_WDT_IOC_ENABLE_RESET_FUNC :
;;;1520           {
;;;1521   			WDT->WTCR.WTRE = 1;
00008e  4810              LDR      r0,|L22.208|
000090  6800              LDR      r0,[r0,#0]
000092  2102              MOVS     r1,#2
000094  4388              BICS     r0,r0,r1
000096  1c80              ADDS     r0,r0,#2
000098  490d              LDR      r1,|L22.208|
00009a  6008              STR      r0,[r1,#0]
;;;1522               break ;
00009c  e015              B        |L22.202|
;;;1523           }
;;;1524   
;;;1525           case E_WDT_IOC_DISABLE_RESET_FUNC:
;;;1526           {
;;;1527    			WDT->WTCR.WTRE = 0;
00009e  480c              LDR      r0,|L22.208|
0000a0  6800              LDR      r0,[r0,#0]
0000a2  2102              MOVS     r1,#2
0000a4  4388              BICS     r0,r0,r1
0000a6  490a              LDR      r1,|L22.208|
0000a8  6008              STR      r0,[r1,#0]
;;;1528               break ;
0000aa  e00e              B        |L22.202|
;;;1529           }
;;;1530   
;;;1531           case E_WDT_IOC_SET_INTERVAL:
;;;1532           {
;;;1533               WDT->WTCR.WTIS = (E_WDT_INTERVAL)uArgument;
0000ac  4808              LDR      r0,|L22.208|
0000ae  6800              LDR      r0,[r0,#0]
0000b0  2107              MOVS     r1,#7
0000b2  0209              LSLS     r1,r1,#8
0000b4  4388              BICS     r0,r0,r1
0000b6  0229              LSLS     r1,r5,#8
0000b8  2207              MOVS     r2,#7
0000ba  0212              LSLS     r2,r2,#8
0000bc  4011              ANDS     r1,r1,r2
0000be  4308              ORRS     r0,r0,r1
0000c0  4903              LDR      r1,|L22.208|
0000c2  6008              STR      r0,[r1,#0]
;;;1534   
;;;1535               break ;
0000c4  e001              B        |L22.202|
;;;1536           }
;;;1537          
;;;1538   		default :
;;;1539           {
;;;1540               return E_DRVWDT_CMD;
0000c6  4803              LDR      r0,|L22.212|
                  |L22.200|
;;;1541           }
;;;1542       }
;;;1543   
;;;1544       return E_SUCCESS;
;;;1545   }
0000c8  bd70              POP      {r4-r6,pc}
                  |L22.202|
0000ca  bf00              NOP                            ;1478
0000cc  2000              MOVS     r0,#0                 ;1544
0000ce  e7fb              B        |L22.200|
;;;1546   
                          ENDP

                  |L22.208|
                          DCD      0x40004000
                  |L22.212|
                          DCD      0xffff9705

                          AREA ||i.DrvWDT_Open||, CODE, READONLY, ALIGN=2

                  DrvWDT_Open PROC
;;;1399   /*---------------------------------------------------------------------------------------------------------*/
;;;1400   void DrvWDT_Open(E_WDT_INTERVAL WDTlevel)
000000  b510              PUSH     {r4,lr}
;;;1401   {
000002  4604              MOV      r4,r0
;;;1402       DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);  /* Stop WDT first */
000004  2100              MOVS     r1,#0
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       DrvWDT_Ioctl
;;;1403   
;;;1404       SYSCLK->APBCLK.WDT_EN = 1;  /* Enable WatchDog Timer Clock */    
00000c  4809              LDR      r0,|L23.52|
00000e  6880              LDR      r0,[r0,#8]
000010  0840              LSRS     r0,r0,#1
000012  0040              LSLS     r0,r0,#1
000014  1c40              ADDS     r0,r0,#1
000016  4907              LDR      r1,|L23.52|
000018  6088              STR      r0,[r1,#8]
;;;1405   
;;;1406       WDT->WTCR.WTIS = WDTlevel;  /* Select WatchDog Timer Interval */
00001a  4807              LDR      r0,|L23.56|
00001c  6800              LDR      r0,[r0,#0]
00001e  2107              MOVS     r1,#7
000020  0209              LSLS     r1,r1,#8
000022  4388              BICS     r0,r0,r1
000024  0221              LSLS     r1,r4,#8
000026  2207              MOVS     r2,#7
000028  0212              LSLS     r2,r2,#8
00002a  4011              ANDS     r1,r1,r2
00002c  4308              ORRS     r0,r0,r1
00002e  4902              LDR      r1,|L23.56|
000030  6008              STR      r0,[r1,#0]
;;;1407   }
000032  bd10              POP      {r4,pc}
;;;1408   
                          ENDP

                  |L23.52|
                          DCD      0x50000200
                  |L23.56|
                          DCD      0x40004000

                          AREA ||i.GetTimerClock||, CODE, READONLY, ALIGN=2

                  GetTimerClock PROC
;;;74     /*---------------------------------------------------------------------------------------------------------*/
;;;75     static uint32_t GetTimerClock(E_TIMER_CHANNEL ch)
000000  b570              PUSH     {r4-r6,lr}
;;;76     {
000002  4605              MOV      r5,r0
;;;77     	volatile uint8_t u8ClockcSrc;
;;;78     	volatile uint32_t u32clk = 0;
000004  2600              MOVS     r6,#0
;;;79     		
;;;80     	if ((ch == E_TMR0) || (ch == E_TMR1) || (ch == E_TMR2) || (ch == E_TMR3))
000006  2d00              CMP      r5,#0
000008  d005              BEQ      |L24.22|
00000a  2d01              CMP      r5,#1
00000c  d003              BEQ      |L24.22|
00000e  2d02              CMP      r5,#2
000010  d001              BEQ      |L24.22|
000012  2d03              CMP      r5,#3
000014  d11b              BNE      |L24.78|
                  |L24.22|
;;;81     	{
;;;82     		u8ClockcSrc = (inpw(&SYSCLK->CLKSEL1) >> (8+(E_TMR0*4))) & 0x7;
000016  4810              LDR      r0,|L24.88|
000018  6940              LDR      r0,[r0,#0x14]
00001a  0540              LSLS     r0,r0,#21
00001c  0f44              LSRS     r4,r0,#29
;;;83     
;;;84     		if (u8ClockcSrc == 0)			
00001e  2c00              CMP      r4,#0
000020  d103              BNE      |L24.42|
;;;85     		{
;;;86     			u32clk = DrvSYS_GetExtClockFreq() ;  	/* Option 0: Get External Clock From DrvSYS Setting */
000022  f7fffffe          BL       DrvSYS_GetExtClockFreq
000026  4606              MOV      r6,r0
000028  e013              B        |L24.82|
                  |L24.42|
;;;87     		}
;;;88     		else if(u8ClockcSrc == 1)
00002a  2c01              CMP      r4,#1
00002c  d102              BNE      |L24.52|
;;;89     		{
;;;90     			u32clk = 32000;							/* Option 1: 32K */
00002e  267d              MOVS     r6,#0x7d
000030  0236              LSLS     r6,r6,#8
000032  e00e              B        |L24.82|
                  |L24.52|
;;;91     		}
;;;92     		else if(u8ClockcSrc == 2)
000034  2c02              CMP      r4,#2
000036  d103              BNE      |L24.64|
;;;93     		{
;;;94     			u32clk = DrvSYS_GetPLLClockFreq()  ;	/* Option 2: HCLK */
000038  f7fffffe          BL       DrvSYS_GetPLLClockFreq
00003c  4606              MOV      r6,r0
00003e  e008              B        |L24.82|
                  |L24.64|
;;;95     		}
;;;96     		else if(u8ClockcSrc == 3)
000040  2c03              CMP      r4,#3
000042  d102              BNE      |L24.74|
;;;97     		{
;;;98     			u32clk = u32EXTClockFreq;			    /* Option 3: External Trigger */
000044  4805              LDR      r0,|L24.92|
000046  6806              LDR      r6,[r0,#0]  ; u32EXTClockFreq
000048  e003              B        |L24.82|
                  |L24.74|
;;;99     		}
;;;100    		else 
;;;101    		{
;;;102    			u32clk = 22000000; 						/* Option 4: 22MHz*/
00004a  4e05              LDR      r6,|L24.96|
00004c  e001              B        |L24.82|
                  |L24.78|
;;;103    		}
;;;104    	}
;;;105    	else 
;;;106        	return E_DRVTIMER_CHANNEL;
00004e  4805              LDR      r0,|L24.100|
                  |L24.80|
;;;107    			
;;;108    	return u32clk;
;;;109    }
000050  bd70              POP      {r4-r6,pc}
                  |L24.82|
000052  4630              MOV      r0,r6                 ;108
000054  e7fc              B        |L24.80|
;;;110    
                          ENDP

000056  0000              DCW      0x0000
                  |L24.88|
                          DCD      0x50000200
                  |L24.92|
                          DCD      u32EXTClockFreq
                  |L24.96|
                          DCD      0x014fb180
                  |L24.100|
                          DCD      0xffff9701

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L25.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L25.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L26.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L26.16|
                          DCD      0xe000e100

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;156    /*---------------------------------------------------------------------------------------------------------*/
;;;157    void TMR0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;158    {
;;;159        int32_t i;
;;;160       
;;;161      	TIMER0->TISR.TIF = 1;
000002  4820              LDR      r0,|L27.132|
000004  6880              LDR      r0,[r0,#8]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  491d              LDR      r1,|L27.132|
00000e  6088              STR      r0,[r1,#8]
;;;162    
;;;163        uTimer0Tick++;
000010  481d              LDR      r0,|L27.136|
000012  6800              LDR      r0,[r0,#0]  ; uTimer0Tick
000014  1c40              ADDS     r0,r0,#1
000016  491c              LDR      r1,|L27.136|
000018  6008              STR      r0,[r1,#0]  ; uTimer0Tick
;;;164     	if (bIsSetTime0Event)						/* Timer Event Handle */
00001a  481c              LDR      r0,|L27.140|
00001c  6800              LDR      r0,[r0,#0]  ; bIsSetTime0Event
00001e  2800              CMP      r0,#0
000020  d02f              BEQ      |L27.130|
;;;165        {
;;;166            for (i=0; i<TIMER_EVENT_COUNT; i++)
000022  2400              MOVS     r4,#0
000024  e02b              B        |L27.126|
                  |L27.38|
;;;167            {
;;;168                if (tTime0Event[i].active)
000026  2014              MOVS     r0,#0x14
000028  4360              MULS     r0,r4,r0
00002a  4919              LDR      r1,|L27.144|
00002c  5808              LDR      r0,[r1,r0]
00002e  2800              CMP      r0,#0
000030  d024              BEQ      |L27.124|
;;;169                {
;;;170                    tTime0Event[i].curTick--;
000032  2014              MOVS     r0,#0x14
000034  4360              MULS     r0,r4,r0
000036  1840              ADDS     r0,r0,r1
000038  6880              LDR      r0,[r0,#8]
00003a  1e40              SUBS     r0,r0,#1
00003c  2114              MOVS     r1,#0x14
00003e  4361              MULS     r1,r4,r1
000040  4a13              LDR      r2,|L27.144|
000042  1889              ADDS     r1,r1,r2
000044  6088              STR      r0,[r1,#8]
;;;171                    if (tTime0Event[i].curTick == 0)
000046  2014              MOVS     r0,#0x14
000048  4360              MULS     r0,r4,r0
00004a  4611              MOV      r1,r2
00004c  1840              ADDS     r0,r0,r1
00004e  6880              LDR      r0,[r0,#8]
000050  2800              CMP      r0,#0
000052  d113              BNE      |L27.124|
;;;172                    {
;;;173                        (*tTime0Event[i].funPtr)(tTime0Event[i].transParam);
000054  2214              MOVS     r2,#0x14
000056  4362              MULS     r2,r4,r2
000058  460b              MOV      r3,r1
00005a  18d2              ADDS     r2,r2,r3
00005c  6910              LDR      r0,[r2,#0x10]
00005e  2214              MOVS     r2,#0x14
000060  4362              MULS     r2,r4,r2
000062  18d2              ADDS     r2,r2,r3
000064  68d1              LDR      r1,[r2,#0xc]
000066  4788              BLX      r1
;;;174                        tTime0Event[i].curTick = tTime0Event[i].initTick;
000068  2014              MOVS     r0,#0x14
00006a  4360              MULS     r0,r4,r0
00006c  4908              LDR      r1,|L27.144|
00006e  1840              ADDS     r0,r0,r1
000070  6841              LDR      r1,[r0,#4]
000072  2014              MOVS     r0,#0x14
000074  4360              MULS     r0,r4,r0
000076  4a06              LDR      r2,|L27.144|
000078  1880              ADDS     r0,r0,r2
00007a  6081              STR      r1,[r0,#8]
                  |L27.124|
00007c  1c64              ADDS     r4,r4,#1              ;166
                  |L27.126|
00007e  2c01              CMP      r4,#1                 ;166
000080  dbd1              BLT      |L27.38|
                  |L27.130|
;;;175                    }
;;;176                }
;;;177            }
;;;178        }
;;;179    }
000082  bd10              POP      {r4,pc}
;;;180    
                          ENDP

                  |L27.132|
                          DCD      0x40010000
                  |L27.136|
                          DCD      uTimer0Tick
                  |L27.140|
                          DCD      bIsSetTime0Event
                  |L27.144|
                          DCD      tTime0Event

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR1_IRQHandler PROC
;;;190    /*---------------------------------------------------------------------------------------------------------*/
;;;191    void TMR1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;192    {
;;;193        int32_t i;
;;;194        
;;;195      	TIMER1->TISR.TIF = 1;
000002  4820              LDR      r0,|L28.132|
000004  6a80              LDR      r0,[r0,#0x28]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  491d              LDR      r1,|L28.132|
00000e  6288              STR      r0,[r1,#0x28]
;;;196    
;;;197        uTimer1Tick++;
000010  481d              LDR      r0,|L28.136|
000012  6800              LDR      r0,[r0,#0]  ; uTimer1Tick
000014  1c40              ADDS     r0,r0,#1
000016  491c              LDR      r1,|L28.136|
000018  6008              STR      r0,[r1,#0]  ; uTimer1Tick
;;;198     	if (bIsSetTime1Event)						/* Timer Event Handle */
00001a  481c              LDR      r0,|L28.140|
00001c  6800              LDR      r0,[r0,#0]  ; bIsSetTime1Event
00001e  2800              CMP      r0,#0
000020  d02f              BEQ      |L28.130|
;;;199        {
;;;200            for (i=0; i<TIMER_EVENT_COUNT; i++)
000022  2400              MOVS     r4,#0
000024  e02b              B        |L28.126|
                  |L28.38|
;;;201            {
;;;202                if (tTime1Event[i].active)
000026  2014              MOVS     r0,#0x14
000028  4360              MULS     r0,r4,r0
00002a  4919              LDR      r1,|L28.144|
00002c  5808              LDR      r0,[r1,r0]
00002e  2800              CMP      r0,#0
000030  d024              BEQ      |L28.124|
;;;203                {
;;;204                    tTime1Event[i].curTick--;
000032  2014              MOVS     r0,#0x14
000034  4360              MULS     r0,r4,r0
000036  1840              ADDS     r0,r0,r1
000038  6880              LDR      r0,[r0,#8]
00003a  1e40              SUBS     r0,r0,#1
00003c  2114              MOVS     r1,#0x14
00003e  4361              MULS     r1,r4,r1
000040  4a13              LDR      r2,|L28.144|
000042  1889              ADDS     r1,r1,r2
000044  6088              STR      r0,[r1,#8]
;;;205                    if (tTime1Event[i].curTick == 0)
000046  2014              MOVS     r0,#0x14
000048  4360              MULS     r0,r4,r0
00004a  4611              MOV      r1,r2
00004c  1840              ADDS     r0,r0,r1
00004e  6880              LDR      r0,[r0,#8]
000050  2800              CMP      r0,#0
000052  d113              BNE      |L28.124|
;;;206                    {
;;;207                        (*tTime1Event[i].funPtr)(tTime1Event[i].transParam);
000054  2214              MOVS     r2,#0x14
000056  4362              MULS     r2,r4,r2
000058  460b              MOV      r3,r1
00005a  18d2              ADDS     r2,r2,r3
00005c  6910              LDR      r0,[r2,#0x10]
00005e  2214              MOVS     r2,#0x14
000060  4362              MULS     r2,r4,r2
000062  18d2              ADDS     r2,r2,r3
000064  68d1              LDR      r1,[r2,#0xc]
000066  4788              BLX      r1
;;;208                        tTime1Event[i].curTick = tTime1Event[i].initTick;
000068  2014              MOVS     r0,#0x14
00006a  4360              MULS     r0,r4,r0
00006c  4908              LDR      r1,|L28.144|
00006e  1840              ADDS     r0,r0,r1
000070  6841              LDR      r1,[r0,#4]
000072  2014              MOVS     r0,#0x14
000074  4360              MULS     r0,r4,r0
000076  4a06              LDR      r2,|L28.144|
000078  1880              ADDS     r0,r0,r2
00007a  6081              STR      r1,[r0,#8]
                  |L28.124|
00007c  1c64              ADDS     r4,r4,#1              ;200
                  |L28.126|
00007e  2c01              CMP      r4,#1                 ;200
000080  dbd1              BLT      |L28.38|
                  |L28.130|
;;;209                    }
;;;210                }
;;;211            }
;;;212        }
;;;213    }
000082  bd10              POP      {r4,pc}
;;;214    
                          ENDP

                  |L28.132|
                          DCD      0x40010000
                  |L28.136|
                          DCD      uTimer1Tick
                  |L28.140|
                          DCD      bIsSetTime1Event
                  |L28.144|
                          DCD      tTime1Event

                          AREA ||i.TMR2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR2_IRQHandler PROC
;;;224    /*---------------------------------------------------------------------------------------------------------*/
;;;225    void TMR2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;226    {
;;;227        int32_t i;
;;;228        
;;;229    	TIMER2->TISR.TIF = 1;
000002  4820              LDR      r0,|L29.132|
000004  6880              LDR      r0,[r0,#8]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  491d              LDR      r1,|L29.132|
00000e  6088              STR      r0,[r1,#8]
;;;230    
;;;231        uTimer2Tick++;
000010  481d              LDR      r0,|L29.136|
000012  6800              LDR      r0,[r0,#0]  ; uTimer2Tick
000014  1c40              ADDS     r0,r0,#1
000016  491c              LDR      r1,|L29.136|
000018  6008              STR      r0,[r1,#0]  ; uTimer2Tick
;;;232     	if (bIsSetTime2Event)						/* Timer Event Handle */
00001a  481c              LDR      r0,|L29.140|
00001c  6800              LDR      r0,[r0,#0]  ; bIsSetTime2Event
00001e  2800              CMP      r0,#0
000020  d02f              BEQ      |L29.130|
;;;233        {
;;;234            for (i=0; i<TIMER_EVENT_COUNT; i++)
000022  2400              MOVS     r4,#0
000024  e02b              B        |L29.126|
                  |L29.38|
;;;235            {
;;;236                if (tTime2Event[i].active)
000026  2014              MOVS     r0,#0x14
000028  4360              MULS     r0,r4,r0
00002a  4919              LDR      r1,|L29.144|
00002c  5808              LDR      r0,[r1,r0]
00002e  2800              CMP      r0,#0
000030  d024              BEQ      |L29.124|
;;;237                {
;;;238                    tTime2Event[i].curTick--;
000032  2014              MOVS     r0,#0x14
000034  4360              MULS     r0,r4,r0
000036  1840              ADDS     r0,r0,r1
000038  6880              LDR      r0,[r0,#8]
00003a  1e40              SUBS     r0,r0,#1
00003c  2114              MOVS     r1,#0x14
00003e  4361              MULS     r1,r4,r1
000040  4a13              LDR      r2,|L29.144|
000042  1889              ADDS     r1,r1,r2
000044  6088              STR      r0,[r1,#8]
;;;239                    if (tTime2Event[i].curTick == 0)
000046  2014              MOVS     r0,#0x14
000048  4360              MULS     r0,r4,r0
00004a  4611              MOV      r1,r2
00004c  1840              ADDS     r0,r0,r1
00004e  6880              LDR      r0,[r0,#8]
000050  2800              CMP      r0,#0
000052  d113              BNE      |L29.124|
;;;240                    {
;;;241                        (*tTime2Event[i].funPtr)(tTime2Event[i].transParam);
000054  2214              MOVS     r2,#0x14
000056  4362              MULS     r2,r4,r2
000058  460b              MOV      r3,r1
00005a  18d2              ADDS     r2,r2,r3
00005c  6910              LDR      r0,[r2,#0x10]
00005e  2214              MOVS     r2,#0x14
000060  4362              MULS     r2,r4,r2
000062  18d2              ADDS     r2,r2,r3
000064  68d1              LDR      r1,[r2,#0xc]
000066  4788              BLX      r1
;;;242                        tTime2Event[i].curTick = tTime2Event[i].initTick;
000068  2014              MOVS     r0,#0x14
00006a  4360              MULS     r0,r4,r0
00006c  4908              LDR      r1,|L29.144|
00006e  1840              ADDS     r0,r0,r1
000070  6841              LDR      r1,[r0,#4]
000072  2014              MOVS     r0,#0x14
000074  4360              MULS     r0,r4,r0
000076  4a06              LDR      r2,|L29.144|
000078  1880              ADDS     r0,r0,r2
00007a  6081              STR      r1,[r0,#8]
                  |L29.124|
00007c  1c64              ADDS     r4,r4,#1              ;234
                  |L29.126|
00007e  2c01              CMP      r4,#1                 ;234
000080  dbd1              BLT      |L29.38|
                  |L29.130|
;;;243                    }
;;;244                }
;;;245            }
;;;246        }
;;;247    }
000082  bd10              POP      {r4,pc}
;;;248    
                          ENDP

                  |L29.132|
                          DCD      0x40110000
                  |L29.136|
                          DCD      uTimer2Tick
                  |L29.140|
                          DCD      bIsSetTime2Event
                  |L29.144|
                          DCD      tTime2Event

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR3_IRQHandler PROC
;;;258    /*---------------------------------------------------------------------------------------------------------*/
;;;259    void TMR3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;260    {
;;;261        int32_t i;
;;;262        
;;;263     	TIMER3->TISR.TIF = 1;
000002  4820              LDR      r0,|L30.132|
000004  6a80              LDR      r0,[r0,#0x28]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  491d              LDR      r1,|L30.132|
00000e  6288              STR      r0,[r1,#0x28]
;;;264    
;;;265        uTimer3Tick++;
000010  481d              LDR      r0,|L30.136|
000012  6800              LDR      r0,[r0,#0]  ; uTimer3Tick
000014  1c40              ADDS     r0,r0,#1
000016  491c              LDR      r1,|L30.136|
000018  6008              STR      r0,[r1,#0]  ; uTimer3Tick
;;;266     	if (bIsSetTime3Event)						/* Timer Event Handle */
00001a  481c              LDR      r0,|L30.140|
00001c  6800              LDR      r0,[r0,#0]  ; bIsSetTime3Event
00001e  2800              CMP      r0,#0
000020  d02f              BEQ      |L30.130|
;;;267        {
;;;268            for (i=0; i<TIMER_EVENT_COUNT; i++)
000022  2400              MOVS     r4,#0
000024  e02b              B        |L30.126|
                  |L30.38|
;;;269            {
;;;270                if (tTime3Event[i].active)
000026  2014              MOVS     r0,#0x14
000028  4360              MULS     r0,r4,r0
00002a  4919              LDR      r1,|L30.144|
00002c  5808              LDR      r0,[r1,r0]
00002e  2800              CMP      r0,#0
000030  d024              BEQ      |L30.124|
;;;271                {
;;;272                    tTime3Event[i].curTick--;
000032  2014              MOVS     r0,#0x14
000034  4360              MULS     r0,r4,r0
000036  1840              ADDS     r0,r0,r1
000038  6880              LDR      r0,[r0,#8]
00003a  1e40              SUBS     r0,r0,#1
00003c  2114              MOVS     r1,#0x14
00003e  4361              MULS     r1,r4,r1
000040  4a13              LDR      r2,|L30.144|
000042  1889              ADDS     r1,r1,r2
000044  6088              STR      r0,[r1,#8]
;;;273                    if (tTime3Event[i].curTick == 0)
000046  2014              MOVS     r0,#0x14
000048  4360              MULS     r0,r4,r0
00004a  4611              MOV      r1,r2
00004c  1840              ADDS     r0,r0,r1
00004e  6880              LDR      r0,[r0,#8]
000050  2800              CMP      r0,#0
000052  d113              BNE      |L30.124|
;;;274                    {
;;;275                        (*tTime3Event[i].funPtr)(tTime3Event[i].transParam);
000054  2214              MOVS     r2,#0x14
000056  4362              MULS     r2,r4,r2
000058  460b              MOV      r3,r1
00005a  18d2              ADDS     r2,r2,r3
00005c  6910              LDR      r0,[r2,#0x10]
00005e  2214              MOVS     r2,#0x14
000060  4362              MULS     r2,r4,r2
000062  18d2              ADDS     r2,r2,r3
000064  68d1              LDR      r1,[r2,#0xc]
000066  4788              BLX      r1
;;;276                        tTime3Event[i].curTick = tTime3Event[i].initTick;
000068  2014              MOVS     r0,#0x14
00006a  4360              MULS     r0,r4,r0
00006c  4908              LDR      r1,|L30.144|
00006e  1840              ADDS     r0,r0,r1
000070  6841              LDR      r1,[r0,#4]
000072  2014              MOVS     r0,#0x14
000074  4360              MULS     r0,r4,r0
000076  4a06              LDR      r2,|L30.144|
000078  1880              ADDS     r0,r0,r2
00007a  6081              STR      r1,[r0,#8]
                  |L30.124|
00007c  1c64              ADDS     r4,r4,#1              ;268
                  |L30.126|
00007e  2c01              CMP      r4,#1                 ;268
000080  dbd1              BLT      |L30.38|
                  |L30.130|
;;;277                    }
;;;278                }
;;;279            }
;;;280        }
;;;281    }
000082  bd10              POP      {r4,pc}
;;;282    
                          ENDP

                  |L30.132|
                          DCD      0x40110000
                  |L30.136|
                          DCD      uTimer3Tick
                  |L30.140|
                          DCD      bIsSetTime3Event
                  |L30.144|
                          DCD      tTime3Event

                          AREA ||i.WDT_IRQHandler||, CODE, READONLY, ALIGN=2

                  WDT_IRQHandler PROC
;;;1376   /*---------------------------------------------------------------------------------------------------------*/
;;;1377   void WDT_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1378   {
;;;1379   
;;;1380       WDT->WTCR.WTIF = 1;         /* Clear the WDT INT Flag */
000002  4808              LDR      r0,|L31.36|
000004  6800              LDR      r0,[r0,#0]
000006  2108              MOVS     r1,#8
000008  4388              BICS     r0,r0,r1
00000a  3008              ADDS     r0,r0,#8
00000c  4905              LDR      r1,|L31.36|
00000e  6008              STR      r0,[r1,#0]
;;;1381   
;;;1382       if (fnCallBack_WDT)        
000010  4805              LDR      r0,|L31.40|
000012  6800              LDR      r0,[r0,#0]  ; fnCallBack_WDT
000014  2800              CMP      r0,#0
000016  d003              BEQ      |L31.32|
;;;1383       {
;;;1384           fnCallBack_WDT(NULL);
000018  2000              MOVS     r0,#0
00001a  4903              LDR      r1,|L31.40|
00001c  6809              LDR      r1,[r1,#0]  ; fnCallBack_WDT
00001e  4788              BLX      r1
                  |L31.32|
;;;1385       }
;;;1386   }
000020  bd10              POP      {r4,pc}
;;;1387   
                          ENDP

000022  0000              DCW      0x0000
                  |L31.36|
                          DCD      0x40004000
                  |L31.40|
                          DCD      fnCallBack_WDT

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tTime0Event
                          %        20
                  tTime1Event
                          %        20
                  tTime2Event
                          %        20
                  tTime3Event
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  bIsTimer0Initial
                          DCD      0x00000000
                  bIsTimer1Initial
                          DCD      0x00000000
                  bIsTimer2Initial
                          DCD      0x00000000
                  bIsTimer3Initial
                          DCD      0x00000000
                  bIsTimer0Used
                          DCD      0x00000000
                  bIsTimer1Used
                          DCD      0x00000000
                  bIsTimer2Used
                          DCD      0x00000000
                  bIsTimer3Used
                          DCD      0x00000000
                  bIsSetTime0Event
                          DCD      0x00000000
                  bIsSetTime1Event
                          DCD      0x00000000
                  bIsSetTime2Event
                          DCD      0x00000000
                  bIsSetTime3Event
                          DCD      0x00000000
                  uTimer0Tick
                          DCD      0x00000000
                  uTimer1Tick
                          DCD      0x00000000
                  uTimer2Tick
                          DCD      0x00000000
                  uTimer3Tick
                          DCD      0x00000000
                  uTime0EventCount
                          DCD      0x00000000
                  uTime1EventCount
                          DCD      0x00000000
                  uTime2EventCount
                          DCD      0x00000000
                  uTime3EventCount
                          DCD      0x00000000
                  u32EXTClockFreq
                          DCD      0x00b71b00
                  _sys_uTimer0TickPerSecond
                          DCD      0x00000000
                  _sys_uTimer1TickPerSecond
                          DCD      0x00000000
                  _sys_uTimer2TickPerSecond
                          DCD      0x00000000
                  _sys_uTimer3TickPerSecond
                          DCD      0x00000000
                  fnCallBack_WDT
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L193.16|
00000e  461d              MOV      r5,r3
                  |L193.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

