; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvrtc.o --depend=.\obj\drvrtc.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvrtc.crf ..\BSP_Lib\Src\Driver\DrvRTC.c]
                          THUMB

                          AREA ||i.DrcRTC_IsLeapYear||, CODE, READONLY, ALIGN=2

                  DrcRTC_IsLeapYear PROC
;;;754    
;;;755    int32_t DrcRTC_IsLeapYear()
000000  4803              LDR      r0,|L1.16|
;;;756    {
;;;757    	return (RTC->LIR.LIR == 0x1)?1:0;
000002  6a40              LDR      r0,[r0,#0x24]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
000008  2101              MOVS     r1,#1
00000a  4048              EORS     r0,r0,r1
00000c  4048              EORS     r0,r0,r1
;;;758    }
00000e  4770              BX       lr
;;;759    
                          ENDP

                  |L1.16|
                          DCD      0x40008000

                          AREA ||i.DrvRTC_Close||, CODE, READONLY, ALIGN=2

                  DrvRTC_Close PROC
;;;891    
;;;892    int32_t DrvRTC_Close (void)
000000  b500              PUSH     {lr}
;;;893    {
;;;894    
;;;895        g_bIsEnableTickInt = FALSE;
000002  2000              MOVS     r0,#0
000004  4907              LDR      r1,|L2.36|
000006  6008              STR      r0,[r1,#0]  ; g_bIsEnableTickInt
;;;896        g_bIsEnableAlarmInt = FALSE;
000008  4907              LDR      r1,|L2.40|
00000a  7008              STRB     r0,[r1,#0]
;;;897        
;;;898      	NVIC_DisableIRQ(RTC_IRQn);
00000c  bf00              NOP      
00000e  201f              MOVS     r0,#0x1f
000010  2101              MOVS     r1,#1
000012  4081              LSLS     r1,r1,r0
000014  4805              LDR      r0,|L2.44|
000016  6001              STR      r1,[r0,#0]
000018  bf00              NOP      
;;;899      
;;;900      	DrvRTC_DisableInt(DRVRTC_ALL_INT);
00001a  2003              MOVS     r0,#3
00001c  f7fffffe          BL       DrvRTC_DisableInt
;;;901    	
;;;902        return E_SUCCESS;
000020  2000              MOVS     r0,#0
;;;903    }
000022  bd00              POP      {pc}
;;;904    
                          ENDP

                  |L2.36|
                          DCD      g_bIsEnableTickInt
                  |L2.40|
                          DCD      g_bIsEnableAlarmInt
                  |L2.44|
                          DCD      0xe000e180

                          AREA ||i.DrvRTC_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvRTC_DisableInt PROC
;;;855    /*---------------------------------------------------------------------------------------------------------*/
;;;856    int32_t DrvRTC_DisableInt(E_DRVRTC_INT_SOURCE i32IntSrc)
000000  4601              MOV      r1,r0
;;;857    {
;;;858    	
;;;859    	if((i32IntSrc & DRVRTC_TICK_INT) == DRVRTC_TICK_INT	)
000002  2002              MOVS     r0,#2
000004  4008              ANDS     r0,r0,r1
000006  2802              CMP      r0,#2
000008  d110              BNE      |L3.44|
;;;860    	{
;;;861    		g_bIsEnableTickInt  = FALSE;	
00000a  2000              MOVS     r0,#0
00000c  4a13              LDR      r2,|L3.92|
00000e  6010              STR      r0,[r2,#0]  ; g_bIsEnableTickInt
;;;862    		RTC->RIER.TIER 		= 0; 
000010  4813              LDR      r0,|L3.96|
000012  6a80              LDR      r0,[r0,#0x28]
000014  2202              MOVS     r2,#2
000016  4390              BICS     r0,r0,r2
000018  4a11              LDR      r2,|L3.96|
00001a  6290              STR      r0,[r2,#0x28]
;;;863    		RTC->RIIR.TI 		= 1; 
00001c  4610              MOV      r0,r2
00001e  6ac0              LDR      r0,[r0,#0x2c]
000020  2202              MOVS     r2,#2
000022  4390              BICS     r0,r0,r2
000024  1c80              ADDS     r0,r0,#2
000026  4a0e              LDR      r2,|L3.96|
000028  62d0              STR      r0,[r2,#0x2c]
00002a  e015              B        |L3.88|
                  |L3.44|
;;;864    	}
;;;865    	else if((i32IntSrc & DRVRTC_ALARM_INT) == DRVRTC_ALARM_INT )
00002c  07c8              LSLS     r0,r1,#31
00002e  0fc0              LSRS     r0,r0,#31
000030  2801              CMP      r0,#1
000032  d10f              BNE      |L3.84|
;;;866    	{
;;;867            g_bIsEnableAlarmInt = FALSE;
000034  2000              MOVS     r0,#0
000036  4a0b              LDR      r2,|L3.100|
000038  7010              STRB     r0,[r2,#0]
;;;868        	RTC->RIER.AIER 		= 0; 
00003a  4809              LDR      r0,|L3.96|
00003c  6a80              LDR      r0,[r0,#0x28]
00003e  0840              LSRS     r0,r0,#1
000040  0040              LSLS     r0,r0,#1
000042  4a07              LDR      r2,|L3.96|
000044  6290              STR      r0,[r2,#0x28]
;;;869    		RTC->RIIR.AI 		= 1; 
000046  4610              MOV      r0,r2
000048  6ac0              LDR      r0,[r0,#0x2c]
00004a  0840              LSRS     r0,r0,#1
00004c  0040              LSLS     r0,r0,#1
00004e  1c40              ADDS     r0,r0,#1
000050  62d0              STR      r0,[r2,#0x2c]
000052  e001              B        |L3.88|
                  |L3.84|
;;;870    	}
;;;871    	else
;;;872    	{
;;;873    		return E_DRVRTC_ERR_ENOTTY;
000054  4804              LDR      r0,|L3.104|
                  |L3.86|
;;;874    	}
;;;875    	return E_SUCCESS;	
;;;876    
;;;877    }
000056  4770              BX       lr
                  |L3.88|
000058  2000              MOVS     r0,#0                 ;875
00005a  e7fc              B        |L3.86|
;;;878    
                          ENDP

                  |L3.92|
                          DCD      g_bIsEnableTickInt
                  |L3.96|
                          DCD      0x40008000
                  |L3.100|
                          DCD      g_bIsEnableAlarmInt
                  |L3.104|
                          DCD      0xffff9206

                          AREA ||i.DrvRTC_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvRTC_EnableInt PROC
;;;812    /*---------------------------------------------------------------------------------------------------------*/
;;;813    int32_t DrvRTC_EnableInt(E_DRVRTC_INT_SOURCE str_IntSrc, PFN_DRVRTC_CALLBACK pfncallback)
000000  4602              MOV      r2,r0
;;;814    {
;;;815    	switch (str_IntSrc)
000002  2a01              CMP      r2,#1
000004  d00e              BEQ      |L4.36|
000006  2a02              CMP      r2,#2
000008  d119              BNE      |L4.62|
;;;816        {
;;;817    
;;;818        	case DRVRTC_TICK_INT:
;;;819            {
;;;820            	g_bIsEnableTickInt   	= TRUE;
00000a  2001              MOVS     r0,#1
00000c  4b12              LDR      r3,|L4.88|
00000e  6018              STR      r0,[r3,#0]  ; g_bIsEnableTickInt
;;;821       			RTC->RIER.TIER 			= 1; 
000010  4812              LDR      r0,|L4.92|
000012  6a80              LDR      r0,[r0,#0x28]
000014  2302              MOVS     r3,#2
000016  4398              BICS     r0,r0,r3
000018  1c80              ADDS     r0,r0,#2
00001a  4b10              LDR      r3,|L4.92|
00001c  6298              STR      r0,[r3,#0x28]
;;;822    			g_pfnRTCCallBack_Tick  	= pfncallback;
00001e  4810              LDR      r0,|L4.96|
000020  6001              STR      r1,[r0,#0]  ; g_pfnRTCCallBack_Tick
;;;823       			break;
000022  e00e              B        |L4.66|
                  |L4.36|
;;;824            }
;;;825            case DRVRTC_ALARM_INT:
;;;826            {
;;;827                g_bIsEnableAlarmInt  	= TRUE;
000024  2001              MOVS     r0,#1
000026  4b0f              LDR      r3,|L4.100|
000028  7018              STRB     r0,[r3,#0]
;;;828        		RTC->RIER.AIER 			= 1; 
00002a  480c              LDR      r0,|L4.92|
00002c  6a80              LDR      r0,[r0,#0x28]
00002e  0840              LSRS     r0,r0,#1
000030  0040              LSLS     r0,r0,#1
000032  1c40              ADDS     r0,r0,#1
000034  4b09              LDR      r3,|L4.92|
000036  6298              STR      r0,[r3,#0x28]
;;;829    			g_pfnRTCCallBack_Alarm 	= pfncallback;
000038  480b              LDR      r0,|L4.104|
00003a  6001              STR      r1,[r0,#0]  ; g_pfnRTCCallBack_Alarm
;;;830                break;
00003c  e001              B        |L4.66|
                  |L4.62|
;;;831            }
;;;832            default:
;;;833            {
;;;834                return E_DRVRTC_ERR_ENOTTY;
00003e  480b              LDR      r0,|L4.108|
                  |L4.64|
;;;835            }
;;;836        }
;;;837    	NVIC_EnableIRQ(RTC_IRQn); 
;;;838    
;;;839    	return E_SUCCESS;
;;;840    
;;;841    }
000040  4770              BX       lr
                  |L4.66|
000042  bf00              NOP                            ;823
000044  bf00              NOP                            ;837
000046  201f              MOVS     r0,#0x1f              ;837
000048  2301              MOVS     r3,#1                 ;837
00004a  4083              LSLS     r3,r3,r0              ;837
00004c  4808              LDR      r0,|L4.112|
00004e  6003              STR      r3,[r0,#0]            ;837
000050  bf00              NOP                            ;837
000052  2000              MOVS     r0,#0                 ;839
000054  e7f4              B        |L4.64|
;;;842    
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      g_bIsEnableTickInt
                  |L4.92|
                          DCD      0x40008000
                  |L4.96|
                          DCD      g_pfnRTCCallBack_Tick
                  |L4.100|
                          DCD      g_bIsEnableAlarmInt
                  |L4.104|
                          DCD      g_pfnRTCCallBack_Alarm
                  |L4.108|
                          DCD      0xffff9206
                  |L4.112|
                          DCD      0xe000e100

                          AREA ||i.DrvRTC_GetIntTick||, CODE, READONLY, ALIGN=2

                  DrvRTC_GetIntTick PROC
;;;717    
;;;718    int32_t DrvRTC_GetIntTick()
000000  4801              LDR      r0,|L5.8|
;;;719    {
;;;720       return g_u32RTC_Count;
000002  6800              LDR      r0,[r0,#0]  ; g_u32RTC_Count
;;;721    }
000004  4770              BX       lr
;;;722    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      g_u32RTC_Count

                          AREA ||i.DrvRTC_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvRTC_GetVersion PROC
;;;917    /*---------------------------------------------------------------------------------------------------------*/
;;;918    int32_t DrvRTC_GetVersion (void)
000000  4800              LDR      r0,|L6.4|
;;;919    {
;;;920    	return DRVRTC_VERSION_NUM;
;;;921    }
000002  4770              BX       lr
;;;922    
                          ENDP

                  |L6.4|
                          DCD      0x00010202

                          AREA ||i.DrvRTC_Init||, CODE, READONLY, ALIGN=2

                  DrvRTC_Init PROC
;;;187    
;;;188    int32_t DrvRTC_Init (void)
000000  2100              MOVS     r1,#0
;;;189    {
;;;190        int32_t i32i =0;
;;;191    	
;;;192    	volatile int32_t i32delay=1000;
000002  227d              MOVS     r2,#0x7d
000004  00d2              LSLS     r2,r2,#3
;;;193    
;;;194        /*-----------------------------------------------------------------------------------------------------*/
;;;195        /* Initial time data struct and some parameters.                                                       */
;;;196        /*-----------------------------------------------------------------------------------------------------*/
;;;197        g_pfnRTCCallBack_Alarm = NULL;
000006  2000              MOVS     r0,#0
000008  4b1b              LDR      r3,|L7.120|
00000a  6018              STR      r0,[r3,#0]  ; g_pfnRTCCallBack_Alarm
;;;198        g_pfnRTCCallBack_Tick = NULL;
00000c  4b1b              LDR      r3,|L7.124|
00000e  6018              STR      r0,[r3,#0]  ; g_pfnRTCCallBack_Tick
;;;199    
;;;200        g_u32RTC_Count = 0;
000010  4b1b              LDR      r3,|L7.128|
000012  6018              STR      r0,[r3,#0]  ; g_u32RTC_Count
;;;201    	
;;;202    	UNLOCKREG();
000014  2059              MOVS     r0,#0x59
000016  4b1b              LDR      r3,|L7.132|
000018  6018              STR      r0,[r3,#0]
00001a  2016              MOVS     r0,#0x16
00001c  6018              STR      r0,[r3,#0]
00001e  2088              MOVS     r0,#0x88
000020  6018              STR      r0,[r3,#0]
;;;203    	/* Enable 32K Clock */
;;;204    	SYSCLK->PWRCON.XTL32K_EN =1;
000022  4819              LDR      r0,|L7.136|
000024  6800              LDR      r0,[r0,#0]
000026  2302              MOVS     r3,#2
000028  4398              BICS     r0,r0,r3
00002a  1c80              ADDS     r0,r0,#2
00002c  4b16              LDR      r3,|L7.136|
00002e  6018              STR      r0,[r3,#0]
;;;205    	  
;;;206    	/* Waiting for 32K stable */
;;;207      	while(i32delay--);
000030  bf00              NOP      
                  |L7.50|
000032  4610              MOV      r0,r2
000034  1e52              SUBS     r2,r2,#1
000036  2800              CMP      r0,#0
000038  d1fb              BNE      |L7.50|
;;;208    	
;;;209    	/* Enable RTC Clock */
;;;210    	SYSCLK->APBCLK.RTC_EN =1;
00003a  4813              LDR      r0,|L7.136|
00003c  6880              LDR      r0,[r0,#8]
00003e  2302              MOVS     r3,#2
000040  4398              BICS     r0,r0,r3
000042  1c80              ADDS     r0,r0,#2
000044  4b10              LDR      r3,|L7.136|
000046  6098              STR      r0,[r3,#8]
;;;211    	
;;;212    	LOCKREG();
000048  2000              MOVS     r0,#0
00004a  4b0e              LDR      r3,|L7.132|
00004c  6018              STR      r0,[r3,#0]
;;;213    
;;;214        /*-----------------------------------------------------------------------------------------------------*/
;;;215        /* When RTC is power on, write 0xa5eb1357 to RTC_INIR to reset all logic.                              */
;;;216        /*-----------------------------------------------------------------------------------------------------*/
;;;217    	
;;;218    	RTC->INIR = DRVRTC_INIT_KEY;
00004e  480f              LDR      r0,|L7.140|
000050  4b0f              LDR      r3,|L7.144|
000052  6018              STR      r0,[r3,#0]
;;;219    
;;;220        for (i32i = 0 ; i32i < DRVRTC_WAIT_COUNT ; i32i++)
000054  2100              MOVS     r1,#0
000056  e005              B        |L7.100|
                  |L7.88|
;;;221        {
;;;222    
;;;223    		if(RTC->INIR == 0x1)  /* Check RTC_INIR[0] to find out RTC reset signal */
000058  480d              LDR      r0,|L7.144|
00005a  6800              LDR      r0,[r0,#0]
00005c  2801              CMP      r0,#1
00005e  d100              BNE      |L7.98|
;;;224            { 
;;;225                break;
000060  e002              B        |L7.104|
                  |L7.98|
000062  1c49              ADDS     r1,r1,#1              ;220
                  |L7.100|
000064  1c48              ADDS     r0,r1,#1              ;220
000066  d1f7              BNE      |L7.88|
                  |L7.104|
000068  bf00              NOP      
;;;226            }
;;;227        }
;;;228    
;;;229        if (i32i == DRVRTC_WAIT_COUNT)
00006a  1c48              ADDS     r0,r1,#1
00006c  d101              BNE      |L7.114|
;;;230        {
;;;231            RTCDEBUG("\nRTC: RTC_Init, initial RTC FAILED!\n");
;;;232            return E_DRVRTC_ERR_EIO;
00006e  4809              LDR      r0,|L7.148|
                  |L7.112|
;;;233        }
;;;234    
;;;235        return E_SUCCESS;
;;;236    }
000070  4770              BX       lr
                  |L7.114|
000072  2000              MOVS     r0,#0                 ;235
000074  e7fc              B        |L7.112|
;;;237    
                          ENDP

000076  0000              DCW      0x0000
                  |L7.120|
                          DCD      g_pfnRTCCallBack_Alarm
                  |L7.124|
                          DCD      g_pfnRTCCallBack_Tick
                  |L7.128|
                          DCD      g_u32RTC_Count
                  |L7.132|
                          DCD      0x50000100
                  |L7.136|
                          DCD      0x50000200
                  |L7.140|
                          DCD      0xa5eb1357
                  |L7.144|
                          DCD      0x40008000
                  |L7.148|
                          DCD      0xffff9205

                          AREA ||i.DrvRTC_Open||, CODE, READONLY, ALIGN=2

                  DrvRTC_Open PROC
;;;251    
;;;252    int32_t DrvRTC_Open (S_DRVRTC_TIME_DATA_T *sPt)
000000  b57c              PUSH     {r2-r6,lr}
;;;253    {
000002  4604              MOV      r4,r0
;;;254        uint32_t u32Reg;
;;;255    	
;;;256    	volatile int32_t i32delay=1000;
000004  267d              MOVS     r6,#0x7d
000006  00f6              LSLS     r6,r6,#3
;;;257        
;;;258    	RTC_TLR_T tlr = {0};
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;259    	RTC_CLR_T clr = {0};
00000c  9000              STR      r0,[sp,#0]
;;;260        
;;;261        /*-----------------------------------------------------------------------------------------------------*/
;;;262        /* DO BASIC JUDGEMENT TO Check RTC time data value is reasonable or not.                               */
;;;263        /*-----------------------------------------------------------------------------------------------------*/
;;;264        if ( ((sPt->u32Year - DRVRTC_YEAR2000) > 99)|
00000e  69a0              LDR      r0,[r4,#0x18]
000010  2800              CMP      r0,#0
000012  d002              BEQ      |L8.26|
;;;265             ((sPt->u32cMonth == 0) || (sPt->u32cMonth > 12))|
000014  69a0              LDR      r0,[r4,#0x18]
000016  280c              CMP      r0,#0xc
000018  d901              BLS      |L8.30|
                  |L8.26|
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L8.32|
                  |L8.30|
00001e  2000              MOVS     r0,#0
                  |L8.32|
000020  227d              MOVS     r2,#0x7d
000022  0112              LSLS     r2,r2,#4
000024  69e1              LDR      r1,[r4,#0x1c]
000026  1a89              SUBS     r1,r1,r2
000028  2963              CMP      r1,#0x63
00002a  d901              BLS      |L8.48|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L8.50|
                  |L8.48|
000030  2100              MOVS     r1,#0
                  |L8.50|
000032  4308              ORRS     r0,r0,r1
000034  6961              LDR      r1,[r4,#0x14]
000036  2900              CMP      r1,#0
000038  d002              BEQ      |L8.64|
;;;266             ((sPt->u32cDay   == 0) || (sPt->u32cDay   > 31)))
00003a  6961              LDR      r1,[r4,#0x14]
00003c  291f              CMP      r1,#0x1f
00003e  d901              BLS      |L8.68|
                  |L8.64|
000040  2101              MOVS     r1,#1
000042  e000              B        |L8.70|
                  |L8.68|
000044  2100              MOVS     r1,#0
                  |L8.70|
000046  4308              ORRS     r0,r0,r1
000048  d001              BEQ      |L8.78|
;;;267        {
;;;268            return E_DRVRTC_ERR_CALENDAR_VALUE;
00004a  4869              LDR      r0,|L8.496|
                  |L8.76|
;;;269        }
;;;270    
;;;271        if (sPt->u8cClockDisplay == DRVRTC_CLOCK_12)
;;;272        {
;;;273            if ( (sPt->u32cHour == 0) || (sPt->u32cHour > 12) )
;;;274            {
;;;275                return E_DRVRTC_ERR_TIMESACLE_VALUE ;
;;;276            }
;;;277        }
;;;278        else if (sPt->u8cClockDisplay == DRVRTC_CLOCK_24)
;;;279        {
;;;280            if (sPt->u32cHour > 23)
;;;281            {
;;;282                return E_DRVRTC_ERR_TIMESACLE_VALUE ;
;;;283            }
;;;284        }
;;;285        else
;;;286        {
;;;287            return E_DRVRTC_ERR_TIMESACLE_VALUE ;
;;;288        }
;;;289    
;;;290        if ((sPt->u32cMinute > 59) |
;;;291            (sPt->u32cSecond > 59) |
;;;292            (sPt->u32cSecond > 59))
;;;293        {
;;;294            return E_DRVRTC_ERR_TIME_VALUE ;
;;;295        }
;;;296        if (sPt->u32cDayOfWeek > 6)
;;;297        {
;;;298            return E_DRVRTC_ERR_DWR_VALUE ;
;;;299        }
;;;300    
;;;301        /*-----------------------------------------------------------------------------------------------------*/
;;;302        /* Important, call RTC_WriteEnable() before write data into any register.                              */
;;;303        /* User should be write data as soon as possible.Access enable wiil clear after 200ms                  */
;;;304    	/*-----------------------------------------------------------------------------------------------------*/
;;;305        g_u32Reg = DrvRTC_WriteEnable();
;;;306        if (g_u32Reg != 0)
;;;307        {
;;;308            return E_DRVRTC_ERR_FAILED;
;;;309        }
;;;310        
;;;311        /*-----------------------------------------------------------------------------------------------------*/
;;;312        /* Second, set RTC 24/12 hour setting                                                                  */
;;;313        /*-----------------------------------------------------------------------------------------------------*/
;;;314        if (sPt->u8cClockDisplay == DRVRTC_CLOCK_12)
;;;315        {
;;;316            DrvRTC_WriteEnable();
;;;317     		RTC->TSSR.HR24 = DRVRTC_CLOCK_12;
;;;318    
;;;319            /*-------------------------------------------------------------------------------------------------*/
;;;320            /* important, range of 12-hour PM mode is 21 upto 32                                               */
;;;321            /*-------------------------------------------------------------------------------------------------*/
;;;322            if (sPt->u8cAmPm == DRVRTC_PM)
;;;323                sPt->u32cHour += 20;
;;;324        }
;;;325        else                                                                               /* RTC_CLOCK_24 */
;;;326        {
;;;327    
;;;328            DrvRTC_WriteEnable();
;;;329     		RTC->TSSR.HR24 = DRVRTC_CLOCK_24;
;;;330            RTCDEBUG ("RTC: 24-hour\n");
;;;331        }
;;;332    
;;;333        /*-----------------------------------------------------------------------------------------------------*/
;;;334        /* Set RTC Calender Loading                                                                            */
;;;335        /*-----------------------------------------------------------------------------------------------------*/
;;;336        u32Reg    = ((sPt->u32Year - DRVRTC_YEAR2000) / 10) << 20;
;;;337        u32Reg    |= (((sPt->u32Year - DRVRTC_YEAR2000) % 10) << 16);
;;;338        u32Reg    |= ((sPt->u32cMonth  / 10) << 12);
;;;339        u32Reg    |= ((sPt->u32cMonth  % 10) << 8);
;;;340        u32Reg    |= ((sPt->u32cDay    / 10) << 4);
;;;341        u32Reg    |= (sPt->u32cDay     % 10);
;;;342        g_u32Reg = u32Reg;
;;;343    	
;;;344    	DrvRTC_WriteEnable();
;;;345     	RTC->TSSR.HR24 = DRVRTC_CLOCK_24;
;;;346        outpw(&RTC->CLR, (uint32_t)g_u32Reg);
;;;347    
;;;348    	/*-----------------------------------------------------------------------------------------------------*/
;;;349        /* Set RTC Time Loading                                                                                */
;;;350        /*-----------------------------------------------------------------------------------------------------*/
;;;351        u32Reg     = ((sPt->u32cHour / 10) << 20);
;;;352        u32Reg    |= ((sPt->u32cHour % 10) << 16);
;;;353        u32Reg    |= ((sPt->u32cMinute / 10) << 12);
;;;354        u32Reg    |= ((sPt->u32cMinute % 10) << 8);
;;;355        u32Reg    |= ((sPt->u32cSecond / 10) << 4);
;;;356        u32Reg    |= (sPt->u32cSecond % 10);
;;;357        g_u32Reg = u32Reg;
;;;358    
;;;359     	DrvRTC_WriteEnable();
;;;360        outpw(&RTC->TLR, (uint32_t)g_u32Reg);
;;;361    
;;;362    	outpw(&RTC->DWR, sPt->u32cDayOfWeek);
;;;363    
;;;364    	RTC->TTR.TWKE = sPt->u8IsEnableWakeUp;
;;;365    
;;;366    	/* Waiting for RTC settings stable */
;;;367      	while(i32delay--);
;;;368    
;;;369        return E_SUCCESS;
;;;370    }
00004c  bd7c              POP      {r2-r6,pc}
                  |L8.78|
00004e  7820              LDRB     r0,[r4,#0]            ;271
000050  2800              CMP      r0,#0                 ;271
000052  d108              BNE      |L8.102|
000054  68e0              LDR      r0,[r4,#0xc]          ;273
000056  2800              CMP      r0,#0                 ;273
000058  d002              BEQ      |L8.96|
00005a  68e0              LDR      r0,[r4,#0xc]          ;273
00005c  280c              CMP      r0,#0xc               ;273
00005e  d90e              BLS      |L8.126|
                  |L8.96|
000060  4863              LDR      r0,|L8.496|
000062  1c40              ADDS     r0,r0,#1              ;275
000064  e7f2              B        |L8.76|
                  |L8.102|
000066  7820              LDRB     r0,[r4,#0]            ;278
000068  2801              CMP      r0,#1                 ;278
00006a  d105              BNE      |L8.120|
00006c  68e0              LDR      r0,[r4,#0xc]          ;280
00006e  2817              CMP      r0,#0x17              ;280
000070  d905              BLS      |L8.126|
000072  485f              LDR      r0,|L8.496|
000074  1c40              ADDS     r0,r0,#1              ;282
000076  e7e9              B        |L8.76|
                  |L8.120|
000078  485d              LDR      r0,|L8.496|
00007a  1c40              ADDS     r0,r0,#1              ;287
00007c  e7e6              B        |L8.76|
                  |L8.126|
00007e  68a0              LDR      r0,[r4,#8]            ;290
000080  283b              CMP      r0,#0x3b              ;290
000082  d901              BLS      |L8.136|
000084  2001              MOVS     r0,#1                 ;290
000086  e000              B        |L8.138|
                  |L8.136|
000088  2000              MOVS     r0,#0                 ;290
                  |L8.138|
00008a  6861              LDR      r1,[r4,#4]            ;290
00008c  293b              CMP      r1,#0x3b              ;290
00008e  d901              BLS      |L8.148|
000090  2101              MOVS     r1,#1                 ;290
000092  e000              B        |L8.150|
                  |L8.148|
000094  2100              MOVS     r1,#0                 ;290
                  |L8.150|
000096  4308              ORRS     r0,r0,r1              ;290
000098  6861              LDR      r1,[r4,#4]            ;290
00009a  293b              CMP      r1,#0x3b              ;290
00009c  d901              BLS      |L8.162|
00009e  2101              MOVS     r1,#1                 ;290
0000a0  e000              B        |L8.164|
                  |L8.162|
0000a2  2100              MOVS     r1,#0                 ;290
                  |L8.164|
0000a4  4308              ORRS     r0,r0,r1              ;290
0000a6  d002              BEQ      |L8.174|
0000a8  4851              LDR      r0,|L8.496|
0000aa  1c80              ADDS     r0,r0,#2              ;294
0000ac  e7ce              B        |L8.76|
                  |L8.174|
0000ae  6920              LDR      r0,[r4,#0x10]         ;296
0000b0  2806              CMP      r0,#6                 ;296
0000b2  d902              BLS      |L8.186|
0000b4  484e              LDR      r0,|L8.496|
0000b6  1cc0              ADDS     r0,r0,#3              ;298
0000b8  e7c8              B        |L8.76|
                  |L8.186|
0000ba  f7fffffe          BL       DrvRTC_WriteEnable
0000be  494d              LDR      r1,|L8.500|
0000c0  6008              STR      r0,[r1,#0]            ;305  ; g_u32Reg
0000c2  4608              MOV      r0,r1                 ;306
0000c4  6800              LDR      r0,[r0,#0]            ;306  ; g_u32Reg
0000c6  2800              CMP      r0,#0                 ;306
0000c8  d002              BEQ      |L8.208|
0000ca  4849              LDR      r0,|L8.496|
0000cc  3008              ADDS     r0,r0,#8              ;308
0000ce  e7bd              B        |L8.76|
                  |L8.208|
0000d0  7820              LDRB     r0,[r4,#0]            ;314
0000d2  2800              CMP      r0,#0                 ;314
0000d4  d10e              BNE      |L8.244|
0000d6  f7fffffe          BL       DrvRTC_WriteEnable
0000da  4847              LDR      r0,|L8.504|
0000dc  6940              LDR      r0,[r0,#0x14]         ;317
0000de  0840              LSRS     r0,r0,#1              ;317
0000e0  0040              LSLS     r0,r0,#1              ;317
0000e2  4945              LDR      r1,|L8.504|
0000e4  6148              STR      r0,[r1,#0x14]         ;317
0000e6  7860              LDRB     r0,[r4,#1]            ;322
0000e8  2802              CMP      r0,#2                 ;322
0000ea  d10c              BNE      |L8.262|
0000ec  68e0              LDR      r0,[r4,#0xc]          ;323
0000ee  3014              ADDS     r0,r0,#0x14           ;323
0000f0  60e0              STR      r0,[r4,#0xc]          ;323
0000f2  e008              B        |L8.262|
                  |L8.244|
0000f4  f7fffffe          BL       DrvRTC_WriteEnable
0000f8  483f              LDR      r0,|L8.504|
0000fa  6940              LDR      r0,[r0,#0x14]         ;329
0000fc  0840              LSRS     r0,r0,#1              ;329
0000fe  0040              LSLS     r0,r0,#1              ;329
000100  1c40              ADDS     r0,r0,#1              ;329
000102  493d              LDR      r1,|L8.504|
000104  6148              STR      r0,[r1,#0x14]         ;329
                  |L8.262|
000106  227d              MOVS     r2,#0x7d              ;336
000108  0112              LSLS     r2,r2,#4              ;336
00010a  69e1              LDR      r1,[r4,#0x1c]         ;336
00010c  1a88              SUBS     r0,r1,r2              ;336
00010e  210a              MOVS     r1,#0xa               ;336
000110  f7fffffe          BL       __aeabi_uidivmod
000114  0505              LSLS     r5,r0,#20             ;336
000116  227d              MOVS     r2,#0x7d              ;337
000118  0112              LSLS     r2,r2,#4              ;337
00011a  69e1              LDR      r1,[r4,#0x1c]         ;337
00011c  1a88              SUBS     r0,r1,r2              ;337
00011e  210a              MOVS     r1,#0xa               ;337
000120  f7fffffe          BL       __aeabi_uidivmod
000124  0408              LSLS     r0,r1,#16             ;337
000126  4305              ORRS     r5,r5,r0              ;337
000128  210a              MOVS     r1,#0xa               ;338
00012a  69a0              LDR      r0,[r4,#0x18]         ;338
00012c  f7fffffe          BL       __aeabi_uidivmod
000130  0300              LSLS     r0,r0,#12             ;338
000132  4305              ORRS     r5,r5,r0              ;338
000134  210a              MOVS     r1,#0xa               ;339
000136  69a0              LDR      r0,[r4,#0x18]         ;339
000138  f7fffffe          BL       __aeabi_uidivmod
00013c  0208              LSLS     r0,r1,#8              ;339
00013e  4305              ORRS     r5,r5,r0              ;339
000140  210a              MOVS     r1,#0xa               ;340
000142  6960              LDR      r0,[r4,#0x14]         ;340
000144  f7fffffe          BL       __aeabi_uidivmod
000148  0100              LSLS     r0,r0,#4              ;340
00014a  4305              ORRS     r5,r5,r0              ;340
00014c  210a              MOVS     r1,#0xa               ;341
00014e  6960              LDR      r0,[r4,#0x14]         ;341
000150  f7fffffe          BL       __aeabi_uidivmod
000154  430d              ORRS     r5,r5,r1              ;341
000156  4827              LDR      r0,|L8.500|
000158  6005              STR      r5,[r0,#0]            ;342  ; g_u32Reg
00015a  f7fffffe          BL       DrvRTC_WriteEnable
00015e  4826              LDR      r0,|L8.504|
000160  6940              LDR      r0,[r0,#0x14]         ;345
000162  0840              LSRS     r0,r0,#1              ;345
000164  0040              LSLS     r0,r0,#1              ;345
000166  1c40              ADDS     r0,r0,#1              ;345
000168  4923              LDR      r1,|L8.504|
00016a  6148              STR      r0,[r1,#0x14]         ;345
00016c  4821              LDR      r0,|L8.500|
00016e  6800              LDR      r0,[r0,#0]            ;346  ; g_u32Reg
000170  6108              STR      r0,[r1,#0x10]         ;346
000172  210a              MOVS     r1,#0xa               ;351
000174  68e0              LDR      r0,[r4,#0xc]          ;351
000176  f7fffffe          BL       __aeabi_uidivmod
00017a  0505              LSLS     r5,r0,#20             ;351
00017c  210a              MOVS     r1,#0xa               ;352
00017e  68e0              LDR      r0,[r4,#0xc]          ;352
000180  f7fffffe          BL       __aeabi_uidivmod
000184  0408              LSLS     r0,r1,#16             ;352
000186  4305              ORRS     r5,r5,r0              ;352
000188  210a              MOVS     r1,#0xa               ;353
00018a  68a0              LDR      r0,[r4,#8]            ;353
00018c  f7fffffe          BL       __aeabi_uidivmod
000190  0300              LSLS     r0,r0,#12             ;353
000192  4305              ORRS     r5,r5,r0              ;353
000194  210a              MOVS     r1,#0xa               ;354
000196  68a0              LDR      r0,[r4,#8]            ;354
000198  f7fffffe          BL       __aeabi_uidivmod
00019c  0208              LSLS     r0,r1,#8              ;354
00019e  4305              ORRS     r5,r5,r0              ;354
0001a0  210a              MOVS     r1,#0xa               ;355
0001a2  6860              LDR      r0,[r4,#4]            ;355
0001a4  f7fffffe          BL       __aeabi_uidivmod
0001a8  0100              LSLS     r0,r0,#4              ;355
0001aa  4305              ORRS     r5,r5,r0              ;355
0001ac  210a              MOVS     r1,#0xa               ;356
0001ae  6860              LDR      r0,[r4,#4]            ;356
0001b0  f7fffffe          BL       __aeabi_uidivmod
0001b4  430d              ORRS     r5,r5,r1              ;356
0001b6  480f              LDR      r0,|L8.500|
0001b8  6005              STR      r5,[r0,#0]            ;357  ; g_u32Reg
0001ba  f7fffffe          BL       DrvRTC_WriteEnable
0001be  480d              LDR      r0,|L8.500|
0001c0  6800              LDR      r0,[r0,#0]            ;360  ; g_u32Reg
0001c2  490d              LDR      r1,|L8.504|
0001c4  60c8              STR      r0,[r1,#0xc]          ;360
0001c6  6920              LDR      r0,[r4,#0x10]         ;362
0001c8  6188              STR      r0,[r1,#0x18]         ;362
0001ca  4608              MOV      r0,r1                 ;364
0001cc  6b00              LDR      r0,[r0,#0x30]         ;364
0001ce  2108              MOVS     r1,#8                 ;364
0001d0  4388              BICS     r0,r0,r1              ;364
0001d2  2120              MOVS     r1,#0x20              ;364
0001d4  5d09              LDRB     r1,[r1,r4]            ;364
0001d6  00c9              LSLS     r1,r1,#3              ;364
0001d8  2208              MOVS     r2,#8                 ;364
0001da  4011              ANDS     r1,r1,r2              ;364
0001dc  4308              ORRS     r0,r0,r1              ;364
0001de  4906              LDR      r1,|L8.504|
0001e0  6308              STR      r0,[r1,#0x30]         ;364
0001e2  bf00              NOP                            ;367
                  |L8.484|
0001e4  4630              MOV      r0,r6                 ;367
0001e6  1e76              SUBS     r6,r6,#1              ;367
0001e8  2800              CMP      r0,#0                 ;367
0001ea  d1fb              BNE      |L8.484|
0001ec  bf00              NOP                            ;369
0001ee  e72d              B        |L8.76|
;;;371    
                          ENDP

                  |L8.496|
                          DCD      0xffff9200
                  |L8.500|
                          DCD      g_u32Reg
                  |L8.504|
                          DCD      0x40008000

                          AREA ||i.DrvRTC_Read||, CODE, READONLY, ALIGN=2

                  DrvRTC_Read PROC
;;;386    
;;;387    int32_t DrvRTC_Read (E_DRVRTC_TIME_SELECT eTime, S_DRVRTC_TIME_DATA_T *sPt)
000000  b510              PUSH     {r4,lr}
;;;388    {
000002  4603              MOV      r3,r0
;;;389        uint32_t u32Tmp;
;;;390        
;;;391        sPt->u8cClockDisplay = RTC->TSSR.HR24;                                 /* 12/24-hour */
000004  4882              LDR      r0,|L9.528|
000006  6940              LDR      r0,[r0,#0x14]
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
00000c  7008              STRB     r0,[r1,#0]
;;;392        sPt->u32cDayOfWeek   = RTC->DWR.DWR;                                   /* Day of week */
00000e  4880              LDR      r0,|L9.528|
000010  6980              LDR      r0,[r0,#0x18]
000012  0740              LSLS     r0,r0,#29
000014  0f40              LSRS     r0,r0,#29
000016  6108              STR      r0,[r1,#0x10]
;;;393    
;;;394        switch (eTime)
000018  2b00              CMP      r3,#0
00001a  d002              BEQ      |L9.34|
00001c  2b01              CMP      r3,#1
00001e  d17e              BNE      |L9.286|
000020  e048              B        |L9.180|
                  |L9.34|
;;;395        {
;;;396            case DRVRTC_CURRENT_TIME:										   /* Get Current Time */
;;;397            {
;;;398    			g_u32hiYear  = RTC->CLR.YEAR10 ;
000022  487b              LDR      r0,|L9.528|
000024  6900              LDR      r0,[r0,#0x10]
000026  0200              LSLS     r0,r0,#8
000028  0f00              LSRS     r0,r0,#28
00002a  4c7a              LDR      r4,|L9.532|
00002c  6020              STR      r0,[r4,#0]  ; g_u32hiYear
;;;399        		g_u32loYear  = RTC->CLR.YEAR1;
00002e  4878              LDR      r0,|L9.528|
000030  6900              LDR      r0,[r0,#0x10]
000032  0300              LSLS     r0,r0,#12
000034  0f00              LSRS     r0,r0,#28
000036  4c78              LDR      r4,|L9.536|
000038  6020              STR      r0,[r4,#0]  ; g_u32loYear
;;;400        		g_u32hiMonth = RTC->CLR.MON10;
00003a  4875              LDR      r0,|L9.528|
00003c  6900              LDR      r0,[r0,#0x10]
00003e  04c0              LSLS     r0,r0,#19
000040  0fc0              LSRS     r0,r0,#31
000042  4c76              LDR      r4,|L9.540|
000044  6020              STR      r0,[r4,#0]  ; g_u32hiMonth
;;;401        		g_u32loMonth = RTC->CLR.MON1;
000046  4872              LDR      r0,|L9.528|
000048  6900              LDR      r0,[r0,#0x10]
00004a  0500              LSLS     r0,r0,#20
00004c  0f00              LSRS     r0,r0,#28
00004e  4c74              LDR      r4,|L9.544|
000050  6020              STR      r0,[r4,#0]  ; g_u32loMonth
;;;402        		g_u32hiDay   = RTC->CLR.DAY10;
000052  486f              LDR      r0,|L9.528|
000054  6900              LDR      r0,[r0,#0x10]
000056  0680              LSLS     r0,r0,#26
000058  0f80              LSRS     r0,r0,#30
00005a  4c72              LDR      r4,|L9.548|
00005c  6020              STR      r0,[r4,#0]  ; g_u32hiDay
;;;403        		g_u32loDay   = RTC->CLR.DAY1;
00005e  486c              LDR      r0,|L9.528|
000060  6900              LDR      r0,[r0,#0x10]
000062  0700              LSLS     r0,r0,#28
000064  0f00              LSRS     r0,r0,#28
000066  4c70              LDR      r4,|L9.552|
000068  6020              STR      r0,[r4,#0]  ; g_u32loDay
;;;404    
;;;405    		    g_u32hiHour =  RTC->TLR.HR10;
00006a  4869              LDR      r0,|L9.528|
00006c  68c0              LDR      r0,[r0,#0xc]
00006e  0280              LSLS     r0,r0,#10
000070  0f80              LSRS     r0,r0,#30
000072  4c6e              LDR      r4,|L9.556|
000074  6020              STR      r0,[r4,#0]  ; g_u32hiHour
;;;406        		g_u32loHour =  RTC->TLR.HR1;
000076  4866              LDR      r0,|L9.528|
000078  68c0              LDR      r0,[r0,#0xc]
00007a  0300              LSLS     r0,r0,#12
00007c  0f00              LSRS     r0,r0,#28
00007e  4c6c              LDR      r4,|L9.560|
000080  6020              STR      r0,[r4,#0]  ; g_u32loHour
;;;407        		g_u32hiMin  =  RTC->TLR.MIN10;
000082  4863              LDR      r0,|L9.528|
000084  68c0              LDR      r0,[r0,#0xc]
000086  0440              LSLS     r0,r0,#17
000088  0f40              LSRS     r0,r0,#29
00008a  4c6a              LDR      r4,|L9.564|
00008c  6020              STR      r0,[r4,#0]  ; g_u32hiMin
;;;408        		g_u32loMin  =  RTC->TLR.MIN1;
00008e  4860              LDR      r0,|L9.528|
000090  68c0              LDR      r0,[r0,#0xc]
000092  0500              LSLS     r0,r0,#20
000094  0f00              LSRS     r0,r0,#28
000096  4c68              LDR      r4,|L9.568|
000098  6020              STR      r0,[r4,#0]  ; g_u32loMin
;;;409        		g_u32hiSec  =  RTC->TLR.SEC10;
00009a  485d              LDR      r0,|L9.528|
00009c  68c0              LDR      r0,[r0,#0xc]
00009e  0640              LSLS     r0,r0,#25
0000a0  0f40              LSRS     r0,r0,#29
0000a2  4c66              LDR      r4,|L9.572|
0000a4  6020              STR      r0,[r4,#0]  ; g_u32hiSec
;;;410        		g_u32loSec  =  RTC->TLR.SEC1;
0000a6  485a              LDR      r0,|L9.528|
0000a8  68c0              LDR      r0,[r0,#0xc]
0000aa  0700              LSLS     r0,r0,#28
0000ac  0f00              LSRS     r0,r0,#28
0000ae  4c64              LDR      r4,|L9.576|
0000b0  6020              STR      r0,[r4,#0]  ; g_u32loSec
;;;411                break;
0000b2  e04c              B        |L9.334|
                  |L9.180|
;;;412    		}
;;;413            case DRVRTC_ALARM_TIME:									 	/* Get Alarm Time */
;;;414            {
;;;415    			g_u32hiYear  = RTC->CAR.YEAR10 ;
0000b4  4856              LDR      r0,|L9.528|
0000b6  6a00              LDR      r0,[r0,#0x20]
0000b8  0200              LSLS     r0,r0,#8
0000ba  0f00              LSRS     r0,r0,#28
0000bc  4c55              LDR      r4,|L9.532|
0000be  6020              STR      r0,[r4,#0]  ; g_u32hiYear
;;;416        		g_u32loYear  = RTC->CAR.YEAR1;
0000c0  4853              LDR      r0,|L9.528|
0000c2  6a00              LDR      r0,[r0,#0x20]
0000c4  0300              LSLS     r0,r0,#12
0000c6  0f00              LSRS     r0,r0,#28
0000c8  4c53              LDR      r4,|L9.536|
0000ca  6020              STR      r0,[r4,#0]  ; g_u32loYear
;;;417        		g_u32hiMonth = RTC->CAR.MON10;
0000cc  4850              LDR      r0,|L9.528|
0000ce  6a00              LDR      r0,[r0,#0x20]
0000d0  04c0              LSLS     r0,r0,#19
0000d2  0fc0              LSRS     r0,r0,#31
0000d4  4c51              LDR      r4,|L9.540|
0000d6  6020              STR      r0,[r4,#0]  ; g_u32hiMonth
;;;418        		g_u32loMonth = RTC->CAR.MON1;
0000d8  484d              LDR      r0,|L9.528|
0000da  6a00              LDR      r0,[r0,#0x20]
0000dc  0500              LSLS     r0,r0,#20
0000de  0f00              LSRS     r0,r0,#28
0000e0  4c4f              LDR      r4,|L9.544|
0000e2  6020              STR      r0,[r4,#0]  ; g_u32loMonth
;;;419        		g_u32hiDay   = RTC->CAR.DAY10;
0000e4  484a              LDR      r0,|L9.528|
0000e6  6a00              LDR      r0,[r0,#0x20]
0000e8  0680              LSLS     r0,r0,#26
0000ea  0f80              LSRS     r0,r0,#30
0000ec  4c4d              LDR      r4,|L9.548|
0000ee  6020              STR      r0,[r4,#0]  ; g_u32hiDay
;;;420        		g_u32loDay   = RTC->CAR.DAY1;
0000f0  4847              LDR      r0,|L9.528|
0000f2  6a00              LDR      r0,[r0,#0x20]
0000f4  0700              LSLS     r0,r0,#28
0000f6  0f00              LSRS     r0,r0,#28
0000f8  4c4b              LDR      r4,|L9.552|
0000fa  6020              STR      r0,[r4,#0]  ; g_u32loDay
;;;421    
;;;422    		    g_u32hiHour =  RTC->TAR.HR10;
0000fc  4844              LDR      r0,|L9.528|
0000fe  69c0              LDR      r0,[r0,#0x1c]
000100  0280              LSLS     r0,r0,#10
000102  0f80              LSRS     r0,r0,#30
000104  4c49              LDR      r4,|L9.556|
000106  6020              STR      r0,[r4,#0]  ; g_u32hiHour
;;;423        		g_u32loHour =  RTC->TAR.HR1;
000108  4841              LDR      r0,|L9.528|
00010a  69c0              LDR      r0,[r0,#0x1c]
00010c  0300              LSLS     r0,r0,#12
00010e  0f00              LSRS     r0,r0,#28
000110  4c47              LDR      r4,|L9.560|
000112  6020              STR      r0,[r4,#0]  ; g_u32loHour
;;;424        		g_u32hiMin  =  RTC->TAR.MIN10;
000114  483e              LDR      r0,|L9.528|
000116  69c0              LDR      r0,[r0,#0x1c]
000118  0440              LSLS     r0,r0,#17
00011a  0f40              LSRS     r0,r0,#29
00011c  e000              B        |L9.288|
                  |L9.286|
00011e  e014              B        |L9.330|
                  |L9.288|
000120  4c44              LDR      r4,|L9.564|
000122  6020              STR      r0,[r4,#0]  ; g_u32hiMin
;;;425        		g_u32loMin  =  RTC->TAR.MIN1;
000124  483a              LDR      r0,|L9.528|
000126  69c0              LDR      r0,[r0,#0x1c]
000128  0500              LSLS     r0,r0,#20
00012a  0f00              LSRS     r0,r0,#28
00012c  4c42              LDR      r4,|L9.568|
00012e  6020              STR      r0,[r4,#0]  ; g_u32loMin
;;;426        		g_u32hiSec  =  RTC->TAR.SEC10;
000130  4837              LDR      r0,|L9.528|
000132  69c0              LDR      r0,[r0,#0x1c]
000134  0640              LSLS     r0,r0,#25
000136  0f40              LSRS     r0,r0,#29
000138  4c40              LDR      r4,|L9.572|
00013a  6020              STR      r0,[r4,#0]  ; g_u32hiSec
;;;427        		g_u32loSec  =  RTC->TAR.SEC1;
00013c  4834              LDR      r0,|L9.528|
00013e  69c0              LDR      r0,[r0,#0x1c]
000140  0700              LSLS     r0,r0,#28
000142  0f00              LSRS     r0,r0,#28
000144  4c3e              LDR      r4,|L9.576|
000146  6020              STR      r0,[r4,#0]  ; g_u32loSec
;;;428                break;
000148  e001              B        |L9.334|
                  |L9.330|
;;;429            }
;;;430            default:
;;;431            {
;;;432                return E_DRVRTC_ERR_ENOTTY;
00014a  483e              LDR      r0,|L9.580|
                  |L9.332|
;;;433            }
;;;434        }
;;;435    
;;;436        u32Tmp = (g_u32hiYear * 10);									/* Compute to 20XX year */
;;;437        u32Tmp+= g_u32loYear;
;;;438        sPt->u32Year   =   u32Tmp  + DRVRTC_YEAR2000;
;;;439        
;;;440        u32Tmp = (g_u32hiMonth * 10);									/* Compute 0~12 month */
;;;441        sPt->u32cMonth = u32Tmp + g_u32loMonth;
;;;442        
;;;443        u32Tmp = (g_u32hiDay * 10);										/* Compute 0~31 day */
;;;444        sPt->u32cDay   =  u32Tmp  + g_u32loDay;
;;;445    
;;;446        if (sPt->u8cClockDisplay == DRVRTC_CLOCK_12)					/* Compute12/24 hout */
;;;447        {
;;;448            u32Tmp = (g_u32hiHour * 10);
;;;449            u32Tmp+= g_u32loHour;
;;;450            sPt->u32cHour = u32Tmp;                                		/* AM: 1~12. PM: 21~32. */
;;;451    
;;;452            if (sPt->u32cHour >= 21)
;;;453            {
;;;454                sPt->u8cAmPm = DRVRTC_PM;
;;;455                sPt->u32cHour -= 20;
;;;456            }
;;;457            else
;;;458            {
;;;459                sPt->u8cAmPm = DRVRTC_AM;
;;;460            }
;;;461            
;;;462            u32Tmp = (g_u32hiMin  * 10);
;;;463            u32Tmp+= g_u32loMin;
;;;464            sPt->u32cMinute = u32Tmp;
;;;465            
;;;466            u32Tmp = (g_u32hiSec  * 10);
;;;467            u32Tmp+= g_u32loSec;
;;;468            sPt->u32cSecond = u32Tmp;
;;;469    
;;;470        }
;;;471        else
;;;472        {   															/* RTC_CLOCK_24 */
;;;473            u32Tmp = (g_u32hiHour * 10);
;;;474            u32Tmp+= g_u32loHour;
;;;475            sPt->u32cHour   = u32Tmp;
;;;476            
;;;477            u32Tmp = (g_u32hiMin  * 10);
;;;478            u32Tmp+= g_u32loMin;
;;;479            sPt->u32cMinute = u32Tmp;
;;;480            
;;;481            u32Tmp = (g_u32hiSec  * 10);
;;;482            u32Tmp+= g_u32loSec;
;;;483            sPt->u32cSecond = u32Tmp;
;;;484        }
;;;485    
;;;486        return E_SUCCESS;
;;;487    
;;;488    }
00014c  bd10              POP      {r4,pc}
                  |L9.334|
00014e  bf00              NOP                            ;411
000150  4830              LDR      r0,|L9.532|
000152  6800              LDR      r0,[r0,#0]            ;436  ; g_u32hiYear
000154  240a              MOVS     r4,#0xa               ;436
000156  4360              MULS     r0,r4,r0              ;436
000158  4602              MOV      r2,r0                 ;436
00015a  482f              LDR      r0,|L9.536|
00015c  6800              LDR      r0,[r0,#0]            ;437  ; g_u32loYear
00015e  1812              ADDS     r2,r2,r0              ;437
000160  207d              MOVS     r0,#0x7d              ;438
000162  0100              LSLS     r0,r0,#4              ;438
000164  1810              ADDS     r0,r2,r0              ;438
000166  61c8              STR      r0,[r1,#0x1c]         ;438
000168  482c              LDR      r0,|L9.540|
00016a  6800              LDR      r0,[r0,#0]            ;440  ; g_u32hiMonth
00016c  4360              MULS     r0,r4,r0              ;440
00016e  4602              MOV      r2,r0                 ;440
000170  482b              LDR      r0,|L9.544|
000172  6800              LDR      r0,[r0,#0]            ;441  ; g_u32loMonth
000174  1810              ADDS     r0,r2,r0              ;441
000176  6188              STR      r0,[r1,#0x18]         ;441
000178  482a              LDR      r0,|L9.548|
00017a  6800              LDR      r0,[r0,#0]            ;443  ; g_u32hiDay
00017c  4360              MULS     r0,r4,r0              ;443
00017e  4602              MOV      r2,r0                 ;443
000180  4829              LDR      r0,|L9.552|
000182  6800              LDR      r0,[r0,#0]            ;444  ; g_u32loDay
000184  1810              ADDS     r0,r2,r0              ;444
000186  6148              STR      r0,[r1,#0x14]         ;444
000188  7808              LDRB     r0,[r1,#0]            ;446
00018a  2800              CMP      r0,#0                 ;446
00018c  d124              BNE      |L9.472|
00018e  4827              LDR      r0,|L9.556|
000190  6800              LDR      r0,[r0,#0]            ;448  ; g_u32hiHour
000192  4360              MULS     r0,r4,r0              ;448
000194  4602              MOV      r2,r0                 ;448
000196  4826              LDR      r0,|L9.560|
000198  6800              LDR      r0,[r0,#0]            ;449  ; g_u32loHour
00019a  1812              ADDS     r2,r2,r0              ;449
00019c  60ca              STR      r2,[r1,#0xc]          ;450
00019e  68c8              LDR      r0,[r1,#0xc]          ;452
0001a0  2815              CMP      r0,#0x15              ;452
0001a2  d305              BCC      |L9.432|
0001a4  2002              MOVS     r0,#2                 ;454
0001a6  7048              STRB     r0,[r1,#1]            ;454
0001a8  68c8              LDR      r0,[r1,#0xc]          ;455
0001aa  3814              SUBS     r0,r0,#0x14           ;455
0001ac  60c8              STR      r0,[r1,#0xc]          ;455
0001ae  e001              B        |L9.436|
                  |L9.432|
0001b0  2001              MOVS     r0,#1                 ;459
0001b2  7048              STRB     r0,[r1,#1]            ;459
                  |L9.436|
0001b4  481f              LDR      r0,|L9.564|
0001b6  6800              LDR      r0,[r0,#0]            ;462  ; g_u32hiMin
0001b8  240a              MOVS     r4,#0xa               ;462
0001ba  4360              MULS     r0,r4,r0              ;462
0001bc  4602              MOV      r2,r0                 ;462
0001be  481e              LDR      r0,|L9.568|
0001c0  6800              LDR      r0,[r0,#0]            ;463  ; g_u32loMin
0001c2  1812              ADDS     r2,r2,r0              ;463
0001c4  608a              STR      r2,[r1,#8]            ;464
0001c6  481d              LDR      r0,|L9.572|
0001c8  6800              LDR      r0,[r0,#0]            ;466  ; g_u32hiSec
0001ca  4360              MULS     r0,r4,r0              ;466
0001cc  4602              MOV      r2,r0                 ;466
0001ce  481c              LDR      r0,|L9.576|
0001d0  6800              LDR      r0,[r0,#0]            ;467  ; g_u32loSec
0001d2  1812              ADDS     r2,r2,r0              ;467
0001d4  604a              STR      r2,[r1,#4]            ;468
0001d6  e018              B        |L9.522|
                  |L9.472|
0001d8  4814              LDR      r0,|L9.556|
0001da  6800              LDR      r0,[r0,#0]            ;473  ; g_u32hiHour
0001dc  240a              MOVS     r4,#0xa               ;473
0001de  4360              MULS     r0,r4,r0              ;473
0001e0  4602              MOV      r2,r0                 ;473
0001e2  4813              LDR      r0,|L9.560|
0001e4  6800              LDR      r0,[r0,#0]            ;474  ; g_u32loHour
0001e6  1812              ADDS     r2,r2,r0              ;474
0001e8  60ca              STR      r2,[r1,#0xc]          ;475
0001ea  4812              LDR      r0,|L9.564|
0001ec  6800              LDR      r0,[r0,#0]            ;477  ; g_u32hiMin
0001ee  4360              MULS     r0,r4,r0              ;477
0001f0  4602              MOV      r2,r0                 ;477
0001f2  4811              LDR      r0,|L9.568|
0001f4  6800              LDR      r0,[r0,#0]            ;478  ; g_u32loMin
0001f6  1812              ADDS     r2,r2,r0              ;478
0001f8  608a              STR      r2,[r1,#8]            ;479
0001fa  4810              LDR      r0,|L9.572|
0001fc  6800              LDR      r0,[r0,#0]            ;481  ; g_u32hiSec
0001fe  4360              MULS     r0,r4,r0              ;481
000200  4602              MOV      r2,r0                 ;481
000202  480f              LDR      r0,|L9.576|
000204  6800              LDR      r0,[r0,#0]            ;482  ; g_u32loSec
000206  1812              ADDS     r2,r2,r0              ;482
000208  604a              STR      r2,[r1,#4]            ;483
                  |L9.522|
00020a  2000              MOVS     r0,#0                 ;486
00020c  e79e              B        |L9.332|
;;;489    
                          ENDP

00020e  0000              DCW      0x0000
                  |L9.528|
                          DCD      0x40008000
                  |L9.532|
                          DCD      g_u32hiYear
                  |L9.536|
                          DCD      g_u32loYear
                  |L9.540|
                          DCD      g_u32hiMonth
                  |L9.544|
                          DCD      g_u32loMonth
                  |L9.548|
                          DCD      g_u32hiDay
                  |L9.552|
                          DCD      g_u32loDay
                  |L9.556|
                          DCD      g_u32hiHour
                  |L9.560|
                          DCD      g_u32loHour
                  |L9.564|
                          DCD      g_u32hiMin
                  |L9.568|
                          DCD      g_u32loMin
                  |L9.572|
                          DCD      g_u32hiSec
                  |L9.576|
                          DCD      g_u32loSec
                  |L9.580|
                          DCD      0xffff9206

                          AREA ||i.DrvRTC_ResetIntTick||, CODE, READONLY, ALIGN=2

                  DrvRTC_ResetIntTick PROC
;;;735    
;;;736    void DrvRTC_ResetIntTick()
000000  2000              MOVS     r0,#0
;;;737    {
;;;738       g_u32RTC_Count = 0;
000002  4901              LDR      r1,|L10.8|
000004  6008              STR      r0,[r1,#0]  ; g_u32RTC_Count
;;;739    }
000006  4770              BX       lr
;;;740    
                          ENDP

                  |L10.8|
                          DCD      g_u32RTC_Count

                          AREA ||i.DrvRTC_SetFrequencyCompensation||, CODE, READONLY, ALIGN=2

                  DrvRTC_SetFrequencyCompensation PROC
;;;97     /*---------------------------------------------------------------------------------------------------------*/
;;;98     int32_t DrvRTC_SetFrequencyCompensation(int32_t i32FrequencyX100)
000000  b5f8              PUSH     {r3-r7,lr}
;;;99     {
000002  4607              MOV      r7,r0
;;;100        int32_t i32RegInt,i32RegFra ;
;;;101    
;;;102    	/* Compute Interger and Fraction for RTC register*/
;;;103        i32RegInt = (i32FrequencyX100/100) - DRVRTC_FCR_REFERENCE;
000004  2164              MOVS     r1,#0x64
000006  4638              MOV      r0,r7
000008  f7fffffe          BL       __aeabi_idivmod
00000c  490f              LDR      r1,|L11.76|
00000e  1a44              SUBS     r4,r0,r1
;;;104        i32RegFra = (((i32FrequencyX100%100)) * 60) / 100;
000010  2164              MOVS     r1,#0x64
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       __aeabi_idivmod
000018  203c              MOVS     r0,#0x3c
00001a  4341              MULS     r1,r0,r1
00001c  460e              MOV      r6,r1
00001e  2164              MOVS     r1,#0x64
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       __aeabi_idivmod
000026  4605              MOV      r5,r0
;;;105        
;;;106    	/* Judge Interger part is reasonable */
;;;107        if ( (i32RegInt < 0) | (i32RegInt > 15) )
000028  0fe0              LSRS     r0,r4,#31
00002a  2c0f              CMP      r4,#0xf
00002c  dd01              BLE      |L11.50|
00002e  2101              MOVS     r1,#1
000030  e000              B        |L11.52|
                  |L11.50|
000032  2100              MOVS     r1,#0
                  |L11.52|
000034  4308              ORRS     r0,r0,r1
000036  d001              BEQ      |L11.60|
;;;108        {
;;;109            return E_DRVRTC_ERR_FCR_VALUE ;
000038  4805              LDR      r0,|L11.80|
                  |L11.58|
;;;110        }
;;;111    	
;;;112    	DrvRTC_WriteEnable();
;;;113    
;;;114    	outpw(&RTC->FCR, (uint32_t)((i32RegInt<<8) | i32RegFra));
;;;115    
;;;116        return E_SUCCESS;
;;;117    }
00003a  bdf8              POP      {r3-r7,pc}
                  |L11.60|
00003c  f7fffffe          BL       DrvRTC_WriteEnable
000040  0220              LSLS     r0,r4,#8              ;114
000042  4328              ORRS     r0,r0,r5              ;114
000044  4903              LDR      r1,|L11.84|
000046  6088              STR      r0,[r1,#8]            ;114
000048  2000              MOVS     r0,#0                 ;116
00004a  e7f6              B        |L11.58|
;;;118    
                          ENDP

                  |L11.76|
                          DCD      0x00007ff9
                  |L11.80|
                          DCD      0xffff9204
                  |L11.84|
                          DCD      0x40008000

                          AREA ||i.DrvRTC_SetTickMode||, CODE, READONLY, ALIGN=2

                  DrvRTC_SetTickMode PROC
;;;777    /*---------------------------------------------------------------------------------------------------------*/
;;;778    int32_t DrvRTC_SetTickMode(uint8_t ucMode)
000000  b510              PUSH     {r4,lr}
;;;779    {
000002  4604              MOV      r4,r0
;;;780        g_u32RTC_Count = 0;
000004  2000              MOVS     r0,#0
000006  490c              LDR      r1,|L12.56|
000008  6008              STR      r0,[r1,#0]  ; g_u32RTC_Count
;;;781    	
;;;782        if (DrvRTC_WriteEnable() != 0)   				/* Write PASSWORD to access enable*/
00000a  f7fffffe          BL       DrvRTC_WriteEnable
00000e  2800              CMP      r0,#0
000010  d001              BEQ      |L12.22|
;;;783        {
;;;784        	return E_DRVRTC_ERR_EIO ;
000012  480a              LDR      r0,|L12.60|
                  |L12.20|
;;;785        }
;;;786        
;;;787    	if (ucMode > DRVRTC_TICK_1_128_SEC)             /* Tick mode 0 to 7 */
;;;788        {
;;;789        	return E_DRVRTC_ERR_ENOTTY ;
;;;790        }
;;;791                
;;;792      	RTC->TTR.TTR = ucMode;            
;;;793    
;;;794    	return E_SUCCESS;
;;;795    
;;;796    }
000014  bd10              POP      {r4,pc}
                  |L12.22|
000016  2c07              CMP      r4,#7                 ;787
000018  dd02              BLE      |L12.32|
00001a  4808              LDR      r0,|L12.60|
00001c  1c40              ADDS     r0,r0,#1              ;789
00001e  e7f9              B        |L12.20|
                  |L12.32|
000020  4807              LDR      r0,|L12.64|
000022  6b00              LDR      r0,[r0,#0x30]         ;792
000024  08c0              LSRS     r0,r0,#3              ;792
000026  00c0              LSLS     r0,r0,#3              ;792
000028  0761              LSLS     r1,r4,#29             ;792
00002a  0f49              LSRS     r1,r1,#29             ;792
00002c  4308              ORRS     r0,r0,r1              ;792
00002e  4904              LDR      r1,|L12.64|
000030  6308              STR      r0,[r1,#0x30]         ;792
000032  2000              MOVS     r0,#0                 ;794
000034  e7ee              B        |L12.20|
;;;797    
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      g_u32RTC_Count
                  |L12.60|
                          DCD      0xffff9205
                  |L12.64|
                          DCD      0x40008000

                          AREA ||i.DrvRTC_Write||, CODE, READONLY, ALIGN=2

                  DrvRTC_Write PROC
;;;504    //*--------------------------------------------------------------------------------------------------------*/
;;;505    int32_t DrvRTC_Write(E_DRVRTC_TIME_SELECT eTime, S_DRVRTC_TIME_DATA_T *sPt)
000000  b570              PUSH     {r4-r6,lr}
;;;506    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;507        uint32_t u32Reg;
;;;508        /*-----------------------------------------------------------------------------------------------------*/
;;;509        /* Check RTC time data value is reasonable or not.                                                     */
;;;510        /*-----------------------------------------------------------------------------------------------------*/
;;;511        if ( ((sPt->u32Year - DRVRTC_YEAR2000) > 99)|
000006  69a0              LDR      r0,[r4,#0x18]
000008  2800              CMP      r0,#0
00000a  d002              BEQ      |L13.18|
;;;512             ((sPt->u32cMonth == 0) || (sPt->u32cMonth > 12))|
00000c  69a0              LDR      r0,[r4,#0x18]
00000e  280c              CMP      r0,#0xc
000010  d901              BLS      |L13.22|
                  |L13.18|
000012  2001              MOVS     r0,#1
000014  e000              B        |L13.24|
                  |L13.22|
000016  2000              MOVS     r0,#0
                  |L13.24|
000018  227d              MOVS     r2,#0x7d
00001a  0112              LSLS     r2,r2,#4
00001c  69e1              LDR      r1,[r4,#0x1c]
00001e  1a89              SUBS     r1,r1,r2
000020  2963              CMP      r1,#0x63
000022  d901              BLS      |L13.40|
000024  2101              MOVS     r1,#1
000026  e000              B        |L13.42|
                  |L13.40|
000028  2100              MOVS     r1,#0
                  |L13.42|
00002a  4308              ORRS     r0,r0,r1
00002c  6961              LDR      r1,[r4,#0x14]
00002e  2900              CMP      r1,#0
000030  d002              BEQ      |L13.56|
;;;513             ((sPt->u32cDay   == 0) || (sPt->u32cDay   > 31)))
000032  6961              LDR      r1,[r4,#0x14]
000034  291f              CMP      r1,#0x1f
000036  d901              BLS      |L13.60|
                  |L13.56|
000038  2101              MOVS     r1,#1
00003a  e000              B        |L13.62|
                  |L13.60|
00003c  2100              MOVS     r1,#0
                  |L13.62|
00003e  4308              ORRS     r0,r0,r1
000040  d001              BEQ      |L13.70|
;;;514        {
;;;515            RTCDEBUG ("\nRTC: Year value is incorrect\n");
;;;516            return E_DRVRTC_ERR_FAILED;
000042  48a6              LDR      r0,|L13.732|
                  |L13.68|
;;;517        }
;;;518    
;;;519        if ( (sPt->u32Year - DRVRTC_YEAR2000) > 99 )
;;;520        {
;;;521            RTCDEBUG ("\nRTC: Year value is incorrect\n");
;;;522            return E_DRVRTC_ERR_FAILED;
;;;523        }
;;;524    
;;;525        if ( (sPt->u32cMonth == 0) || (sPt->u32cMonth > 12) )
;;;526        {
;;;527            RTCDEBUG ("\nRTC: Month value is incorrect\n");
;;;528            return E_DRVRTC_ERR_FAILED;
;;;529        }
;;;530    
;;;531        if ( (sPt->u32cDay == 0) || (sPt->u32cDay > 31) )
;;;532        {
;;;533            RTCDEBUG ("\nRTC: Day value is incorrect\n");
;;;534            return E_DRVRTC_ERR_FAILED;
;;;535        }
;;;536    
;;;537        if (sPt->u8cClockDisplay == DRVRTC_CLOCK_12)
;;;538        {
;;;539            if ( (sPt->u32cHour == 0) || (sPt->u32cHour > 12) )
;;;540            {
;;;541                RTCDEBUG ("\nRTC: Hour value is incorrect\n");
;;;542                return E_DRVRTC_ERR_FAILED;
;;;543            }
;;;544        }
;;;545        else if (sPt->u8cClockDisplay == DRVRTC_CLOCK_24)
;;;546        {
;;;547            if (sPt->u32cHour > 23)
;;;548            {
;;;549                RTCDEBUG ("\nRTC: Hour value is incorrect\n");
;;;550                return E_DRVRTC_ERR_FAILED;
;;;551            }
;;;552        }
;;;553        else
;;;554        {
;;;555            RTCDEBUG ("\nRTC: Clock mode is incorrect\n");
;;;556            return E_DRVRTC_ERR_FAILED;
;;;557        }
;;;558    
;;;559        if (sPt->u32cMinute > 59)
;;;560        {
;;;561            RTCDEBUG ("\nRTC: Minute value is incorrect\n");
;;;562            return E_DRVRTC_ERR_FAILED;
;;;563        }
;;;564    
;;;565        if (sPt->u32cSecond > 59)
;;;566        {
;;;567            RTCDEBUG ("\nRTC: Second value is incorrect\n");
;;;568            return E_DRVRTC_ERR_FAILED;
;;;569        }
;;;570    
;;;571        if (sPt->u32cDayOfWeek > 6)
;;;572        {
;;;573            RTCDEBUG ("\nRTC: Day of week value is incorrect\n");
;;;574            return E_DRVRTC_ERR_FAILED;
;;;575        }
;;;576    
;;;577    
;;;578        /*-----------------------------------------------------------------------------------------------------*/
;;;579        /* Important, call RTC_Open() before write data into any register.                                     */
;;;580        /*-----------------------------------------------------------------------------------------------------*/
;;;581        g_u32Reg = DrvRTC_WriteEnable();
;;;582        if (g_u32Reg != 0)
;;;583        {
;;;584            return E_DRVRTC_ERR_FAILED;
;;;585        }
;;;586    
;;;587        switch (eTime)
;;;588        {
;;;589    
;;;590            case DRVRTC_CURRENT_TIME:
;;;591                /*---------------------------------------------------------------------------------------------*/
;;;592                /* Second, set RTC time data.                                                                  */
;;;593                /*---------------------------------------------------------------------------------------------*/
;;;594    
;;;595                if (sPt->u8cClockDisplay == DRVRTC_CLOCK_12)
;;;596                {
;;;597                    g_chHourMode = DRVRTC_CLOCK_12;
;;;598    				RTC->TSSR.HR24 = DRVRTC_CLOCK_12;
;;;599                    RTCDEBUG ("RTC: 12-hour\n");
;;;600                    /*-----------------------------------------------------------------------------------------*/
;;;601                    /* important, range of 12-hour PM mode is 21 upto 32                                       */
;;;602                    /*-----------------------------------------------------------------------------------------*/
;;;603                    if (sPt->u8cAmPm == DRVRTC_PM)
;;;604                        sPt->u32cHour += 20;
;;;605                }
;;;606                else                                                                  /* RTC_CLOCK_24 */
;;;607                {
;;;608                    g_chHourMode = DRVRTC_CLOCK_24;
;;;609        			RTC->TSSR.HR24 = DRVRTC_CLOCK_24;
;;;610                    RTCDEBUG ("RTC: 24-hour\n");
;;;611                }
;;;612    
;;;613      			RTC->DWR.DWR = sPt->u32cDayOfWeek;
;;;614    
;;;615    		    
;;;616    			/*---------------------------------------------------------------------------------------------*/
;;;617                /* Second, set RTC time data.                                                                  */
;;;618                /*---------------------------------------------------------------------------------------------*/
;;;619    
;;;620    			u32Reg     = ((sPt->u32Year - DRVRTC_YEAR2000) / 10) << 20;
;;;621    		    u32Reg    |= (((sPt->u32Year - DRVRTC_YEAR2000) % 10) << 16);
;;;622    		    u32Reg    |= ((sPt->u32cMonth  / 10) << 12);
;;;623    		    u32Reg    |= ((sPt->u32cMonth  % 10) << 8);
;;;624    		    u32Reg    |= ((sPt->u32cDay    / 10) << 4);
;;;625    		    u32Reg    |= (sPt->u32cDay     % 10);
;;;626                g_u32Reg = u32Reg;
;;;627    			DrvRTC_WriteEnable();
;;;628              
;;;629    			outpw(&RTC->CLR, (uint32_t)g_u32Reg);
;;;630    			RTCDEBUG ("RTC: REG_RTC_CLR[0x%08x]\n", inpw(&RTC->CLR));  
;;;631                
;;;632    		    u32Reg     = ((sPt->u32cHour / 10) << 20);
;;;633    		    u32Reg    |= ((sPt->u32cHour % 10) << 16);
;;;634    		    u32Reg    |= ((sPt->u32cMinute / 10) << 12);
;;;635    		    u32Reg    |= ((sPt->u32cMinute % 10) << 8);
;;;636    		    u32Reg    |= ((sPt->u32cSecond / 10) << 4);
;;;637    		    u32Reg    |= (sPt->u32cSecond % 10);
;;;638    			g_u32Reg = u32Reg;
;;;639    		
;;;640    			DrvRTC_WriteEnable();
;;;641               	outpw(&RTC->TLR, (uint32_t)g_u32Reg);
;;;642    			RTCDEBUG ("RTC: REG_RTC_TLR[0x%08x]\n", inpw(&RTC->TLR));   
;;;643    			
;;;644                return E_SUCCESS;
;;;645    
;;;646    
;;;647             case DRVRTC_ALARM_TIME:
;;;648    
;;;649                g_pfnRTCCallBack_Alarm = NULL;                                /* Initial call back function.*/
;;;650                
;;;651    			/*---------------------------------------------------------------------------------------------*/
;;;652                /* Set Calender alarm time data.                                                               */
;;;653                /*---------------------------------------------------------------------------------------------*/
;;;654    		    u32Reg     = ((sPt->u32Year - DRVRTC_YEAR2000) / 10) << 20;
;;;655    		    u32Reg    |= (((sPt->u32Year - DRVRTC_YEAR2000) % 10) << 16);
;;;656    		    u32Reg    |= ((sPt->u32cMonth  / 10) << 12);
;;;657    		    u32Reg    |= ((sPt->u32cMonth  % 10) << 8);
;;;658    		    u32Reg    |= ((sPt->u32cDay    / 10) << 4);
;;;659    		    u32Reg    |= (sPt->u32cDay     % 10);
;;;660                g_u32Reg = u32Reg;
;;;661    			DrvRTC_WriteEnable();
;;;662    			
;;;663    			outpw(&RTC->CAR, (uint32_t)g_u32Reg);
;;;664    			RTCDEBUG ("RTC: REG_RTC_CAR[0x%08x]\n", inpw(&RTC->CAR));  
;;;665    			
;;;666    						 
;;;667                if (g_chHourMode == DRVRTC_CLOCK_12)
;;;668                {
;;;669                    if (sPt->u8cAmPm == DRVRTC_PM)       /* important, range of 12-hour PM mode is 21 upto 32 */
;;;670                        sPt->u32cHour += 20;
;;;671                }
;;;672    
;;;673    			/*---------------------------------------------------------------------------------------------*/
;;;674                /* Set Time alarm time data.                                                                   */
;;;675                /*---------------------------------------------------------------------------------------------*/
;;;676    		    u32Reg     = ((sPt->u32cHour / 10) << 20);
;;;677    		    u32Reg    |= ((sPt->u32cHour % 10) << 16);
;;;678    		    u32Reg    |= ((sPt->u32cMinute / 10) << 12);
;;;679    		    u32Reg    |= ((sPt->u32cMinute % 10) << 8);
;;;680    		    u32Reg    |= ((sPt->u32cSecond / 10) << 4);
;;;681    		    u32Reg    |= (sPt->u32cSecond % 10);
;;;682    
;;;683    			g_u32Reg = u32Reg;
;;;684                DrvRTC_WriteEnable();
;;;685               	outpw(&RTC->TAR, (uint32_t)g_u32Reg);
;;;686    			RTCDEBUG ("RTC: REG_RTC_TAR[0x%08x]\n", inpw(&RTC->TAR));   
;;;687    
;;;688    			/*---------------------------------------------------------------------------------------------*/
;;;689                /* Finally, enable alarm interrupt.                                                            */
;;;690                /*---------------------------------------------------------------------------------------------*/
;;;691    			DrvRTC_EnableInt(DRVRTC_ALARM_INT,NULL);
;;;692                
;;;693    			RTC->TTR.TWKE = sPt->u8IsEnableWakeUp;
;;;694    			return E_SUCCESS;
;;;695    
;;;696    
;;;697    	        default:
;;;698    	        {
;;;699    	            return E_DRVRTC_ERR_ENOTTY;
;;;700    	        }
;;;701        }
;;;702    
;;;703    }
000044  bd70              POP      {r4-r6,pc}
                  |L13.70|
000046  217d              MOVS     r1,#0x7d              ;519
000048  0109              LSLS     r1,r1,#4              ;519
00004a  69e0              LDR      r0,[r4,#0x1c]         ;519
00004c  1a40              SUBS     r0,r0,r1              ;519
00004e  2863              CMP      r0,#0x63              ;519
000050  d901              BLS      |L13.86|
000052  48a2              LDR      r0,|L13.732|
000054  e7f6              B        |L13.68|
                  |L13.86|
000056  69a0              LDR      r0,[r4,#0x18]         ;525
000058  2800              CMP      r0,#0                 ;525
00005a  d002              BEQ      |L13.98|
00005c  69a0              LDR      r0,[r4,#0x18]         ;525
00005e  280c              CMP      r0,#0xc               ;525
000060  d901              BLS      |L13.102|
                  |L13.98|
000062  489e              LDR      r0,|L13.732|
000064  e7ee              B        |L13.68|
                  |L13.102|
000066  6960              LDR      r0,[r4,#0x14]         ;531
000068  2800              CMP      r0,#0                 ;531
00006a  d002              BEQ      |L13.114|
00006c  6960              LDR      r0,[r4,#0x14]         ;531
00006e  281f              CMP      r0,#0x1f              ;531
000070  d901              BLS      |L13.118|
                  |L13.114|
000072  489a              LDR      r0,|L13.732|
000074  e7e6              B        |L13.68|
                  |L13.118|
000076  7820              LDRB     r0,[r4,#0]            ;537
000078  2800              CMP      r0,#0                 ;537
00007a  d107              BNE      |L13.140|
00007c  68e0              LDR      r0,[r4,#0xc]          ;539
00007e  2800              CMP      r0,#0                 ;539
000080  d002              BEQ      |L13.136|
000082  68e0              LDR      r0,[r4,#0xc]          ;539
000084  280c              CMP      r0,#0xc               ;539
000086  d90b              BLS      |L13.160|
                  |L13.136|
000088  4894              LDR      r0,|L13.732|
00008a  e7db              B        |L13.68|
                  |L13.140|
00008c  7820              LDRB     r0,[r4,#0]            ;545
00008e  2801              CMP      r0,#1                 ;545
000090  d104              BNE      |L13.156|
000092  68e0              LDR      r0,[r4,#0xc]          ;547
000094  2817              CMP      r0,#0x17              ;547
000096  d903              BLS      |L13.160|
000098  4890              LDR      r0,|L13.732|
00009a  e7d3              B        |L13.68|
                  |L13.156|
00009c  488f              LDR      r0,|L13.732|
00009e  e7d1              B        |L13.68|
                  |L13.160|
0000a0  68a0              LDR      r0,[r4,#8]            ;559
0000a2  283b              CMP      r0,#0x3b              ;559
0000a4  d901              BLS      |L13.170|
0000a6  488d              LDR      r0,|L13.732|
0000a8  e7cc              B        |L13.68|
                  |L13.170|
0000aa  6860              LDR      r0,[r4,#4]            ;565
0000ac  283b              CMP      r0,#0x3b              ;565
0000ae  d901              BLS      |L13.180|
0000b0  488a              LDR      r0,|L13.732|
0000b2  e7c7              B        |L13.68|
                  |L13.180|
0000b4  6920              LDR      r0,[r4,#0x10]         ;571
0000b6  2806              CMP      r0,#6                 ;571
0000b8  d901              BLS      |L13.190|
0000ba  4888              LDR      r0,|L13.732|
0000bc  e7c2              B        |L13.68|
                  |L13.190|
0000be  f7fffffe          BL       DrvRTC_WriteEnable
0000c2  4987              LDR      r1,|L13.736|
0000c4  6008              STR      r0,[r1,#0]            ;581  ; g_u32Reg
0000c6  4608              MOV      r0,r1                 ;582
0000c8  6800              LDR      r0,[r0,#0]            ;582  ; g_u32Reg
0000ca  2800              CMP      r0,#0                 ;582
0000cc  d001              BEQ      |L13.210|
0000ce  4883              LDR      r0,|L13.732|
0000d0  e7b8              B        |L13.68|
                  |L13.210|
0000d2  2e00              CMP      r6,#0                 ;587
0000d4  d002              BEQ      |L13.220|
0000d6  2e01              CMP      r6,#1                 ;587
0000d8  d17e              BNE      |L13.472|
0000da  e083              B        |L13.484|
                  |L13.220|
0000dc  7820              LDRB     r0,[r4,#0]            ;595
0000de  2800              CMP      r0,#0                 ;595
0000e0  d10e              BNE      |L13.256|
0000e2  4980              LDR      r1,|L13.740|
0000e4  7008              STRB     r0,[r1,#0]            ;597
0000e6  4880              LDR      r0,|L13.744|
0000e8  6940              LDR      r0,[r0,#0x14]         ;598
0000ea  0840              LSRS     r0,r0,#1              ;598
0000ec  0040              LSLS     r0,r0,#1              ;598
0000ee  497e              LDR      r1,|L13.744|
0000f0  6148              STR      r0,[r1,#0x14]         ;598
0000f2  7860              LDRB     r0,[r4,#1]            ;603
0000f4  2802              CMP      r0,#2                 ;603
0000f6  d10d              BNE      |L13.276|
0000f8  68e0              LDR      r0,[r4,#0xc]          ;604
0000fa  3014              ADDS     r0,r0,#0x14           ;604
0000fc  60e0              STR      r0,[r4,#0xc]          ;604
0000fe  e009              B        |L13.276|
                  |L13.256|
000100  2001              MOVS     r0,#1                 ;608
000102  4978              LDR      r1,|L13.740|
000104  7008              STRB     r0,[r1,#0]            ;608
000106  4878              LDR      r0,|L13.744|
000108  6940              LDR      r0,[r0,#0x14]         ;609
00010a  0840              LSRS     r0,r0,#1              ;609
00010c  0040              LSLS     r0,r0,#1              ;609
00010e  1c40              ADDS     r0,r0,#1              ;609
000110  4975              LDR      r1,|L13.744|
000112  6148              STR      r0,[r1,#0x14]         ;609
                  |L13.276|
000114  4874              LDR      r0,|L13.744|
000116  6980              LDR      r0,[r0,#0x18]         ;613
000118  08c0              LSRS     r0,r0,#3              ;613
00011a  00c0              LSLS     r0,r0,#3              ;613
00011c  6921              LDR      r1,[r4,#0x10]         ;613
00011e  0749              LSLS     r1,r1,#29             ;613
000120  0f49              LSRS     r1,r1,#29             ;613
000122  4308              ORRS     r0,r0,r1              ;613
000124  4970              LDR      r1,|L13.744|
000126  6188              STR      r0,[r1,#0x18]         ;613
000128  227d              MOVS     r2,#0x7d              ;620
00012a  0112              LSLS     r2,r2,#4              ;620
00012c  69e1              LDR      r1,[r4,#0x1c]         ;620
00012e  1a88              SUBS     r0,r1,r2              ;620
000130  210a              MOVS     r1,#0xa               ;620
000132  f7fffffe          BL       __aeabi_uidivmod
000136  0505              LSLS     r5,r0,#20             ;620
000138  227d              MOVS     r2,#0x7d              ;621
00013a  0112              LSLS     r2,r2,#4              ;621
00013c  69e1              LDR      r1,[r4,#0x1c]         ;621
00013e  1a88              SUBS     r0,r1,r2              ;621
000140  210a              MOVS     r1,#0xa               ;621
000142  f7fffffe          BL       __aeabi_uidivmod
000146  0408              LSLS     r0,r1,#16             ;621
000148  4305              ORRS     r5,r5,r0              ;621
00014a  210a              MOVS     r1,#0xa               ;622
00014c  69a0              LDR      r0,[r4,#0x18]         ;622
00014e  f7fffffe          BL       __aeabi_uidivmod
000152  0300              LSLS     r0,r0,#12             ;622
000154  4305              ORRS     r5,r5,r0              ;622
000156  210a              MOVS     r1,#0xa               ;623
000158  69a0              LDR      r0,[r4,#0x18]         ;623
00015a  f7fffffe          BL       __aeabi_uidivmod
00015e  0208              LSLS     r0,r1,#8              ;623
000160  4305              ORRS     r5,r5,r0              ;623
000162  210a              MOVS     r1,#0xa               ;624
000164  6960              LDR      r0,[r4,#0x14]         ;624
000166  f7fffffe          BL       __aeabi_uidivmod
00016a  0100              LSLS     r0,r0,#4              ;624
00016c  4305              ORRS     r5,r5,r0              ;624
00016e  210a              MOVS     r1,#0xa               ;625
000170  6960              LDR      r0,[r4,#0x14]         ;625
000172  f7fffffe          BL       __aeabi_uidivmod
000176  430d              ORRS     r5,r5,r1              ;625
000178  4859              LDR      r0,|L13.736|
00017a  6005              STR      r5,[r0,#0]            ;626  ; g_u32Reg
00017c  f7fffffe          BL       DrvRTC_WriteEnable
000180  4857              LDR      r0,|L13.736|
000182  6800              LDR      r0,[r0,#0]            ;629  ; g_u32Reg
000184  4958              LDR      r1,|L13.744|
000186  6108              STR      r0,[r1,#0x10]         ;629
000188  210a              MOVS     r1,#0xa               ;632
00018a  68e0              LDR      r0,[r4,#0xc]          ;632
00018c  f7fffffe          BL       __aeabi_uidivmod
000190  0505              LSLS     r5,r0,#20             ;632
000192  210a              MOVS     r1,#0xa               ;633
000194  68e0              LDR      r0,[r4,#0xc]          ;633
000196  f7fffffe          BL       __aeabi_uidivmod
00019a  0408              LSLS     r0,r1,#16             ;633
00019c  4305              ORRS     r5,r5,r0              ;633
00019e  210a              MOVS     r1,#0xa               ;634
0001a0  68a0              LDR      r0,[r4,#8]            ;634
0001a2  f7fffffe          BL       __aeabi_uidivmod
0001a6  0300              LSLS     r0,r0,#12             ;634
0001a8  4305              ORRS     r5,r5,r0              ;634
0001aa  210a              MOVS     r1,#0xa               ;635
0001ac  68a0              LDR      r0,[r4,#8]            ;635
0001ae  f7fffffe          BL       __aeabi_uidivmod
0001b2  0208              LSLS     r0,r1,#8              ;635
0001b4  4305              ORRS     r5,r5,r0              ;635
0001b6  210a              MOVS     r1,#0xa               ;636
0001b8  6860              LDR      r0,[r4,#4]            ;636
0001ba  f7fffffe          BL       __aeabi_uidivmod
0001be  0100              LSLS     r0,r0,#4              ;636
0001c0  4305              ORRS     r5,r5,r0              ;636
0001c2  210a              MOVS     r1,#0xa               ;637
0001c4  6860              LDR      r0,[r4,#4]            ;637
0001c6  f7fffffe          BL       __aeabi_uidivmod
0001ca  430d              ORRS     r5,r5,r1              ;637
0001cc  4844              LDR      r0,|L13.736|
0001ce  6005              STR      r5,[r0,#0]            ;638  ; g_u32Reg
0001d0  f7fffffe          BL       DrvRTC_WriteEnable
0001d4  4842              LDR      r0,|L13.736|
0001d6  e000              B        |L13.474|
                  |L13.472|
0001d8  e07d              B        |L13.726|
                  |L13.474|
0001da  6800              LDR      r0,[r0,#0]            ;641  ; g_u32Reg
0001dc  4942              LDR      r1,|L13.744|
0001de  60c8              STR      r0,[r1,#0xc]          ;641
0001e0  2000              MOVS     r0,#0                 ;644
0001e2  e72f              B        |L13.68|
                  |L13.484|
0001e4  2000              MOVS     r0,#0                 ;649
0001e6  4941              LDR      r1,|L13.748|
0001e8  6008              STR      r0,[r1,#0]            ;649  ; g_pfnRTCCallBack_Alarm
0001ea  227d              MOVS     r2,#0x7d              ;654
0001ec  0112              LSLS     r2,r2,#4              ;654
0001ee  69e1              LDR      r1,[r4,#0x1c]         ;654
0001f0  1a88              SUBS     r0,r1,r2              ;654
0001f2  210a              MOVS     r1,#0xa               ;654
0001f4  f7fffffe          BL       __aeabi_uidivmod
0001f8  0505              LSLS     r5,r0,#20             ;654
0001fa  227d              MOVS     r2,#0x7d              ;655
0001fc  0112              LSLS     r2,r2,#4              ;655
0001fe  69e1              LDR      r1,[r4,#0x1c]         ;655
000200  1a88              SUBS     r0,r1,r2              ;655
000202  210a              MOVS     r1,#0xa               ;655
000204  f7fffffe          BL       __aeabi_uidivmod
000208  0408              LSLS     r0,r1,#16             ;655
00020a  4305              ORRS     r5,r5,r0              ;655
00020c  210a              MOVS     r1,#0xa               ;656
00020e  69a0              LDR      r0,[r4,#0x18]         ;656
000210  f7fffffe          BL       __aeabi_uidivmod
000214  0300              LSLS     r0,r0,#12             ;656
000216  4305              ORRS     r5,r5,r0              ;656
000218  210a              MOVS     r1,#0xa               ;657
00021a  69a0              LDR      r0,[r4,#0x18]         ;657
00021c  f7fffffe          BL       __aeabi_uidivmod
000220  0208              LSLS     r0,r1,#8              ;657
000222  4305              ORRS     r5,r5,r0              ;657
000224  210a              MOVS     r1,#0xa               ;658
000226  6960              LDR      r0,[r4,#0x14]         ;658
000228  f7fffffe          BL       __aeabi_uidivmod
00022c  0100              LSLS     r0,r0,#4              ;658
00022e  4305              ORRS     r5,r5,r0              ;658
000230  210a              MOVS     r1,#0xa               ;659
000232  6960              LDR      r0,[r4,#0x14]         ;659
000234  f7fffffe          BL       __aeabi_uidivmod
000238  430d              ORRS     r5,r5,r1              ;659
00023a  4829              LDR      r0,|L13.736|
00023c  6005              STR      r5,[r0,#0]            ;660  ; g_u32Reg
00023e  f7fffffe          BL       DrvRTC_WriteEnable
000242  4827              LDR      r0,|L13.736|
000244  6800              LDR      r0,[r0,#0]            ;663  ; g_u32Reg
000246  4928              LDR      r1,|L13.744|
000248  6208              STR      r0,[r1,#0x20]         ;663
00024a  4826              LDR      r0,|L13.740|
00024c  7800              LDRB     r0,[r0,#0]            ;667  ; g_chHourMode
00024e  2800              CMP      r0,#0                 ;667
000250  d105              BNE      |L13.606|
000252  7860              LDRB     r0,[r4,#1]            ;669
000254  2802              CMP      r0,#2                 ;669
000256  d102              BNE      |L13.606|
000258  68e0              LDR      r0,[r4,#0xc]          ;670
00025a  3014              ADDS     r0,r0,#0x14           ;670
00025c  60e0              STR      r0,[r4,#0xc]          ;670
                  |L13.606|
00025e  210a              MOVS     r1,#0xa               ;676
000260  68e0              LDR      r0,[r4,#0xc]          ;676
000262  f7fffffe          BL       __aeabi_uidivmod
000266  0505              LSLS     r5,r0,#20             ;676
000268  210a              MOVS     r1,#0xa               ;677
00026a  68e0              LDR      r0,[r4,#0xc]          ;677
00026c  f7fffffe          BL       __aeabi_uidivmod
000270  0408              LSLS     r0,r1,#16             ;677
000272  4305              ORRS     r5,r5,r0              ;677
000274  210a              MOVS     r1,#0xa               ;678
000276  68a0              LDR      r0,[r4,#8]            ;678
000278  f7fffffe          BL       __aeabi_uidivmod
00027c  0300              LSLS     r0,r0,#12             ;678
00027e  4305              ORRS     r5,r5,r0              ;678
000280  210a              MOVS     r1,#0xa               ;679
000282  68a0              LDR      r0,[r4,#8]            ;679
000284  f7fffffe          BL       __aeabi_uidivmod
000288  0208              LSLS     r0,r1,#8              ;679
00028a  4305              ORRS     r5,r5,r0              ;679
00028c  210a              MOVS     r1,#0xa               ;680
00028e  6860              LDR      r0,[r4,#4]            ;680
000290  f7fffffe          BL       __aeabi_uidivmod
000294  0100              LSLS     r0,r0,#4              ;680
000296  4305              ORRS     r5,r5,r0              ;680
000298  210a              MOVS     r1,#0xa               ;681
00029a  6860              LDR      r0,[r4,#4]            ;681
00029c  f7fffffe          BL       __aeabi_uidivmod
0002a0  430d              ORRS     r5,r5,r1              ;681
0002a2  480f              LDR      r0,|L13.736|
0002a4  6005              STR      r5,[r0,#0]            ;683  ; g_u32Reg
0002a6  f7fffffe          BL       DrvRTC_WriteEnable
0002aa  480d              LDR      r0,|L13.736|
0002ac  6800              LDR      r0,[r0,#0]            ;685  ; g_u32Reg
0002ae  490e              LDR      r1,|L13.744|
0002b0  61c8              STR      r0,[r1,#0x1c]         ;685
0002b2  2100              MOVS     r1,#0                 ;691
0002b4  2001              MOVS     r0,#1                 ;691
0002b6  f7fffffe          BL       DrvRTC_EnableInt
0002ba  480b              LDR      r0,|L13.744|
0002bc  6b00              LDR      r0,[r0,#0x30]         ;693
0002be  2108              MOVS     r1,#8                 ;693
0002c0  4388              BICS     r0,r0,r1              ;693
0002c2  2120              MOVS     r1,#0x20              ;693
0002c4  5d09              LDRB     r1,[r1,r4]            ;693
0002c6  00c9              LSLS     r1,r1,#3              ;693
0002c8  2208              MOVS     r2,#8                 ;693
0002ca  4011              ANDS     r1,r1,r2              ;693
0002cc  4308              ORRS     r0,r0,r1              ;693
0002ce  4906              LDR      r1,|L13.744|
0002d0  6308              STR      r0,[r1,#0x30]         ;693
0002d2  2000              MOVS     r0,#0                 ;694
0002d4  e6b6              B        |L13.68|
                  |L13.726|
0002d6  4801              LDR      r0,|L13.732|
0002d8  1e80              SUBS     r0,r0,#2              ;699
0002da  e6b3              B        |L13.68|
;;;704    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

                  |L13.732|
                          DCD      0xffff9208
                  |L13.736|
                          DCD      g_u32Reg
                  |L13.740|
                          DCD      g_chHourMode
                  |L13.744|
                          DCD      0x40008000
                  |L13.748|
                          DCD      g_pfnRTCCallBack_Alarm

                          AREA ||i.DrvRTC_WriteEnable||, CODE, READONLY, ALIGN=2

                  DrvRTC_WriteEnable PROC
;;;129    /*---------------------------------------------------------------------------------------------------------*/
;;;130    int32_t DrvRTC_WriteEnable (void)
000000  2100              MOVS     r1,#0
;;;131    {
;;;132        int32_t i32i = 0;
;;;133    
;;;134    	int i32retry = 100;
000002  2264              MOVS     r2,#0x64
;;;135        
;;;136    	/*-------------------------------------------------------------------------------------------------*/
;;;137        /* After 200ms, Access enable wiil auto-clear. As soon as possible to do your setting              */
;;;138        /*-------------------------------------------------------------------------------------------------*/
;;;139    	RETRY:
000004  bf00              NOP      
                  |L14.6|
;;;140    
;;;141    	i32i = 0;
000006  2100              MOVS     r1,#0
;;;142    	
;;;143    	RTC->AER.AER = 0xA965;
000008  4813              LDR      r0,|L14.88|
00000a  6840              LDR      r0,[r0,#4]
00000c  0c00              LSRS     r0,r0,#16
00000e  0400              LSLS     r0,r0,#16
000010  4b12              LDR      r3,|L14.92|
000012  18c0              ADDS     r0,r0,r3
000014  4b10              LDR      r3,|L14.88|
000016  6058              STR      r0,[r3,#4]
;;;144    	
;;;145        for (i32i = 0 ; i32i < DRVRTC_WAIT_COUNT ; i32i++)
000018  bf00              NOP      
00001a  e00f              B        |L14.60|
                  |L14.28|
;;;146    	{
;;;147            /*-------------------------------------------------------------------------------------------------*/
;;;148            /* check RTC_AER[16] to find out RTC write enable                                                  */
;;;149            /*-------------------------------------------------------------------------------------------------*/
;;;150     		RTC->AER.AER = 0xA965;
00001c  480e              LDR      r0,|L14.88|
00001e  6840              LDR      r0,[r0,#4]
000020  0c00              LSRS     r0,r0,#16
000022  0400              LSLS     r0,r0,#16
000024  4b0d              LDR      r3,|L14.92|
000026  18c0              ADDS     r0,r0,r3
000028  4b0b              LDR      r3,|L14.88|
00002a  6058              STR      r0,[r3,#4]
;;;151    		
;;;152    		if (RTC->AER.ENF ==1)	
00002c  4618              MOV      r0,r3
00002e  6840              LDR      r0,[r0,#4]
000030  03c0              LSLS     r0,r0,#15
000032  0fc0              LSRS     r0,r0,#31
000034  2801              CMP      r0,#1
000036  d100              BNE      |L14.58|
;;;153    		    break;
000038  e002              B        |L14.64|
                  |L14.58|
00003a  1c49              ADDS     r1,r1,#1              ;145
                  |L14.60|
00003c  1c48              ADDS     r0,r1,#1              ;145
00003e  d1ed              BNE      |L14.28|
                  |L14.64|
000040  bf00              NOP      
;;;154    	}
;;;155    
;;;156    	
;;;157    	if (i32i == DRVRTC_WAIT_COUNT)
000042  1c48              ADDS     r0,r1,#1
000044  d105              BNE      |L14.82|
;;;158        {
;;;159            RTCDEBUG ("\nRTC: RTC_WriteEnable, set write enable FAILED!\n");
;;;160    
;;;161    		i32retry--;
000046  1e52              SUBS     r2,r2,#1
;;;162    
;;;163            if(!i32retry)
000048  2a00              CMP      r2,#0
00004a  d101              BNE      |L14.80|
;;;164    	   		return E_DRVRTC_ERR_FAILED;
00004c  4804              LDR      r0,|L14.96|
                  |L14.78|
;;;165    						
;;;166    		goto RETRY;
;;;167        }
;;;168    
;;;169        
;;;170    	return E_SUCCESS;
;;;171    }
00004e  4770              BX       lr
                  |L14.80|
000050  e7d9              B        |L14.6|
                  |L14.82|
000052  2000              MOVS     r0,#0                 ;170
000054  e7fb              B        |L14.78|
;;;172    
                          ENDP

000056  0000              DCW      0x0000
                  |L14.88|
                          DCD      0x40008000
                  |L14.92|
                          DCD      0x0000a965
                  |L14.96|
                          DCD      0xffff9208

                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=2

                  RTC_IRQHandler PROC
;;;56     
;;;57     void RTC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;58     { 
;;;59        
;;;60     	if (RTC->RIIR.TI ==0x1)      		   /* tick interrupt occurred */
000002  4817              LDR      r0,|L15.96|
000004  6ac0              LDR      r0,[r0,#0x2c]
000006  0780              LSLS     r0,r0,#30
000008  0fc0              LSRS     r0,r0,#31
00000a  2801              CMP      r0,#1
00000c  d112              BNE      |L15.52|
;;;61     	{
;;;62      		  RTC->RIIR.TI = 1;
00000e  4814              LDR      r0,|L15.96|
000010  6ac0              LDR      r0,[r0,#0x2c]
000012  2102              MOVS     r1,#2
000014  4388              BICS     r0,r0,r1
000016  1c80              ADDS     r0,r0,#2
000018  4911              LDR      r1,|L15.96|
00001a  62c8              STR      r0,[r1,#0x2c]
;;;63     		  
;;;64     		  g_u32RTC_Count++;                                            /* maintain RTC tick count */
00001c  4811              LDR      r0,|L15.100|
00001e  6800              LDR      r0,[r0,#0]  ; g_u32RTC_Count
000020  1c40              ADDS     r0,r0,#1
000022  4910              LDR      r1,|L15.100|
000024  6008              STR      r0,[r1,#0]  ; g_u32RTC_Count
;;;65     
;;;66               if (g_pfnRTCCallBack_Tick != NULL)                           /* execute tick callback function */
000026  4810              LDR      r0,|L15.104|
000028  6800              LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_Tick
00002a  2800              CMP      r0,#0
00002c  d002              BEQ      |L15.52|
;;;67               {
;;;68                   g_pfnRTCCallBack_Tick();
00002e  480e              LDR      r0,|L15.104|
000030  6800              LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_Tick
000032  4780              BLX      r0
                  |L15.52|
;;;69               }
;;;70     
;;;71         }
;;;72     
;;;73      	if (RTC->RIIR.AI ==0x1)                /* alarm interrupt occurred */
000034  480a              LDR      r0,|L15.96|
000036  6ac0              LDR      r0,[r0,#0x2c]
000038  07c0              LSLS     r0,r0,#31
00003a  0fc0              LSRS     r0,r0,#31
00003c  2801              CMP      r0,#1
00003e  d10d              BNE      |L15.92|
;;;74         {
;;;75               
;;;76     		  RTC->RIIR.AI = 1;
000040  4807              LDR      r0,|L15.96|
000042  6ac0              LDR      r0,[r0,#0x2c]
000044  0840              LSRS     r0,r0,#1
000046  0040              LSLS     r0,r0,#1
000048  1c40              ADDS     r0,r0,#1
00004a  4905              LDR      r1,|L15.96|
00004c  62c8              STR      r0,[r1,#0x2c]
;;;77     		  
;;;78     		  if (g_pfnRTCCallBack_Alarm != NULL) 	                       /* execute alarm callback function */
00004e  4807              LDR      r0,|L15.108|
000050  6800              LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_Alarm
000052  2800              CMP      r0,#0
000054  d002              BEQ      |L15.92|
;;;79               {
;;;80                   g_pfnRTCCallBack_Alarm();
000056  4805              LDR      r0,|L15.108|
000058  6800              LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_Alarm
00005a  4780              BLX      r0
                  |L15.92|
;;;81               }
;;;82         }
;;;83     }
00005c  bd10              POP      {r4,pc}
;;;84     
                          ENDP

00005e  0000              DCW      0x0000
                  |L15.96|
                          DCD      0x40008000
                  |L15.100|
                          DCD      g_u32RTC_Count
                  |L15.104|
                          DCD      g_pfnRTCCallBack_Tick
                  |L15.108|
                          DCD      g_pfnRTCCallBack_Alarm

                          AREA ||.data||, DATA, ALIGN=2

                  g_pfnRTCCallBack_Tick
                          DCD      0x00000000
                  g_pfnRTCCallBack_Alarm
                          DCD      0x00000000
                  g_u32RTC_Count
                          DCD      0x00000000
                  g_chHourMode
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  g_bIsEnableTickInt
                          DCD      0x00000000
                  g_bIsEnableAlarmInt
000014  00000000          DCB      0x00,0x00,0x00,0x00
                  g_u32Reg
                          DCD      0x00000000
                  g_u32Reg1
                          DCD      0x00000000
                  g_u32hiYear
                          DCD      0x00000000
                  g_u32loYear
                          DCD      0x00000000
                  g_u32hiMonth
                          DCD      0x00000000
                  g_u32loMonth
                          DCD      0x00000000
                  g_u32hiDay
                          DCD      0x00000000
                  g_u32loDay
                          DCD      0x00000000
                  g_u32hiHour
                          DCD      0x00000000
                  g_u32loHour
                          DCD      0x00000000
                  g_u32hiMin
                          DCD      0x00000000
                  g_u32loMin
                          DCD      0x00000000
                  g_u32hiSec
                          DCD      0x00000000
                  g_u32loSec
                          DCD      0x00000000
