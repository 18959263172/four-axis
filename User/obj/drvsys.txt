; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvsys.o --depend=.\obj\drvsys.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvsys.crf ..\BSP_Lib\Src\Driver\DrvSYS.c]
                          THUMB

                          AREA ||i.BOD_IRQHandler||, CODE, READONLY, ALIGN=2

                  BOD_IRQHandler PROC
;;;462    /*---------------------------------------------------------------------------------------------------------*/
;;;463    void BOD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;464    {
;;;465    	SYS->BODCR.BOD_INTF = 1;
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  6980              LDR      r0,[r0,#0x18]
000008  2110              MOVS     r1,#0x10
00000a  4388              BICS     r0,r0,r1
00000c  3010              ADDS     r0,r0,#0x10
00000e  2105              MOVS     r1,#5
000010  0709              LSLS     r1,r1,#28
000012  6188              STR      r0,[r1,#0x18]
;;;466    	if (BOD_callbackFn != NULL)
000014  4803              LDR      r0,|L1.36|
000016  6800              LDR      r0,[r0,#0]  ; BOD_callbackFn
000018  2800              CMP      r0,#0
00001a  d002              BEQ      |L1.34|
;;;467    		BOD_callbackFn();
00001c  4801              LDR      r0,|L1.36|
00001e  6800              LDR      r0,[r0,#0]  ; BOD_callbackFn
000020  4780              BLX      r0
                  |L1.34|
;;;468    }
000022  bd10              POP      {r4,pc}
;;;469    
                          ENDP

                  |L1.36|
                          DCD      BOD_callbackFn

                          AREA ||i.DrvSYS_ClearClockSwitchStatus||, CODE, READONLY, ALIGN=2

                  DrvSYS_ClearClockSwitchStatus PROC
;;;1262   /*---------------------------------------------------------------------------------------------------------*/
;;;1263   void DrvSYS_ClearClockSwitchStatus(void)
000000  4803              LDR      r0,|L2.16|
;;;1264   {
;;;1265   	 SYSCLK->CLKSTATUS.CLK_SW_FAIL = 1;
000002  68c0              LDR      r0,[r0,#0xc]
000004  2180              MOVS     r1,#0x80
000006  4388              BICS     r0,r0,r1
000008  3080              ADDS     r0,r0,#0x80
00000a  4901              LDR      r1,|L2.16|
00000c  60c8              STR      r0,[r1,#0xc]
;;;1266   }
00000e  4770              BX       lr
;;;1267   
                          ENDP

                  |L2.16|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_ClearResetSource||, CODE, READONLY, ALIGN=1

                  DrvSYS_ClearResetSource PROC
;;;145    /*---------------------------------------------------------------------------------------------------------*/
;;;146    uint32_t DrvSYS_ClearResetSource(uint32_t u32Src)
000000  4601              MOV      r1,r0
;;;147    {
;;;148    	*((__IO uint32_t *) &SYS->RSTSRC) = u32Src;
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  6041              STR      r1,[r0,#4]
;;;149    	return 0;
000008  2000              MOVS     r0,#0
;;;150    }
00000a  4770              BX       lr
;;;151    
                          ENDP


                          AREA ||i.DrvSYS_Delay||, CODE, READONLY, ALIGN=2

                  DrvSYS_Delay PROC
;;;1174   /*---------------------------------------------------------------------------------------------------------*/
;;;1175   void DrvSYS_Delay(uint32_t us)
000000  b570              PUSH     {r4-r6,lr}
;;;1176   {
000002  4604              MOV      r4,r0
;;;1177   	SysTick->LOAD = (us * (SystemCoreClock / 10000)) / 100;
000004  490b              LDR      r1,|L4.52|
000006  480c              LDR      r0,|L4.56|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000a  f7fffffe          BL       __aeabi_uidivmod
00000e  4360              MULS     r0,r4,r0
000010  4605              MOV      r5,r0
000012  2164              MOVS     r1,#0x64
000014  f7fffffe          BL       __aeabi_uidivmod
000018  4908              LDR      r1,|L4.60|
00001a  6148              STR      r0,[r1,#0x14]
;;;1178   	SysTick->VAL  = (0x00);
00001c  2000              MOVS     r0,#0
00001e  6188              STR      r0,[r1,#0x18]
;;;1179       SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
000020  2005              MOVS     r0,#5
000022  6108              STR      r0,[r1,#0x10]
;;;1180   
;;;1181       /* Waiting for down-count to zero */
;;;1182       while((SysTick->CTRL & (1 << 16)) == 0);
000024  bf00              NOP      
                  |L4.38|
000026  4805              LDR      r0,|L4.60|
000028  6900              LDR      r0,[r0,#0x10]
00002a  2101              MOVS     r1,#1
00002c  0409              LSLS     r1,r1,#16
00002e  4208              TST      r0,r1
000030  d0f9              BEQ      |L4.38|
;;;1183   }
000032  bd70              POP      {r4-r6,pc}
;;;1184   
                          ENDP

                  |L4.52|
                          DCD      0x00002710
                  |L4.56|
                          DCD      SystemCoreClock
                  |L4.60|
                          DCD      0xe000e000

                          AREA ||i.DrvSYS_DisableBODLowPowerMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableBODLowPowerMode PROC
;;;307    /*---------------------------------------------------------------------------------------------------------*/
;;;308    void DrvSYS_DisableBODLowPowerMode(void)
000000  2005              MOVS     r0,#5
;;;309    {
;;;310    	SYS->BODCR.BOD_LPM = 0;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  2120              MOVS     r1,#0x20
000008  4388              BICS     r0,r0,r1
00000a  2105              MOVS     r1,#5
00000c  0709              LSLS     r1,r1,#28
00000e  6188              STR      r0,[r1,#0x18]
;;;311    }
000010  4770              BX       lr
;;;312    
                          ENDP


                          AREA ||i.DrvSYS_DisableHighPerformanceMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableHighPerformanceMode PROC
;;;1156   /*---------------------------------------------------------------------------------------------------------*/
;;;1157   void DrvSYS_DisableHighPerformanceMode(void)
000000  2005              MOVS     r0,#5
;;;1158   {	
;;;1159   	SYS->CPR.HPE = 0;
000002  0700              LSLS     r0,r0,#28
000004  6900              LDR      r0,[r0,#0x10]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  2105              MOVS     r1,#5
00000c  0709              LSLS     r1,r1,#28
00000e  6108              STR      r0,[r1,#0x10]
;;;1160   }
000010  4770              BX       lr
;;;1161   
                          ENDP


                          AREA ||i.DrvSYS_DisableLowVoltReset||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableLowVoltReset PROC
;;;359    /*---------------------------------------------------------------------------------------------------------*/
;;;360    void DrvSYS_DisableLowVoltReset(void)
000000  2005              MOVS     r0,#5
;;;361    {
;;;362    	SYS->BODCR.LVR_EN = 0;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  2180              MOVS     r1,#0x80
000008  4388              BICS     r0,r0,r1
00000a  2105              MOVS     r1,#5
00000c  0709              LSLS     r1,r1,#28
00000e  6188              STR      r0,[r1,#0x18]
;;;363    }
000010  4770              BX       lr
;;;364    
                          ENDP


                          AREA ||i.DrvSYS_DisablePOR||, CODE, READONLY, ALIGN=2

                  DrvSYS_DisablePOR PROC
;;;427    /*---------------------------------------------------------------------------------------------------------*/
;;;428    void DrvSYS_DisablePOR(void)
000000  4801              LDR      r0,|L8.8|
;;;429    {
;;;430    	SYS->PORCR = 0x5AA5;
000002  0701              LSLS     r1,r0,#28
000004  6248              STR      r0,[r1,#0x24]
;;;431    }
000006  4770              BX       lr
;;;432    
                          ENDP

                  |L8.8|
                          DCD      0x00005aa5

                          AREA ||i.DrvSYS_DisableTemperatureSensor||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableTemperatureSensor PROC
;;;393    /*---------------------------------------------------------------------------------------------------------*/
;;;394    void DrvSYS_DisableTemperatureSensor(void)
000000  2000              MOVS     r0,#0
;;;395    {
;;;396    	SYS->TEMPCR = 0;
000002  2105              MOVS     r1,#5
000004  0709              LSLS     r1,r1,#28
000006  61c8              STR      r0,[r1,#0x1c]
;;;397    }
000008  4770              BX       lr
;;;398    
                          ENDP


                          AREA ||i.DrvSYS_EnableBODLowPowerMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableBODLowPowerMode PROC
;;;290    /*---------------------------------------------------------------------------------------------------------*/
;;;291    void DrvSYS_EnableBODLowPowerMode(void)
000000  2005              MOVS     r0,#5
;;;292    {
;;;293    	SYS->BODCR.BOD_LPM = 1;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  2120              MOVS     r1,#0x20
000008  4388              BICS     r0,r0,r1
00000a  3020              ADDS     r0,r0,#0x20
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  6188              STR      r0,[r1,#0x18]
;;;294    }
000012  4770              BX       lr
;;;295    
                          ENDP


                          AREA ||i.DrvSYS_EnableHighPerformanceMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableHighPerformanceMode PROC
;;;1138   /*---------------------------------------------------------------------------------------------------------*/
;;;1139   void DrvSYS_EnableHighPerformanceMode(void)
000000  2005              MOVS     r0,#5
;;;1140   {	
;;;1141   	SYS->CPR.HPE = 1;
000002  0700              LSLS     r0,r0,#28
000004  6900              LDR      r0,[r0,#0x10]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  6108              STR      r0,[r1,#0x10]
;;;1142   }
000012  4770              BX       lr
;;;1143   
                          ENDP


                          AREA ||i.DrvSYS_EnableLowVoltReset||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableLowVoltReset PROC
;;;342    /*---------------------------------------------------------------------------------------------------------*/
;;;343    void DrvSYS_EnableLowVoltReset(void)
000000  2005              MOVS     r0,#5
;;;344    {
;;;345    	SYS->BODCR.LVR_EN = 1;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  2180              MOVS     r1,#0x80
000008  4388              BICS     r0,r0,r1
00000a  3080              ADDS     r0,r0,#0x80
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  6188              STR      r0,[r1,#0x18]
;;;346    }
000012  4770              BX       lr
;;;347    
                          ENDP


                          AREA ||i.DrvSYS_EnablePOR||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnablePOR PROC
;;;410    /*---------------------------------------------------------------------------------------------------------*/
;;;411    void DrvSYS_EnablePOR(void)
000000  2000              MOVS     r0,#0
;;;412    {
;;;413    	SYS->PORCR = 0;
000002  2105              MOVS     r1,#5
000004  0709              LSLS     r1,r1,#28
000006  6248              STR      r0,[r1,#0x24]
;;;414    }
000008  4770              BX       lr
;;;415    
                          ENDP


                          AREA ||i.DrvSYS_EnableTemperatureSensor||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableTemperatureSensor PROC
;;;376    /*---------------------------------------------------------------------------------------------------------*/
;;;377    void DrvSYS_EnableTemperatureSensor(void)
000000  2001              MOVS     r0,#1
;;;378    {
;;;379    	SYS->TEMPCR = 1;
000002  2105              MOVS     r1,#5
000004  0709              LSLS     r1,r1,#28
000006  61c8              STR      r0,[r1,#0x1c]
;;;380    }
000008  4770              BX       lr
;;;381    
                          ENDP


                          AREA ||i.DrvSYS_EnterPowerDown||, CODE, READONLY, ALIGN=2

                  DrvSYS_EnterPowerDown PROC
;;;803    /*---------------------------------------------------------------------------------------------------------*/
;;;804    void DrvSYS_EnterPowerDown(E_SYS_PD_TYPE ePDType)
000000  4909              LDR      r1,|L15.40|
;;;805    {	
;;;806    	SYSCLK->PWRCON.PD_WAIT_CPU = ePDType;
000002  6809              LDR      r1,[r1,#0]
000004  22ff              MOVS     r2,#0xff
000006  3201              ADDS     r2,#1
000008  4391              BICS     r1,r1,r2
00000a  0202              LSLS     r2,r0,#8
00000c  23ff              MOVS     r3,#0xff
00000e  3301              ADDS     r3,#1
000010  401a              ANDS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4a04              LDR      r2,|L15.40|
000016  6011              STR      r1,[r2,#0]
;;;807    	SYSCLK->PWRCON.PWR_DOWN = 1;
000018  4611              MOV      r1,r2
00001a  6809              LDR      r1,[r1,#0]
00001c  2280              MOVS     r2,#0x80
00001e  4391              BICS     r1,r1,r2
000020  3180              ADDS     r1,r1,#0x80
000022  4a01              LDR      r2,|L15.40|
000024  6011              STR      r1,[r2,#0]
;;;808    }
000026  4770              BX       lr
;;;809    
                          ENDP

                  |L15.40|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_GetBODState||, CODE, READONLY, ALIGN=1

                  DrvSYS_GetBODState PROC
;;;325    /*---------------------------------------------------------------------------------------------------------*/
;;;326    uint32_t DrvSYS_GetBODState(void)
000000  2005              MOVS     r0,#5
;;;327    {
;;;328    	return SYS->BODCR.BOD_OUT;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  0640              LSLS     r0,r0,#25
000008  0fc0              LSRS     r0,r0,#31
;;;329    }
00000a  4770              BX       lr
;;;330    
                          ENDP


                          AREA ||i.DrvSYS_GetChipClockSourceStatus||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetChipClockSourceStatus PROC
;;;1200   /*---------------------------------------------------------------------------------------------------------*/
;;;1201   int32_t DrvSYS_GetChipClockSourceStatus(E_SYS_CHIP_CLKSRC eClkSrc)
000000  b500              PUSH     {lr}
;;;1202   {
000002  4602              MOV      r2,r0
;;;1203   	int32_t status;
;;;1204   
;;;1205   	switch(eClkSrc)
000004  4613              MOV      r3,r2
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0504              DCB      0x05,0x04
00000c  090e1318          DCB      0x09,0x0e,0x13,0x18
000010  1d00              DCB      0x1d,0x00
;;;1206   	{
;;;1207   		case E_SYS_XTL12M:  
;;;1208   			status = SYSCLK->CLKSTATUS.XTL12M_STB;
000012  480f              LDR      r0,|L17.80|
000014  68c0              LDR      r0,[r0,#0xc]
000016  07c1              LSLS     r1,r0,#31
000018  0fc9              LSRS     r1,r1,#31
;;;1209   			break;
00001a  e015              B        |L17.72|
;;;1210   		case E_SYS_XTL32K:
;;;1211   			status = SYSCLK->CLKSTATUS.XTL32K_STB;
00001c  480c              LDR      r0,|L17.80|
00001e  68c0              LDR      r0,[r0,#0xc]
000020  0780              LSLS     r0,r0,#30
000022  0fc1              LSRS     r1,r0,#31
;;;1212   			break;
000024  e010              B        |L17.72|
;;;1213   		case E_SYS_OSC22M:
;;;1214   		    status = SYSCLK->CLKSTATUS.OSC22M_STB;
000026  480a              LDR      r0,|L17.80|
000028  68c0              LDR      r0,[r0,#0xc]
00002a  06c0              LSLS     r0,r0,#27
00002c  0fc1              LSRS     r1,r0,#31
;;;1215   			break;
00002e  e00b              B        |L17.72|
;;;1216   		case E_SYS_OSC10K:
;;;1217   		    status = SYSCLK->CLKSTATUS.OSC10K_STB;
000030  4807              LDR      r0,|L17.80|
000032  68c0              LDR      r0,[r0,#0xc]
000034  0700              LSLS     r0,r0,#28
000036  0fc1              LSRS     r1,r0,#31
;;;1218   			break;				
000038  e006              B        |L17.72|
;;;1219   		case E_SYS_PLL:
;;;1220   		    status = SYSCLK->CLKSTATUS.PLL_STB;
00003a  4805              LDR      r0,|L17.80|
00003c  68c0              LDR      r0,[r0,#0xc]
00003e  0740              LSLS     r0,r0,#29
000040  0fc1              LSRS     r1,r0,#31
;;;1221   			break;
000042  e001              B        |L17.72|
;;;1222   		default:
;;;1223   			return E_DRVSYS_ERR_ARGUMENT;
000044  4803              LDR      r0,|L17.84|
                  |L17.70|
;;;1224   	}
;;;1225   
;;;1226   	return status;		
;;;1227   }
000046  bd00              POP      {pc}
                  |L17.72|
000048  bf00              NOP                            ;1209
00004a  4608              MOV      r0,r1                 ;1226
00004c  e7fb              B        |L17.70|
;;;1228   
                          ENDP

00004e  0000              DCW      0x0000
                  |L17.80|
                          DCD      0x50000200
                  |L17.84|
                          DCD      0xffff9603

                          AREA ||i.DrvSYS_GetClockSwitchStatus||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetClockSwitchStatus PROC
;;;1244   /*---------------------------------------------------------------------------------------------------------*/
;;;1245   uint32_t DrvSYS_GetClockSwitchStatus(void)
000000  4802              LDR      r0,|L18.12|
;;;1246   {	
;;;1247   	return SYSCLK->CLKSTATUS.CLK_SW_FAIL;
000002  68c0              LDR      r0,[r0,#0xc]
000004  0600              LSLS     r0,r0,#24
000006  0fc0              LSRS     r0,r0,#31
;;;1248   }
000008  4770              BX       lr
;;;1249   
                          ENDP

00000a  0000              DCW      0x0000
                  |L18.12|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_GetExtClockFreq||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetExtClockFreq PROC
;;;858    /*---------------------------------------------------------------------------------------------------------*/
;;;859    uint32_t DrvSYS_GetExtClockFreq(void)
000000  4800              LDR      r0,|L19.4|
;;;860    {	
;;;861    	return __XTAL;
;;;862    }
000002  4770              BX       lr
;;;863    
                          ENDP

                  |L19.4|
                          DCD      0x00b71b00

                          AREA ||i.DrvSYS_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetHCLKFreq PROC
;;;1003   /*---------------------------------------------------------------------------------------------------------*/
;;;1004   uint32_t DrvSYS_GetHCLKFreq(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1005   {
;;;1006   	
;;;1007   	uint32_t u32Freqout = 0, u32AHBDivider;
000002  2500              MOVS     r5,#0
;;;1008   
;;;1009   	if (SYSCLK->CLKSEL0.HCLK_S == 0)		/* external 12MHz crystal clock */
000004  4815              LDR      r0,|L20.92|
000006  6900              LDR      r0,[r0,#0x10]
000008  0740              LSLS     r0,r0,#29
00000a  0f40              LSRS     r0,r0,#29
00000c  d101              BNE      |L20.18|
;;;1010   	{
;;;1011   		u32Freqout = __XTAL;	
00000e  4d14              LDR      r5,|L20.96|
000010  e01a              B        |L20.72|
                  |L20.18|
;;;1012   	}
;;;1013   	else if(SYSCLK->CLKSEL0.HCLK_S == 1)    /* external 32KHz crystal clock */ 
000012  4812              LDR      r0,|L20.92|
000014  6900              LDR      r0,[r0,#0x10]
000016  0740              LSLS     r0,r0,#29
000018  0f40              LSRS     r0,r0,#29
00001a  2801              CMP      r0,#1
00001c  d101              BNE      |L20.34|
;;;1014   	{
;;;1015   		u32Freqout = __RTC_XTAL;
00001e  03c5              LSLS     r5,r0,#15
000020  e012              B        |L20.72|
                  |L20.34|
;;;1016   	}
;;;1017   	else if(SYSCLK->CLKSEL0.HCLK_S == 2)	/* PLL clock */
000022  480e              LDR      r0,|L20.92|
000024  6900              LDR      r0,[r0,#0x10]
000026  0740              LSLS     r0,r0,#29
000028  0f40              LSRS     r0,r0,#29
00002a  2802              CMP      r0,#2
00002c  d103              BNE      |L20.54|
;;;1018   	{
;;;1019   		u32Freqout = DrvSYS_GetPLLClockFreq();
00002e  f7fffffe          BL       DrvSYS_GetPLLClockFreq
000032  4605              MOV      r5,r0
000034  e008              B        |L20.72|
                  |L20.54|
;;;1020   	}
;;;1021   	else if(SYSCLK->CLKSEL0.HCLK_S == 3)	/* internal 10KHz oscillator clock */
000036  4809              LDR      r0,|L20.92|
000038  6900              LDR      r0,[r0,#0x10]
00003a  0740              LSLS     r0,r0,#29
00003c  0f40              LSRS     r0,r0,#29
00003e  2803              CMP      r0,#3
000040  d101              BNE      |L20.70|
;;;1022   	{
;;;1023   	 	u32Freqout = __IRC10K;
000042  4d08              LDR      r5,|L20.100|
000044  e000              B        |L20.72|
                  |L20.70|
;;;1024   	}
;;;1025   	else									/* internal 22MHz oscillator clock */
;;;1026   	{
;;;1027   	 	u32Freqout = __IRC22M;
000046  4d08              LDR      r5,|L20.104|
                  |L20.72|
;;;1028   	
;;;1029   	}
;;;1030   	u32AHBDivider = SYSCLK->CLKDIV.HCLK_N + 1 ;
000048  4804              LDR      r0,|L20.92|
00004a  6980              LDR      r0,[r0,#0x18]
00004c  0700              LSLS     r0,r0,#28
00004e  0f00              LSRS     r0,r0,#28
000050  1c44              ADDS     r4,r0,#1
;;;1031   	
;;;1032   	return (u32Freqout/u32AHBDivider);	
000052  4621              MOV      r1,r4
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       __aeabi_uidivmod
;;;1033   }
00005a  bd70              POP      {r4-r6,pc}
;;;1034   
                          ENDP

                  |L20.92|
                          DCD      0x50000200
                  |L20.96|
                          DCD      0x00b71b00
                  |L20.100|
                          DCD      0x00002710
                  |L20.104|
                          DCD      0x01518000

                          AREA ||i.DrvSYS_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetPLLClockFreq PROC
;;;968    /*---------------------------------------------------------------------------------------------------------*/
;;;969    uint32_t DrvSYS_GetPLLClockFreq(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;970    {
;;;971    	uint32_t u32Freq =0, u32PLLSrc;
000002  2500              MOVS     r5,#0
;;;972    	uint32_t au32Map[4] = {1, 2, 2, 4};
000004  4b18              LDR      r3,|L21.104|
000006  cb0f              LDM      r3,{r0-r3}
000008  466c              MOV      r4,sp
00000a  c40f              STM      r4!,{r0-r3}
;;;973    
;;;974    	if (SYSCLK->PLLCON.PLL_SRC == 1)
00000c  4817              LDR      r0,|L21.108|
00000e  6a00              LDR      r0,[r0,#0x20]
000010  0300              LSLS     r0,r0,#12
000012  0fc0              LSRS     r0,r0,#31
000014  2801              CMP      r0,#1
000016  d101              BNE      |L21.28|
;;;975    	{
;;;976    		u32PLLSrc = __IRC22M;	
000018  4c15              LDR      r4,|L21.112|
00001a  e000              B        |L21.30|
                  |L21.28|
;;;977    	}
;;;978    	else
;;;979    	{
;;;980    		u32PLLSrc = __XTAL;
00001c  4c15              LDR      r4,|L21.116|
                  |L21.30|
;;;981    	}
;;;982    
;;;983    	if (SYSCLK->PLLCON.PD ==1)	
00001e  4813              LDR      r0,|L21.108|
000020  6a00              LDR      r0,[r0,#0x20]
000022  03c0              LSLS     r0,r0,#15
000024  0fc0              LSRS     r0,r0,#31
000026  2801              CMP      r0,#1
000028  d101              BNE      |L21.46|
;;;984    		u32Freq = 0;	
00002a  2500              MOVS     r5,#0
00002c  e019              B        |L21.98|
                  |L21.46|
;;;985    	else		
;;;986    		u32Freq = u32PLLSrc * (SYSCLK->PLLCON.FB_DV+2) / (SYSCLK->PLLCON.IN_DV+2) / au32Map[SYSCLK->PLLCON.OUT_DV];
00002e  4a0f              LDR      r2,|L21.108|
000030  6a12              LDR      r2,[r2,#0x20]
000032  0492              LSLS     r2,r2,#18
000034  0ed2              LSRS     r2,r2,#27
000036  1c91              ADDS     r1,r2,#2
000038  4a0c              LDR      r2,|L21.108|
00003a  6a12              LDR      r2,[r2,#0x20]
00003c  05d2              LSLS     r2,r2,#23
00003e  0dd2              LSRS     r2,r2,#23
000040  1c92              ADDS     r2,r2,#2
000042  4362              MULS     r2,r4,r2
000044  4610              MOV      r0,r2
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  4606              MOV      r6,r0
00004c  4807              LDR      r0,|L21.108|
00004e  6a00              LDR      r0,[r0,#0x20]
000050  0400              LSLS     r0,r0,#16
000052  0f80              LSRS     r0,r0,#30
000054  0080              LSLS     r0,r0,#2
000056  466a              MOV      r2,sp
000058  5811              LDR      r1,[r2,r0]
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       __aeabi_uidivmod
000060  4605              MOV      r5,r0
                  |L21.98|
;;;987    
;;;988    	return u32Freq;
000062  4628              MOV      r0,r5
;;;989    }
000064  b004              ADD      sp,sp,#0x10
000066  bd70              POP      {r4-r6,pc}
;;;990    
                          ENDP

                  |L21.104|
                          DCD      ||.constdata||
                  |L21.108|
                          DCD      0x50000200
                  |L21.112|
                          DCD      0x01518000
                  |L21.116|
                          DCD      0x00b71b00

                          AREA ||i.DrvSYS_GetPLLContent||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetPLLContent PROC
;;;880    /*---------------------------------------------------------------------------------------------------------*/
;;;881    uint32_t DrvSYS_GetPLLContent(E_SYS_PLL_CLKSRC ePllSrc, uint32_t u32PllClk)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;882    {
000002  b083              SUB      sp,sp,#0xc
000004  460c              MOV      r4,r1
;;;883    	uint32_t u32NR, u32NF, u32NO;
;;;884    	
;;;885    	uint32_t u32PllSrcClk = __XTAL, u32Register=0;
000006  4825              LDR      r0,|L22.156|
000008  9002              STR      r0,[sp,#8]
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;886    
;;;887        if ( (u32PllClk <= FREQ_200MHZ) && (u32PllClk > FREQ_100MHZ) )
00000e  4824              LDR      r0,|L22.160|
000010  4284              CMP      r4,r0
000012  d804              BHI      |L22.30|
000014  1040              ASRS     r0,r0,#1
000016  4284              CMP      r4,r0
000018  d901              BLS      |L22.30|
;;;888    	{
;;;889    		u32NO = 0;
00001a  2700              MOVS     r7,#0
00001c  e014              B        |L22.72|
                  |L22.30|
;;;890    	}
;;;891    	else if ( (u32PllClk <= FREQ_100MHZ) && (u32PllClk > FREQ_50MHZ) )
00001e  4821              LDR      r0,|L22.164|
000020  4284              CMP      r4,r0
000022  d805              BHI      |L22.48|
000024  1040              ASRS     r0,r0,#1
000026  4284              CMP      r4,r0
000028  d902              BLS      |L22.48|
;;;892    	{
;;;893    		u32NO = 1;
00002a  2701              MOVS     r7,#1
;;;894    		u32PllClk = u32PllClk << 1;
00002c  0064              LSLS     r4,r4,#1
00002e  e00b              B        |L22.72|
                  |L22.48|
;;;895    	}
;;;896    	else if ( (u32PllClk <= FREQ_50MHZ) && (u32PllClk >= FREQ_25MHZ) )
000030  481d              LDR      r0,|L22.168|
000032  4284              CMP      r4,r0
000034  d805              BHI      |L22.66|
000036  1040              ASRS     r0,r0,#1
000038  4284              CMP      r4,r0
00003a  d302              BCC      |L22.66|
;;;897    	{
;;;898    		u32NO = 3;
00003c  2703              MOVS     r7,#3
;;;899    		u32PllClk = u32PllClk << 2;
00003e  00a4              LSLS     r4,r4,#2
000040  e002              B        |L22.72|
                  |L22.66|
;;;900    	}
;;;901    	else
;;;902    	{
;;;903    		return 0xC22E;	
000042  481a              LDR      r0,|L22.172|
                  |L22.68|
;;;904    	} 
;;;905    		
;;;906    	if (ePllSrc == E_SYS_EXTERNAL_12M)
;;;907    		u32PllSrcClk = __XTAL;
;;;908    	else if (ePllSrc == E_SYS_INTERNAL_22M)
;;;909    		u32PllSrcClk = __IRC22M; 
;;;910    
;;;911    	u32NF = u32PllClk / 1000000;
;;;912        u32NR = u32PllSrcClk / 1000000;	
;;;913    	
;;;914        while(1)
;;;915    	{
;;;916    		if ((u32NR & 0x01) || (u32NF & 0x01))
;;;917    		{
;;;918    			break;
;;;919    		}
;;;920    		else
;;;921    		{
;;;922    			u32NR >>= 1;
;;;923    			u32NF >>= 1;
;;;924    		}	
;;;925    	}    
;;;926    		
;;;927    	u32Register = (u32NO<<14) | ((u32NR - 2)<<9) | (u32NF - 2);
;;;928    
;;;929        /* Return the nearest value */
;;;930    	return u32Register;
;;;931    }
000044  b005              ADD      sp,sp,#0x14
000046  bdf0              POP      {r4-r7,pc}
                  |L22.72|
000048  9803              LDR      r0,[sp,#0xc]          ;906
00004a  2800              CMP      r0,#0                 ;906
00004c  d102              BNE      |L22.84|
00004e  4813              LDR      r0,|L22.156|
000050  9002              STR      r0,[sp,#8]            ;907
000052  e004              B        |L22.94|
                  |L22.84|
000054  9803              LDR      r0,[sp,#0xc]          ;908
000056  2801              CMP      r0,#1                 ;908
000058  d101              BNE      |L22.94|
00005a  4815              LDR      r0,|L22.176|
00005c  9002              STR      r0,[sp,#8]            ;909
                  |L22.94|
00005e  4915              LDR      r1,|L22.180|
000060  4620              MOV      r0,r4                 ;911
000062  f7fffffe          BL       __aeabi_uidivmod
000066  4606              MOV      r6,r0                 ;911
000068  4912              LDR      r1,|L22.180|
00006a  9802              LDR      r0,[sp,#8]            ;912
00006c  f7fffffe          BL       __aeabi_uidivmod
000070  4605              MOV      r5,r0                 ;912
000072  e008              B        |L22.134|
                  |L22.116|
000074  07e8              LSLS     r0,r5,#31             ;916
000076  0fc0              LSRS     r0,r0,#31             ;916
000078  d102              BNE      |L22.128|
00007a  07f0              LSLS     r0,r6,#31             ;916
00007c  0fc0              LSRS     r0,r0,#31             ;916
00007e  d000              BEQ      |L22.130|
                  |L22.128|
000080  e002              B        |L22.136|
                  |L22.130|
000082  086d              LSRS     r5,r5,#1              ;922
000084  0876              LSRS     r6,r6,#1              ;923
                  |L22.134|
000086  e7f5              B        |L22.116|
                  |L22.136|
000088  bf00              NOP                            ;918
00008a  03b8              LSLS     r0,r7,#14             ;927
00008c  1ea9              SUBS     r1,r5,#2              ;927
00008e  0249              LSLS     r1,r1,#9              ;927
000090  4308              ORRS     r0,r0,r1              ;927
000092  1eb1              SUBS     r1,r6,#2              ;927
000094  4308              ORRS     r0,r0,r1              ;927
000096  9001              STR      r0,[sp,#4]            ;927
000098  9801              LDR      r0,[sp,#4]            ;930
00009a  e7d3              B        |L22.68|
;;;932    
                          ENDP

                  |L22.156|
                          DCD      0x00b71b00
                  |L22.160|
                          DCD      0x0bebc200
                  |L22.164|
                          DCD      0x05f5e100
                  |L22.168|
                          DCD      0x02faf080
                  |L22.172|
                          DCD      0x0000c22e
                  |L22.176|
                          DCD      0x01518000
                  |L22.180|
                          DCD      0x000f4240

                          AREA ||i.DrvSYS_GetResetSource||, CODE, READONLY, ALIGN=1

                  DrvSYS_GetResetSource PROC
;;;129    /*---------------------------------------------------------------------------------------------------------*/
;;;130    uint32_t DrvSYS_GetResetSource(void)
000000  2005              MOVS     r0,#5
;;;131    {
;;;132    	return *((__IO uint32_t *) &SYS->RSTSRC);
000002  0700              LSLS     r0,r0,#28
000004  6840              LDR      r0,[r0,#4]
;;;133    }
000006  4770              BX       lr
;;;134    
                          ENDP


                          AREA ||i.DrvSYS_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetVersion PROC
;;;32     /*---------------------------------------------------------------------------------------------------------*/
;;;33     uint32_t DrvSYS_GetVersion(void)
000000  4800              LDR      r0,|L24.4|
;;;34     {
;;;35     	return DRVSYS_VERSION_NUM;
;;;36     }
000002  4770              BX       lr
;;;37     
                          ENDP

                  |L24.4|
                          DCD      0x00010202

                          AREA ||i.DrvSYS_IsProtectedRegLocked||, CODE, READONLY, ALIGN=2

                  DrvSYS_IsProtectedRegLocked PROC
;;;112    /*---------------------------------------------------------------------------------------------------------*/
;;;113    int32_t DrvSYS_IsProtectedRegLocked(void)
000000  4802              LDR      r0,|L25.12|
;;;114    {
;;;115    	return SYS->REGLOCK & 0x01;
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
;;;116    }
000008  4770              BX       lr
;;;117    
                          ENDP

00000a  0000              DCW      0x0000
                  |L25.12|
                          DCD      0x50000100

                          AREA ||i.DrvSYS_LockProtectedReg||, CODE, READONLY, ALIGN=2

                  DrvSYS_LockProtectedReg PROC
;;;90     /*---------------------------------------------------------------------------------------------------------*/
;;;91     int32_t DrvSYS_LockProtectedReg(void)
000000  2000              MOVS     r0,#0
;;;92     {
;;;93     	uint32_t lockbit;
;;;94     	
;;;95     	SYS->REGLOCK = 0x00;
000002  4a06              LDR      r2,|L26.28|
000004  6010              STR      r0,[r2,#0]
;;;96     
;;;97     	lockbit = SYS->REGLOCK & 0x01;
000006  4610              MOV      r0,r2
000008  6800              LDR      r0,[r0,#0]
00000a  07c1              LSLS     r1,r0,#31
00000c  0fc9              LSRS     r1,r1,#31
;;;98     	return (lockbit)? E_DRVSYS_ERR_LOCK_FAIL : 0;
00000e  2900              CMP      r1,#0
000010  d001              BEQ      |L26.22|
000012  4803              LDR      r0,|L26.32|
                  |L26.20|
;;;99     }
000014  4770              BX       lr
                  |L26.22|
000016  2000              MOVS     r0,#0                 ;98
000018  e7fc              B        |L26.20|
;;;100    
                          ENDP

00001a  0000              DCW      0x0000
                  |L26.28|
                          DCD      0x50000100
                  |L26.32|
                          DCD      0xffff9602

                          AREA ||i.DrvSYS_Open||, CODE, READONLY, ALIGN=2

                  DrvSYS_Open PROC
;;;1051   /*---------------------------------------------------------------------------------------------------------*/
;;;1052   int32_t DrvSYS_Open(uint32_t u32Hclk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1053   {
000002  4605              MOV      r5,r0
;;;1054   	uint32_t u32PllCr;	
;;;1055   	volatile uint32_t delayCnt;
;;;1056   	E_SYS_PLL_CLKSRC ePllSrc = E_SYS_EXTERNAL_12M;
000004  2600              MOVS     r6,#0
;;;1057   
;;;1058   	if ( (u32Hclk > FREQ_50MHZ) || (u32Hclk < FREQ_25MHZ) )
000006  4822              LDR      r0,|L27.144|
000008  4285              CMP      r5,r0
00000a  d802              BHI      |L27.18|
00000c  1040              ASRS     r0,r0,#1
00000e  4285              CMP      r5,r0
000010  d201              BCS      |L27.22|
                  |L27.18|
;;;1059   	{
;;;1060   		return E_DRVSYS_ERR_OUT_OF_RANGE;
000012  4820              LDR      r0,|L27.148|
                  |L27.20|
;;;1061   	}
;;;1062   		
;;;1063   	if (SYSCLK->PLLCON.PLL_SRC == 0)
;;;1064   	{
;;;1065   		SYSCLK->PWRCON.XTL12M_EN = 1;
;;;1066   		ePllSrc = E_SYS_EXTERNAL_12M;
;;;1067   	}
;;;1068   	else
;;;1069   	{
;;;1070   		SYSCLK->PWRCON.OSC22M_EN = 1;
;;;1071   		ePllSrc = E_SYS_INTERNAL_22M;
;;;1072   	}
;;;1073   
;;;1074   	u32PllCr = DrvSYS_GetPLLContent(ePllSrc, u32Hclk);
;;;1075   	
;;;1076   	/*Delay for 12M or 22M stable*/
;;;1077   	for (delayCnt=0;delayCnt<10000;delayCnt++);		
;;;1078   
;;;1079   	DrvSYS_SetPLLContent(u32PllCr);
;;;1080   	SYSCLK->PLLCON.OE     = 0;
;;;1081   	SYSCLK->PLLCON.PD 	  = 0;
;;;1082   	
;;;1083   	/*Delay for PLL stable*/
;;;1084   	for (delayCnt=0;delayCnt<10000;delayCnt++);
;;;1085   
;;;1086   	/* Change HCLK clock source to be PLL. */
;;;1087   	DrvSYS_SelectHCLKSource(2);
;;;1088   	
;;;1089   	return E_SUCCESS;
;;;1090   
;;;1091   }
000014  bdf8              POP      {r3-r7,pc}
                  |L27.22|
000016  4820              LDR      r0,|L27.152|
000018  6a00              LDR      r0,[r0,#0x20]         ;1063
00001a  0300              LSLS     r0,r0,#12             ;1063
00001c  0fc0              LSRS     r0,r0,#31             ;1063
00001e  d108              BNE      |L27.50|
000020  481d              LDR      r0,|L27.152|
000022  6800              LDR      r0,[r0,#0]            ;1065
000024  0840              LSRS     r0,r0,#1              ;1065
000026  0040              LSLS     r0,r0,#1              ;1065
000028  1c40              ADDS     r0,r0,#1              ;1065
00002a  491b              LDR      r1,|L27.152|
00002c  6008              STR      r0,[r1,#0]            ;1065
00002e  2600              MOVS     r6,#0                 ;1066
000030  e007              B        |L27.66|
                  |L27.50|
000032  4819              LDR      r0,|L27.152|
000034  6800              LDR      r0,[r0,#0]            ;1070
000036  2104              MOVS     r1,#4                 ;1070
000038  4388              BICS     r0,r0,r1              ;1070
00003a  1d00              ADDS     r0,r0,#4              ;1070
00003c  4916              LDR      r1,|L27.152|
00003e  6008              STR      r0,[r1,#0]            ;1070
000040  2601              MOVS     r6,#1                 ;1071
                  |L27.66|
000042  4629              MOV      r1,r5                 ;1074
000044  4630              MOV      r0,r6                 ;1074
000046  f7fffffe          BL       DrvSYS_GetPLLContent
00004a  4607              MOV      r7,r0                 ;1074
00004c  2400              MOVS     r4,#0                 ;1077
00004e  e000              B        |L27.82|
                  |L27.80|
000050  1c64              ADDS     r4,r4,#1              ;1077
                  |L27.82|
000052  4812              LDR      r0,|L27.156|
000054  4284              CMP      r4,r0                 ;1077
000056  d3fb              BCC      |L27.80|
000058  4638              MOV      r0,r7                 ;1079
00005a  f7fffffe          BL       DrvSYS_SetPLLContent
00005e  480e              LDR      r0,|L27.152|
000060  6a00              LDR      r0,[r0,#0x20]         ;1080
000062  2101              MOVS     r1,#1                 ;1080
000064  0489              LSLS     r1,r1,#18             ;1080
000066  4388              BICS     r0,r0,r1              ;1080
000068  490b              LDR      r1,|L27.152|
00006a  6208              STR      r0,[r1,#0x20]         ;1080
00006c  4608              MOV      r0,r1                 ;1081
00006e  6a00              LDR      r0,[r0,#0x20]         ;1081
000070  01c9              LSLS     r1,r1,#7              ;1081
000072  4388              BICS     r0,r0,r1              ;1081
000074  4908              LDR      r1,|L27.152|
000076  6208              STR      r0,[r1,#0x20]         ;1081
000078  2400              MOVS     r4,#0                 ;1084
00007a  e000              B        |L27.126|
                  |L27.124|
00007c  1c64              ADDS     r4,r4,#1              ;1084
                  |L27.126|
00007e  4807              LDR      r0,|L27.156|
000080  4284              CMP      r4,r0                 ;1084
000082  d3fb              BCC      |L27.124|
000084  2002              MOVS     r0,#2                 ;1087
000086  f7fffffe          BL       DrvSYS_SelectHCLKSource
00008a  2000              MOVS     r0,#0                 ;1089
00008c  e7c2              B        |L27.20|
;;;1092   
                          ENDP

00008e  0000              DCW      0x0000
                  |L27.144|
                          DCD      0x02faf080
                  |L27.148|
                          DCD      0xffff9606
                  |L27.152|
                          DCD      0x50000200
                  |L27.156|
                          DCD      0x00002710

                          AREA ||i.DrvSYS_ReadProductID||, CODE, READONLY, ALIGN=1

                  DrvSYS_ReadProductID PROC
;;;48     /*---------------------------------------------------------------------------------------------------------*/
;;;49     uint32_t DrvSYS_ReadProductID(void)
000000  2005              MOVS     r0,#5
;;;50     {	
;;;51     	return SYS->PDID;
000002  0700              LSLS     r0,r0,#28
000004  6800              LDR      r0,[r0,#0]
;;;52     }
000006  4770              BX       lr
;;;53     
                          ENDP


                          AREA ||i.DrvSYS_ResetCPU||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetCPU PROC
;;;202    /*---------------------------------------------------------------------------------------------------------*/
;;;203    void DrvSYS_ResetCPU(void)
000000  2005              MOVS     r0,#5
;;;204    {
;;;205    	SYS->IPRSTC1.CPU_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  6880              LDR      r0,[r0,#8]
000006  2102              MOVS     r1,#2
000008  4388              BICS     r0,r0,r1
00000a  1c80              ADDS     r0,r0,#2
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  6088              STR      r0,[r1,#8]
;;;206    }
000012  4770              BX       lr
;;;207    
                          ENDP


                          AREA ||i.DrvSYS_ResetChip||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetChip PROC
;;;219    /*---------------------------------------------------------------------------------------------------------*/
;;;220    void DrvSYS_ResetChip(void)
000000  2005              MOVS     r0,#5
;;;221    {
;;;222    	SYS->IPRSTC1.CHIP_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  6880              LDR      r0,[r0,#8]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  6088              STR      r0,[r1,#8]
;;;223    }
000012  4770              BX       lr
;;;224    
                          ENDP


                          AREA ||i.DrvSYS_ResetIP||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetIP PROC
;;;168    /*---------------------------------------------------------------------------------------------------------*/
;;;169    void DrvSYS_ResetIP(E_SYS_IP_RST eIpRst)
000000  2820              CMP      r0,#0x20
;;;170    {	
;;;171    	uint32_t u32Reg;
;;;172    
;;;173    	if (eIpRst == E_SYS_PDMA_RST)
000002  d110              BNE      |L31.38|
;;;174    	{
;;;175    		SYS->IPRSTC1.PDMA_RST = 1;
000004  2205              MOVS     r2,#5
000006  0712              LSLS     r2,r2,#28
000008  6892              LDR      r2,[r2,#8]
00000a  2304              MOVS     r3,#4
00000c  439a              BICS     r2,r2,r3
00000e  1d12              ADDS     r2,r2,#4
000010  2305              MOVS     r3,#5
000012  071b              LSLS     r3,r3,#28
000014  609a              STR      r2,[r3,#8]
;;;176    		SYS->IPRSTC1.PDMA_RST = 0;
000016  461a              MOV      r2,r3
000018  6892              LDR      r2,[r2,#8]
00001a  2304              MOVS     r3,#4
00001c  439a              BICS     r2,r2,r3
00001e  2305              MOVS     r3,#5
000020  071b              LSLS     r3,r3,#28
000022  609a              STR      r2,[r3,#8]
000024  e022              B        |L31.108|
                  |L31.38|
;;;177    	}
;;;178    	else if (eIpRst == E_SYS_EBI_RST)
000026  2821              CMP      r0,#0x21
000028  d110              BNE      |L31.76|
;;;179    	{
;;;180    		SYS->IPRSTC1.EBI_RST = 1;
00002a  2205              MOVS     r2,#5
00002c  0712              LSLS     r2,r2,#28
00002e  6892              LDR      r2,[r2,#8]
000030  2308              MOVS     r3,#8
000032  439a              BICS     r2,r2,r3
000034  3208              ADDS     r2,r2,#8
000036  2305              MOVS     r3,#5
000038  071b              LSLS     r3,r3,#28
00003a  609a              STR      r2,[r3,#8]
;;;181    		SYS->IPRSTC1.EBI_RST = 0;	
00003c  461a              MOV      r2,r3
00003e  6892              LDR      r2,[r2,#8]
000040  2308              MOVS     r3,#8
000042  439a              BICS     r2,r2,r3
000044  2305              MOVS     r3,#5
000046  071b              LSLS     r3,r3,#28
000048  609a              STR      r2,[r3,#8]
00004a  e00f              B        |L31.108|
                  |L31.76|
;;;182    	}
;;;183    	else
;;;184    	{
;;;185    		u32Reg = *((__IO uint32_t *) &SYS->IPRSTC2);
00004c  2205              MOVS     r2,#5
00004e  0712              LSLS     r2,r2,#28
000050  68d1              LDR      r1,[r2,#0xc]
;;;186    		*((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg | (1<<eIpRst);
000052  2201              MOVS     r2,#1
000054  4082              LSLS     r2,r2,r0
000056  430a              ORRS     r2,r2,r1
000058  2305              MOVS     r3,#5
00005a  071b              LSLS     r3,r3,#28
00005c  60da              STR      r2,[r3,#0xc]
;;;187    		*((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg & ~(1<<eIpRst);
00005e  2201              MOVS     r2,#1
000060  4082              LSLS     r2,r2,r0
000062  460b              MOV      r3,r1
000064  4393              BICS     r3,r3,r2
000066  2205              MOVS     r2,#5
000068  0712              LSLS     r2,r2,#28
00006a  60d3              STR      r3,[r2,#0xc]
                  |L31.108|
;;;188    	}
;;;189    }
00006c  4770              BX       lr
;;;190    
                          ENDP


                          AREA ||i.DrvSYS_SelectBODVolt||, CODE, READONLY, ALIGN=1

                  DrvSYS_SelectBODVolt PROC
;;;237    /*---------------------------------------------------------------------------------------------------------*/
;;;238    void DrvSYS_SelectBODVolt(uint8_t u8Volt)
000000  2105              MOVS     r1,#5
;;;239    {
;;;240    	SYS->BODCR.BOD_VL = u8Volt;
000002  0709              LSLS     r1,r1,#28
000004  6989              LDR      r1,[r1,#0x18]
000006  2206              MOVS     r2,#6
000008  4391              BICS     r1,r1,r2
00000a  0042              LSLS     r2,r0,#1
00000c  2306              MOVS     r3,#6
00000e  401a              ANDS     r2,r2,r3
000010  4311              ORRS     r1,r1,r2
000012  2205              MOVS     r2,#5
000014  0712              LSLS     r2,r2,#28
000016  6191              STR      r1,[r2,#0x18]
;;;241    }
000018  4770              BX       lr
;;;242    
                          ENDP


                          AREA ||i.DrvSYS_SelectHCLKSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectHCLKSource PROC
;;;537    /*---------------------------------------------------------------------------------------------------------*/
;;;538    int32_t DrvSYS_SelectHCLKSource(uint8_t u8ClkSrcSel)
000000  b510              PUSH     {r4,lr}
;;;539    {
000002  4604              MOV      r4,r0
;;;540    	if ((u8ClkSrcSel > 7) || ((u8ClkSrcSel > 3) && (u8ClkSrcSel < 7)))
000004  2c07              CMP      r4,#7
000006  dc03              BGT      |L33.16|
000008  2c03              CMP      r4,#3
00000a  dd03              BLE      |L33.20|
00000c  2c07              CMP      r4,#7
00000e  da01              BGE      |L33.20|
                  |L33.16|
;;;541    	{
;;;542    		return E_DRVSYS_ERR_ARGUMENT;
000010  4807              LDR      r0,|L33.48|
                  |L33.18|
;;;543    	}
;;;544    	else
;;;545    	{
;;;546    		SYSCLK->CLKSEL0.HCLK_S = u8ClkSrcSel;
;;;547    	}
;;;548    	
;;;549    	SystemCoreClockUpdate();
;;;550    	
;;;551    	return 0;
;;;552    }
000012  bd10              POP      {r4,pc}
                  |L33.20|
000014  4807              LDR      r0,|L33.52|
000016  6900              LDR      r0,[r0,#0x10]         ;546
000018  08c0              LSRS     r0,r0,#3              ;546
00001a  00c0              LSLS     r0,r0,#3              ;546
00001c  0761              LSLS     r1,r4,#29             ;546
00001e  0f49              LSRS     r1,r1,#29             ;546
000020  4308              ORRS     r0,r0,r1              ;546
000022  4904              LDR      r1,|L33.52|
000024  6108              STR      r0,[r1,#0x10]         ;546
000026  f7fffffe          BL       SystemCoreClockUpdate
00002a  2000              MOVS     r0,#0                 ;551
00002c  e7f1              B        |L33.18|
;;;553    
                          ENDP

00002e  0000              DCW      0x0000
                  |L33.48|
                          DCD      0xffff9603
                  |L33.52|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SelectIPClockSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectIPClockSource PROC
;;;602    /*---------------------------------------------------------------------------------------------------------*/
;;;603    int32_t DrvSYS_SelectIPClockSource(E_SYS_IP_CLKSRC eIpClkSrc, uint8_t u8ClkSrcSel)
000000  b510              PUSH     {r4,lr}
;;;604    {
000002  4602              MOV      r2,r0
;;;605    	
;;;606    	switch(eIpClkSrc)
000004  4613              MOV      r3,r2
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0ea4              DCB      0x0e,0xa4
00000c  998c7f72          DCB      0x99,0x8c,0x7f,0x72
000010  65584b3e          DCB      0x65,0x58,0x4b,0x3e
000014  33130828          DCB      0x33,0x13,0x08,0x28
000018  1dae              DCB      0x1d,0xae
;;;607    	{
;;;608    		case E_SYS_FRQDIV_CLKSRC:  
;;;609    			SYSCLK->CLKSEL2.FRQDIV_S = u8ClkSrcSel;
00001a  4855              LDR      r0,|L34.368|
00001c  69c0              LDR      r0,[r0,#0x1c]
00001e  230c              MOVS     r3,#0xc
000020  4398              BICS     r0,r0,r3
000022  008b              LSLS     r3,r1,#2
000024  240c              MOVS     r4,#0xc
000026  4023              ANDS     r3,r3,r4
000028  4318              ORRS     r0,r0,r3
00002a  4b51              LDR      r3,|L34.368|
00002c  61d8              STR      r0,[r3,#0x1c]
;;;610    			break;
00002e  e09c              B        |L34.362|
;;;611    		case E_SYS_I2S_CLKSRC:
;;;612    			SYSCLK->CLKSEL2.I2S_S = u8ClkSrcSel;
000030  484f              LDR      r0,|L34.368|
000032  69c0              LDR      r0,[r0,#0x1c]
000034  0880              LSRS     r0,r0,#2
000036  0080              LSLS     r0,r0,#2
000038  078b              LSLS     r3,r1,#30
00003a  0f9b              LSRS     r3,r3,#30
00003c  4318              ORRS     r0,r0,r3
00003e  4b4c              LDR      r3,|L34.368|
000040  61d8              STR      r0,[r3,#0x1c]
;;;613    			break;
000042  e092              B        |L34.362|
;;;614    		case E_SYS_PWM67_CLKSRC:  
;;;615    			SYSCLK->CLKSEL2.PWM67_S = u8ClkSrcSel;
000044  484a              LDR      r0,|L34.368|
000046  69c0              LDR      r0,[r0,#0x1c]
000048  23c0              MOVS     r3,#0xc0
00004a  4398              BICS     r0,r0,r3
00004c  018b              LSLS     r3,r1,#6
00004e  24c0              MOVS     r4,#0xc0
000050  4023              ANDS     r3,r3,r4
000052  4318              ORRS     r0,r0,r3
000054  4b46              LDR      r3,|L34.368|
000056  61d8              STR      r0,[r3,#0x1c]
;;;616    			break;
000058  e087              B        |L34.362|
;;;617    		case E_SYS_PWM45_CLKSRC:
;;;618    			SYSCLK->CLKSEL2.PWM45_S = u8ClkSrcSel;
00005a  4845              LDR      r0,|L34.368|
00005c  69c0              LDR      r0,[r0,#0x1c]
00005e  2330              MOVS     r3,#0x30
000060  4398              BICS     r0,r0,r3
000062  010b              LSLS     r3,r1,#4
000064  2430              MOVS     r4,#0x30
000066  4023              ANDS     r3,r3,r4
000068  4318              ORRS     r0,r0,r3
00006a  4b41              LDR      r3,|L34.368|
00006c  61d8              STR      r0,[r3,#0x1c]
;;;619    			break;
00006e  e07c              B        |L34.362|
;;;620    		case E_SYS_PWM23_CLKSRC:  
;;;621    			SYSCLK->CLKSEL1.PWM23_S = u8ClkSrcSel;
000070  483f              LDR      r0,|L34.368|
000072  6940              LDR      r0,[r0,#0x14]
000074  0080              LSLS     r0,r0,#2
000076  0880              LSRS     r0,r0,#2
000078  078b              LSLS     r3,r1,#30
00007a  0f9b              LSRS     r3,r3,#30
00007c  079b              LSLS     r3,r3,#30
00007e  4318              ORRS     r0,r0,r3
000080  4b3b              LDR      r3,|L34.368|
000082  6158              STR      r0,[r3,#0x14]
;;;622    			break;
000084  e071              B        |L34.362|
;;;623    		case E_SYS_PWM01_CLKSRC:
;;;624    			SYSCLK->CLKSEL1.PWM01_S = u8ClkSrcSel;
000086  483a              LDR      r0,|L34.368|
000088  6940              LDR      r0,[r0,#0x14]
00008a  2303              MOVS     r3,#3
00008c  071b              LSLS     r3,r3,#28
00008e  4398              BICS     r0,r0,r3
000090  070b              LSLS     r3,r1,#28
000092  2403              MOVS     r4,#3
000094  0724              LSLS     r4,r4,#28
000096  4023              ANDS     r3,r3,r4
000098  4318              ORRS     r0,r0,r3
00009a  4b35              LDR      r3,|L34.368|
00009c  6158              STR      r0,[r3,#0x14]
;;;625    			break;
00009e  e064              B        |L34.362|
;;;626    		case E_SYS_CAN_CLKSRC:
;;;627    		    SYSCLK->CLKSEL1.CAN_S = u8ClkSrcSel;
0000a0  4833              LDR      r0,|L34.368|
0000a2  6940              LDR      r0,[r0,#0x14]
0000a4  2303              MOVS     r3,#3
0000a6  069b              LSLS     r3,r3,#26
0000a8  4398              BICS     r0,r0,r3
0000aa  068b              LSLS     r3,r1,#26
0000ac  2403              MOVS     r4,#3
0000ae  06a4              LSLS     r4,r4,#26
0000b0  4023              ANDS     r3,r3,r4
0000b2  4318              ORRS     r0,r0,r3
0000b4  4b2e              LDR      r3,|L34.368|
0000b6  6158              STR      r0,[r3,#0x14]
;;;628    			break;
0000b8  e057              B        |L34.362|
;;;629    		case E_SYS_UART_CLKSRC:
;;;630    		    SYSCLK->CLKSEL1.UART_S = u8ClkSrcSel;
0000ba  482d              LDR      r0,|L34.368|
0000bc  6940              LDR      r0,[r0,#0x14]
0000be  2303              MOVS     r3,#3
0000c0  061b              LSLS     r3,r3,#24
0000c2  4398              BICS     r0,r0,r3
0000c4  060b              LSLS     r3,r1,#24
0000c6  2403              MOVS     r4,#3
0000c8  0624              LSLS     r4,r4,#24
0000ca  4023              ANDS     r3,r3,r4
0000cc  4318              ORRS     r0,r0,r3
0000ce  4b28              LDR      r3,|L34.368|
0000d0  6158              STR      r0,[r3,#0x14]
;;;631    			break;
0000d2  e04a              B        |L34.362|
;;;632    		case E_SYS_TMR3_CLKSRC:
;;;633    		    SYSCLK->CLKSEL1.TMR3_S = u8ClkSrcSel;
0000d4  4826              LDR      r0,|L34.368|
0000d6  6940              LDR      r0,[r0,#0x14]
0000d8  2307              MOVS     r3,#7
0000da  051b              LSLS     r3,r3,#20
0000dc  4398              BICS     r0,r0,r3
0000de  050b              LSLS     r3,r1,#20
0000e0  2407              MOVS     r4,#7
0000e2  0524              LSLS     r4,r4,#20
0000e4  4023              ANDS     r3,r3,r4
0000e6  4318              ORRS     r0,r0,r3
0000e8  4b21              LDR      r3,|L34.368|
0000ea  6158              STR      r0,[r3,#0x14]
;;;634    			break;				
0000ec  e03d              B        |L34.362|
;;;635    		case E_SYS_TMR2_CLKSRC:
;;;636    		    SYSCLK->CLKSEL1.TMR2_S = u8ClkSrcSel;
0000ee  4820              LDR      r0,|L34.368|
0000f0  6940              LDR      r0,[r0,#0x14]
0000f2  2307              MOVS     r3,#7
0000f4  041b              LSLS     r3,r3,#16
0000f6  4398              BICS     r0,r0,r3
0000f8  040b              LSLS     r3,r1,#16
0000fa  2407              MOVS     r4,#7
0000fc  0424              LSLS     r4,r4,#16
0000fe  4023              ANDS     r3,r3,r4
000100  4318              ORRS     r0,r0,r3
000102  4b1b              LDR      r3,|L34.368|
000104  6158              STR      r0,[r3,#0x14]
;;;637    			break;				
000106  e030              B        |L34.362|
;;;638    		case E_SYS_TMR1_CLKSRC:
;;;639    		    SYSCLK->CLKSEL1.TMR1_S = u8ClkSrcSel;
000108  4819              LDR      r0,|L34.368|
00010a  6940              LDR      r0,[r0,#0x14]
00010c  2307              MOVS     r3,#7
00010e  031b              LSLS     r3,r3,#12
000110  4398              BICS     r0,r0,r3
000112  030b              LSLS     r3,r1,#12
000114  2407              MOVS     r4,#7
000116  0324              LSLS     r4,r4,#12
000118  4023              ANDS     r3,r3,r4
00011a  4318              ORRS     r0,r0,r3
00011c  4b14              LDR      r3,|L34.368|
00011e  6158              STR      r0,[r3,#0x14]
;;;640    			break;				
000120  e023              B        |L34.362|
;;;641    		case E_SYS_TMR0_CLKSRC:
;;;642    		    SYSCLK->CLKSEL1.TMR0_S = u8ClkSrcSel;
000122  4813              LDR      r0,|L34.368|
000124  6940              LDR      r0,[r0,#0x14]
000126  2307              MOVS     r3,#7
000128  021b              LSLS     r3,r3,#8
00012a  4398              BICS     r0,r0,r3
00012c  020b              LSLS     r3,r1,#8
00012e  2407              MOVS     r4,#7
000130  0224              LSLS     r4,r4,#8
000132  4023              ANDS     r3,r3,r4
000134  4318              ORRS     r0,r0,r3
000136  4b0e              LDR      r3,|L34.368|
000138  6158              STR      r0,[r3,#0x14]
;;;643    			break;				
00013a  e016              B        |L34.362|
;;;644    		case E_SYS_ADC_CLKSRC:
;;;645    		    SYSCLK->CLKSEL1.ADC_S = u8ClkSrcSel;
00013c  480c              LDR      r0,|L34.368|
00013e  6940              LDR      r0,[r0,#0x14]
000140  230c              MOVS     r3,#0xc
000142  4398              BICS     r0,r0,r3
000144  008b              LSLS     r3,r1,#2
000146  240c              MOVS     r4,#0xc
000148  4023              ANDS     r3,r3,r4
00014a  4318              ORRS     r0,r0,r3
00014c  4b08              LDR      r3,|L34.368|
00014e  6158              STR      r0,[r3,#0x14]
;;;646    			break;				
000150  e00b              B        |L34.362|
;;;647    		case E_SYS_WDT_CLKSRC:
;;;648    		    SYSCLK->CLKSEL1.WDT_S = u8ClkSrcSel;
000152  4807              LDR      r0,|L34.368|
000154  6940              LDR      r0,[r0,#0x14]
000156  0880              LSRS     r0,r0,#2
000158  0080              LSLS     r0,r0,#2
00015a  078b              LSLS     r3,r1,#30
00015c  0f9b              LSRS     r3,r3,#30
00015e  4318              ORRS     r0,r0,r3
000160  4b03              LDR      r3,|L34.368|
000162  6158              STR      r0,[r3,#0x14]
;;;649    			break;				
000164  e001              B        |L34.362|
;;;650    		default:
;;;651    			return E_DRVSYS_ERR_IPSRC;
000166  4803              LDR      r0,|L34.372|
                  |L34.360|
;;;652    	}
;;;653    	
;;;654    	return E_SUCCESS;
;;;655    }
000168  bd10              POP      {r4,pc}
                  |L34.362|
00016a  bf00              NOP                            ;610
00016c  2000              MOVS     r0,#0                 ;654
00016e  e7fb              B        |L34.360|
;;;656    
                          ENDP

                  |L34.368|
                          DCD      0x50000200
                  |L34.372|
                          DCD      0xffff9604

                          AREA ||i.DrvSYS_SelectPLLSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectPLLSource PROC
;;;823    /*---------------------------------------------------------------------------------------------------------*/
;;;824    void DrvSYS_SelectPLLSource(E_SYS_PLL_CLKSRC ePllSrc)
000000  4906              LDR      r1,|L35.28|
;;;825    {
;;;826    	SYSCLK->PLLCON.PLL_SRC = ePllSrc;
000002  6a09              LDR      r1,[r1,#0x20]
000004  2201              MOVS     r2,#1
000006  04d2              LSLS     r2,r2,#19
000008  4391              BICS     r1,r1,r2
00000a  04c2              LSLS     r2,r0,#19
00000c  2301              MOVS     r3,#1
00000e  04db              LSLS     r3,r3,#19
000010  401a              ANDS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4a01              LDR      r2,|L35.28|
000016  6211              STR      r1,[r2,#0x20]
;;;827    }
000018  4770              BX       lr
;;;828    
                          ENDP

00001a  0000              DCW      0x0000
                  |L35.28|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SelectSysTickSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectSysTickSource PROC
;;;570    /*---------------------------------------------------------------------------------------------------------*/
;;;571    int32_t DrvSYS_SelectSysTickSource(uint8_t u8ClkSrcSel)
000000  4601              MOV      r1,r0
;;;572    {
;;;573    	if (u8ClkSrcSel > 7)
000002  2907              CMP      r1,#7
000004  dd01              BLE      |L36.10|
;;;574    	{
;;;575    		return E_DRVSYS_ERR_ARGUMENT;
000006  4807              LDR      r0,|L36.36|
                  |L36.8|
;;;576    	}
;;;577    	else
;;;578    	{
;;;579    		SYSCLK->CLKSEL0.STCLK_S = u8ClkSrcSel;
;;;580    	}
;;;581    	return 0;
;;;582    }
000008  4770              BX       lr
                  |L36.10|
00000a  4807              LDR      r0,|L36.40|
00000c  6900              LDR      r0,[r0,#0x10]         ;579
00000e  2238              MOVS     r2,#0x38              ;579
000010  4390              BICS     r0,r0,r2              ;579
000012  00ca              LSLS     r2,r1,#3              ;579
000014  2338              MOVS     r3,#0x38              ;579
000016  401a              ANDS     r2,r2,r3              ;579
000018  4310              ORRS     r0,r0,r2              ;579
00001a  4a03              LDR      r2,|L36.40|
00001c  6110              STR      r0,[r2,#0x10]         ;579
00001e  2000              MOVS     r0,#0                 ;581
000020  e7f2              B        |L36.8|
;;;583    
                          ENDP

000022  0000              DCW      0x0000
                  |L36.36|
                          DCD      0xffff9603
                  |L36.40|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetBODFunction||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetBODFunction PROC
;;;258    /*---------------------------------------------------------------------------------------------------------*/
;;;259    void DrvSYS_SetBODFunction(int32_t i32Enalbe, int32_t i32Mode, BOD_CALLBACK bodcallbackFn)
000000  b570              PUSH     {r4-r6,lr}
;;;260    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;261    	SYS->BODCR.BOD_EN = i32Enalbe;
000008  2005              MOVS     r0,#5
00000a  0700              LSLS     r0,r0,#28
00000c  6980              LDR      r0,[r0,#0x18]
00000e  0840              LSRS     r0,r0,#1
000010  0040              LSLS     r0,r0,#1
000012  07e1              LSLS     r1,r4,#31
000014  0fc9              LSRS     r1,r1,#31
000016  4308              ORRS     r0,r0,r1
000018  2105              MOVS     r1,#5
00001a  0709              LSLS     r1,r1,#28
00001c  6188              STR      r0,[r1,#0x18]
;;;262    
;;;263    	if (i32Enalbe)
00001e  2c00              CMP      r4,#0
000020  d015              BEQ      |L37.78|
;;;264    	{
;;;265    		SYS->BODCR.BOD_RSTEN = i32Mode;
000022  4608              MOV      r0,r1
000024  6980              LDR      r0,[r0,#0x18]
000026  2108              MOVS     r1,#8
000028  4388              BICS     r0,r0,r1
00002a  00e9              LSLS     r1,r5,#3
00002c  2208              MOVS     r2,#8
00002e  4011              ANDS     r1,r1,r2
000030  4308              ORRS     r0,r0,r1
000032  2105              MOVS     r1,#5
000034  0709              LSLS     r1,r1,#28
000036  6188              STR      r0,[r1,#0x18]
;;;266    	
;;;267    		if (i32Mode)
000038  2d00              CMP      r5,#0
00003a  d003              BEQ      |L37.68|
;;;268    		{		
;;;269    			NVIC_DisableIRQ(BOD_IRQn);
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       NVIC_DisableIRQ
000042  e004              B        |L37.78|
                  |L37.68|
;;;270    		}
;;;271    		else
;;;272    		{ 
;;;273    			BOD_callbackFn = bodcallbackFn;
000044  4802              LDR      r0,|L37.80|
000046  6006              STR      r6,[r0,#0]  ; BOD_callbackFn
;;;274    			NVIC_EnableIRQ(BOD_IRQn);
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       NVIC_EnableIRQ
                  |L37.78|
;;;275    		}
;;;276    	}	
;;;277    }
00004e  bd70              POP      {r4-r6,pc}
;;;278    
                          ENDP

                  |L37.80|
                          DCD      BOD_callbackFn

                          AREA ||i.DrvSYS_SetClockDivider||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetClockDivider PROC
;;;671    /*---------------------------------------------------------------------------------------------------------*/
;;;672    int32_t DrvSYS_SetClockDivider(E_SYS_IP_DIV eIpDiv , int32_t i32value)
000000  b510              PUSH     {r4,lr}
;;;673    {
000002  4602              MOV      r2,r0
;;;674    	if (eIpDiv == E_SYS_ADC_DIV)
000004  2a00              CMP      r2,#0
000006  d10c              BNE      |L38.34|
;;;675    	{
;;;676    	 	SYSCLK->CLKDIV.ADC_N = i32value;
000008  482b              LDR      r0,|L38.184|
00000a  6980              LDR      r0,[r0,#0x18]
00000c  23ff              MOVS     r3,#0xff
00000e  041b              LSLS     r3,r3,#16
000010  4398              BICS     r0,r0,r3
000012  040b              LSLS     r3,r1,#16
000014  24ff              MOVS     r4,#0xff
000016  0424              LSLS     r4,r4,#16
000018  4023              ANDS     r3,r3,r4
00001a  4318              ORRS     r0,r0,r3
00001c  4b26              LDR      r3,|L38.184|
00001e  6198              STR      r0,[r3,#0x18]
000020  e047              B        |L38.178|
                  |L38.34|
;;;677    	}
;;;678    	else if(eIpDiv == E_SYS_CAN_DIV)
000022  2a01              CMP      r2,#1
000024  d11b              BNE      |L38.94|
;;;679    	{
;;;680    		SYSCLK->CLKDIV.CAN_N     =  i32value & 0x00F;
000026  4824              LDR      r0,|L38.184|
000028  6980              LDR      r0,[r0,#0x18]
00002a  230f              MOVS     r3,#0xf
00002c  031b              LSLS     r3,r3,#12
00002e  4398              BICS     r0,r0,r3
000030  030b              LSLS     r3,r1,#12
000032  240f              MOVS     r4,#0xf
000034  0324              LSLS     r4,r4,#12
000036  4023              ANDS     r3,r3,r4
000038  4318              ORRS     r0,r0,r3
00003a  4b1f              LDR      r3,|L38.184|
00003c  6198              STR      r0,[r3,#0x18]
;;;681    		SYSCLK->CLKDIV.CAN_N_EXT = (i32value & 0x3F0)>>4;
00003e  4618              MOV      r0,r3
000040  6980              LDR      r0,[r0,#0x18]
000042  233f              MOVS     r3,#0x3f
000044  061b              LSLS     r3,r3,#24
000046  4398              BICS     r0,r0,r3
000048  151b              ASRS     r3,r3,#20
00004a  400b              ANDS     r3,r3,r1
00004c  111b              ASRS     r3,r3,#4
00004e  061b              LSLS     r3,r3,#24
000050  243f              MOVS     r4,#0x3f
000052  0624              LSLS     r4,r4,#24
000054  4023              ANDS     r3,r3,r4
000056  4318              ORRS     r0,r0,r3
000058  4b17              LDR      r3,|L38.184|
00005a  6198              STR      r0,[r3,#0x18]
00005c  e029              B        |L38.178|
                  |L38.94|
;;;682    	}
;;;683    	else if(eIpDiv == E_SYS_UART_DIV)
00005e  2a02              CMP      r2,#2
000060  d10c              BNE      |L38.124|
;;;684    	{
;;;685    	 	SYSCLK->CLKDIV.UART_N = i32value;
000062  4815              LDR      r0,|L38.184|
000064  6980              LDR      r0,[r0,#0x18]
000066  230f              MOVS     r3,#0xf
000068  021b              LSLS     r3,r3,#8
00006a  4398              BICS     r0,r0,r3
00006c  020b              LSLS     r3,r1,#8
00006e  240f              MOVS     r4,#0xf
000070  0224              LSLS     r4,r4,#8
000072  4023              ANDS     r3,r3,r4
000074  4318              ORRS     r0,r0,r3
000076  4b10              LDR      r3,|L38.184|
000078  6198              STR      r0,[r3,#0x18]
00007a  e01a              B        |L38.178|
                  |L38.124|
;;;686    	}
;;;687    	else if(eIpDiv == E_SYS_USB_DIV)
00007c  2a03              CMP      r2,#3
00007e  d10a              BNE      |L38.150|
;;;688    	{
;;;689    	 	SYSCLK->CLKDIV.USB_N = i32value;
000080  480d              LDR      r0,|L38.184|
000082  6980              LDR      r0,[r0,#0x18]
000084  23f0              MOVS     r3,#0xf0
000086  4398              BICS     r0,r0,r3
000088  010b              LSLS     r3,r1,#4
00008a  24f0              MOVS     r4,#0xf0
00008c  4023              ANDS     r3,r3,r4
00008e  4318              ORRS     r0,r0,r3
000090  4b09              LDR      r3,|L38.184|
000092  6198              STR      r0,[r3,#0x18]
000094  e00d              B        |L38.178|
                  |L38.150|
;;;690    	}
;;;691    	else if(eIpDiv == E_SYS_HCLK_DIV)
000096  2a04              CMP      r2,#4
000098  d109              BNE      |L38.174|
;;;692    	{
;;;693    	 	SYSCLK->CLKDIV.HCLK_N = i32value;
00009a  4807              LDR      r0,|L38.184|
00009c  6980              LDR      r0,[r0,#0x18]
00009e  0900              LSRS     r0,r0,#4
0000a0  0100              LSLS     r0,r0,#4
0000a2  070b              LSLS     r3,r1,#28
0000a4  0f1b              LSRS     r3,r3,#28
0000a6  4318              ORRS     r0,r0,r3
0000a8  4b03              LDR      r3,|L38.184|
0000aa  6198              STR      r0,[r3,#0x18]
0000ac  e001              B        |L38.178|
                  |L38.174|
;;;694    	}
;;;695    	else
;;;696    		return E_DRVSYS_ERR_IPDIV;
0000ae  4803              LDR      r0,|L38.188|
                  |L38.176|
;;;697    
;;;698    	return E_SUCCESS;
;;;699    }
0000b0  bd10              POP      {r4,pc}
                  |L38.178|
0000b2  2000              MOVS     r0,#0                 ;698
0000b4  e7fc              B        |L38.176|
;;;700    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L38.184|
                          DCD      0x50000200
                  |L38.188|
                          DCD      0xffff9605

                          AREA ||i.DrvSYS_SetFreqDividerOutput||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetFreqDividerOutput PROC
;;;1109   /*---------------------------------------------------------------------------------------------------------*/
;;;1110   int32_t DrvSYS_SetFreqDividerOutput(int32_t i32Flag, uint8_t u8Divider)
000000  b530              PUSH     {r4,r5,lr}
;;;1111   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1112   	if (u8Divider > 15)
000006  2d0f              CMP      r5,#0xf
000008  dd01              BLE      |L39.14|
;;;1113   		return E_DRVSYS_ERR_ARGUMENT;
00000a  480e              LDR      r0,|L39.68|
                  |L39.12|
;;;1114   
;;;1115   	if (i32Flag)
;;;1116   	{
;;;1117   		SYSCLK->FRQDIV.FSEL = u8Divider;
;;;1118   	}
;;;1119   	SYSCLK->FRQDIV.FDIV_EN = i32Flag; 		
;;;1120   	DrvSYS_SetIPClock(E_SYS_FDIV_CLK, i32Flag);
;;;1121   
;;;1122   	return E_SUCCESS;
;;;1123   }
00000c  bd30              POP      {r4,r5,pc}
                  |L39.14|
00000e  2c00              CMP      r4,#0                 ;1115
000010  d008              BEQ      |L39.36|
000012  480d              LDR      r0,|L39.72|
000014  6a40              LDR      r0,[r0,#0x24]         ;1117
000016  0900              LSRS     r0,r0,#4              ;1117
000018  0100              LSLS     r0,r0,#4              ;1117
00001a  0729              LSLS     r1,r5,#28             ;1117
00001c  0f09              LSRS     r1,r1,#28             ;1117
00001e  4308              ORRS     r0,r0,r1              ;1117
000020  4909              LDR      r1,|L39.72|
000022  6248              STR      r0,[r1,#0x24]         ;1117
                  |L39.36|
000024  4808              LDR      r0,|L39.72|
000026  6a40              LDR      r0,[r0,#0x24]         ;1119
000028  2110              MOVS     r1,#0x10              ;1119
00002a  4388              BICS     r0,r0,r1              ;1119
00002c  0121              LSLS     r1,r4,#4              ;1119
00002e  2210              MOVS     r2,#0x10              ;1119
000030  4011              ANDS     r1,r1,r2              ;1119
000032  4308              ORRS     r0,r0,r1              ;1119
000034  4904              LDR      r1,|L39.72|
000036  6248              STR      r0,[r1,#0x24]         ;1119
000038  4621              MOV      r1,r4                 ;1120
00003a  2006              MOVS     r0,#6                 ;1120
00003c  f7fffffe          BL       DrvSYS_SetIPClock
000040  2000              MOVS     r0,#0                 ;1122
000042  e7e3              B        |L39.12|
;;;1124   
                          ENDP

                  |L39.68|
                          DCD      0xffff9603
                  |L39.72|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetIPClock||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetIPClock PROC
;;;489    /*---------------------------------------------------------------------------------------------------------*/
;;;490    void DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable)
000000  b530              PUSH     {r4,r5,lr}
;;;491    {	
;;;492    	uint32_t u32Reg;
;;;493    
;;;494    	if (eIpClk == E_SYS_PDMA_CLK)
000002  2821              CMP      r0,#0x21
000004  d10a              BNE      |L40.28|
;;;495    	{
;;;496    		SYSCLK->AHBCLK.PDMA_EN = i32Enable;
000006  4b1b              LDR      r3,|L40.116|
000008  685b              LDR      r3,[r3,#4]
00000a  2402              MOVS     r4,#2
00000c  43a3              BICS     r3,r3,r4
00000e  004c              LSLS     r4,r1,#1
000010  2502              MOVS     r5,#2
000012  402c              ANDS     r4,r4,r5
000014  4323              ORRS     r3,r3,r4
000016  4c17              LDR      r4,|L40.116|
000018  6063              STR      r3,[r4,#4]
00001a  e029              B        |L40.112|
                  |L40.28|
;;;497    	}
;;;498    	else if (eIpClk == E_SYS_EBI_CLK)
00001c  2823              CMP      r0,#0x23
00001e  d10a              BNE      |L40.54|
;;;499    	{
;;;500    		SYSCLK->AHBCLK.EBI_EN = i32Enable;
000020  4b14              LDR      r3,|L40.116|
000022  685b              LDR      r3,[r3,#4]
000024  2408              MOVS     r4,#8
000026  43a3              BICS     r3,r3,r4
000028  00cc              LSLS     r4,r1,#3
00002a  2508              MOVS     r5,#8
00002c  402c              ANDS     r4,r4,r5
00002e  4323              ORRS     r3,r3,r4
000030  4c10              LDR      r4,|L40.116|
000032  6063              STR      r3,[r4,#4]
000034  e01c              B        |L40.112|
                  |L40.54|
;;;501    	}
;;;502    	else if (eIpClk == E_SYS_ISP_CLK)
000036  2822              CMP      r0,#0x22
000038  d10a              BNE      |L40.80|
;;;503    	{
;;;504    		SYSCLK->AHBCLK.ISP_EN = i32Enable;
00003a  4b0e              LDR      r3,|L40.116|
00003c  685b              LDR      r3,[r3,#4]
00003e  2404              MOVS     r4,#4
000040  43a3              BICS     r3,r3,r4
000042  008c              LSLS     r4,r1,#2
000044  2504              MOVS     r5,#4
000046  402c              ANDS     r4,r4,r5
000048  4323              ORRS     r3,r3,r4
00004a  4c0a              LDR      r4,|L40.116|
00004c  6063              STR      r3,[r4,#4]
00004e  e00f              B        |L40.112|
                  |L40.80|
;;;505    	}
;;;506    	else
;;;507    	{
;;;508    		u32Reg = *((__IO uint32_t *) &SYSCLK->APBCLK);
000050  4b08              LDR      r3,|L40.116|
000052  689a              LDR      r2,[r3,#8]
;;;509    		
;;;510    		if (i32Enable)
000054  2900              CMP      r1,#0
000056  d005              BEQ      |L40.100|
;;;511    		{
;;;512    			*((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg | (1<<eIpClk);
000058  2301              MOVS     r3,#1
00005a  4083              LSLS     r3,r3,r0
00005c  4313              ORRS     r3,r3,r2
00005e  4c05              LDR      r4,|L40.116|
000060  60a3              STR      r3,[r4,#8]
000062  e005              B        |L40.112|
                  |L40.100|
;;;513    		}
;;;514    		else
;;;515    		{
;;;516    			*((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg & ~(1<<eIpClk);
000064  2301              MOVS     r3,#1
000066  4083              LSLS     r3,r3,r0
000068  4614              MOV      r4,r2
00006a  439c              BICS     r4,r4,r3
00006c  4b01              LDR      r3,|L40.116|
00006e  609c              STR      r4,[r3,#8]
                  |L40.112|
;;;517    		}
;;;518    	}
;;;519    }
000070  bd30              POP      {r4,r5,pc}
;;;520    
                          ENDP

000072  0000              DCW      0x0000
                  |L40.116|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetOscCtrl||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetOscCtrl PROC
;;;715    /*---------------------------------------------------------------------------------------------------------*/
;;;716    int32_t DrvSYS_SetOscCtrl(E_SYS_CHIP_CLKSRC eClkSrc, int32_t i32Enable)
000000  b510              PUSH     {r4,lr}
;;;717    {	
000002  4602              MOV      r2,r0
;;;718    	switch(eClkSrc)
000004  2a00              CMP      r2,#0
000006  d006              BEQ      |L41.22|
000008  2a01              CMP      r2,#1
00000a  d00e              BEQ      |L41.42|
00000c  2a02              CMP      r2,#2
00000e  d017              BEQ      |L41.64|
000010  2a03              CMP      r2,#3
000012  d12b              BNE      |L41.108|
000014  e01f              B        |L41.86|
                  |L41.22|
;;;719    	{
;;;720    		case E_SYS_XTL12M:  
;;;721    			SYSCLK->PWRCON.XTL12M_EN = i32Enable;
000016  4818              LDR      r0,|L41.120|
000018  6800              LDR      r0,[r0,#0]
00001a  0840              LSRS     r0,r0,#1
00001c  0040              LSLS     r0,r0,#1
00001e  07cb              LSLS     r3,r1,#31
000020  0fdb              LSRS     r3,r3,#31
000022  4318              ORRS     r0,r0,r3
000024  4b14              LDR      r3,|L41.120|
000026  6018              STR      r0,[r3,#0]
;;;722    			break;
000028  e022              B        |L41.112|
                  |L41.42|
;;;723    		case E_SYS_XTL32K:
;;;724    			SYSCLK->PWRCON.XTL32K_EN = i32Enable;
00002a  4813              LDR      r0,|L41.120|
00002c  6800              LDR      r0,[r0,#0]
00002e  2302              MOVS     r3,#2
000030  4398              BICS     r0,r0,r3
000032  004b              LSLS     r3,r1,#1
000034  2402              MOVS     r4,#2
000036  4023              ANDS     r3,r3,r4
000038  4318              ORRS     r0,r0,r3
00003a  4b0f              LDR      r3,|L41.120|
00003c  6018              STR      r0,[r3,#0]
;;;725    			break;
00003e  e017              B        |L41.112|
                  |L41.64|
;;;726    		case E_SYS_OSC22M:
;;;727    		    SYSCLK->PWRCON.OSC22M_EN = i32Enable;
000040  480d              LDR      r0,|L41.120|
000042  6800              LDR      r0,[r0,#0]
000044  2304              MOVS     r3,#4
000046  4398              BICS     r0,r0,r3
000048  008b              LSLS     r3,r1,#2
00004a  2404              MOVS     r4,#4
00004c  4023              ANDS     r3,r3,r4
00004e  4318              ORRS     r0,r0,r3
000050  4b09              LDR      r3,|L41.120|
000052  6018              STR      r0,[r3,#0]
;;;728    			break;
000054  e00c              B        |L41.112|
                  |L41.86|
;;;729    		case E_SYS_OSC10K:
;;;730    		    SYSCLK->PWRCON.OSC10K_EN = i32Enable;
000056  4808              LDR      r0,|L41.120|
000058  6800              LDR      r0,[r0,#0]
00005a  2308              MOVS     r3,#8
00005c  4398              BICS     r0,r0,r3
00005e  00cb              LSLS     r3,r1,#3
000060  2408              MOVS     r4,#8
000062  4023              ANDS     r3,r3,r4
000064  4318              ORRS     r0,r0,r3
000066  4b04              LDR      r3,|L41.120|
000068  6018              STR      r0,[r3,#0]
;;;731    			break;				
00006a  e001              B        |L41.112|
                  |L41.108|
;;;732    		default:
;;;733    			return E_DRVSYS_ERR_ARGUMENT;
00006c  4803              LDR      r0,|L41.124|
                  |L41.110|
;;;734    	}
;;;735    	
;;;736    	return E_SUCCESS;
;;;737    }
00006e  bd10              POP      {r4,pc}
                  |L41.112|
000070  bf00              NOP                            ;722
000072  2000              MOVS     r0,#0                 ;736
000074  e7fb              B        |L41.110|
;;;738    
                          ENDP

000076  0000              DCW      0x0000
                  |L41.120|
                          DCD      0x50000200
                  |L41.124|
                          DCD      0xffff9603

                          AREA ||i.DrvSYS_SetPLLContent||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetPLLContent PROC
;;;947    /*---------------------------------------------------------------------------------------------------------*/
;;;948    void DrvSYS_SetPLLContent(uint32_t u32PllContent)
000000  4911              LDR      r1,|L42.72|
;;;949    {
;;;950    	SYSCLK->PLLCON.FB_DV  = (u32PllContent & 0x01FF);
000002  6a09              LDR      r1,[r1,#0x20]
000004  0a49              LSRS     r1,r1,#9
000006  0249              LSLS     r1,r1,#9
000008  05c2              LSLS     r2,r0,#23
00000a  0dd2              LSRS     r2,r2,#23
00000c  4311              ORRS     r1,r1,r2
00000e  4a0e              LDR      r2,|L42.72|
000010  6211              STR      r1,[r2,#0x20]
;;;951    	SYSCLK->PLLCON.IN_DV  = (u32PllContent >> 9) & 0x1F;
000012  4611              MOV      r1,r2
000014  6a09              LDR      r1,[r1,#0x20]
000016  221f              MOVS     r2,#0x1f
000018  0252              LSLS     r2,r2,#9
00001a  4391              BICS     r1,r1,r2
00001c  0a42              LSRS     r2,r0,#9
00001e  0252              LSLS     r2,r2,#9
000020  231f              MOVS     r3,#0x1f
000022  025b              LSLS     r3,r3,#9
000024  401a              ANDS     r2,r2,r3
000026  4311              ORRS     r1,r1,r2
000028  4a07              LDR      r2,|L42.72|
00002a  6211              STR      r1,[r2,#0x20]
;;;952    	SYSCLK->PLLCON.OUT_DV = (u32PllContent >> 14) & 0x03;
00002c  4611              MOV      r1,r2
00002e  6a09              LDR      r1,[r1,#0x20]
000030  2203              MOVS     r2,#3
000032  0392              LSLS     r2,r2,#14
000034  4391              BICS     r1,r1,r2
000036  0b82              LSRS     r2,r0,#14
000038  0392              LSLS     r2,r2,#14
00003a  2303              MOVS     r3,#3
00003c  039b              LSLS     r3,r3,#14
00003e  401a              ANDS     r2,r2,r3
000040  4311              ORRS     r1,r1,r2
000042  4a01              LDR      r2,|L42.72|
000044  6211              STR      r1,[r2,#0x20]
;;;953    }
000046  4770              BX       lr
;;;954    
                          ENDP

                  |L42.72|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetPLLMode||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetPLLMode PROC
;;;840    /*---------------------------------------------------------------------------------------------------------*/
;;;841    void DrvSYS_SetPLLMode(int32_t i32Flag)
000000  490b              LDR      r1,|L43.48|
;;;842    {
;;;843        SYSCLK->PLLCON.OE = i32Flag;
000002  6a09              LDR      r1,[r1,#0x20]
000004  2201              MOVS     r2,#1
000006  0492              LSLS     r2,r2,#18
000008  4391              BICS     r1,r1,r2
00000a  0482              LSLS     r2,r0,#18
00000c  2301              MOVS     r3,#1
00000e  049b              LSLS     r3,r3,#18
000010  401a              ANDS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4a06              LDR      r2,|L43.48|
000016  6211              STR      r1,[r2,#0x20]
;;;844    	SYSCLK->PLLCON.PD = i32Flag;
000018  4611              MOV      r1,r2
00001a  6a09              LDR      r1,[r1,#0x20]
00001c  01d2              LSLS     r2,r2,#7
00001e  4391              BICS     r1,r1,r2
000020  0402              LSLS     r2,r0,#16
000022  109b              ASRS     r3,r3,#2
000024  401a              ANDS     r2,r2,r3
000026  4311              ORRS     r1,r1,r2
000028  4a01              LDR      r2,|L43.48|
00002a  6211              STR      r1,[r2,#0x20]
;;;845    }
00002c  4770              BX       lr
;;;846    
                          ENDP

00002e  0000              DCW      0x0000
                  |L43.48|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetPowerDownWakeUpInt||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetPowerDownWakeUpInt PROC
;;;773    /*---------------------------------------------------------------------------------------------------------*/
;;;774    void DrvSYS_SetPowerDownWakeUpInt(int32_t i32Enable, PWRWU_CALLBACK pdwucallbackFn, int32_t i32enWUDelay)
000000  b570              PUSH     {r4-r6,lr}
;;;775    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;776    	SYSCLK->PWRCON.PD_WU_INT_EN = i32Enable;
000008  4814              LDR      r0,|L44.92|
00000a  6800              LDR      r0,[r0,#0]
00000c  2120              MOVS     r1,#0x20
00000e  4388              BICS     r0,r0,r1
000010  0161              LSLS     r1,r4,#5
000012  2220              MOVS     r2,#0x20
000014  4011              ANDS     r1,r1,r2
000016  4308              ORRS     r0,r0,r1
000018  4910              LDR      r1,|L44.92|
00001a  6008              STR      r0,[r1,#0]
;;;777    	
;;;778    	if (i32Enable)
00001c  2c00              CMP      r4,#0
00001e  d00f              BEQ      |L44.64|
;;;779    	{		
;;;780    		SYSCLK->PWRCON.PD_WU_DLY = i32enWUDelay;
000020  4608              MOV      r0,r1
000022  6800              LDR      r0,[r0,#0]
000024  2110              MOVS     r1,#0x10
000026  4388              BICS     r0,r0,r1
000028  0131              LSLS     r1,r6,#4
00002a  2210              MOVS     r2,#0x10
00002c  4011              ANDS     r1,r1,r2
00002e  4308              ORRS     r0,r0,r1
000030  490a              LDR      r1,|L44.92|
000032  6008              STR      r0,[r1,#0]
;;;781    		PWRWU_callbackFn = pdwucallbackFn;
000034  480a              LDR      r0,|L44.96|
000036  6005              STR      r5,[r0,#0]  ; PWRWU_callbackFn
;;;782    		NVIC_EnableIRQ(PWRWU_IRQn);
000038  201c              MOVS     r0,#0x1c
00003a  f7fffffe          BL       NVIC_EnableIRQ
00003e  e00b              B        |L44.88|
                  |L44.64|
;;;783    	}
;;;784    	else
;;;785    	{ 
;;;786    		SYSCLK->PWRCON.PD_WU_DLY = 0;
000040  4806              LDR      r0,|L44.92|
000042  6800              LDR      r0,[r0,#0]
000044  2110              MOVS     r1,#0x10
000046  4388              BICS     r0,r0,r1
000048  4904              LDR      r1,|L44.92|
00004a  6008              STR      r0,[r1,#0]
;;;787    		PWRWU_callbackFn = NULL;
00004c  2000              MOVS     r0,#0
00004e  4904              LDR      r1,|L44.96|
000050  6008              STR      r0,[r1,#0]  ; PWRWU_callbackFn
;;;788    		NVIC_DisableIRQ(PWRWU_IRQn);
000052  201c              MOVS     r0,#0x1c
000054  f7fffffe          BL       NVIC_DisableIRQ
                  |L44.88|
;;;789    	}	
;;;790    }
000058  bd70              POP      {r4-r6,pc}
;;;791    
                          ENDP

00005a  0000              DCW      0x0000
                  |L44.92|
                          DCD      0x50000200
                  |L44.96|
                          DCD      PWRWU_callbackFn

                          AREA ||i.DrvSYS_SetRCAdjValue||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetRCAdjValue PROC
;;;445    /*---------------------------------------------------------------------------------------------------------*/
;;;446    void DrvSYS_SetRCAdjValue(uint32_t u32Adj)
000000  4901              LDR      r1,|L45.8|
;;;447    {
;;;448    	SYS->RCADJ = u32Adj;
000002  6108              STR      r0,[r1,#0x10]
;;;449    }
000004  4770              BX       lr
;;;450    
                          ENDP

000006  0000              DCW      0x0000
                  |L45.8|
                          DCD      0x50000100

                          AREA ||i.DrvSYS_UnlockProtectedReg||, CODE, READONLY, ALIGN=2

                  DrvSYS_UnlockProtectedReg PROC
;;;66     /*---------------------------------------------------------------------------------------------------------*/
;;;67     int32_t DrvSYS_UnlockProtectedReg(void)
000000  2059              MOVS     r0,#0x59
;;;68     {
;;;69     	uint32_t lockbit;
;;;70     	
;;;71     	SYS->REGLOCK = 0x59;
000002  4a08              LDR      r2,|L46.36|
000004  6010              STR      r0,[r2,#0]
;;;72     	SYS->REGLOCK = 0x16;
000006  2016              MOVS     r0,#0x16
000008  6010              STR      r0,[r2,#0]
;;;73     	SYS->REGLOCK = 0x88;
00000a  2088              MOVS     r0,#0x88
00000c  6010              STR      r0,[r2,#0]
;;;74     
;;;75     	lockbit = SYS->REGLOCK & 0x01;
00000e  4610              MOV      r0,r2
000010  6800              LDR      r0,[r0,#0]
000012  07c1              LSLS     r1,r0,#31
000014  0fc9              LSRS     r1,r1,#31
;;;76     	return (lockbit)? 0 : E_DRVSYS_ERR_UNLOCK_FAIL;
000016  2900              CMP      r1,#0
000018  d001              BEQ      |L46.30|
00001a  2000              MOVS     r0,#0
                  |L46.28|
;;;77     } 
00001c  4770              BX       lr
                  |L46.30|
00001e  4802              LDR      r0,|L46.40|
000020  e7fc              B        |L46.28|
;;;78      
                          ENDP

000022  0000              DCW      0x0000
                  |L46.36|
                          DCD      0x50000100
                  |L46.40|
                          DCD      0xffff9601

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L47.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L47.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L48.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L48.16|
                          DCD      0xe000e100

                          AREA ||i.PWRWU_IRQHandler||, CODE, READONLY, ALIGN=2

                  PWRWU_IRQHandler PROC
;;;749    /*---------------------------------------------------------------------------------------------------------*/
;;;750    void PWRWU_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;751    {
;;;752    	SYSCLK->PWRCON.PD_WU_STS = 1;
000002  4807              LDR      r0,|L49.32|
000004  6800              LDR      r0,[r0,#0]
000006  2140              MOVS     r1,#0x40
000008  4388              BICS     r0,r0,r1
00000a  3040              ADDS     r0,r0,#0x40
00000c  4904              LDR      r1,|L49.32|
00000e  6008              STR      r0,[r1,#0]
;;;753    	if (PWRWU_callbackFn != NULL)
000010  4804              LDR      r0,|L49.36|
000012  6800              LDR      r0,[r0,#0]  ; PWRWU_callbackFn
000014  2800              CMP      r0,#0
000016  d002              BEQ      |L49.30|
;;;754    		PWRWU_callbackFn();	
000018  4802              LDR      r0,|L49.36|
00001a  6800              LDR      r0,[r0,#0]  ; PWRWU_callbackFn
00001c  4780              BLX      r0
                  |L49.30|
;;;755    }
00001e  bd10              POP      {r4,pc}
;;;756    
                          ENDP

                  |L49.32|
                          DCD      0x50000200
                  |L49.36|
                          DCD      PWRWU_callbackFn

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000004

                          AREA ||.data||, DATA, ALIGN=2

                  BOD_callbackFn
                          DCD      0x00000000
                  PWRWU_callbackFn
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L302.16|
00000e  461d              MOV      r5,r3
                  |L302.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

