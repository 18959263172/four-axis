; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvps2.o --depend=.\obj\drvps2.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0 -I..\CMSIS\NUC1xx -I..\BSP_Lib\Inc\Driver -I..\BSP_Lib\Inc\NUC1xx-LB_002 -I..\BSP_Lib\Inc\System -I..\BSP_Lib\Inc\USB -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\?ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvps2.crf ..\BSP_Lib\Src\Driver\DrvPS2.c]
                          THUMB

                          AREA ||i.DrvPS2_ClearInt||, CODE, READONLY, ALIGN=2

                  DrvPS2_ClearInt PROC
;;;196    uint32_t
;;;197    DrvPS2_ClearInt(
000000  4601              MOV      r1,r0
;;;198    	uint32_t	u32InterruptFlag
;;;199    )
;;;200    {
;;;201    	//Write '1' to clear int
;;;202    	
;;;203    	if((u32InterruptFlag & DRVPS2_RXINT) == DRVPS2_RXINT)	   
000002  07c8              LSLS     r0,r1,#31
000004  0fc0              LSRS     r0,r0,#31
000006  2801              CMP      r0,#1
000008  d101              BNE      |L1.14|
;;;204    		_DRVPS2_INTCLR(1);
00000a  4a05              LDR      r2,|L1.32|
00000c  61d0              STR      r0,[r2,#0x1c]
                  |L1.14|
;;;205    
;;;206    	if((u32InterruptFlag & DRVPS2_TXINT) == DRVPS2_TXINT)
00000e  2002              MOVS     r0,#2
000010  4008              ANDS     r0,r0,r1
000012  2802              CMP      r0,#2
000014  d101              BNE      |L1.26|
;;;207    		_DRVPS2_INTCLR(2);
000016  4a02              LDR      r2,|L1.32|
000018  61d0              STR      r0,[r2,#0x1c]
                  |L1.26|
;;;208    
;;;209    	return E_SUCCESS;
00001a  2000              MOVS     r0,#0
;;;210    
;;;211    
;;;212    }	
00001c  4770              BX       lr
;;;213    
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x40100000

                          AREA ||i.DrvPS2_Close||, CODE, READONLY, ALIGN=2

                  DrvPS2_Close PROC
;;;70     
;;;71     void DrvPS2_Close()
000000  4811              LDR      r0,|L2.72|
;;;72     {
;;;73     	PS2->PS2CON.PS2EN = 0;
000002  6800              LDR      r0,[r0,#0]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  490f              LDR      r1,|L2.72|
00000a  6008              STR      r0,[r1,#0]
;;;74     	SYSCLK->APBCLK.PS2_EN = 0;
00000c  480f              LDR      r0,|L2.76|
00000e  6880              LDR      r0,[r0,#8]
000010  0040              LSLS     r0,r0,#1
000012  0840              LSRS     r0,r0,#1
000014  490d              LDR      r1,|L2.76|
000016  6088              STR      r0,[r1,#8]
;;;75     	
;;;76     	SYS->IPRSTC2.PS2_RST = 1;
000018  2005              MOVS     r0,#5
00001a  0700              LSLS     r0,r0,#28
00001c  68c0              LDR      r0,[r0,#0xc]
00001e  0389              LSLS     r1,r1,#14
000020  4388              BICS     r0,r0,r1
000022  1840              ADDS     r0,r0,r1
000024  2105              MOVS     r1,#5
000026  0709              LSLS     r1,r1,#28
000028  60c8              STR      r0,[r1,#0xc]
;;;77         SYS->IPRSTC2.PS2_RST = 0;
00002a  4608              MOV      r0,r1
00002c  68c0              LDR      r0,[r0,#0xc]
00002e  2101              MOVS     r1,#1
000030  05c9              LSLS     r1,r1,#23
000032  4388              BICS     r0,r0,r1
000034  2105              MOVS     r1,#5
000036  0709              LSLS     r1,r1,#28
000038  60c8              STR      r0,[r1,#0xc]
;;;78         
;;;79         PS2->PS2CON.TXFIFO_DEPTH = 0;
00003a  4803              LDR      r0,|L2.72|
00003c  6800              LDR      r0,[r0,#0]
00003e  2178              MOVS     r1,#0x78
000040  4388              BICS     r0,r0,r1
000042  4901              LDR      r1,|L2.72|
000044  6008              STR      r0,[r1,#0]
;;;80     }
000046  4770              BX       lr
;;;81     
                          ENDP

                  |L2.72|
                          DCD      0x40100000
                  |L2.76|
                          DCD      0x50000200

                          AREA ||i.DrvPS2_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvPS2_DisableInt PROC
;;;168     
;;;169    void DrvPS2_DisableInt(
000000  2102              MOVS     r1,#2
;;;170    	uint32_t	u32InterruptFlag
;;;171    )
;;;172    {
;;;173    	if(u32InterruptFlag & DRVPS2_TXINT)
000002  4208              TST      r0,r1
000004  d005              BEQ      |L3.18|
;;;174    		_DRVPS2_TXINTDISABLE();
000006  490d              LDR      r1,|L3.60|
000008  6809              LDR      r1,[r1,#0]
00000a  2202              MOVS     r2,#2
00000c  4391              BICS     r1,r1,r2
00000e  4a0b              LDR      r2,|L3.60|
000010  6011              STR      r1,[r2,#0]
                  |L3.18|
;;;175    	if(u32InterruptFlag & DRVPS2_RXINT)
000012  07c1              LSLS     r1,r0,#31
000014  0fc9              LSRS     r1,r1,#31
000016  d005              BEQ      |L3.36|
;;;176    		_DRVPS2_RXINTDISABLE();
000018  4908              LDR      r1,|L3.60|
00001a  6809              LDR      r1,[r1,#0]
00001c  2204              MOVS     r2,#4
00001e  4391              BICS     r1,r1,r2
000020  4a06              LDR      r2,|L3.60|
000022  6011              STR      r1,[r2,#0]
                  |L3.36|
;;;177    
;;;178    	g_pfnPS2callback = NULL;
000024  2100              MOVS     r1,#0
000026  4a06              LDR      r2,|L3.64|
000028  6011              STR      r1,[r2,#0]  ; g_pfnPS2callback
;;;179        NVIC_DisableIRQ(PS2_IRQn);
00002a  bf00              NOP      
00002c  2118              MOVS     r1,#0x18
00002e  2201              MOVS     r2,#1
000030  408a              LSLS     r2,r2,r1
000032  4904              LDR      r1,|L3.68|
000034  600a              STR      r2,[r1,#0]
000036  bf00              NOP      
;;;180    
;;;181    }
000038  4770              BX       lr
;;;182    
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      0x40100000
                  |L3.64|
                          DCD      g_pfnPS2callback
                  |L3.68|
                          DCD      0xe000e180

                          AREA ||i.DrvPS2_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvPS2_EnableInt PROC
;;;113    int32_t
;;;114    DrvPS2_EnableInt(
000000  b570              PUSH     {r4-r6,lr}
;;;115    	uint32_t  u32InterruptFlag,
;;;116    	PFN_DRVPS2_CALLBACK pfncallback
;;;117    )
;;;118    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;119    
;;;120    	PS2->PS2CON.TXINTEN = (u32InterruptFlag & DRVPS2_TXINT)?1:0;
000006  4812              LDR      r0,|L4.80|
000008  6800              LDR      r0,[r0,#0]
00000a  2102              MOVS     r1,#2
00000c  4388              BICS     r0,r0,r1
00000e  4021              ANDS     r1,r1,r4
000010  0849              LSRS     r1,r1,#1
000012  0049              LSLS     r1,r1,#1
000014  2202              MOVS     r2,#2
000016  4011              ANDS     r1,r1,r2
000018  4308              ORRS     r0,r0,r1
00001a  490d              LDR      r1,|L4.80|
00001c  6008              STR      r0,[r1,#0]
;;;121    	PS2->PS2CON.RXINTEN = (u32InterruptFlag & DRVPS2_RXINT)?1:0;
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  2104              MOVS     r1,#4
000024  4388              BICS     r0,r0,r1
000026  00a1              LSLS     r1,r4,#2
000028  2204              MOVS     r2,#4
00002a  4011              ANDS     r1,r1,r2
00002c  4308              ORRS     r0,r0,r1
00002e  4908              LDR      r1,|L4.80|
000030  6008              STR      r0,[r1,#0]
;;;122    
;;;123    	g_pfnPS2callback = pfncallback;
000032  4808              LDR      r0,|L4.84|
000034  6005              STR      r5,[r0,#0]  ; g_pfnPS2callback
;;;124    	
;;;125    	NVIC_SetPriority (PS2_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
000036  2103              MOVS     r1,#3
000038  2018              MOVS     r0,#0x18
00003a  f7fffffe          BL       NVIC_SetPriority
;;;126    	NVIC_EnableIRQ(PS2_IRQn);
00003e  bf00              NOP      
000040  2018              MOVS     r0,#0x18
000042  2101              MOVS     r1,#1
000044  4081              LSLS     r1,r1,r0
000046  4804              LDR      r0,|L4.88|
000048  6001              STR      r1,[r0,#0]
00004a  bf00              NOP      
;;;127    
;;;128    	return E_SUCCESS;
00004c  2000              MOVS     r0,#0
;;;129    
;;;130    }
00004e  bd70              POP      {r4-r6,pc}
;;;131    
                          ENDP

                  |L4.80|
                          DCD      0x40100000
                  |L4.84|
                          DCD      g_pfnPS2callback
                  |L4.88|
                          DCD      0xe000e100

                          AREA ||i.DrvPS2_GetIntStatus||, CODE, READONLY, ALIGN=2

                  DrvPS2_GetIntStatus PROC
;;;227    int8_t
;;;228    DrvPS2_GetIntStatus(
000000  4601              MOV      r1,r0
;;;229    	uint32_t	u32InterruptFlag
;;;230    )
;;;231    {	
;;;232    	switch(u32InterruptFlag)
000002  2901              CMP      r1,#1
000004  d002              BEQ      |L5.12|
000006  2902              CMP      r1,#2
000008  d110              BNE      |L5.44|
00000a  e007              B        |L5.28|
                  |L5.12|
;;;233    	{
;;;234    		case DRVPS2_RXINT:
;;;235    			if(PS2->INTID & DRVPS2_RXINT)		  	// Rx interrupt
00000c  4809              LDR      r0,|L5.52|
00000e  69c0              LDR      r0,[r0,#0x1c]
000010  07c0              LSLS     r0,r0,#31
000012  0fc0              LSRS     r0,r0,#31
000014  d001              BEQ      |L5.26|
;;;236    				return TRUE;
000016  2001              MOVS     r0,#1
                  |L5.24|
;;;237    			break;
;;;238    		case DRVPS2_TXINT:
;;;239    			if(PS2->INTID & DRVPS2_TXINT)		    // Tx interrupt
;;;240    				return TRUE;
;;;241    			break;
;;;242    		default:
;;;243    			break;
;;;244    	}
;;;245    
;;;246    	
;;;247    	return FALSE;
;;;248    }
000018  4770              BX       lr
                  |L5.26|
00001a  e008              B        |L5.46|
                  |L5.28|
00001c  4805              LDR      r0,|L5.52|
00001e  69c0              LDR      r0,[r0,#0x1c]         ;239
000020  2202              MOVS     r2,#2                 ;239
000022  4210              TST      r0,r2                 ;239
000024  d001              BEQ      |L5.42|
000026  2001              MOVS     r0,#1                 ;240
000028  e7f6              B        |L5.24|
                  |L5.42|
00002a  e000              B        |L5.46|
                  |L5.44|
00002c  bf00              NOP                            ;243
                  |L5.46|
00002e  bf00              NOP                            ;237
000030  2000              MOVS     r0,#0                 ;247
000032  e7f1              B        |L5.24|
;;;249    
                          ENDP

                  |L5.52|
                          DCD      0x40100000

                          AREA ||i.DrvPS2_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvPS2_GetVersion PROC
;;;371    int32_t
;;;372    DrvPS2_GetVersion(void)
000000  4800              LDR      r0,|L6.4|
;;;373    {
;;;374    	return _DRVPS2_VERSION_NUM;
;;;375    	
;;;376    }
000002  4770              BX       lr
;;;377    
                          ENDP

                  |L6.4|
                          DCD      0x00010202

                          AREA ||i.DrvPS2_IsIntEnabled||, CODE, READONLY, ALIGN=2

                  DrvPS2_IsIntEnabled PROC
;;;145    uint32_t 
;;;146    DrvPS2_IsIntEnabled(
000000  4601              MOV      r1,r0
;;;147    	uint32_t	u32InterruptFlag
;;;148    )
;;;149    {
;;;150    	uint32_t u32Reg = *((uint32_t *)&(PS2->PS2CON));
000002  4803              LDR      r0,|L7.16|
000004  6802              LDR      r2,[r0,#0]
;;;151    	return (u32Reg &
000006  0788              LSLS     r0,r1,#30
000008  0f80              LSRS     r0,r0,#30
00000a  4010              ANDS     r0,r0,r2
;;;152    		 (u32InterruptFlag & (DRVPS2_RXINT | DRVPS2_TXINT)));
;;;153    }
00000c  4770              BX       lr
;;;154    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40100000

                          AREA ||i.DrvPS2_Open||, CODE, READONLY, ALIGN=2

                  DrvPS2_Open PROC
;;;41     /*---------------------------------------------------------------------------------------------------------*/
;;;42     int32_t DrvPS2_Open()
000000  2005              MOVS     r0,#5
;;;43     {
;;;44     	SYS->IPRSTC2.PS2_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  68c0              LDR      r0,[r0,#0xc]
000006  2101              MOVS     r1,#1
000008  05c9              LSLS     r1,r1,#23
00000a  4388              BICS     r0,r0,r1
00000c  1840              ADDS     r0,r0,r1
00000e  2105              MOVS     r1,#5
000010  0709              LSLS     r1,r1,#28
000012  60c8              STR      r0,[r1,#0xc]
;;;45         SYS->IPRSTC2.PS2_RST = 0;
000014  4608              MOV      r0,r1
000016  68c0              LDR      r0,[r0,#0xc]
000018  2101              MOVS     r1,#1
00001a  05c9              LSLS     r1,r1,#23
00001c  4388              BICS     r0,r0,r1
00001e  2105              MOVS     r1,#5
000020  0709              LSLS     r1,r1,#28
000022  60c8              STR      r0,[r1,#0xc]
;;;46     
;;;47         SYSCLK->APBCLK.PS2_EN = 1;
000024  4811              LDR      r0,|L8.108|
000026  6880              LDR      r0,[r0,#8]
000028  0040              LSLS     r0,r0,#1
00002a  0840              LSRS     r0,r0,#1
00002c  00c9              LSLS     r1,r1,#3
00002e  1840              ADDS     r0,r0,r1
000030  490e              LDR      r1,|L8.108|
000032  6088              STR      r0,[r1,#8]
;;;48     
;;;49         _DRVPS2_PS2ENABLE();  
000034  480e              LDR      r0,|L8.112|
000036  6800              LDR      r0,[r0,#0]
000038  0840              LSRS     r0,r0,#1
00003a  0040              LSLS     r0,r0,#1
00003c  1c40              ADDS     r0,r0,#1
00003e  490c              LDR      r1,|L8.112|
000040  6008              STR      r0,[r1,#0]
;;;50         _DRVPS2_TXFIFO(1);
000042  4608              MOV      r0,r1
000044  6800              LDR      r0,[r0,#0]
000046  2178              MOVS     r1,#0x78
000048  4388              BICS     r0,r0,r1
00004a  4909              LDR      r1,|L8.112|
00004c  6008              STR      r0,[r1,#0]
;;;51         
;;;52         _DRVPS2_CLRFIFO();
00004e  4608              MOV      r0,r1
000050  6800              LDR      r0,[r0,#0]
000052  1589              ASRS     r1,r1,#22
000054  4388              BICS     r0,r0,r1
000056  1840              ADDS     r0,r0,r1
000058  4905              LDR      r1,|L8.112|
00005a  6008              STR      r0,[r1,#0]
00005c  4608              MOV      r0,r1
00005e  6800              LDR      r0,[r0,#0]
000060  1589              ASRS     r1,r1,#22
000062  4388              BICS     r0,r0,r1
000064  4902              LDR      r1,|L8.112|
000066  6008              STR      r0,[r1,#0]
;;;53     
;;;54     	return E_SUCCESS;
000068  2000              MOVS     r0,#0
;;;55     }
00006a  4770              BX       lr
;;;56     
                          ENDP

                  |L8.108|
                          DCD      0x50000200
                  |L8.112|
                          DCD      0x40100000

                          AREA ||i.DrvPS2_Read||, CODE, READONLY, ALIGN=2

                  DrvPS2_Read PROC
;;;286    int32_t 
;;;287    DrvPS2_Read(
000000  4601              MOV      r1,r0
;;;288    	uint8_t		*pu8RxBuf
;;;289    )
;;;290    {   
;;;291    	*pu8RxBuf = _DRVPS2_RXDATA();
000002  4802              LDR      r0,|L9.12|
000004  6940              LDR      r0,[r0,#0x14]
000006  7008              STRB     r0,[r1,#0]
;;;292    	
;;;293        return E_SUCCESS;
000008  2000              MOVS     r0,#0
;;;294    	
;;;295    }
00000a  4770              BX       lr
;;;296    
                          ENDP

                  |L9.12|
                          DCD      0x40100000

                          AREA ||i.DrvPS2_SetTxFIFODepth||, CODE, READONLY, ALIGN=2

                  DrvPS2_SetTxFIFODepth PROC
;;;264    
;;;265    void DrvPS2_SetTxFIFODepth(
000000  4905              LDR      r1,|L10.24|
;;;266    	uint16_t	u32TxFIFODepth
;;;267    )
;;;268    {
;;;269    	_DRVPS2_TXFIFO(u32TxFIFODepth);
000002  6809              LDR      r1,[r1,#0]
000004  2278              MOVS     r2,#0x78
000006  4391              BICS     r1,r1,r2
000008  1e42              SUBS     r2,r0,#1
00000a  00d2              LSLS     r2,r2,#3
00000c  2378              MOVS     r3,#0x78
00000e  401a              ANDS     r2,r2,r3
000010  4311              ORRS     r1,r1,r2
000012  4a01              LDR      r2,|L10.24|
000014  6011              STR      r1,[r2,#0]
;;;270    }
000016  4770              BX       lr
;;;271    
                          ENDP

                  |L10.24|
                          DCD      0x40100000

                          AREA ||i.DrvPS2_Write||, CODE, READONLY, ALIGN=2

                  DrvPS2_Write PROC
;;;314    int32_t 
;;;315    DrvPS2_Write(
000000  b5f8              PUSH     {r3-r7,lr}
;;;316    	uint32_t	*pu32TxBuf, 
;;;317    	uint32_t	u32WriteBytes
;;;318    )
;;;319    {
000002  4602              MOV      r2,r0
;;;320        uint32_t  u32delayno, txcnt, remainder;
;;;321        uint8_t i=0;
000004  2300              MOVS     r3,#0
;;;322        
;;;323        txcnt = u32WriteBytes/DRVPS2_TXFIFODEPTH;
000006  090d              LSRS     r5,r1,#4
;;;324        remainder = u32WriteBytes % DRVPS2_TXFIFODEPTH;
000008  0708              LSLS     r0,r1,#28
00000a  0f00              LSRS     r0,r0,#28
00000c  9000              STR      r0,[sp,#0]
;;;325        if(remainder)
00000e  9800              LDR      r0,[sp,#0]
000010  2800              CMP      r0,#0
000012  d000              BEQ      |L11.22|
;;;326        	txcnt++;
000014  1c6d              ADDS     r5,r5,#1
                  |L11.22|
;;;327        if(u32WriteBytes >= DRVPS2_TXFIFODEPTH)//Tx fifo is 16 bytes
000016  2910              CMP      r1,#0x10
000018  d307              BCC      |L11.42|
;;;328        {
;;;329        	_DRVPS2_TXFIFO(DRVPS2_TXFIFODEPTH);
00001a  4822              LDR      r0,|L11.164|
00001c  6800              LDR      r0,[r0,#0]
00001e  2678              MOVS     r6,#0x78
000020  43b0              BICS     r0,r0,r6
000022  3078              ADDS     r0,r0,#0x78
000024  4e1f              LDR      r6,|L11.164|
000026  6030              STR      r0,[r6,#0]
000028  e00a              B        |L11.64|
                  |L11.42|
;;;330        }
;;;331        else
;;;332        {
;;;333        	_DRVPS2_TXFIFO(u32WriteBytes);
00002a  481e              LDR      r0,|L11.164|
00002c  6800              LDR      r0,[r0,#0]
00002e  2678              MOVS     r6,#0x78
000030  43b0              BICS     r0,r0,r6
000032  1e4e              SUBS     r6,r1,#1
000034  00f6              LSLS     r6,r6,#3
000036  2778              MOVS     r7,#0x78
000038  403e              ANDS     r6,r6,r7
00003a  4330              ORRS     r0,r0,r6
00003c  4e19              LDR      r6,|L11.164|
00003e  6030              STR      r0,[r6,#0]
                  |L11.64|
;;;334        }
;;;335    	
;;;336    	do
000040  bf00              NOP      
                  |L11.66|
;;;337    	{
;;;338    		u32delayno = 0;
000042  2400              MOVS     r4,#0
;;;339    		while (_DRVPS2_ISTXEMPTY() != 1)
000044  e006              B        |L11.84|
                  |L11.70|
;;;340    		{
;;;341    			u32delayno++;
000046  1c64              ADDS     r4,r4,#1
;;;342    			if ( u32delayno >= 0x40000000 )     	    
000048  2001              MOVS     r0,#1
00004a  0780              LSLS     r0,r0,#30
00004c  4284              CMP      r4,r0
00004e  d301              BCC      |L11.84|
;;;343    				return E_DRVPS2_ERR_TIMEOUT;     	       
000050  4815              LDR      r0,|L11.168|
                  |L11.82|
;;;344    		}
;;;345    		_DRVPS2_TXDATA0(pu32TxBuf[i++]);
;;;346    		_DRVPS2_TXDATA1(pu32TxBuf[i++]);
;;;347    		_DRVPS2_TXDATA2(pu32TxBuf[i++]);
;;;348    		_DRVPS2_TXDATA3(pu32TxBuf[i++]);
;;;349    		//memcpy((char*)&PS2->TXDATA[0], pu32TxBuf+i, txcnt);
;;;350    
;;;351    	}while(--txcnt);
;;;352    
;;;353        return E_SUCCESS;
;;;354    	
;;;355      
;;;356    }
000052  bdf8              POP      {r3-r7,pc}
                  |L11.84|
000054  4813              LDR      r0,|L11.164|
000056  6980              LDR      r0,[r0,#0x18]         ;339
000058  0600              LSLS     r0,r0,#24             ;339
00005a  0fc0              LSRS     r0,r0,#31             ;339
00005c  2801              CMP      r0,#1                 ;339
00005e  d1f2              BNE      |L11.70|
000060  4618              MOV      r0,r3                 ;345
000062  1c5e              ADDS     r6,r3,#1              ;345
000064  b2f3              UXTB     r3,r6                 ;345
000066  0080              LSLS     r0,r0,#2              ;345
000068  5810              LDR      r0,[r2,r0]            ;345
00006a  4e0e              LDR      r6,|L11.164|
00006c  6070              STR      r0,[r6,#4]            ;345
00006e  4618              MOV      r0,r3                 ;346
000070  1c5e              ADDS     r6,r3,#1              ;346
000072  b2f3              UXTB     r3,r6                 ;346
000074  0080              LSLS     r0,r0,#2              ;346
000076  5816              LDR      r6,[r2,r0]            ;346
000078  480a              LDR      r0,|L11.164|
00007a  6086              STR      r6,[r0,#8]            ;346
00007c  4618              MOV      r0,r3                 ;347
00007e  1c5e              ADDS     r6,r3,#1              ;347
000080  b2f3              UXTB     r3,r6                 ;347
000082  0080              LSLS     r0,r0,#2              ;347
000084  5816              LDR      r6,[r2,r0]            ;347
000086  4807              LDR      r0,|L11.164|
000088  60c6              STR      r6,[r0,#0xc]          ;347
00008a  4618              MOV      r0,r3                 ;348
00008c  1c5e              ADDS     r6,r3,#1              ;348
00008e  b2f3              UXTB     r3,r6                 ;348
000090  0080              LSLS     r0,r0,#2              ;348
000092  5816              LDR      r6,[r2,r0]            ;348
000094  4803              LDR      r0,|L11.164|
000096  6106              STR      r6,[r0,#0x10]         ;348
000098  1e68              SUBS     r0,r5,#1              ;351
00009a  0005              MOVS     r5,r0                 ;351
00009c  d1d1              BNE      |L11.66|
00009e  bf00              NOP                            ;353
0000a0  e7d7              B        |L11.82|
;;;357    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L11.164|
                          DCD      0x40100000
                  |L11.168|
                          DCD      0xffff9181

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;866     */
;;;867    static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;868    {
;;;869      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L12.58|
;;;870        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
000006  4a1a              LDR      r2,|L12.112|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L12.112|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L12.108|
                  |L12.58|
;;;871            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;872      else {
;;;873        NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L12.116|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L12.116|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L12.108|
;;;874            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;875    }
00006c  bd10              POP      {r4,pc}
;;;876    
                          ENDP

00006e  0000              DCW      0x0000
                  |L12.112|
                          DCD      0xe000ed1c
                  |L12.116|
                          DCD      0xe000e100

                          AREA ||i.PS2_IRQHandler||, CODE, READONLY, ALIGN=2

                  PS2_IRQHandler PROC
;;;85     /*---------------------------------------------------------------------------------------------------------*/
;;;86     void PS2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;87     {
;;;88         uint32_t u32IntStatus;
;;;89     
;;;90         u32IntStatus = inpw(&PS2->INTID);
000002  4807              LDR      r0,|L13.32|
000004  69c4              LDR      r4,[r0,#0x1c]
;;;91     
;;;92         if(g_pfnPS2callback != NULL)
000006  4807              LDR      r0,|L13.36|
000008  6800              LDR      r0,[r0,#0]  ; g_pfnPS2callback
00000a  2800              CMP      r0,#0
00000c  d004              BEQ      |L13.24|
;;;93         {
;;;94             g_pfnPS2callback(u32IntStatus);
00000e  4620              MOV      r0,r4
000010  4904              LDR      r1,|L13.36|
000012  6809              LDR      r1,[r1,#0]  ; g_pfnPS2callback
000014  4788              BLX      r1
000016  e002              B        |L13.30|
                  |L13.24|
;;;95         }
;;;96         else
;;;97         	PS2->INTID = 3;
000018  2003              MOVS     r0,#3
00001a  4901              LDR      r1,|L13.32|
00001c  61c8              STR      r0,[r1,#0x1c]
                  |L13.30|
;;;98     }
00001e  bd10              POP      {r4,pc}
;;;99     
                          ENDP

                  |L13.32|
                          DCD      0x40100000
                  |L13.36|
                          DCD      g_pfnPS2callback

                          AREA ||.data||, DATA, ALIGN=2

                  g_pfnPS2callback
                          DCD      0x00000000
